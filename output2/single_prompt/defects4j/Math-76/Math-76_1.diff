--- org/apache/commons/math/linear/SingularValueDecompositionImpl.java@getU
+++ org/apache/commons/math/linear/SingularValueDecompositionImpl.java@getU
@@ -15,11 +15,19 @@
                 ei1 = eData[i + 1];
                 final double si = secondaryBidiagonal[i];
                 for (int j = 0; j < p; ++j) {
-                    wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
+                    if (singularValues[j] == 0.0) {
+                        wi[j] = 0.0;
+                    } else {
+                        wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
+                    }
                 }
             }
             for (int j = 0; j < p; ++j) {
-                wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];
+                if (singularValues[j] == 0.0) {
+                    wData[p - 1][j] = 0.0;
+                } else {
+                    wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];
+                }
             }
             for (int i = p; i < m; ++i) {
                 wData[i] = new double[p];
--- org/apache/commons/math/linear/SingularValueDecompositionImpl.java@getV
+++ org/apache/commons/math/linear/SingularValueDecompositionImpl.java@getV
@@ -19,11 +19,19 @@
                 ei1 = eData[i + 1];
                 final double si = secondaryBidiagonal[i];
                 for (int j = 0; j < p; ++j) {
-                    wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
+                    if (singularValues[j] == 0.0) {
+                        wi[j] = 0.0;
+                    } else {
+                        wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
+                    }
                 }
             }
             for (int j = 0; j < p; ++j) {
-                wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];
+                if (singularValues[j] == 0.0) {
+                    wData[p - 1][j] = 0.0;
+                } else {
+                    wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];
+                }
             }
             for (int i = p; i < n; ++i) {
                 wData[i] = new double[p];
