[{"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        int normalizedYears = totalMonths / 12;\n        int normalizedMonths = totalMonths % 12;\n        if (normalizedYears != 0) {\n            result = result.withYears(normalizedYears);\n        }\n        if (normalizedMonths != 0) {\n            result = result.withMonths(normalizedMonths);\n        }\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -12,13 +12,14 @@\n     int years = getYears();\n     int months = getMonths();\n     if (years != 0 || months != 0) {\n-        years = FieldUtils.safeAdd(years, months / 12);\n-        months = months % 12;\n-        if (years != 0) {\n-            result = result.withYears(years);\n+        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n+        int normalizedYears = totalMonths / 12;\n+        int normalizedMonths = totalMonths % 12;\n+        if (normalizedYears != 0) {\n+            result = result.withYears(normalizedYears);\n         }\n-        if (months != 0) {\n-            result = result.withMonths(months);\n+        if (normalizedMonths != 0) {\n+            result = result.withMonths(normalizedMonths);\n         }\n     }\n     return result;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(getYears(), getMonths(), getWeeks(), getDays(), getHours(), getMinutes(), getSeconds(), millis, type);\n    result = result.normalizedStandard(type); // added this line to ensure standard normalization\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -2,24 +2,12 @@\n public Period normalizedStandard(PeriodType type) {\n     type = DateTimeUtils.getPeriodType(type);\n     // no overflow can happen, even with Integer.MAX_VALUEs\n-    long millis = getMillis();\n-    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    long millis = (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-    int years = getYears();\n-    int months = getMonths();\n-    if (years != 0 || months != 0) {\n-        years = FieldUtils.safeAdd(years, months / 12);\n-        months = months % 12;\n-        if (years != 0) {\n-            result = result.withYears(years);\n-        }\n-        if (months != 0) {\n-            result = result.withMonths(months);\n-        }\n-    }\n+    Period result = new Period(getYears(), getMonths(), getWeeks(), getDays(), getHours(), getMinutes(), getSeconds(), millis, type);\n+    result = result.normalizedStandard(type); // added this line to ensure standard normalization\n     return result;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.plusYears(years);\n        }\n        if (months != 0) {\n            result = result.plusMonths(months);\n        }\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -15,10 +15,10 @@\n         years = FieldUtils.safeAdd(years, months / 12);\n         months = months % 12;\n         if (years != 0) {\n-            result = result.withYears(years);\n+            result = result.plusYears(years);\n         }\n         if (months != 0) {\n-            result = result.withMonths(months);\n+            result = result.plusMonths(months);\n         }\n     }\n     return result;\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        result = result.plusYears(years).plusMonths(months);\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -14,12 +14,7 @@\n     if (years != 0 || months != 0) {\n         years = FieldUtils.safeAdd(years, months / 12);\n         months = months % 12;\n-        if (years != 0) {\n-            result = result.withYears(years);\n-        }\n-        if (months != 0) {\n-            result = result.withMonths(months);\n-        }\n+        result = result.plusYears(years).plusMonths(months);\n     }\n     return result;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        int totalMonths = (years * 12) + months; // Calculate total number of months\n        int normalizedYears = totalMonths / 12; // Calculate years from months\n        int normalizedMonths = totalMonths % 12; // Calculate remaining months\n        if (normalizedYears != 0) {\n            result = result.withYears(normalizedYears);\n        }\n        if (normalizedMonths != 0) {\n            result = result.withMonths(normalizedMonths);\n        }\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -12,13 +12,14 @@\n     int years = getYears();\n     int months = getMonths();\n     if (years != 0 || months != 0) {\n-        years = FieldUtils.safeAdd(years, months / 12);\n-        months = months % 12;\n-        if (years != 0) {\n-            result = result.withYears(years);\n+        int totalMonths = (years * 12) + months; // Calculate total number of months\n+        int normalizedYears = totalMonths / 12; // Calculate years from months\n+        int normalizedMonths = totalMonths % 12; // Calculate remaining months\n+        if (normalizedYears != 0) {\n+            result = result.withYears(normalizedYears);\n         }\n-        if (months != 0) {\n-            result = result.withMonths(months);\n+        if (normalizedMonths != 0) {\n+            result = result.withMonths(normalizedMonths);\n         }\n     }\n     return result;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n    }\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    if (years != 0) {\n        result = result.withYears(years);\n    }\n    if (months != 0) {\n        result = result.withMonths(months);\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -8,18 +8,18 @@\n     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n     int years = getYears();\n     int months = getMonths();\n     if (years != 0 || months != 0) {\n         years = FieldUtils.safeAdd(years, months / 12);\n         months = months % 12;\n-        if (years != 0) {\n-            result = result.withYears(years);\n-        }\n-        if (months != 0) {\n-            result = result.withMonths(months);\n-        }\n+    }\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    if (years != 0) {\n+        result = result.withYears(years);\n+    }\n+    if (months != 0) {\n+        result = result.withMonths(months);\n     }\n     return result;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        result = result.withYears(years);\n        result = result.withMonths(months);\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -14,12 +14,8 @@\n     if (years != 0 || months != 0) {\n         years = FieldUtils.safeAdd(years, months / 12);\n         months = months % 12;\n-        if (years != 0) {\n-            result = result.withYears(years);\n-        }\n-        if (months != 0) {\n-            result = result.withMonths(months);\n-        }\n+        result = result.withYears(years);\n+        result = result.withMonths(months);\n     }\n     return result;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        int totalMonths = years * 12 + months;\n        result = result.withYears(totalMonths / 12);\n        result = result.withMonths(totalMonths % 12);\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -12,14 +12,9 @@\n     int years = getYears();\n     int months = getMonths();\n     if (years != 0 || months != 0) {\n-        years = FieldUtils.safeAdd(years, months / 12);\n-        months = months % 12;\n-        if (years != 0) {\n-            result = result.withYears(years);\n-        }\n-        if (months != 0) {\n-            result = result.withMonths(months);\n-        }\n+        int totalMonths = years * 12 + months;\n+        result = result.withYears(totalMonths / 12);\n+        result = result.withMonths(totalMonths % 12);\n     }\n     return result;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    result = result.normalizedStandard(); // changed line to use Period's own normalization method\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -9,17 +9,6 @@\n     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-    int years = getYears();\n-    int months = getMonths();\n-    if (years != 0 || months != 0) {\n-        years = FieldUtils.safeAdd(years, months / 12);\n-        months = months % 12;\n-        if (years != 0) {\n-            result = result.withYears(years);\n-        }\n-        if (months != 0) {\n-            result = result.withMonths(months);\n-        }\n-    }\n+    result = result.normalizedStandard(); // changed line to use Period's own normalization method\n     return result;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.plusMonths(months);\n        }\n    }\n    return result;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type.normalizedStandard(), ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -8,7 +8,7 @@\n     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    Period result = new Period(millis, type.normalizedStandard(), ISOChronology.getInstanceUTC());\n     int years = getYears();\n     int months = getMonths();\n     if (years != 0 || months != 0) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.plusMonths(months);\n        }\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -18,7 +18,7 @@\n             result = result.withYears(years);\n         }\n         if (months != 0) {\n-            result = result.withMonths(months);\n+            result = result.plusMonths(months);\n         }\n     }\n     return result;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis() +\n            ((long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND) +\n            ((long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE) +\n            ((long) getHours() * DateTimeConstants.MILLIS_PER_HOUR) +\n            ((long) getDays() * DateTimeConstants.MILLIS_PER_DAY) +\n            ((long) getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -2,12 +2,12 @@\n public Period normalizedStandard(PeriodType type) {\n     type = DateTimeUtils.getPeriodType(type);\n     // no overflow can happen, even with Integer.MAX_VALUEs\n-    long millis = getMillis();\n-    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    long millis = getMillis() +\n+            ((long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND) +\n+            ((long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE) +\n+            ((long) getHours() * DateTimeConstants.MILLIS_PER_HOUR) +\n+            ((long) getDays() * DateTimeConstants.MILLIS_PER_DAY) +\n+            ((long) getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n     int years = getYears();\n     int months = getMonths();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        int totalMonths = (years * 12) + months;\n        result = result.withYears(totalMonths / 12);\n        result = result.withMonths(totalMonths % 12);\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -12,14 +12,9 @@\n     int years = getYears();\n     int months = getMonths();\n     if (years != 0 || months != 0) {\n-        years = FieldUtils.safeAdd(years, months / 12);\n-        months = months % 12;\n-        if (years != 0) {\n-            result = result.withYears(years);\n-        }\n-        if (months != 0) {\n-            result = result.withMonths(months);\n-        }\n+        int totalMonths = (years * 12) + months;\n+        result = result.withYears(totalMonths / 12);\n+        result = result.withMonths(totalMonths % 12);\n     }\n     return result;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        int totalMonths = years * 12 + months;\n        millis += (((long) totalMonths) * ((long) DateTimeConstants.MILLIS_PER_MONTH));\n    }\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    return result.normalizedStandard();\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -8,18 +8,12 @@\n     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n     int years = getYears();\n     int months = getMonths();\n     if (years != 0 || months != 0) {\n-        years = FieldUtils.safeAdd(years, months / 12);\n-        months = months % 12;\n-        if (years != 0) {\n-            result = result.withYears(years);\n-        }\n-        if (months != 0) {\n-            result = result.withMonths(months);\n-        }\n+        int totalMonths = years * 12 + months;\n+        millis += (((long) totalMonths) * ((long) DateTimeConstants.MILLIS_PER_MONTH));\n     }\n-    return result;\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    return result.normalizedStandard();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years += months / 12;\n        months %= 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -12,8 +12,8 @@\n     int years = getYears();\n     int months = getMonths();\n     if (years != 0 || months != 0) {\n-        years = FieldUtils.safeAdd(years, months / 12);\n-        months = months % 12;\n+        years += months / 12;\n+        months %= 12;\n         if (years != 0) {\n             result = result.withYears(years);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(getYears(), getMonths(), 0, getWeeks(), getDays(), getHours(), getMinutes(), getSeconds(), millis, type);\n    return result.normalizedStandard();\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -2,24 +2,11 @@\n public Period normalizedStandard(PeriodType type) {\n     type = DateTimeUtils.getPeriodType(type);\n     // no overflow can happen, even with Integer.MAX_VALUEs\n-    long millis = getMillis();\n-    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    long millis = (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-    int years = getYears();\n-    int months = getMonths();\n-    if (years != 0 || months != 0) {\n-        years = FieldUtils.safeAdd(years, months / 12);\n-        months = months % 12;\n-        if (years != 0) {\n-            result = result.withYears(years);\n-        }\n-        if (months != 0) {\n-            result = result.withMonths(months);\n-        }\n-    }\n-    return result;\n+    Period result = new Period(getYears(), getMonths(), 0, getWeeks(), getDays(), getHours(), getMinutes(), getSeconds(), millis, type);\n+    return result.normalizedStandard();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n//-----------------------------------------------------------------------\npublic Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // no overflow can happen, even with Integer.MAX_VALUEs\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.plusMonths(months); // Changed to plusMonths()\n        }\n    }\n    return result;\n}", "diff": "--- org/joda/time/Period.java@normalizedStandard\n+++ org/joda/time/Period.java@normalizedStandard\n@@ -18,7 +18,7 @@\n             result = result.withYears(years);\n         }\n         if (months != 0) {\n-            result = result.withMonths(months);\n+            result = result.plusMonths(months); // Changed to plusMonths()\n         }\n     }\n     return result;\n", "finish_reason": "stop", "valid": false, "num": 1}]