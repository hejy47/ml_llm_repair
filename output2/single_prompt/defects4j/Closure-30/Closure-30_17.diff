--- com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@process
+++ com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@process
@@ -1,4 +1,14 @@
 @Override
 public void process(Node externs, Node root) {
-    (new NodeTraversal(compiler, this)).traverse(root);
+    NodeTraversal.traverse(compiler, root, new NodeTraversal.Callback() {
+        @Override
+        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node parentNode) {
+            return true;
+        }
+
+        @Override
+        public void visit(NodeTraversal nodeTraversal, Node node, Node parentNode) {
+
+        }
+    });
 }
--- com/google/javascript/jscomp/MustBeReachingVariableDef.java@computeDependence
+++ com/google/javascript/jscomp/MustBeReachingVariableDef.java@computeDependence
@@ -1,6 +1,5 @@
 private void computeDependence(final Definition def, Node rValue) {
-    NodeTraversal.traverse(compiler, rValue, new AbstractCfgNodeTraversalCallback() {
-
+    NodeTraversal.traverse(compiler, rValue, new AbstractShallowCallback() {
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
             if (n.isName() && jsScope.isDeclared(n.getString(), true)) {
--- com/google/javascript/jscomp/MustBeReachingVariableDef.java@visit
+++ com/google/javascript/jscomp/MustBeReachingVariableDef.java@visit
@@ -1,7 +1,14 @@
 @Override
-public void visit(NodeTraversal t, Node n, Node parent) {
-    if (n.isName() && jsScope.isDeclared(n.getString(), true)) {
-        Var dep = jsScope.getVar(n.getString());
-        def.depends.add(dep);
-    }
+public void process(Node externs, Node root) {
+    NodeTraversal.traverse(compiler, root, new NodeTraversal.Callback() {
+        @Override
+        public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node parentNode) {
+            return true;
+        }
+
+        @Override
+        public void visit(NodeTraversal nodeTraversal, Node node, Node parentNode) {
+
+        }
+    });
 }
--- com/google/javascript/jscomp/MustBeReachingVariableDef.java@dependsOnOuterScopeVars
+++ com/google/javascript/jscomp/MustBeReachingVariableDef.java@dependsOnOuterScopeVars
@@ -3,6 +3,9 @@
     GraphNode<Node, Branch> n = getCfg().getNode(useNode);
     FlowState<MustDef> state = n.getAnnotation();
     Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
+    if (def == null) {
+        return false;
+    }
     for (Var s : def.depends) {
         if (s.scope != jsScope) {
             return true;
