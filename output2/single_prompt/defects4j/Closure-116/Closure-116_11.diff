--- com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
+++ com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
@@ -24,7 +24,7 @@
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
         // For each named parameter check if a mutable argument use more than one.
-        if (fnParam != null) {
+        if (fnParam != null && fnParam.isName()) { // Added a check to only analyze name nodes as function parameters
             if (cArg != null) {
                 // Check for arguments that are evaluated more than once.
                 // Note: Unlike block inlining, there it is not possible that a
@@ -35,6 +35,17 @@
             }
             // Move to the next name.
             fnParam = fnParam.getNext();
+        } else if (fnParam != null && fnParam.getToken() == Token.DEFAULT_VALUE) { // Added case for default function parameters
+            Node defaultValue = fnParam.getFirstChild();
+            if (cArg == null || !NodeUtil.isEquivalentTo(defaultValue, cArg)) {
+                if (NodeUtil.mayHaveSideEffects(defaultValue, compiler)) {
+                    return CanInlineResult.NO;
+                }
+            }
+            fnParam = fnParam.getNext();
+            cArg = cArg.getNext();
+        } else { // If there's not a named parameter or a default parameter, break out of the loop
+            break;
         }
         // For every call argument check for side-effects, even if there
         // isn't a named parameter to match.
