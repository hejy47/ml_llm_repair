--- com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
+++ com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
@@ -23,7 +23,6 @@
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-        // For each named parameter check if a mutable argument use more than one.
         if (fnParam != null) {
             if (cArg != null) {
                 // Check for arguments that are evaluated more than once.
@@ -32,12 +31,12 @@
                 if (NodeUtil.mayEffectMutableState(cArg, compiler) && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
                     return CanInlineResult.NO;
                 }
+            } else if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 0) {
+                return CanInlineResult.NO;
             }
             // Move to the next name.
             fnParam = fnParam.getNext();
         }
-        // For every call argument check for side-effects, even if there
-        // isn't a named parameter to match.
         if (cArg != null) {
             if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
                 return CanInlineResult.NO;
