--- com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
+++ com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
@@ -3,7 +3,7 @@
         return CanInlineResult.NO;
     }
     Node block = fnNode.getLastChild();
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+    // CALL NODE:  NAME -> . -> [ ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
@@ -17,7 +17,7 @@
             cArg = cArg.getNext();
         } else {
             // ".apply" call should be filtered before this.
-            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
+            throw new IllegalStateException("Function is not an object call or an object apply.");
         }
     }
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
@@ -25,13 +25,14 @@
     while (cArg != null || fnParam != null) {
         // For each named parameter check if a mutable argument use more than one.
         if (fnParam != null) {
-            if (cArg != null) {
-                // Check for arguments that are evaluated more than once.
-                // Note: Unlike block inlining, there it is not possible that a
-                // parameter reference will be in a loop.
-                if (NodeUtil.mayEffectMutableState(cArg, compiler) && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
-                    return CanInlineResult.NO;
-                }
+            if (cArg == null) {
+                return CanInlineResult.NO;
+            }
+            // Check for arguments that are evaluated more than once.
+            // Note: Unlike block inlining, there it is not possible that a
+            // parameter reference will be in a loop.
+            if (NodeUtil.mayEffectMutableState(cArg, compiler) && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+                return CanInlineResult.NO;
             }
             // Move to the next name.
             fnParam = fnParam.getNext();
