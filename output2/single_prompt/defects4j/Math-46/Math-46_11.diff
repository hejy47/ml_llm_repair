--- org/apache/commons/math/complex/Complex.java@divide
+++ org/apache/commons/math/complex/Complex.java@divide
@@ -4,7 +4,6 @@
         return NaN;
     }
     if (divisor.isZero) {
-        // return isZero ? NaN : INF; // See MATH-657
         return isZero ? NaN : INF;
     }
     if (divisor.isInfinite() && !isInfinite()) {
@@ -15,7 +14,7 @@
     if (FastMath.abs(c) < FastMath.abs(d)) {
         double q = c / d;
         double denominator = c * q + d;
-        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator);
+        return createComplex((real * q + imaginary) / denominator, (imaginary * q - real * q) / denominator);
     } else {
         double q = d / c;
         double denominator = d * q + c;
--- org/apache/commons/math/complex/Complex.java@divide1
+++ org/apache/commons/math/complex/Complex.java@divide1
@@ -3,7 +3,6 @@
         return NaN;
     }
     if (divisor == 0d) {
-        // return isZero ? NaN : INF; // See MATH-657
         return isZero ? NaN : INF;
     }
     if (Double.isInfinite(divisor)) {
