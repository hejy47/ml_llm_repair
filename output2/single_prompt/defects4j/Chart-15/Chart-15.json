[{"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, int index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator<Comparable<?>> iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable<?> key = iterator.next();\n        Number explode = this.explodePercentages.get(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -1,9 +1,9 @@\n public double getMaximumExplodePercent() {\n     double result = 0.0;\n-    Iterator iterator = this.dataset.getKeys().iterator();\n+    Iterator<Comparable<?>> iterator = this.dataset.getKeys().iterator();\n     while (iterator.hasNext()) {\n-        Comparable key = (Comparable) iterator.next();\n-        Number explode = (Number) this.explodePercentages.get(key);\n+        Comparable<?> key = iterator.next();\n+        Number explode = this.explodePercentages.get(key);\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n         }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, int index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    state.setExploded(null); //fixes issue where state is not reset between calls to initialise()\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable key = iterator.next().toString();\n        Number explode = (Number) this.explodePercentages.get(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n} \n\n*Note: The dataset.getKeys() method returns an Enumeration and not an Iterator. Casting to Iterator may cause issues.*", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -2,7 +2,7 @@\n     double result = 0.0;\n     Iterator iterator = this.dataset.getKeys().iterator();\n     while (iterator.hasNext()) {\n-        Comparable key = (Comparable) iterator.next();\n+        Comparable key = iterator.next().toString();\n         Number explode = (Number) this.explodePercentages.get(key);\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, int index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    state.setExploded(null, false);\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    for (Comparable key : this.dataset.getKeys()) {\n        Number explode = this.explodePercentages.get(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -1,9 +1,7 @@\n public double getMaximumExplodePercent() {\n     double result = 0.0;\n-    Iterator iterator = this.dataset.getKeys().iterator();\n-    while (iterator.hasNext()) {\n-        Comparable key = (Comparable) iterator.next();\n-        Number explode = (Number) this.explodePercentages.get(key);\n+    for (Comparable key : this.dataset.getKeys()) {\n+        Number explode = this.explodePercentages.get(key);\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, int index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator<?> iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable<?> key = (Comparable<?>) iterator.next();\n        Number explode = this.explodePercentages.get(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -1,9 +1,9 @@\n public double getMaximumExplodePercent() {\n     double result = 0.0;\n-    Iterator iterator = this.dataset.getKeys().iterator();\n+    Iterator<?> iterator = this.dataset.getKeys().iterator();\n     while (iterator.hasNext()) {\n-        Comparable key = (Comparable) iterator.next();\n-        Number explode = (Number) this.explodePercentages.get(key);\n+        Comparable<?> key = (Comparable<?>) iterator.next();\n+        Number explode = this.explodePercentages.get(key);\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n         }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\npublic PiePlotState initialize(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, Integer index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    state.setExploded(new boolean[plot.getDataset().getItemCount()]);\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.getPieDataset().getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable key = (Comparable) iterator.next();\n        Number explode = (Number) this.explodePercentages.get(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -1,6 +1,6 @@\n public double getMaximumExplodePercent() {\n     double result = 0.0;\n-    Iterator iterator = this.dataset.getKeys().iterator();\n+    Iterator iterator = this.getPieDataset().getKeys().iterator();\n     while (iterator.hasNext()) {\n         Comparable key = (Comparable) iterator.next();\n         Number explode = (Number) this.explodePercentages.get(key);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, int index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    state.setExploded(null);\n    state.setPieIndex(index);\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.getDataset().getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable key = (Comparable) iterator.next();\n        Number explode = this.getExplodePercent(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -1,9 +1,9 @@\n public double getMaximumExplodePercent() {\n     double result = 0.0;\n-    Iterator iterator = this.dataset.getKeys().iterator();\n+    Iterator iterator = this.getDataset().getKeys().iterator();\n     while (iterator.hasNext()) {\n         Comparable key = (Comparable) iterator.next();\n-        Number explode = (Number) this.explodePercentages.get(key);\n+        Number explode = this.getExplodePercent(key);\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, int index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    state.setExplodedPieArea(new ArrayList<Rectangle2D>());\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable key = (Comparable) iterator.next();\n        Number explode = (Number) this.getExplodePercent(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -3,7 +3,7 @@\n     Iterator iterator = this.dataset.getKeys().iterator();\n     while (iterator.hasNext()) {\n         Comparable key = (Comparable) iterator.next();\n-        Number explode = (Number) this.explodePercentages.get(key);\n+        Number explode = (Number) this.getExplodePercent(key);\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialize(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator<Comparable<?>> iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable<?> key = iterator.next();\n        Number explode = (Number) this.explodePercentages.get(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -1,8 +1,8 @@\n public double getMaximumExplodePercent() {\n     double result = 0.0;\n-    Iterator iterator = this.dataset.getKeys().iterator();\n+    Iterator<Comparable<?>> iterator = this.dataset.getKeys().iterator();\n     while (iterator.hasNext()) {\n-        Comparable key = (Comparable) iterator.next();\n+        Comparable<?> key = iterator.next();\n         Number explode = (Number) this.explodePercentages.get(key);\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, int index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    state.setExplodedPieArea(new ArrayList<Rectangle2D>(this.dataset.getKeys().size()));\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable key = (Comparable) iterator.next();\n        Number explode = this.getExplodePercent(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -3,7 +3,7 @@\n     Iterator iterator = this.dataset.getKeys().iterator();\n     while (iterator.hasNext()) {\n         Comparable key = (Comparable) iterator.next();\n-        Number explode = (Number) this.explodePercentages.get(key);\n+        Number explode = this.getExplodePercent(key);\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, Integer index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    state.setExplodedPieArea(new ArrayList<Rectangle2D>());\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable key = (Comparable) iterator.next();\n        Number explode = (Number) this.getExplodePercent(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -3,7 +3,7 @@\n     Iterator iterator = this.dataset.getKeys().iterator();\n     while (iterator.hasNext()) {\n         Comparable key = (Comparable) iterator.next();\n-        Number explode = (Number) this.explodePercentages.get(key);\n+        Number explode = (Number) this.getExplodePercent(key);\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n         }\n--- org/jfree/chart/plot/PiePlot.java@initialise\n+++ org/jfree/chart/plot/PiePlot.java@initialise\n@@ -3,5 +3,6 @@\n     state.setPassesRequired(2);\n     state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n     state.setLatestAngle(plot.getStartAngle());\n+    state.setExplodedPieArea(new ArrayList<Rectangle2D>());\n     return state;\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, Integer index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    state.setExplodedPieArea(new Rectangle2D.Double());\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable key = (Comparable) iterator.next();\n        Number explode = (Number) this.explodePercentages.get(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        } else {\n            result = Math.max(result, 0.0);\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -6,6 +6,8 @@\n         Number explode = (Number) this.explodePercentages.get(key);\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n+        } else {\n+            result = Math.max(result, 0.0);\n         }\n     }\n     return result;\n--- org/jfree/chart/plot/PiePlot.java@initialise\n+++ org/jfree/chart/plot/PiePlot.java@initialise\n@@ -3,5 +3,6 @@\n     state.setPassesRequired(2);\n     state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n     state.setLatestAngle(plot.getStartAngle());\n+    state.setExplodedPieArea(new Rectangle2D.Double());\n     return state;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, Integer index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle() - 90); //subtract 90 degrees to ensure correct starting position\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable key = (Comparable) iterator.next();\n        Number explode = (Number) this.explodePercentages.get(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue() / 100); //divide by 100 to convert percentage to decimal\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -5,7 +5,7 @@\n         Comparable key = (Comparable) iterator.next();\n         Number explode = (Number) this.explodePercentages.get(key);\n         if (explode != null) {\n-            result = Math.max(result, explode.doubleValue());\n+            result = Math.max(result, explode.doubleValue() / 100); //divide by 100 to convert percentage to decimal\n         }\n     }\n     return result;\n--- org/jfree/chart/plot/PiePlot.java@initialise\n+++ org/jfree/chart/plot/PiePlot.java@initialise\n@@ -2,6 +2,6 @@\n     PiePlotState state = new PiePlotState(info);\n     state.setPassesRequired(2);\n     state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n-    state.setLatestAngle(plot.getStartAngle());\n+    state.setLatestAngle(plot.getStartAngle() - 90); //subtract 90 degrees to ensure correct starting position\n     return state;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, int index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    state.setExplodedPieArea(new ArrayList());\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.explodePercentages.entrySet().iterator();\n    while (iterator.hasNext()) {\n        Map.Entry entry = (Map.Entry) iterator.next();\n        Number explode = (Number) entry.getValue();\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -1,9 +1,9 @@\n public double getMaximumExplodePercent() {\n     double result = 0.0;\n-    Iterator iterator = this.dataset.getKeys().iterator();\n+    Iterator iterator = this.explodePercentages.entrySet().iterator();\n     while (iterator.hasNext()) {\n-        Comparable key = (Comparable) iterator.next();\n-        Number explode = (Number) this.explodePercentages.get(key);\n+        Map.Entry entry = (Map.Entry) iterator.next();\n+        Number explode = (Number) entry.getValue();\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, Integer index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    state.setExplodedPieArea(new ArrayList<Rectangle2D>());\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable key = (Comparable) iterator.next();\n        Number explode = (Number) this.explodePercentages.get(key);\n        if (explode != null && explode.doubleValue() > result) {\n            result = explode.doubleValue();\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -4,8 +4,8 @@\n     while (iterator.hasNext()) {\n         Comparable key = (Comparable) iterator.next();\n         Number explode = (Number) this.explodePercentages.get(key);\n-        if (explode != null) {\n-            result = Math.max(result, explode.doubleValue());\n+        if (explode != null && explode.doubleValue() > result) {\n+            result = explode.doubleValue();\n         }\n     }\n     return result;\n--- org/jfree/chart/plot/PiePlot.java@initialise\n+++ org/jfree/chart/plot/PiePlot.java@initialise\n@@ -3,5 +3,6 @@\n     state.setPassesRequired(2);\n     state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n     state.setLatestAngle(plot.getStartAngle());\n+    state.setExplodedPieArea(new ArrayList<Rectangle2D>());\n     return state;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, Integer index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    Dataset dataset = plot.getDataset(); // add this line\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(dataset));\n    state.setLatestAngle(plot.getStartAngle());\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable key = (Comparable) iterator.next();\n        Number explode = (Number) this.explodePercentages.get(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@initialise\n+++ org/jfree/chart/plot/PiePlot.java@initialise\n@@ -1,7 +1,8 @@\n public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, Integer index, PlotRenderingInfo info) {\n     PiePlotState state = new PiePlotState(info);\n     state.setPassesRequired(2);\n-    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n+    Dataset dataset = plot.getDataset(); // add this line\n+    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(dataset));\n     state.setLatestAngle(plot.getStartAngle());\n     return state;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, int index, PlotRenderingInfo info) {\n    PiePlotState state = new PiePlotState(info);\n    state.setPassesRequired(2);\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n    state.setLatestAngle(plot.getStartAngle());\n    return state;\n}\n\n## Fixed Function 2\npublic double getMaximumExplodePercent() {\n    double result = 0.0;\n    Iterator iterator = this.dataset.getKeys().iterator();\n    while (iterator.hasNext()) {\n        Comparable key = (Comparable) iterator.next();\n        Number explode = this.dataset.getExplodePercent(key);\n        if (explode != null) {\n            result = Math.max(result, explode.doubleValue());\n        }\n    }\n    return result;\n}", "diff": "--- org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n+++ org/jfree/chart/plot/PiePlot.java@getMaximumExplodePercent\n@@ -3,7 +3,7 @@\n     Iterator iterator = this.dataset.getKeys().iterator();\n     while (iterator.hasNext()) {\n         Comparable key = (Comparable) iterator.next();\n-        Number explode = (Number) this.explodePercentages.get(key);\n+        Number explode = this.dataset.getExplodePercent(key);\n         if (explode != null) {\n             result = Math.max(result, explode.doubleValue());\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}]