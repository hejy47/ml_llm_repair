--- org/apache/commons/math/util/MathUtils.java@binomialCoefficient
+++ org/apache/commons/math/util/MathUtils.java@binomialCoefficient
@@ -1,9 +1,6 @@
 public static long binomialCoefficient(final int n, final int k) {
-    if (n < k) {
-        throw new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
-    }
-    if (n < 0) {
-        throw new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
+    if (n < k || n < 0) {
+        throw new IllegalArgumentException("must have n >= k >= 0 for binomial coefficient (n,k)");
     }
     if ((n == k) || (k == 0)) {
         return 1;
--- org/apache/commons/math/util/MathUtils.java@binomialCoefficientDouble
+++ org/apache/commons/math/util/MathUtils.java@binomialCoefficientDouble
@@ -1,3 +1,20 @@
 public static double binomialCoefficientDouble(final int n, final int k) {
-    return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
+    if (n < k || n < 0) {
+        throw new IllegalArgumentException("must have n >= k >= 0 for binomial coefficient (n,k)");
+    }
+    if (k == 0 || k == n) {
+        return 1;
+    }
+    if (k == 1 || k == n - 1) {
+        return n;
+    }
+    // Use symmetry for large k
+    if (k > n / 2) {
+        return binomialCoefficientDouble(n, n - k);
+    }
+    double result = 1.0;
+    for (int i = 1; i <= k; i++) {
+        result *= (double) (n - k + i) / i;
+    }
+    return result;
 }
--- org/apache/commons/math/util/MathUtils.java@binomialCoefficientLog
+++ org/apache/commons/math/util/MathUtils.java@binomialCoefficientLog
@@ -1,24 +1,20 @@
 public static double binomialCoefficientLog(final int n, final int k) {
-    if (n < k) {
-        throw new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
+    if (n < k || n < 0) {
+        throw new IllegalArgumentException("must have n >= k >= 0 for binomial coefficient (n,k)");
     }
-    if (n < 0) {
-        throw new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
-    }
-    if ((n == k) || (k == 0)) {
+    if (k == 0 || k == n) {
         return 0;
     }
-    if ((k == 1) || (k == n - 1)) {
+    if (k == 1 || k == n - 1) {
         return Math.log((double) n);
     }
-                double logSum = 0;
-    // n!/k!
-    for (int i = k + 1; i <= n; i++) {
-        logSum += Math.log((double) i);
+    // Use symmetry for large k
+    if (k > n / 2) {
+        return binomialCoefficientLog(n, n - k);
     }
-    // divide by (n-k)!
-    for (int i = 2; i <= n - k; i++) {
-        logSum -= Math.log((double) i);
+    double logSum = 0;
+    for (int i = 1; i <= k; i++) {
+        logSum += Math.log((double) (n - k + i) / i);
     }
     return logSum;
 }
