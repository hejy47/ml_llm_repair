--- org/apache/commons/math/util/MathUtils.java@binomialCoefficient
+++ org/apache/commons/math/util/MathUtils.java@binomialCoefficient
@@ -11,27 +11,19 @@
     if ((k == 1) || (k == n - 1)) {
         return n;
     }
-    long result = Math.round(binomialCoefficientDouble(n, k));
-    if (result == Long.MAX_VALUE) {
-        throw new ArithmeticException("result too large to represent in a long integer");
+    long result = 1;
+    if (n - k < k) {
+        // Use symmetry for large k
+        for (int i = 0; i < n - k; i++) {
+            result *= (k + i + 1);
+            result /= (i + 1);
+        }
+    } else {
+        // Calculate directly for small k
+        for (int i = 0; i < k; i++) {
+            result *= (n - i);
+            result /= (i + 1);
+        }
     }
-    // Use symmetry for large k
-    // We use the formula
-    // (n choose k) = n! / (n-k)! / k!
-    // (n choose k) == ((n-k+1)*...*n) / (1*...*k)
-    // which could be written
-    // (n choose k) == (n-1 choose k-1) * n / k
-    // For n <= 61, the naive implementation cannot overflow.
-    // For n > 61 but n <= 66, the result cannot overflow,
-    // but we must take care not to overflow intermediate values.
-    // We know that (result * i) is divisible by j,
-    // but (result * i) may overflow, so we split j:
-    // Filter out the gcd, d, so j/d and i/d are integer.
-    // result is divisible by (j/d) because (j/d)
-    // is relative prime to (i/d) and is a divisor of
-    // result * (i/d).
-    // For n > 66, a result overflow might occur, so we check
-    // the multiplication, taking care to not overflow
-    // unnecessary.
     return result;
 }
--- org/apache/commons/math/util/MathUtils.java@binomialCoefficientDouble
+++ org/apache/commons/math/util/MathUtils.java@binomialCoefficientDouble
@@ -1,3 +1,3 @@
 public static double binomialCoefficientDouble(final int n, final int k) {
-    return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
+    return Math.exp(binomialCoefficientLog(n, k));
 }
--- org/apache/commons/math/util/MathUtils.java@binomialCoefficientLog
+++ org/apache/commons/math/util/MathUtils.java@binomialCoefficientLog
@@ -11,7 +11,7 @@
     if ((k == 1) || (k == n - 1)) {
         return Math.log((double) n);
     }
-                double logSum = 0;
+    double logSum = 0;
     // n!/k!
     for (int i = k + 1; i <= n; i++) {
         logSum += Math.log((double) i);
