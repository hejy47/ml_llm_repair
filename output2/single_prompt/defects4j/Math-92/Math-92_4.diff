--- org/apache/commons/math/util/MathUtils.java@binomialCoefficient
+++ org/apache/commons/math/util/MathUtils.java@binomialCoefficient
@@ -11,27 +11,11 @@
     if ((k == 1) || (k == n - 1)) {
         return n;
     }
-    long result = Math.round(binomialCoefficientDouble(n, k));
-    if (result == Long.MAX_VALUE) {
-        throw new ArithmeticException("result too large to represent in a long integer");
+    long result = 1;
+    // Avoid multiplication overflow by using a separate numerator
+    for (int i = 1; i <= k; ++i) {
+        result *= n - k + i;
+        result /= i;
     }
-    // Use symmetry for large k
-    // We use the formula
-    // (n choose k) = n! / (n-k)! / k!
-    // (n choose k) == ((n-k+1)*...*n) / (1*...*k)
-    // which could be written
-    // (n choose k) == (n-1 choose k-1) * n / k
-    // For n <= 61, the naive implementation cannot overflow.
-    // For n > 61 but n <= 66, the result cannot overflow,
-    // but we must take care not to overflow intermediate values.
-    // We know that (result * i) is divisible by j,
-    // but (result * i) may overflow, so we split j:
-    // Filter out the gcd, d, so j/d and i/d are integer.
-    // result is divisible by (j/d) because (j/d)
-    // is relative prime to (i/d) and is a divisor of
-    // result * (i/d).
-    // For n > 66, a result overflow might occur, so we check
-    // the multiplication, taking care to not overflow
-    // unnecessary.
     return result;
 }
--- org/apache/commons/math/util/MathUtils.java@binomialCoefficientLog
+++ org/apache/commons/math/util/MathUtils.java@binomialCoefficientLog
@@ -11,14 +11,10 @@
     if ((k == 1) || (k == n - 1)) {
         return Math.log((double) n);
     }
-                double logSum = 0;
-    // n!/k!
-    for (int i = k + 1; i <= n; i++) {
-        logSum += Math.log((double) i);
-    }
-    // divide by (n-k)!
-    for (int i = 2; i <= n - k; i++) {
-        logSum -= Math.log((double) i);
+    double logSum = 0;
+    // Avoid multiplication overflow by using logarithmic sums
+    for (int i = 1; i <= k; ++i) {
+        logSum += Math.log(n - k + i) - Math.log(i);
     }
     return logSum;
 }
