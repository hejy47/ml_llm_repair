[{"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -10,7 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n                 return i;\n             }\n         }\n--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,15 +12,7 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n-                        return true;\n-                    }\n-                } else {\n-                    // ch is in the Basic Multilingual Plane\n-                    return true;\n-                }\n+                return true;\n             }\n         }\n     }\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,8 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // Missing low surrogate\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // Ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // Missing low surrogate\n                if (Character.isHighSurrogate(ch)) {\n                    // validating the low surrogate\n                    if (j == searchLen - 1) {\n                        return false;\n                    } else {\n                        char next = searchChars[j + 1];\n                        if (Character.isLowSurrogate(next)) {\n                            if (Character.toCodePoint(ch, next) == Character.toCodePoint(searchChars[j], next)) {\n                                continue;\n                            }\n                        }\n                    }\n                }\n                // Ch is in the Basic Multilingual Plane\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -10,7 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n                 return i;\n             }\n         }\n--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,13 +12,13 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n+                    // Missing low surrogate\n                     if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n                 } else {\n-                    // ch is in the Basic Multilingual Plane\n+                    // Ch is in the Basic Multilingual Plane\n                     return true;\n                 }\n             }\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,8 +10,21 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n+                // Missing low surrogate\n+                if (Character.isHighSurrogate(ch)) {\n+                    // validating the low surrogate\n+                    if (j == searchLen - 1) {\n+                        return false;\n+                    } else {\n+                        char next = searchChars[j + 1];\n+                        if (Character.isLowSurrogate(next)) {\n+                            if (Character.toCodePoint(ch, next) == Character.toCodePoint(searchChars[j], next)) {\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                }\n+                // Ch is in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -10,7 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n                 return i;\n             }\n         }\n--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -6,21 +6,11 @@\n     }\n     int csLength = cs.length();\n     int searchLength = searchChars.length;\n-    int csLast = csLength - 1;\n-    int searchLast = searchLength - 1;\n     for (int i = 0; i < csLength; i++) {\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n-                        return true;\n-                    }\n-                } else {\n-                    // ch is in the Basic Multilingual Plane\n-                    return true;\n-                }\n+                return true;\n             }\n         }\n     }\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,8 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                if (Character.isHighSurrogate(ch)) {\n                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i+1))) {\n                        return i;\n                    }\n                } else {\n                    return i;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (i < csLength - 1 && Character.isLowSurrogate(cs.charAt(i+1)) && searchChars.length > j+1 && Character.isLowSurrogate(searchChars[j+1])) {\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    }\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n            if (Character.isHighSurrogate(ch)) {\n                if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i+1)) && searchChars.length > j+1 && Character.isLowSurrogate(searchChars[j+1])) {\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        continue outer;\n                    }\n                }\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            if (!Character.isHighSurrogate(ch)) {\n                return i;\n            } else if (i < strLen - 1 && Character.isLowSurrogate(str.charAt(i+1)) && searchChars.indexOf(str.charAt(i+1)) < 0) {\n                i++;\n            } else {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (searchChars[0] == ch) {\n            if (Character.isHighSurrogate(ch)) {\n                if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i+1)) && searchChars.length > 1 && Character.isLowSurrogate(searchChars[1])) {\n                    if (searchChars[1] != cs.charAt(i + 1)) {\n                        return false;\n                    }\n                }\n            } else {\n                return false;\n            }\n        }\n        for (int j = 1; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i+1)) && searchChars.length > j+1 && Character.isLowSurrogate(searchChars[j+1])) {\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return false;\n                        }\n                    }\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -11,7 +11,13 @@\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n                 // ch is a supplementary character\n-                return i;\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i+1))) {\n+                        return i;\n+                    }\n+                } else {\n+                    return i;\n+                }\n             }\n         }\n     }\n--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -6,19 +6,17 @@\n     }\n     int csLength = cs.length();\n     int searchLength = searchChars.length;\n-    int csLast = csLength - 1;\n-    int searchLast = searchLength - 1;\n     for (int i = 0; i < csLength; i++) {\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n-                        return true;\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (i < csLength - 1 && Character.isLowSurrogate(cs.charAt(i+1)) && searchChars.length > j+1 && Character.isLowSurrogate(searchChars[j+1])) {\n+                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            return true;\n+                        }\n                     }\n                 } else {\n-                    // ch is in the Basic Multilingual Plane\n                     return true;\n                 }\n             }\n--- org/apache/commons/lang3/StringUtils.java@indexOfAnyBut\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAnyBut\n@@ -12,6 +12,13 @@\n             if (searchChars[j] == ch) {\n                 continue outer;\n             }\n+            if (Character.isHighSurrogate(ch)) {\n+                if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i+1)) && searchChars.length > j+1 && Character.isLowSurrogate(searchChars[j+1])) {\n+                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                        continue outer;\n+                    }\n+                }\n+            }\n         }\n         return i;\n     }\n--- org/apache/commons/lang3/StringUtils.java@indexOfAnyBut4\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAnyBut4\n@@ -6,7 +6,13 @@\n     for (int i = 0; i < strLen; i++) {\n         char ch = str.charAt(i);\n         if (searchChars.indexOf(ch) < 0) {\n-            return i;\n+            if (!Character.isHighSurrogate(ch)) {\n+                return i;\n+            } else if (i < strLen - 1 && Character.isLowSurrogate(str.charAt(i+1)) && searchChars.indexOf(str.charAt(i+1)) < 0) {\n+                i++;\n+            } else {\n+                return i;\n+            }\n         }\n     }\n     return INDEX_NOT_FOUND;\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,11 +8,28 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n-        for (int j = 0; j < searchLen; j++) {\n+        if (searchChars[0] == ch) {\n+            if (Character.isHighSurrogate(ch)) {\n+                if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i+1)) && searchChars.length > 1 && Character.isLowSurrogate(searchChars[1])) {\n+                    if (searchChars[1] != cs.charAt(i + 1)) {\n+                        return false;\n+                    }\n+                }\n+            } else {\n+                return false;\n+            }\n+        }\n+        for (int j = 1; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n-                return false;\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i+1)) && searchChars.length > j+1 && Character.isLowSurrogate(searchChars[j+1])) {\n+                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            return false;\n+                        }\n+                    }\n+                } else {\n+                    return false;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    if (searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n            if (Character.isHighSurrogate(ch)) {\n                if (j < searchLen - 1 && searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                    continue outer;\n                }\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            if (Character.isHighSurrogate(ch)) {\n                if (i < strLen - 1 && searchChars.indexOf(str.charAt(i + 1)) >= 0 && Character.isLowSurrogate(str.charAt(i + 1))) {\n                    continue;\n                }\n            }\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (j < searchLen - 1 && searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                        continue;\n                    }\n                }\n                // ch is in the Basic Multilingual Plane\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,9 +12,9 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                     // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                    if (searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                         return true;\n                     }\n                 } else {\n--- org/apache/commons/lang3/StringUtils.java@indexOfAnyBut\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAnyBut\n@@ -12,6 +12,11 @@\n             if (searchChars[j] == ch) {\n                 continue outer;\n             }\n+            if (Character.isHighSurrogate(ch)) {\n+                if (j < searchLen - 1 && searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n+                    continue outer;\n+                }\n+            }\n         }\n         return i;\n     }\n--- org/apache/commons/lang3/StringUtils.java@indexOfAnyBut4\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAnyBut4\n@@ -6,6 +6,11 @@\n     for (int i = 0; i < strLen; i++) {\n         char ch = str.charAt(i);\n         if (searchChars.indexOf(ch) < 0) {\n+            if (Character.isHighSurrogate(ch)) {\n+                if (i < strLen - 1 && searchChars.indexOf(str.charAt(i + 1)) >= 0 && Character.isLowSurrogate(str.charAt(i + 1))) {\n+                    continue;\n+                }\n+            }\n             return i;\n         }\n     }\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,7 +10,11 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (j < searchLen - 1 && searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n+                        continue;\n+                    }\n+                }\n                 // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                if (Character.isHighSurrogate(ch)) {\n                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                        return i;\n                    }\n                } else {\n                    return i;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (i < csLast && j < searchLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        if (Character.isHighSurrogate(ch)) {\n            if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                continue;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            if (Character.isHighSurrogate(ch)) {\n                if (i < strLen - 1 && Character.isLowSurrogate(str.charAt(i + 1))) {\n                    continue;\n                }\n            }\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                if (Character.isHighSurrogate(ch)) {\n                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                        j++;\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -11,7 +11,13 @@\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n                 // ch is a supplementary character\n-                return i;\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n+                        return i;\n+                    }\n+                } else {\n+                    return i;\n+                }\n             }\n         }\n     }\n--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,13 +12,11 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (i < csLast && j < searchLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n                 } else {\n-                    // ch is in the Basic Multilingual Plane\n                     return true;\n                 }\n             }\n--- org/apache/commons/lang3/StringUtils.java@indexOfAnyBut\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAnyBut\n@@ -13,6 +13,11 @@\n                 continue outer;\n             }\n         }\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n+                continue;\n+            }\n+        }\n         return i;\n     }\n     return INDEX_NOT_FOUND;\n--- org/apache/commons/lang3/StringUtils.java@indexOfAnyBut4\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAnyBut4\n@@ -6,6 +6,11 @@\n     for (int i = 0; i < strLen; i++) {\n         char ch = str.charAt(i);\n         if (searchChars.indexOf(ch) < 0) {\n+            if (Character.isHighSurrogate(ch)) {\n+                if (i < strLen - 1 && Character.isLowSurrogate(str.charAt(i + 1))) {\n+                    continue;\n+                }\n+            }\n             return i;\n         }\n     }\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,9 +10,16 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n-                return false;\n+                // ch is a supplementary character\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n+                        j++;\n+                    } else {\n+                        return false;\n+                    }\n+                } else {\n+                    return false;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // missing low surrogate, fine, like String.indexOf(String)\n                if (Character.isHighSurrogate(ch)) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    if (j == searchLen - 1) {\n                        return true;\n                    }\n                    if (i < csLen - 1 && searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -10,7 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n                 return i;\n             }\n         }\n--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,7 +12,7 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                     // missing low surrogate, fine, like String.indexOf(String)\n                     if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -11,8 +11,18 @@\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n                 // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n-                return false;\n+                if (Character.isHighSurrogate(ch)) {\n+                    // missing low surrogate, fine, like String.indexOf(String)\n+                    if (j == searchLen - 1) {\n+                        return true;\n+                    }\n+                    if (i < csLen - 1 && searchChars[j + 1] == cs.charAt(i + 1)) {\n+                        return true;\n+                    }\n+                } else {\n+                    // ch is in the Basic Multilingual Plane\n+                    return false;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -10,7 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n                 return i;\n             }\n         }\n--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,7 +12,7 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                     // missing low surrogate, fine, like String.indexOf(String)\n                     if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,8 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (j == searchLast) {\n                        // missing low surrogate, fine, like String.indexOf(String)\n                        return true;\n                    }\n                    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -10,7 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n                 return i;\n             }\n         }\n--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,9 +12,12 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (j == searchLast) {\n+                        // missing low surrogate, fine, like String.indexOf(String)\n+                        return true;\n+                    }\n+                    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n                 } else {\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,8 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                    // missing low surrogate\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is in the Basic Multilingual Plane\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -13,7 +13,7 @@\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n                 if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n+                    // missing low surrogate\n                     if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,7 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n                 // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is in the Supplemental Multilingual Plane\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,7 +12,7 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                     // missing low surrogate, fine, like String.indexOf(String)\n                     if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,8 +10,7 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n+                // ch is in the Supplemental Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                if (Character.isHighSurrogate(ch) && j < searchLen - 1 && Character.isLowSurrogate(searchChars[j + 1])) {\n                    return i;\n                } else {\n                    return i;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch) && j < searchLast && Character.isLowSurrogate(searchChars[j + 1])) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch) && j < searchLen - 1 && Character.isLowSurrogate(searchChars[j + 1])) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    break;\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -11,7 +11,11 @@\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n                 // ch is a supplementary character\n-                return i;\n+                if (Character.isHighSurrogate(ch) && j < searchLen - 1 && Character.isLowSurrogate(searchChars[j + 1])) {\n+                    return i;\n+                } else {\n+                    return i;\n+                }\n             }\n         }\n     }\n--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,13 +12,12 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                if (Character.isHighSurrogate(ch) && j < searchLast && Character.isLowSurrogate(searchChars[j + 1])) {\n                     // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n                 } else {\n-                    // ch is in the Basic Multilingual Plane\n                     return true;\n                 }\n             }\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,9 +10,13 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n-                return false;\n+                if (Character.isHighSurrogate(ch) && j < searchLen - 1 && Character.isLowSurrogate(searchChars[j + 1])) {\n+                    // missing low surrogate, fine, like String.indexOf(String)\n+                    break;\n+                } else {\n+                    // ch is in the Basic Multilingual Plane\n+                    return false;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is in the Basic Multilingual Plane\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,7 +12,7 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                     // missing low surrogate, fine, like String.indexOf(String)\n                     if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,7 +10,6 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n                 // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                if (Character.isHighSurrogate(ch)) {\n                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                        return i;\n                    }\n                } else {\n                    return i;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_LOW_SURROGATE) {\n                    if (j == searchLast) {\n                        // missing low surrogate, fine, like String.indexOf(String)\n                        return true;\n                    }\n                    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                if (i < strLen - 1 && Character.isLowSurrogate(str.charAt(i + 1))) {\n                    continue;\n                }\n            }\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    outer: for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                        continue outer;\n                    }\n                }\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -11,7 +11,13 @@\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n                 // ch is a supplementary character\n-                return i;\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n+                        return i;\n+                    }\n+                } else {\n+                    return i;\n+                }\n             }\n         }\n     }\n--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,9 +12,12 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_LOW_SURROGATE) {\n+                    if (j == searchLast) {\n+                        // missing low surrogate, fine, like String.indexOf(String)\n+                        return true;\n+                    }\n+                    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n                 } else {\n--- org/apache/commons/lang3/StringUtils.java@indexOfAnyBut4\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAnyBut4\n@@ -6,6 +6,11 @@\n     for (int i = 0; i < strLen; i++) {\n         char ch = str.charAt(i);\n         if (searchChars.indexOf(ch) < 0) {\n+            if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                if (i < strLen - 1 && Character.isLowSurrogate(str.charAt(i + 1))) {\n+                    continue;\n+                }\n+            }\n             return i;\n         }\n     }\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -6,12 +6,15 @@\n     }\n     int csLen = cs.length();\n     int searchLen = searchChars.length;\n-    for (int i = 0; i < csLen; i++) {\n+    outer: for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n+                if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                    if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n+                        continue outer;\n+                    }\n+                }\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                if (Character.isHighSurrogate(ch)) {\n                    // Missing low surrogate\n                    if (j + 1 == searchLen) {\n                        return i;\n                    }\n                    // Check if the next char is a low surrogate\n                    if (Character.isLowSurrogate(searchChars[j + 1])) {\n                        if (i + 1 < csLen && cs.charAt(i + 1) == Character.toCodePoint(ch, searchChars[j + 1])) {\n                            return i;\n                        }\n                    }\n                } else {\n                    return i;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 2\n// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (j == searchLast) {\n                        return true;\n                    }\n                    // Missing low surrogate\n                    if (Character.isLowSurrogate(searchChars[j + 1])) {\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    }\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic static boolean containsAny(CharSequence cs, String searchChars) {\n    if (searchChars == null) {\n        return false;\n    }\n    return containsAny(cs, searchChars.toCharArray());\n}\n\n## Fixed Function 4\n// IndexOfAnyBut chars\n//-----------------------------------------------------------------------\npublic static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        boolean chFound = false;\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                chFound = true;\n                break;\n            }\n            if (Character.isHighSurrogate(searchChars[j])) {\n                if (j + 1 < searchLen && Character.isLowSurrogate(searchChars[j + 1])) {\n                    if (i < csLen - 1 && searchChars[j + 1] == cs.charAt(i + 1)) {\n                        chFound = true;\n                        break;\n                    }\n                }\n            }\n        }\n        if (!chFound) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 5\npublic static int indexOfAnyBut(String str, String searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int strLen = str.length();\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (searchChars.indexOf(ch) < 0) {\n            if (!Character.isHighSurrogate(ch)) {\n                return i;\n            }\n            if (i < strLen - 1) {\n                char low = str.charAt(i + 1);\n                if (Character.isLowSurrogate(low)) {\n                    i++;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n## Fixed Function 6\n// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (j == searchLen - 1) {\n                        return true;\n                    }\n                    // Missing low surrogate\n                    if (Character.isLowSurrogate(searchChars[j + 1])) {\n                        if (i < csLen - 1 && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return false;\n                        }\n                    }\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -11,7 +11,20 @@\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n                 // ch is a supplementary character\n-                return i;\n+                if (Character.isHighSurrogate(ch)) {\n+                    // Missing low surrogate\n+                    if (j + 1 == searchLen) {\n+                        return i;\n+                    }\n+                    // Check if the next char is a low surrogate\n+                    if (Character.isLowSurrogate(searchChars[j + 1])) {\n+                        if (i + 1 < csLen && cs.charAt(i + 1) == Character.toCodePoint(ch, searchChars[j + 1])) {\n+                            return i;\n+                        }\n+                    }\n+                } else {\n+                    return i;\n+                }\n             }\n         }\n     }\n--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,13 +12,17 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (j == searchLast) {\n                         return true;\n                     }\n+                    // Missing low surrogate\n+                    if (Character.isLowSurrogate(searchChars[j + 1])) {\n+                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            return true;\n+                        }\n+                    }\n                 } else {\n-                    // ch is in the Basic Multilingual Plane\n                     return true;\n                 }\n             }\n--- org/apache/commons/lang3/StringUtils.java@indexOfAnyBut\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAnyBut\n@@ -6,14 +6,26 @@\n     }\n     int csLen = cs.length();\n     int searchLen = searchChars.length;\n-    outer: for (int i = 0; i < csLen; i++) {\n+    for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        boolean chFound = false;\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                continue outer;\n+                chFound = true;\n+                break;\n+            }\n+            if (Character.isHighSurrogate(searchChars[j])) {\n+                if (j + 1 < searchLen && Character.isLowSurrogate(searchChars[j + 1])) {\n+                    if (i < csLen - 1 && searchChars[j + 1] == cs.charAt(i + 1)) {\n+                        chFound = true;\n+                        break;\n+                    }\n+                }\n             }\n         }\n-        return i;\n+        if (!chFound) {\n+            return i;\n+        }\n     }\n     return INDEX_NOT_FOUND;\n }\n--- org/apache/commons/lang3/StringUtils.java@indexOfAnyBut4\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAnyBut4\n@@ -6,7 +6,15 @@\n     for (int i = 0; i < strLen; i++) {\n         char ch = str.charAt(i);\n         if (searchChars.indexOf(ch) < 0) {\n-            return i;\n+            if (!Character.isHighSurrogate(ch)) {\n+                return i;\n+            }\n+            if (i < strLen - 1) {\n+                char low = str.charAt(i + 1);\n+                if (Character.isLowSurrogate(low)) {\n+                    i++;\n+                }\n+            }\n         }\n     }\n     return INDEX_NOT_FOUND;\n--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,9 +10,19 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n-                return false;\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (j == searchLen - 1) {\n+                        return true;\n+                    }\n+                    // Missing low surrogate\n+                    if (Character.isLowSurrogate(searchChars[j + 1])) {\n+                        if (i < csLen - 1 && searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            return false;\n+                        }\n+                    }\n+                } else {\n+                    return false;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]