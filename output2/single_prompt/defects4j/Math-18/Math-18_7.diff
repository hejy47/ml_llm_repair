--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode
+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode
@@ -6,6 +6,11 @@
     for (int i = 0; i < x.length; i++) {
         double diff = boundaries[1][i] - boundaries[0][i];
         res[i] = (x[i] - boundaries[0][i]) / diff;
+        if (res[i] > 1.0) {
+            res[i] = 1.0;
+        } else if (res[i] < 0.0) {
+            res[i] = 0.0;
+        }
     }
     return res;
 }
--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible
+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible
@@ -3,10 +3,7 @@
         return true;
     }
     for (int i = 0; i < x.length; i++) {
-        if (x[i] < 0) {
-            return false;
-        }
-        if (x[i] > 1.0) {
+        if (x[i] < boundaries[0][i] || x[i] > boundaries[1][i]) {
             return false;
         }
     }
