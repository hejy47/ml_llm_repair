--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode
+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode
@@ -6,6 +6,9 @@
     for (int i = 0; i < x.length; i++) {
         double diff = boundaries[1][i] - boundaries[0][i];
         res[i] = (x[i] - boundaries[0][i]) / diff;
+        if(res[i] < 0.0 || res[i] > 1.0){
+            res[i] = Math.max(0.0, Math.min(1.0, res[i]));
+        }
     }
     return res;
 }
--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode
+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode
@@ -5,7 +5,12 @@
     double[] res = new double[x.length];
     for (int i = 0; i < x.length; i++) {
         double diff = boundaries[1][i] - boundaries[0][i];
-        res[i] = diff * x[i] + boundaries[0][i];
+        double tempRes = diff * x[i] + boundaries[0][i];
+        if(tempRes < boundaries[0][i] || tempRes > boundaries[1][i]){
+            res[i] = Math.max(boundaries[0][i], Math.min(boundaries[1][i], tempRes));
+        } else{
+            res[i] = tempRes;
+        }
     }
     return res;
 }
--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible
+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible
@@ -3,10 +3,10 @@
         return true;
     }
     for (int i = 0; i < x.length; i++) {
-        if (x[i] < 0) {
+        if (x[i] < boundaries[0][i]) {
             return false;
         }
-        if (x[i] > 1.0) {
+        if (x[i] > boundaries[1][i]) {
             return false;
         }
     }
