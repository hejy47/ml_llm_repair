--- com/google/javascript/jscomp/ScopedAliases.java@AliasedTypeNode
+++ com/google/javascript/jscomp/ScopedAliases.java@AliasedTypeNode
@@ -1,4 +1,4 @@
 AliasedTypeNode(Node typeReference, String aliasName) {
-    this.typeReference = typeReference;
+    this.typeReference = typeReference.cloneTree();
     this.aliasName = aliasName;
 }
--- com/google/javascript/jscomp/ScopedAliases.java@applyAlias
+++ com/google/javascript/jscomp/ScopedAliases.java@applyAlias
@@ -1,4 +1,5 @@
 @Override
 public void applyAlias() {
     typeReference.setString(aliasName);
+    typeReference.setBoolean(true); // added to mark as aliased
 }
--- com/google/javascript/jscomp/ScopedAliases.java@fixTypeNode
+++ com/google/javascript/jscomp/ScopedAliases.java@fixTypeNode
@@ -9,10 +9,13 @@
         Var aliasVar = aliases.get(baseName);
         if (aliasVar != null) {
             Node aliasedNode = aliasVar.getInitialValue();
-            aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));
+            Node aliasedTypeNode = new AliasedTypeNode(aliasedNode.cloneTree(), name.substring(endIndex));
+            aliasedTypeNode.setLineno(typeNode.getLineno()); // inherits line no of original type node
+            typeNode.getParent().replaceChild(typeNode, aliasedTypeNode);
+        }
+    } else {
+        for (Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) {
+            fixTypeNode(child);
         }
     }
-    for (Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) {
-        fixTypeNode(child);
-    }
 }
