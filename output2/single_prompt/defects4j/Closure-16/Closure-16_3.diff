--- com/google/javascript/jscomp/ScopedAliases.java@AliasedTypeNode
+++ com/google/javascript/jscomp/ScopedAliases.java@AliasedTypeNode
@@ -1,4 +1,4 @@
 AliasedTypeNode(Node typeReference, String aliasName) {
-    this.typeReference = typeReference;
+    this.typeReference = typeReference.cloneTree(); // clone the tree to avoid mutating the original
     this.aliasName = aliasName;
 }
--- com/google/javascript/jscomp/ScopedAliases.java@applyAlias
+++ com/google/javascript/jscomp/ScopedAliases.java@applyAlias
@@ -1,4 +1,5 @@
 @Override
 public void applyAlias() {
+    // set the string value of the typeReference node to the aliasName instead of the aliasName itself
     typeReference.setString(aliasName);
 }
--- com/google/javascript/jscomp/ScopedAliases.java@fixTypeNode
+++ com/google/javascript/jscomp/ScopedAliases.java@fixTypeNode
@@ -1,7 +1,7 @@
 private void fixTypeNode(Node typeNode) {
     if (typeNode.isString()) {
         String name = typeNode.getString();
-        int endIndex = name.indexOf('.');
+        int endIndex = name.lastIndexOf('.');
         if (endIndex == -1) {
             endIndex = name.length();
         }
@@ -9,7 +9,8 @@
         Var aliasVar = aliases.get(baseName);
         if (aliasVar != null) {
             Node aliasedNode = aliasVar.getInitialValue();
-            aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));
+            // create a new AliasedTypeNode with the aliasedNode as the typeReference and the modified aliasName
+            aliasUsages.add(new AliasedTypeNode(aliasedNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));
         }
     }
     for (Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) {
