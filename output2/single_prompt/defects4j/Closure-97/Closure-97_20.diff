--- com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldShift
+++ com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldShift
@@ -16,28 +16,28 @@
             return n;
         }
         // Convert the numbers to ints
-        int lvalInt = (int) lval;
+        int lvalInt = (int) Math.round(lval);
         if (lvalInt != lval) {
             error(FRACTIONAL_BITWISE_OPERAND, left);
             return n;
         }
-        int rvalInt = (int) rval;
+        int rvalInt = (int) Math.round(rval);
         if (rvalInt != rval) {
             error(FRACTIONAL_BITWISE_OPERAND, right);
             return n;
         }
         switch(n.getType()) {
             case Token.LSH:
-                result = lvalInt << rvalInt;
+                result = lvalInt << (rvalInt & 0x1f);
                 break;
             case Token.RSH:
-                result = lvalInt >> rvalInt;
+                result = lvalInt >> (rvalInt & 0x1f);
                 break;
             case Token.URSH:
                 // JavaScript handles zero shifts on signed numbers differently than
                 // Java as an Java int can not represent the unsigned 32-bit number
                 // where JavaScript can so use a long here.
-                result = lvalInt >>> rvalInt;
+                result = (long) lvalInt >>> (rvalInt & 0x1f);
                 break;
             default:
                 throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
