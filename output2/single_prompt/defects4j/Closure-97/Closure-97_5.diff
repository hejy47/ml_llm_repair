--- com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldShift
+++ com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldShift
@@ -9,7 +9,7 @@
             error(BITWISE_OPERAND_OUT_OF_RANGE, left);
             return n;
         }
-        // only the lower 5 bits are used when shifting, so don't do anything
+        // only the lower 6 bits are used when shifting, so don't do anything
         // if the shift amount is outside [0,32)
         if (!(rval >= 0 && rval < 32)) {
             error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
@@ -17,12 +17,12 @@
         }
         // Convert the numbers to ints
         int lvalInt = (int) lval;
-        if (lvalInt != lval) {
+        if ((double) lvalInt != lval) {
             error(FRACTIONAL_BITWISE_OPERAND, left);
             return n;
         }
         int rvalInt = (int) rval;
-        if (rvalInt != rval) {
+        if ((double) rvalInt != rval) {
             error(FRACTIONAL_BITWISE_OPERAND, right);
             return n;
         }
@@ -37,7 +37,7 @@
                 // JavaScript handles zero shifts on signed numbers differently than
                 // Java as an Java int can not represent the unsigned 32-bit number
                 // where JavaScript can so use a long here.
-                result = lvalInt >>> rvalInt;
+                result = ((long)lvalInt) >>> rvalInt;
                 break;
             default:
                 throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
