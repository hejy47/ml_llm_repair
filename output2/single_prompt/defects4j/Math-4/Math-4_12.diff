--- org/apache/commons/math3/geometry/euclidean/threed/SubLine.java@intersection
+++ org/apache/commons/math3/geometry/euclidean/threed/SubLine.java@intersection
@@ -2,12 +2,12 @@
     // compute the intersection on infinite line
     Vector3D v1D = line.intersection(subLine.line);
     // check location of point with respect to first sub-line
-    Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
+    Region.Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
     // check location of point with respect to second sub-line
-    Location loc2 = subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+    Region.Location loc2 = subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
     if (includeEndPoints) {
-        return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v1D : null;
+        return ((loc1 != Region.Location.OUTSIDE) && (loc2 != Region.Location.OUTSIDE)) ? v1D : null;
     } else {
-        return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v1D : null;
+        return ((loc1 == Region.Location.INSIDE) && (loc2 == Region.Location.INSIDE)) ? v1D : null;
     }
 }
--- org/apache/commons/math3/geometry/euclidean/twod/SubLine.java@intersection
+++ org/apache/commons/math3/geometry/euclidean/twod/SubLine.java@intersection
@@ -3,14 +3,14 @@
     Line line1 = (Line) getHyperplane();
     Line line2 = (Line) subLine.getHyperplane();
     // compute the intersection on infinite line
-    Vector2D v2D = line1.intersection(line2);
+    Vector2D v2D = line1.toSpace(line1.intersection(line2));
     // check location of point with respect to first sub-line
-    Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+    Region.Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
     // check location of point with respect to second sub-line
-    Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+    Region.Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
     if (includeEndPoints) {
-        return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;
+        return ((loc1 != Region.Location.OUTSIDE) && (loc2 != Region.Location.OUTSIDE)) ? v2D : null;
     } else {
-        return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;
+        return ((loc1 == Region.Location.INSIDE) && (loc2 == Region.Location.INSIDE)) ? v2D : null;
     }
 }
