--- com/google/javascript/jscomp/UnreachableCodeElimination.java@tryRemoveUnconditionalBranching
+++ com/google/javascript/jscomp/UnreachableCodeElimination.java@tryRemoveUnconditionalBranching
@@ -1,6 +1,15 @@
 @SuppressWarnings("fallthrough")
 private Node tryRemoveUnconditionalBranching(Node n) {
-        // If n is null the target is the end of the function, nothing to do.
+    /*
+     * For each of the unconditional branching control flow node, check to see
+     * if the ControlFlowAnalysis.computeFollowNode of that node is same as
+     * the branching target. If it is, the branch node is safe to be removed.
+     *
+     * This is not as clever as MinimizeExitPoints because it doesn't do any
+     * if-else conversion but it handles more complicated switch statements
+     * much nicer.
+     */
+    // If n is null the target is the end of the function, nothing to do.
     if (n == null) {
         return n;
     }
@@ -38,7 +47,7 @@
                 Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));
                 Node nextCfgNode = outEdges.get(0).getDestination().getValue();
                 if (nextCfgNode == fallThrough) {
-                    removeDeadExprStatementSafely(n);
+                    n.detachFromParent(); // Fixed: removeDeadExprStatementSafely is unnecessary
                     return fallThrough;
                 }
             }
