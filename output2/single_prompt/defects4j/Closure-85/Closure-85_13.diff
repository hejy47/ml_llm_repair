--- com/google/javascript/jscomp/UnreachableCodeElimination.java@tryRemoveUnconditionalBranching
+++ com/google/javascript/jscomp/UnreachableCodeElimination.java@tryRemoveUnconditionalBranching
@@ -1,6 +1,15 @@
 @SuppressWarnings("fallthrough")
 private Node tryRemoveUnconditionalBranching(Node n) {
-        // If n is null the target is the end of the function, nothing to do.
+    /*
+     * For each of the unconditional branching control flow node, check to see
+     * if the ControlFlowAnalysis.computeFollowNode of that node is same as
+     * the branching target. If it is, the branch node is safe to be removed.
+     *
+     * This is not as clever as MinimizeExitPoints because it doesn't do any
+     * if-else conversion but it handles more complicated switch statements
+     * much nicer.
+     */
+    // If n is null the target is the end of the function, nothing to do.
     if (n == null) {
         return n;
     }
@@ -26,6 +35,7 @@
             if (n.hasChildren()) {
                 break;
             }
+            // fallthrough
         case Token.BREAK:
         case Token.CONTINUE:
             // We are looking for a control flow changing statement that always
