--- org/apache/commons/math/optimization/linear/SimplexTableau.java@getSolution
+++ org/apache/commons/math/optimization/linear/SimplexTableau.java@getSolution
@@ -1,6 +1,6 @@
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+    Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null; // corrected the comparison operator
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
     Set<Integer> basicRows = new HashSet<Integer>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
@@ -11,12 +11,7 @@
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
-        // if the basic row is found to be the objective function row
-        // set the coefficient to 0 -> this case handles unconstrained
-        // variables that are still part of the objective function
-        if (basicRows.contains(basicRow)) {
-            // if multiple variables can take a given value
-            // then we choose the first and set the rest equal to 0
+        if (basicRow != null && basicRows.contains(basicRow)) { // corrected the null-check and moved the check for basicRow in this condition
             coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
         } else {
             basicRows.add(basicRow);
