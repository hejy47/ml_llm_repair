--- com/google/javascript/jscomp/Normalize.java@process
+++ com/google/javascript/jscomp/Normalize.java@process
@@ -5,22 +5,10 @@
         MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
         NodeTraversal t = new NodeTraversal(compiler, renamer);
         t.traverseRoots(externs, root);
+        removeDuplicateDeclarations(externs, root); // Fixed: Remove duplicate declarations after renaming
+    } else {
+        removeDuplicateDeclarations(externs, root); // Fixed: Remove duplicate declarations before propagate constant annotations
     }
-    // It is important that removeDuplicateDeclarations runs after
-    // MakeDeclaredNamesUnique in order for catch block exception names to be
-    // handled properly. Specifically, catch block exception names are
-    // only valid within the catch block, but our currect Scope logic
-    // has no concept of this and includes it in the containing function
-    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
-    // names unique so that removeDuplicateDeclarations() will properly handle
-    // cases where a function scope variable conflict with a exception name:
-    //   function f() {
-    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
-    //      var e = 1; // f scope 'e'
-    //   }
-    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
-    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
-    removeDuplicateDeclarations(externs, root);
     new PropagateConstantAnnotationsOverVars(compiler, assertOnChange).process(externs, root);
     if (!compiler.getLifeCycleStage().isNormalized()) {
         compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
--- com/google/javascript/jscomp/VarCheck.java@createSynthesizedExternVar
+++ com/google/javascript/jscomp/VarCheck.java@createSynthesizedExternVar
@@ -9,6 +9,8 @@
     if (compiler.getCodingConvention().isConstant(varName)) {
         nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
     }
-    getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));
+    Node varNode = new Node(Token.VAR, nameNode);
+    varNode.putBooleanProp(Node.IS_SYNTHETIC_VAR, true); // Fixed: Add IS_SYNTHETIC_VAR property
+    getSynthesizedExternsRoot().addChildToBack(varNode);
     varsToDeclareInExterns.remove(varName);
 }
