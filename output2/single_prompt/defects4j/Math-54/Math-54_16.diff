--- org/apache/commons/math/dfp/Dfp.java@Dfp
+++ org/apache/commons/math/dfp/Dfp.java@Dfp
@@ -11,10 +11,10 @@
     if (exponent == -1023) {
         // Zero or sub-normal
         if (x == 0) {
-            // make sure 0 has the right sign
+            sign = 0; // set sign to 0 for 0 value
             return;
         }
-        exponent++;
+        exponent = -1022; // set exponent to -1022 for subnormal value
         // Normalize the subnormal number
         while ((mantissa & 0x0010000000000000L) == 0) {
             exponent--;
--- org/apache/commons/math/dfp/Dfp.java@toDouble
+++ org/apache/commons/math/dfp/Dfp.java@toDouble
@@ -15,17 +15,14 @@
         y = negate();
         negate = true;
     }
-        int exponent = (int) (y.log10() * 3.32);
-    if (exponent < 0) {
-        exponent--;
-    }
+    int exponent = (int) Math.floor(y.log10() * 3.32192809488736218170856773213); // Compute exponent using log2(10)
     Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
     while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
         tempDfp = tempDfp.multiply(2);
         exponent++;
     }
     exponent--;
-        y = y.divide(DfpMath.pow(getTwo(), exponent));
+    y = y.divide(DfpMath.pow(getTwo(), exponent));
     if (exponent > -1023) {
         y = y.subtract(getOne());
     }
@@ -44,7 +41,7 @@
         mantissa = 0;
         exponent++;
     }
-        if (exponent <= -1023) {
+    if (exponent <= -1023) {
         exponent--;
     }
     while (exponent < -1023) {
