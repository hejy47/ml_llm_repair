--- org/apache/commons/math/dfp/Dfp.java@Dfp
+++ org/apache/commons/math/dfp/Dfp.java@Dfp
@@ -20,6 +20,7 @@
             exponent--;
             mantissa <<= 1;
         }
+        mantissa <<= 1; // correction
         mantissa &= 0x000fffffffffffffL;
     }
     if (exponent == 1024) {
@@ -37,7 +38,6 @@
         return;
     }
     Dfp xdfp = new Dfp(field, mantissa);
-    // Divide by 2^52, then add one
     xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());
     xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));
     if ((bits & 0x8000000000000000L) != 0) {
--- org/apache/commons/math/dfp/Dfp.java@toDouble
+++ org/apache/commons/math/dfp/Dfp.java@toDouble
@@ -15,17 +15,17 @@
         y = negate();
         negate = true;
     }
-        int exponent = (int) (y.log10() * 3.32);
+    int exponent = (int) Math.floor(y.log10() * 3.32);
     if (exponent < 0) {
         exponent--;
     }
     Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
-    while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
+    while (tempDfp.lessThan(y)) { // correction
         tempDfp = tempDfp.multiply(2);
         exponent++;
     }
     exponent--;
-        y = y.divide(DfpMath.pow(getTwo(), exponent));
+    y = y.divide(DfpMath.pow(getTwo(), exponent));
     if (exponent > -1023) {
         y = y.subtract(getOne());
     }
@@ -40,11 +40,10 @@
     str = str.substring(0, str.length() - 1);
     long mantissa = Long.parseLong(str);
     if (mantissa == 4503599627370496L) {
-        // Handle special case where we round up to next power of two
         mantissa = 0;
         exponent++;
     }
-        if (exponent <= -1023) {
+    if (exponent <= -1023) {
         exponent--;
     }
     while (exponent < -1023) {
