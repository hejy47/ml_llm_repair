--- org/apache/commons/math/dfp/Dfp.java@Dfp
+++ org/apache/commons/math/dfp/Dfp.java@Dfp
@@ -5,6 +5,14 @@
     exp = 0;
     nans = FINITE;
     this.field = field;
+
+    // Check for NaN
+    if (Double.isNaN(x)) {
+        sign = (byte) 1;
+        nans = QNAN;
+        return;
+    }
+
     long bits = Double.doubleToLongBits(x);
     long mantissa = bits & 0x000fffffffffffffL;
     int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;
--- org/apache/commons/math/dfp/Dfp.java@toDouble
+++ org/apache/commons/math/dfp/Dfp.java@toDouble
@@ -15,17 +15,17 @@
         y = negate();
         negate = true;
     }
-        int exponent = (int) (y.log10() * 3.32);
+    int exponent = (int) (y.log10() / Math.log10(2));
     if (exponent < 0) {
         exponent--;
     }
     Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
-    while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
+    while (tempDfp.lessThan(y)) {
         tempDfp = tempDfp.multiply(2);
         exponent++;
     }
     exponent--;
-        y = y.divide(DfpMath.pow(getTwo(), exponent));
+    y = y.divide(DfpMath.pow(getTwo(), exponent));
     if (exponent > -1023) {
         y = y.subtract(getOne());
     }
@@ -35,26 +35,28 @@
     if (exponent > 1023) {
         return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
     }
-    y = y.multiply(newInstance(4503599627370496l)).rint();
-    String str = y.toString();
-    str = str.substring(0, str.length() - 1);
-    long mantissa = Long.parseLong(str);
-    if (mantissa == 4503599627370496L) {
-        // Handle special case where we round up to next power of two
-        mantissa = 0;
-        exponent++;
+    y = y.multiply(newInstance(4503599627370496l));
+    long bits;
+    if (y.lessThan(getZero())) {
+        bits = 0x8000000000000000L;
+        y = y.negate();
+    } else {
+        bits = 0;
     }
-        if (exponent <= -1023) {
-        exponent--;
+    bits |= ((long) exponent + 1023L) << 52;
+    Dfp half = new Dfp(y.field, 0.5);
+    if (y.greaterThan(half) || y.equals(half) && ((bits & 0x000fffffffffffffL) != 0L)) {
+        y = y.add(getOne());
     }
-    while (exponent < -1023) {
-        exponent++;
-        mantissa >>>= 1;
+    for (int i = 51; i >= 0; i--) {
+        if (y.greaterThan(DfpMath.pow(getTwo(), i))) {
+            bits |= 1L << i;
+            y = y.subtract(DfpMath.pow(getTwo(), i));
+        }
     }
-    long bits = mantissa | ((exponent + 1023L) << 52);
-    double x = Double.longBitsToDouble(bits);
+    double result = Double.longBitsToDouble(bits);
     if (negate) {
-        x = -x;
+        result = -result;
     }
-    return x;
+    return result;
 }
