--- org/apache/commons/math/dfp/Dfp.java@Dfp
+++ org/apache/commons/math/dfp/Dfp.java@Dfp
@@ -24,13 +24,15 @@
     }
     if (exponent == 1024) {
         // infinity or NAN
-        if (x != x) {
+        if (Double.isNaN(x)) {
             sign = (byte) 1;
             nans = QNAN;
-        } else if (x < 0) {
+        }
+        if (x < 0) {
             sign = (byte) -1;
             nans = INFINITE;
-        } else {
+        }
+        if (x > 0) {
             sign = (byte) 1;
             nans = INFINITE;
         }
--- org/apache/commons/math/dfp/Dfp.java@toDouble
+++ org/apache/commons/math/dfp/Dfp.java@toDouble
@@ -15,17 +15,14 @@
         y = negate();
         negate = true;
     }
-        int exponent = (int) (y.log10() * 3.32);
-    if (exponent < 0) {
-        exponent--;
-    }
+    int exponent = (int) (y.log10() * 3.321928094887362) + 1; // Use the correct log2() value to compute exponent
     Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
     while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
         tempDfp = tempDfp.multiply(2);
         exponent++;
     }
     exponent--;
-        y = y.divide(DfpMath.pow(getTwo(), exponent));
+    y = y.divide(DfpMath.pow(getTwo(), exponent));
     if (exponent > -1023) {
         y = y.subtract(getOne());
     }
@@ -35,7 +32,7 @@
     if (exponent > 1023) {
         return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
     }
-    y = y.multiply(newInstance(4503599627370496l)).rint();
+    y = y.multiply(newInstance(4503599627370496L)).rint();
     String str = y.toString();
     str = str.substring(0, str.length() - 1);
     long mantissa = Long.parseLong(str);
@@ -44,7 +41,7 @@
         mantissa = 0;
         exponent++;
     }
-        if (exponent <= -1023) {
+    if (exponent <= -1023) {
         exponent--;
     }
     while (exponent < -1023) {
