--- com/google/javascript/jscomp/RemoveUnusedVars.java@removeUnreferencedFunctionArgs
+++ com/google/javascript/jscomp/RemoveUnusedVars.java@removeUnreferencedFunctionArgs
@@ -1,13 +1,4 @@
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
     Node function = fnScope.getRootNode();
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
@@ -18,15 +9,11 @@
     boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
         // Strip unreferenced args off the end of the function declaration.
-        Node lastArg;
-        while ((lastArg = argList.getLastChild()) != null) {
-            Var var = fnScope.getVar(lastArg.getString());
-            if (!referenced.contains(var)) {
-                argList.removeChild(lastArg);
-                compiler.reportCodeChange();
-            } else {
-                break;
-            }
+        Node lastArg = argList.getLastChild();
+        while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {
+            argList.removeChild(lastArg);
+            compiler.reportCodeChange();
+            lastArg = argList.getLastChild();
         }
     } else {
         callSiteOptimizer.optimize(fnScope, referenced);
