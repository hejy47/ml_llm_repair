--- com/google/javascript/jscomp/RemoveUnusedVars.java@removeUnreferencedFunctionArgs
+++ com/google/javascript/jscomp/RemoveUnusedVars.java@removeUnreferencedFunctionArgs
@@ -1,13 +1,4 @@
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
     Node function = fnScope.getRootNode();
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
@@ -28,6 +19,18 @@
                 break;
             }
         }
+        // fix: check if the function has properties that require its original length
+        if (NodeUtil.isFunctionDeclaration(function)) {
+          if (function.getJSDocInfo() != null) {
+            ImmutableList<JSTypeExpression> params = function.getJSDocInfo().getParameterTypeExpressions();
+            int expectedParamCount = params == null ? 0 : params.size();
+            if (argList.getChildCount() != expectedParamCount) {
+              JSDocInfoBuilder info = JSDocInfoBuilder.copyFrom(function.getJSDocInfo());
+              info.recordParameterLength(argList.getChildCount());
+              function.setJSDocInfo(info.build());
+            }
+          }
+        }
     } else {
         callSiteOptimizer.optimize(fnScope, referenced);
     }
