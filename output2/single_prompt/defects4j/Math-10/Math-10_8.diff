--- org/apache/commons/math3/analysis/differentiation/DSCompiler.java@atan2
+++ org/apache/commons/math3/analysis/differentiation/DSCompiler.java@atan2
@@ -10,7 +10,9 @@
     add(tmp1, 0, tmp2, 0, tmp2, 0);
     // r = sqrt(x^2 + y^2)
     rootN(tmp2, 0, 2, tmp1, 0);
-    if (x[xOffset] >= 0) {
+    
+    double xVal = x[xOffset];
+    if (xVal >= 0) {
         // compute atan2(y, x) = 2 atan(y / (r + x))
         // r + x
         add(tmp1, 0, x, xOffset, tmp2, 0);
@@ -24,17 +26,15 @@
         }
     } else {
         // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-        // r - x
-        subtract(tmp1, 0, x, xOffset, tmp2, 0);
-        // y /(r - x)
+        // r - abs(x)
+        subtract(tmp1, 0, -xVal, 0, tmp2, 0);
+        // y /(r - abs(x))
         divide(y, yOffset, tmp2, 0, tmp1, 0);
-        // atan(y / (r - x))
+        // atan(y / (r - abs(x)))
         atan(tmp1, 0, tmp2, 0);
-        result[resultOffset] = // +/-pi - 2 * atan(y / (r - x))
-        ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];
-        for (int i = 1; i < tmp2.length; ++i) {
-            // +/-pi - 2 * atan(y / (r - x))
-            result[resultOffset + i] = -2 * tmp2[i];
+        for (int i = 0; i < tmp2.length; ++i) {
+            // +/-pi - 2 * atan(y / (r - abs(x)))
+            result[resultOffset + i] = ((xVal > 0 && tmp2[i] <= 0) || (xVal < 0 && tmp2[i] >= 0)) ? -FastMath.PI : FastMath.PI - 2 * tmp2[i];
         }
     }
     // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
