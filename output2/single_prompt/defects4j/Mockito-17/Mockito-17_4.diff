--- org/mockito/internal/creation/MockSettingsImpl.java@serializable
+++ org/mockito/internal/creation/MockSettingsImpl.java@serializable
@@ -1,3 +1,3 @@
 public MockSettings serializable() {
-    return this.extraInterfaces(java.io.Serializable.class);
+    return this.extraInterfaces(Serializable.class);
 }
--- org/mockito/internal/creation/MockSettingsImpl.java@isSerializable
+++ org/mockito/internal/creation/MockSettingsImpl.java@isSerializable
@@ -1,3 +1,3 @@
 public boolean isSerializable() {
-    return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);
+    return extraInterfaces != null && Arrays.asList(extraInterfaces).contains(Serializable.class);
 }
--- org/mockito/internal/util/MockUtil.java@createMock
+++ org/mockito/internal/util/MockUtil.java@createMock
@@ -3,11 +3,10 @@
     creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());
     creationValidator.validateMockedType(classToMock, settings.getSpiedInstance());
     settings.initiateMockName(classToMock);
-    MockHandler<T> mockHandler = new MockHandler<T>(settings);
+    MockHandler<T> mockHandler = new MockHandler<>(settings);
     MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);
     Class<?>[] interfaces = settings.getExtraInterfaces();
-    Class<?>[] ancillaryTypes;
-    ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;
+    Class<?>[] ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;
     Object spiedInstance = settings.getSpiedInstance();
     T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);
     if (spiedInstance != null) {
