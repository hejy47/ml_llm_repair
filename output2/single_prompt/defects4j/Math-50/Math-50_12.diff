--- org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
+++ org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
@@ -33,83 +33,100 @@
         if (fx == 0.0) {
             return x;
         }
-        // Update the bounds with the new approximation.
-        if (f1 * fx < 0) {
-            // The value of x1 has switched to the other bound, thus inverting
-            // the interval.
-            x0 = x1;
-            f0 = f1;
-            inverted = !inverted;
+        // If the new approximation is not between the bounds, we need to modify
+        // the bounds.
+        if ((f1 > 0 && fx > 0) || (f1 < 0 && fx < 0)) {
+            if (FastMath.abs(fx) < FastMath.abs(f1)) {
+                x0 = x;
+                f0 = fx;
+            } else if (FastMath.abs(fx) > FastMath.abs(f0)) {
+                x1 = x;
+                f1 = fx;
+            } else {
+                x0 = x;
+                x1 = x;
+                f0 = fx;
+                f1 = fx;
+            }
         } else {
-            switch(method) {
-                case ILLINOIS:
-                    f0 *= 0.5;
-                    break;
-                case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
-                    break;
-                case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
-                    break;
-                default:
-                    // Should never happen.
-                    throw new MathInternalError();
+            // Update the bounds with the new approximation.
+            if (f1 * fx < 0) {
+                // The value of x1 has switched to the other bound, thus inverting
+                // the interval.
+                x0 = x1;
+                f0 = f1;
+                inverted = !inverted;
+            } else {
+                switch(method) {
+                    case ILLINOIS:
+                        f0 *= 0.5;
+                        break;
+                    case PEGASUS:
+                        f0 *= f1 / (f1 + fx);
+                        break;
+                    case REGULA_FALSI:
+                        // Nothing.
+                        if (x == x1) {
+                            x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+                            f0 = computeObjectiveValue(x0);
+                        }
+                        break;
+                    default:
+                        // Should never happen.
+                        throw new MathInternalError();
+                }
             }
-        }
-        // Update from [x0, x1] to [x0, x].
-        x1 = x;
-        f1 = fx;
-        // If the function value of the last approximation is too small,
-        // given the function value accuracy, then we can't get closer to
-        // the root than we already are.
-        if (FastMath.abs(f1) <= ftol) {
-            switch(allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    if (inverted) {
+            // Update from [x0, x1] to [x0, x].
+            x1 = x;
+            f1 = fx;
+            // If the function value of the last approximation is too small,
+            // given the function value accuracy, then we can't get closer to
+            // the root than we already are.
+            if (FastMath.abs(f1) <= ftol) {
+                switch(allowed) {
+                    case ANY_SIDE:
                         return x1;
-                    }
-                    break;
-                case RIGHT_SIDE:
-                    if (!inverted) {
+                    case LEFT_SIDE:
+                        if (inverted) {
+                            return x1;
+                        }
+                        break;
+                    case RIGHT_SIDE:
+                        if (!inverted) {
+                            return x1;
+                        }
+                        break;
+                    case BELOW_SIDE:
+                        if (f1 <= 0) {
+                            return x1;
+                        }
+                        break;
+                    case ABOVE_SIDE:
+                        if (f1 >= 0) {
+                            return x1;
+                        }
+                        break;
+                    default:
+                        throw new MathInternalError();
+                }
+            }
+            // If the current interval is within the given accuracies, we
+            // are satisfied with the current approximation.
+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
+                switch(allowed) {
+                    case ANY_SIDE:
                         return x1;
-                    }
-                    break;
-                case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
-                case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
-                default:
-                    throw new MathInternalError();
-            }
-        }
-        // If the current interval is within the given accuracies, we
-        // are satisfied with the current approximation.
-        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
-            switch(allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    return inverted ? x1 : x0;
-                case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
-                case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
-                case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
-                default:
-                    throw new MathInternalError();
+                    case LEFT_SIDE:
+                        return inverted ? x1 : x0;
+                    case RIGHT_SIDE:
+                        return inverted ? x0 : x1;
+                    case BELOW_SIDE:
+                        return (f1 <= 0) ? x1 : x0;
+                    case ABOVE_SIDE:
+                        return (f1 >= 0) ? x1 : x0;
+                    default:
+                        throw new MathInternalError();
+                }
             }
         }
     }
