--- org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
+++ org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
@@ -25,6 +25,7 @@
     // Keep finding better approximations.
     while (true) {
         // Calculate the next approximation.
+        final double fx_prev = f1;
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
         // If the new approximation is the exact root, return it. Since
@@ -49,9 +50,9 @@
                     f0 *= f1 / (f1 + fx);
                     break;
                 case REGULA_FALSI:
-                    // Nothing.
+                    // The test x == x1 below is necessary to avoid infinite looping in case precision is very high
                     if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+                        x0 = x1 - (x1 - x0) / 2;
                         f0 = computeObjectiveValue(x0);
                     }
                     break;
@@ -105,9 +106,9 @@
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
+                    return (fx_prev <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
+                    return (fx_prev >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
             }
