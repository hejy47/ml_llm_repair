--- org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
+++ org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
@@ -33,36 +33,19 @@
         if (fx == 0.0) {
             return x;
         }
-        // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
-            // The value of x1 has switched to the other bound, thus inverting
-            // the interval.
-            x0 = x1;
-            f0 = f1;
+            // If the value of fx and f1 have different signs we are sure that the root
+            // lies between x0 and x hence we tighten the bracket between x0 and x
+            x1 = x;
+            f1 = fx;
             inverted = !inverted;
         } else {
-            switch(method) {
-                case ILLINOIS:
-                    f0 *= 0.5;
-                    break;
-                case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
-                    break;
-                case REGULA_FALSI:
-                    // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
-                    break;
-                default:
-                    // Should never happen.
-                    throw new MathInternalError();
-            }
+            // If the value of fx and f1 have the same signs we are sure that the root
+            // lies between x1 and its former bound hence we tighten the bracket between x and x0
+            x0 = x;
+            f0 = fx;
+            inverted = !inverted;
         }
-        // Update from [x0, x1] to [x0, x].
-        x1 = x;
-        f1 = fx;
         // If the function value of the last approximation is too small,
         // given the function value accuracy, then we can't get closer to
         // the root than we already are.
