[{"output": "## Fixed Function 1\npublic void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        Object[] varargs = (Object[]) invocation.getRawArguments()[indexOfVararg];\n        for (int i = 0; i < varargs.length; i++) {\n            for (int position = 0; position < matchers.size() && i < varargs.length; position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(varargs[i]);\n                    i++;\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}", "diff": "--- org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom\n+++ org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom\n@@ -1,7 +1,16 @@\n public void captureArgumentsFrom(Invocation invocation) {\n     if (invocation.getMethod().isVarArgs()) {\n         int indexOfVararg = invocation.getRawArguments().length - 1;\n-        throw new UnsupportedOperationException();\n+        Object[] varargs = (Object[]) invocation.getRawArguments()[indexOfVararg];\n+        for (int i = 0; i < varargs.length; i++) {\n+            for (int position = 0; position < matchers.size() && i < varargs.length; position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(varargs[i]);\n+                    i++;\n+                }\n+            }\n+        }\n     } else {\n         for (int position = 0; position < matchers.size(); position++) {\n             Matcher m = matchers.get(position);\n@@ -10,20 +19,4 @@\n             }\n         }\n     }\n-    //        for (int position = 0; position < matchers.size(); position++) {\n-    //            Matcher m = matchers.get(position);\n-    //            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-    //                //TODO SF - this whole lot can be moved captureFrom implementation\n-    //                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-    //                    Object array = invocation.getRawArguments()[position];\n-    //                    for (int i = 0; i < Array.getLength(array); i++) {\n-    //                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-    //                    }\n-    //                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-    //                    return;\n-    //                } else {\n-    //                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-    //                }\n-    //            }\n-    //        }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg == null || !vararg.getClass().isArray() || !isVarargsMatcherPresent()) {\n            throw new UnsupportedOperationException();\n        }\n        for (int i = 0; i < Array.getLength(vararg); i++) {\n            Object arg = Array.get(vararg, i);\n            for (Matcher m : matchers) {\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(arg);\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\n// Helper method to check if there is a varargs matcher in the list of matchers\nprivate boolean isVarargsMatcherPresent() {\n    for (Matcher m : matchers) {\n        if (m instanceof VarargMatcher) {\n            return true;\n        }\n    }\n    return false;\n}", "diff": "--- org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom\n+++ org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom\n@@ -1,7 +1,18 @@\n public void captureArgumentsFrom(Invocation invocation) {\n     if (invocation.getMethod().isVarArgs()) {\n         int indexOfVararg = invocation.getRawArguments().length - 1;\n-        throw new UnsupportedOperationException();\n+        Object vararg = invocation.getRawArguments()[indexOfVararg];\n+        if (vararg == null || !vararg.getClass().isArray() || !isVarargsMatcherPresent()) {\n+            throw new UnsupportedOperationException();\n+        }\n+        for (int i = 0; i < Array.getLength(vararg); i++) {\n+            Object arg = Array.get(vararg, i);\n+            for (Matcher m : matchers) {\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(arg);\n+                }\n+            }\n+        }\n     } else {\n         for (int position = 0; position < matchers.size(); position++) {\n             Matcher m = matchers.get(position);\n@@ -10,20 +21,4 @@\n             }\n         }\n     }\n-    //        for (int position = 0; position < matchers.size(); position++) {\n-    //            Matcher m = matchers.get(position);\n-    //            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-    //                //TODO SF - this whole lot can be moved captureFrom implementation\n-    //                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-    //                    Object array = invocation.getRawArguments()[position];\n-    //                    for (int i = 0; i < Array.getLength(array); i++) {\n-    //                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-    //                    }\n-    //                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-    //                    return;\n-    //                } else {\n-    //                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-    //                }\n-    //            }\n-    //        }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        if (matchers.size() == 1 && matchers.get(0) instanceof CapturesArguments) {\n            Object vararg = invocation.getArguments()[indexOfVararg];\n            if (vararg != null && vararg.getClass().isArray()) {\n                for (int i = 0; i < Array.getLength(vararg); i++) {\n                    ((CapturesArguments) matchers.get(0)).captureFrom(Array.get(vararg, i));\n                }\n            } else {\n                ((CapturesArguments) matchers.get(0)).captureFrom(vararg);\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}", "diff": "--- org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom\n+++ org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom\n@@ -1,7 +1,16 @@\n public void captureArgumentsFrom(Invocation invocation) {\n     if (invocation.getMethod().isVarArgs()) {\n         int indexOfVararg = invocation.getRawArguments().length - 1;\n-        throw new UnsupportedOperationException();\n+        if (matchers.size() == 1 && matchers.get(0) instanceof CapturesArguments) {\n+            Object vararg = invocation.getArguments()[indexOfVararg];\n+            if (vararg != null && vararg.getClass().isArray()) {\n+                for (int i = 0; i < Array.getLength(vararg); i++) {\n+                    ((CapturesArguments) matchers.get(0)).captureFrom(Array.get(vararg, i));\n+                }\n+            } else {\n+                ((CapturesArguments) matchers.get(0)).captureFrom(vararg);\n+            }\n+        }\n     } else {\n         for (int position = 0; position < matchers.size(); position++) {\n             Matcher m = matchers.get(position);\n@@ -10,20 +19,4 @@\n             }\n         }\n     }\n-    //        for (int position = 0; position < matchers.size(); position++) {\n-    //            Matcher m = matchers.get(position);\n-    //            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-    //                //TODO SF - this whole lot can be moved captureFrom implementation\n-    //                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-    //                    Object array = invocation.getRawArguments()[position];\n-    //                    for (int i = 0; i < Array.getLength(array); i++) {\n-    //                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-    //                    }\n-    //                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-    //                    return;\n-    //                } else {\n-    //                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-    //                }\n-    //            }\n-    //        }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        Object vararg = invocation.getArgumentAt(indexOfVararg, Object.class);\n        if (vararg != null && vararg.getClass().isArray()) {\n            int varargLength = Array.getLength(vararg);\n            for (int i = 0; i < varargLength; i++) {\n                Object varargElement = Array.get(vararg, i);\n                for (Matcher<?> matcher : matchers) {\n                    if (matcher instanceof CapturesArguments) {\n                        ((CapturesArguments) matcher).captureFrom(varargElement);\n                    }\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher<?> matcher = matchers.get(position);\n            if (matcher instanceof CapturesArguments) {\n                ((CapturesArguments) matcher).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}", "diff": "--- org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom\n+++ org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom\n@@ -1,29 +1,24 @@\n public void captureArgumentsFrom(Invocation invocation) {\n     if (invocation.getMethod().isVarArgs()) {\n         int indexOfVararg = invocation.getRawArguments().length - 1;\n-        throw new UnsupportedOperationException();\n+        Object vararg = invocation.getArgumentAt(indexOfVararg, Object.class);\n+        if (vararg != null && vararg.getClass().isArray()) {\n+            int varargLength = Array.getLength(vararg);\n+            for (int i = 0; i < varargLength; i++) {\n+                Object varargElement = Array.get(vararg, i);\n+                for (Matcher<?> matcher : matchers) {\n+                    if (matcher instanceof CapturesArguments) {\n+                        ((CapturesArguments) matcher).captureFrom(varargElement);\n+                    }\n+                }\n+            }\n+        }\n     } else {\n         for (int position = 0; position < matchers.size(); position++) {\n-            Matcher m = matchers.get(position);\n-            if (m instanceof CapturesArguments) {\n-                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+            Matcher<?> matcher = matchers.get(position);\n+            if (matcher instanceof CapturesArguments) {\n+                ((CapturesArguments) matcher).captureFrom(invocation.getArgumentAt(position, Object.class));\n             }\n         }\n     }\n-    //        for (int position = 0; position < matchers.size(); position++) {\n-    //            Matcher m = matchers.get(position);\n-    //            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-    //                //TODO SF - this whole lot can be moved captureFrom implementation\n-    //                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-    //                    Object array = invocation.getRawArguments()[position];\n-    //                    for (int i = 0; i < Array.getLength(array); i++) {\n-    //                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-    //                    }\n-    //                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-    //                    return;\n-    //                } else {\n-    //                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-    //                }\n-    //            }\n-    //        }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg != null && vararg.getClass().isArray()) {\n            for (int i = 0; i < Array.getLength(vararg); i++) {\n                for (int position = 0; position < matchers.size(); position++) {\n                    Matcher m = matchers.get(position);\n                    if (m instanceof CapturesArguments && isVarargMatcher(m)) {\n                        ((CapturesArguments) m).captureFrom(Array.get(vararg, i));\n                    }\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}", "diff": "--- org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom\n+++ org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom\n@@ -1,7 +1,17 @@\n public void captureArgumentsFrom(Invocation invocation) {\n     if (invocation.getMethod().isVarArgs()) {\n         int indexOfVararg = invocation.getRawArguments().length - 1;\n-        throw new UnsupportedOperationException();\n+        Object vararg = invocation.getRawArguments()[indexOfVararg];\n+        if (vararg != null && vararg.getClass().isArray()) {\n+            for (int i = 0; i < Array.getLength(vararg); i++) {\n+                for (int position = 0; position < matchers.size(); position++) {\n+                    Matcher m = matchers.get(position);\n+                    if (m instanceof CapturesArguments && isVarargMatcher(m)) {\n+                        ((CapturesArguments) m).captureFrom(Array.get(vararg, i));\n+                    }\n+                }\n+            }\n+        }\n     } else {\n         for (int position = 0; position < matchers.size(); position++) {\n             Matcher m = matchers.get(position);\n@@ -10,20 +20,4 @@\n             }\n         }\n     }\n-    //        for (int position = 0; position < matchers.size(); position++) {\n-    //            Matcher m = matchers.get(position);\n-    //            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-    //                //TODO SF - this whole lot can be moved captureFrom implementation\n-    //                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-    //                    Object array = invocation.getRawArguments()[position];\n-    //                    for (int i = 0; i < Array.getLength(array); i++) {\n-    //                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-    //                    }\n-    //                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-    //                    return;\n-    //                } else {\n-    //                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-    //                }\n-    //            }\n-    //        }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]