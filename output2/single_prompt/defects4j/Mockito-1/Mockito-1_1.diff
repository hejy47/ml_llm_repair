--- org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom
+++ org/mockito/internal/invocation/InvocationMatcher.java@captureArgumentsFrom
@@ -1,7 +1,16 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
-        throw new UnsupportedOperationException();
+        Object[] varargs = (Object[]) invocation.getRawArguments()[indexOfVararg];
+        for (int i = 0; i < varargs.length; i++) {
+            for (int position = 0; position < matchers.size() && i < varargs.length; position++) {
+                Matcher m = matchers.get(position);
+                if (m instanceof CapturesArguments) {
+                    ((CapturesArguments) m).captureFrom(varargs[i]);
+                    i++;
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
@@ -10,20 +19,4 @@
             }
         }
     }
-    //        for (int position = 0; position < matchers.size(); position++) {
-    //            Matcher m = matchers.get(position);
-    //            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-    //                //TODO SF - this whole lot can be moved captureFrom implementation
-    //                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-    //                    Object array = invocation.getRawArguments()[position];
-    //                    for (int i = 0; i < Array.getLength(array); i++) {
-    //                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-    //                    }
-    //                    //since we've captured all varargs already, it does not make sense to process other matchers.
-    //                    return;
-    //                } else {
-    //                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-    //                }
-    //            }
-    //        }
 }
