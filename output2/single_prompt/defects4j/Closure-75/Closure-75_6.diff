--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue
+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue
@@ -1,12 +1,9 @@
 static Double getStringNumberValue(String rawJsString) {
-    // vertical tab is not always whitespace
     String s = trimJsWhiteSpace(rawJsString);
-    // return ScriptRuntime.toNumber(s);
     if (s.length() == 0) {
         return 0.0;
     }
     if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
-        // Attempt to convert hex numbers.
         try {
             return Double.valueOf(Integer.parseInt(s.substring(2), 16));
         } catch (NumberFormatException e) {
@@ -14,12 +11,9 @@
         }
     }
     if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
-        // hex numbers with explicit signs vary between browsers.
         return null;
     }
-    // FireFox and IE treat the "Infinity" differently. FireFox is case
-    // insensitive, but IE treats "infinity" as NaN.  So leave it alone.
-    if (s.equals("infinity") || s.equals("-infinity") || s.equals("+infinity")) {
+    if (s.equalsIgnoreCase("infinity") || s.equalsIgnoreCase("-infinity") || s.equalsIgnoreCase("+infinity")) {
         return null;
     }
     try {
--- com/google/javascript/jscomp/NodeUtil.java@isStrWhiteSpaceChar
+++ com/google/javascript/jscomp/NodeUtil.java@isStrWhiteSpaceChar
@@ -1,26 +1,42 @@
 static TernaryValue isStrWhiteSpaceChar(int c) {
     switch(c) {
-        case // <VT>
-        '\u000B':
-            return TernaryValue.TRUE;
+        case 0x0009:
+        // <LF>
+        case 0x000A:
+        // <VT>
+        case 0x000B:
+        // <FF>
+        case 0x000C:
+        // <CR>
+        case 0x000D:
         // <SP>
-        case ' ':
-        // <LF>
-        case '\n':
-        // <CR>
-        case '\r':
-        // <TAB>
-        case '\t':
+        case 0x0020:
         // <NBSP>
-        case '\u00A0':
-        // <FF>
-        case '\u000C':
+        case 0x00A0:
+        // <BOM>
+        case 0xFEFF:
+        // <ZWNBSP>
+        case 0xFEFF:
+        // <USP>
+        case 0x2000:
+        case 0x2001:
+        case 0x2002:
+        case 0x2003:
+        case 0x2004:
+        case 0x2005:
+        case 0x2006:
+        case 0x2007:
+        case 0x2008:
+        case 0x2009:
+        case 0x200A:
+        case 0x202F:
+        case 0x205F:
+        // <NEL>
+        case 0x0085:
         // <LS>
-        case '\u2028':
+        case 0x2028:
         // <PS>
-        case '\u2029':
-        case // <BOM>
-        '\uFEFF':
+        case 0x2029:
             return TernaryValue.TRUE;
         default:
             return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
