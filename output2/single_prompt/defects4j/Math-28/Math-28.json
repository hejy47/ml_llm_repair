[{"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(Math.abs(entry), 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -5,7 +5,7 @@\n     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry = tableau.getEntry(i, col);\n-        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+        if (Precision.compareTo(Math.abs(entry), 0d, maxUlps) > 0) {\n             final double ratio = rhs / entry;\n             // check if the entry is strictly equal to the current min ratio\n             // do not use a ulp/epsilon check\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            boolean canBeForcedOut = true;\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (!Precision.equals(entry, 0d, maxUlps)) {\n                    canBeForcedOut = false;\n                    break;\n                }\n            }\n            if (canBeForcedOut && row.equals(tableau.getBasicRow(col))) {\n                return row;\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -25,12 +25,17 @@\n         // there's a degeneracy as indicated by a tie in the minimum ratio test\n         // 1. check if there's an artificial variable that can be forced out of the basis\n         for (Integer row : minRatioPositions) {\n+            boolean canBeForcedOut = true;\n             for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                 int column = i + tableau.getArtificialVariableOffset();\n                 final double entry = tableau.getEntry(row, column);\n-                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                    return row;\n+                if (!Precision.equals(entry, 0d, maxUlps)) {\n+                    canBeForcedOut = false;\n+                    break;\n                 }\n+            }\n+            if (canBeForcedOut && row.equals(tableau.getBasicRow(col))) {\n+                return row;\n             }\n         }\n         // 2. apply Bland's rule to prevent cycling:\n", "finish_reason": "stop", "valid": true, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow == null; i++) { // changed != to ==\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -46,7 +46,7 @@\n         int minIndex = tableau.getWidth();\n         for (Integer row : minRatioPositions) {\n             int i = tableau.getNumObjectiveFunctions();\n-            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+            for (; i < tableau.getWidth() - 1 && minRow == null; i++) { // changed != to ==\n                 if (row == tableau.getBasicRow(i)) {\n                     if (i < minIndex) {\n                         minIndex = i;\n", "finish_reason": "stop", "valid": true, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(Math.abs(entry), 0d, maxUlps) > 0) { // Check for absolute value of entry instead of entry alone.\n            final double ratio = rhs / entry;\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -5,10 +5,8 @@\n     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry = tableau.getEntry(i, col);\n-        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+        if (Precision.compareTo(Math.abs(entry), 0d, maxUlps) > 0) { // Check for absolute value of entry instead of entry alone.\n             final double ratio = rhs / entry;\n-            // check if the entry is strictly equal to the current min ratio\n-            // do not use a ulp/epsilon check\n             final int cmp = Double.compare(ratio, minRatio);\n             if (cmp == 0) {\n                 minRatioPositions.add(i);\n@@ -22,26 +20,6 @@\n     if (minRatioPositions.size() == 0) {\n         return null;\n     } else if (minRatioPositions.size() > 1) {\n-        // there's a degeneracy as indicated by a tie in the minimum ratio test\n-        // 1. check if there's an artificial variable that can be forced out of the basis\n-        for (Integer row : minRatioPositions) {\n-            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                int column = i + tableau.getArtificialVariableOffset();\n-                final double entry = tableau.getEntry(row, column);\n-                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                    return row;\n-                }\n-            }\n-        }\n-        // 2. apply Bland's rule to prevent cycling:\n-        //    take the row for which the corresponding basic variable has the smallest index\n-        //\n-        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n-        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n-        //\n-        // Additional heuristic: if we did not get a solution after half of maxIterations\n-        //                       revert to the simple case of just returning the top-most row\n-        // This heuristic is based on empirical data gathered while investigating MATH-828.\n         Integer minRow = null;\n         int minIndex = tableau.getWidth();\n         for (Integer row : minRatioPositions) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(Math.abs(entry), 0d, maxUlps) > 0) { // fixed the comparison with 0\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -5,7 +5,7 @@\n     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry = tableau.getEntry(i, col);\n-        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+        if (Precision.compareTo(Math.abs(entry), 0d, maxUlps) > 0) { // fixed the comparison with 0\n             final double ratio = rhs / entry;\n             // check if the entry is strictly equal to the current min ratio\n             // do not use a ulp/epsilon check\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (tableau.getBasicRow(i) != null && row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -47,7 +47,7 @@\n         for (Integer row : minRatioPositions) {\n             int i = tableau.getNumObjectiveFunctions();\n             for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                if (row == tableau.getBasicRow(i)) {\n+                if (tableau.getBasicRow(i) != null && row == tableau.getBasicRow(i)) {\n                     if (i < minIndex) {\n                         minIndex = i;\n                         minRow = row;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions.clear();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.isEmpty()) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            int offset = tableau.getArtificialVariableOffset();\n            int numArtificial = tableau.getNumArtificialVariables();\n            for (int i = 0; i < numArtificial; i++) {\n                int column = i + offset;\n                double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int start = tableau.getNumObjectiveFunctions();\n            int end = tableau.getWidth() - 1;\n            if (minRow != null) {\n                int cmp = Double.compare(tableau.getEntry(row, start + minIndex),\n                        tableau.getEntry(minRow, start + minIndex));\n                if (cmp < 0) {\n                    minIndex = tableau.getBasicColumn(row);\n                    minRow = row;\n                } else if (cmp > 0) {\n                    continue;\n                }\n            } else {\n                for (int i = start; i < end; i++) {\n                    if (tableau.getEntry(row, i) != 0) {\n                        minIndex = i - start;\n                        minRow = row;\n                        break;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -3,31 +3,33 @@\n     List<Integer> minRatioPositions = new ArrayList<Integer>();\n     double minRatio = Double.MAX_VALUE;\n     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n-        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n-        final double entry = tableau.getEntry(i, col);\n+        double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n+        double entry = tableau.getEntry(i, col);\n         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-            final double ratio = rhs / entry;\n+            double ratio = rhs / entry;\n             // check if the entry is strictly equal to the current min ratio\n             // do not use a ulp/epsilon check\n-            final int cmp = Double.compare(ratio, minRatio);\n+            int cmp = Double.compare(ratio, minRatio);\n             if (cmp == 0) {\n                 minRatioPositions.add(i);\n             } else if (cmp < 0) {\n                 minRatio = ratio;\n-                minRatioPositions = new ArrayList<Integer>();\n+                minRatioPositions.clear();\n                 minRatioPositions.add(i);\n             }\n         }\n     }\n-    if (minRatioPositions.size() == 0) {\n+    if (minRatioPositions.isEmpty()) {\n         return null;\n     } else if (minRatioPositions.size() > 1) {\n         // there's a degeneracy as indicated by a tie in the minimum ratio test\n         // 1. check if there's an artificial variable that can be forced out of the basis\n         for (Integer row : minRatioPositions) {\n-            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                int column = i + tableau.getArtificialVariableOffset();\n-                final double entry = tableau.getEntry(row, column);\n+            int offset = tableau.getArtificialVariableOffset();\n+            int numArtificial = tableau.getNumArtificialVariables();\n+            for (int i = 0; i < numArtificial; i++) {\n+                int column = i + offset;\n+                double entry = tableau.getEntry(row, column);\n                 if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                     return row;\n                 }\n@@ -45,12 +47,23 @@\n         Integer minRow = null;\n         int minIndex = tableau.getWidth();\n         for (Integer row : minRatioPositions) {\n-            int i = tableau.getNumObjectiveFunctions();\n-            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                if (row == tableau.getBasicRow(i)) {\n-                    if (i < minIndex) {\n-                        minIndex = i;\n+            int start = tableau.getNumObjectiveFunctions();\n+            int end = tableau.getWidth() - 1;\n+            if (minRow != null) {\n+                int cmp = Double.compare(tableau.getEntry(row, start + minIndex),\n+                        tableau.getEntry(minRow, start + minIndex));\n+                if (cmp < 0) {\n+                    minIndex = tableau.getBasicColumn(row);\n+                    minRow = row;\n+                } else if (cmp > 0) {\n+                    continue;\n+                }\n+            } else {\n+                for (int i = start; i < end; i++) {\n+                    if (tableau.getEntry(row, i) != 0) {\n+                        minIndex = i - start;\n                         minRow = row;\n+                        break;\n                     }\n                 }\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions.clear(); // clears the array instead of reinitializing it\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.isEmpty()) { // uses isEmpty() instead of checking size() == 0\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row.equals(tableau.getBasicRow(i))) { // changed \"==\" to equals()\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -14,12 +14,12 @@\n                 minRatioPositions.add(i);\n             } else if (cmp < 0) {\n                 minRatio = ratio;\n-                minRatioPositions = new ArrayList<Integer>();\n+                minRatioPositions.clear(); // clears the array instead of reinitializing it\n                 minRatioPositions.add(i);\n             }\n         }\n     }\n-    if (minRatioPositions.size() == 0) {\n+    if (minRatioPositions.isEmpty()) { // uses isEmpty() instead of checking size() == 0\n         return null;\n     } else if (minRatioPositions.size() > 1) {\n         // there's a degeneracy as indicated by a tie in the minimum ratio test\n@@ -47,7 +47,7 @@\n         for (Integer row : minRatioPositions) {\n             int i = tableau.getNumObjectiveFunctions();\n             for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                if (row == tableau.getBasicRow(i)) {\n+                if (row.equals(tableau.getBasicRow(i))) { // changed \"==\" to equals()\n                     if (i < minIndex) {\n                         minIndex = i;\n                         minRow = row;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (entry > 0d && Precision.compareTo(entry, 0d, maxUlps) != 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -5,7 +5,7 @@\n     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry = tableau.getEntry(i, col);\n-        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+        if (entry > 0d && Precision.compareTo(entry, 0d, maxUlps) != 0) {\n             final double ratio = rhs / entry;\n             // check if the entry is strictly equal to the current min ratio\n             // do not use a ulp/epsilon check\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(Math.abs(entry), 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.isEmpty()) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        Integer pivotRow = null;\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(Math.abs(entry), 1d, maxUlps)\n                        && row.equals(tableau.getBasicRow(column))) {\n                    pivotRow = row;\n                    break;\n                }\n            }\n            if (pivotRow != null) {\n                break;\n            }\n        }\n        if (pivotRow != null) {\n            return pivotRow;\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -5,7 +5,7 @@\n     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry = tableau.getEntry(i, col);\n-        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+        if (Precision.compareTo(Math.abs(entry), 0d, maxUlps) > 0) {\n             final double ratio = rhs / entry;\n             // check if the entry is strictly equal to the current min ratio\n             // do not use a ulp/epsilon check\n@@ -19,19 +19,28 @@\n             }\n         }\n     }\n-    if (minRatioPositions.size() == 0) {\n+    if (minRatioPositions.isEmpty()) {\n         return null;\n     } else if (minRatioPositions.size() > 1) {\n         // there's a degeneracy as indicated by a tie in the minimum ratio test\n         // 1. check if there's an artificial variable that can be forced out of the basis\n+        Integer pivotRow = null;\n         for (Integer row : minRatioPositions) {\n             for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                 int column = i + tableau.getArtificialVariableOffset();\n                 final double entry = tableau.getEntry(row, column);\n-                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                    return row;\n+                if (Precision.equals(Math.abs(entry), 1d, maxUlps)\n+                        && row.equals(tableau.getBasicRow(column))) {\n+                    pivotRow = row;\n+                    break;\n                 }\n             }\n+            if (pivotRow != null) {\n+                break;\n+            }\n+        }\n+        if (pivotRow != null) {\n+            return pivotRow;\n         }\n         // 2. apply Bland's rule to prevent cycling:\n         //    take the row for which the corresponding basic variable has the smallest index\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        outerloop:\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                        // Leave the outer loop if we found an index that satisfies the condition\n                        break outerloop;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -44,6 +44,7 @@\n         // This heuristic is based on empirical data gathered while investigating MATH-828.\n         Integer minRow = null;\n         int minIndex = tableau.getWidth();\n+        outerloop:\n         for (Integer row : minRatioPositions) {\n             int i = tableau.getNumObjectiveFunctions();\n             for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n@@ -51,6 +52,8 @@\n                     if (i < minIndex) {\n                         minIndex = i;\n                         minRow = row;\n+                        // Leave the outer loop if we found an index that satisfies the condition\n+                        break outerloop;\n                     }\n                 }\n             }\n", "finish_reason": "stop", "valid": true, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            } else if (cmp == 0) {\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -10,11 +10,11 @@\n             // check if the entry is strictly equal to the current min ratio\n             // do not use a ulp/epsilon check\n             final int cmp = Double.compare(ratio, minRatio);\n-            if (cmp == 0) {\n-                minRatioPositions.add(i);\n-            } else if (cmp < 0) {\n+            if (cmp < 0) {\n                 minRatio = ratio;\n                 minRatioPositions = new ArrayList<Integer>();\n+                minRatioPositions.add(i);\n+            } else if (cmp == 0) {\n                 minRatioPositions.add(i);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.isEmpty()) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < col; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                    break;\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -19,7 +19,7 @@\n             }\n         }\n     }\n-    if (minRatioPositions.size() == 0) {\n+    if (minRatioPositions.isEmpty()) {\n         return null;\n     } else if (minRatioPositions.size() > 1) {\n         // there's a degeneracy as indicated by a tie in the minimum ratio test\n@@ -45,13 +45,13 @@\n         Integer minRow = null;\n         int minIndex = tableau.getWidth();\n         for (Integer row : minRatioPositions) {\n-            int i = tableau.getNumObjectiveFunctions();\n-            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+            for (int i = 0; i < col; i++) {\n                 if (row == tableau.getBasicRow(i)) {\n                     if (i < minIndex) {\n                         minIndex = i;\n                         minRow = row;\n                     }\n+                    break;\n                 }\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.POSITIVE_INFINITY;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<>();\n                minRatioPositions.add(i);\n            } else if (Precision.equals(ratio, minRatio, maxUlps)) {\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -1,20 +1,18 @@\n private Integer getPivotRow(SimplexTableau tableau, final int col) {\n     // create a list of all the rows that tie for the lowest score in the minimum ratio test\n     List<Integer> minRatioPositions = new ArrayList<Integer>();\n-    double minRatio = Double.MAX_VALUE;\n+    double minRatio = Double.POSITIVE_INFINITY;\n     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry = tableau.getEntry(i, col);\n         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n             final double ratio = rhs / entry;\n             // check if the entry is strictly equal to the current min ratio\n-            // do not use a ulp/epsilon check\n-            final int cmp = Double.compare(ratio, minRatio);\n-            if (cmp == 0) {\n+            if (ratio < minRatio) {\n+                minRatio = ratio;\n+                minRatioPositions = new ArrayList<>();\n                 minRatioPositions.add(i);\n-            } else if (cmp < 0) {\n-                minRatio = ratio;\n-                minRatioPositions = new ArrayList<Integer>();\n+            } else if (Precision.equals(ratio, minRatio, maxUlps)) {\n                 minRatioPositions.add(i);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, tableau.getMaxUlps()) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, tableau.getMaxUlps()) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row.equals(tableau.getBasicRow(i))) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -5,7 +5,7 @@\n     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry = tableau.getEntry(i, col);\n-        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+        if (Precision.compareTo(entry, 0d, tableau.getMaxUlps()) > 0) {\n             final double ratio = rhs / entry;\n             // check if the entry is strictly equal to the current min ratio\n             // do not use a ulp/epsilon check\n@@ -28,7 +28,7 @@\n             for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                 int column = i + tableau.getArtificialVariableOffset();\n                 final double entry = tableau.getEntry(row, column);\n-                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n+                if (Precision.equals(entry, 1d, tableau.getMaxUlps()) && row.equals(tableau.getBasicRow(column))) {\n                     return row;\n                 }\n             }\n@@ -47,7 +47,7 @@\n         for (Integer row : minRatioPositions) {\n             int i = tableau.getNumObjectiveFunctions();\n             for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                if (row == tableau.getBasicRow(i)) {\n+                if (row.equals(tableau.getBasicRow(i))) {\n                     if (i < minIndex) {\n                         minIndex = i;\n                         minRow = row;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    int numObjectives = tableau.getNumObjectiveFunctions();\n    int height = tableau.getHeight();\n    for (int i = numObjectives; i < height; i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (entry <= 0) {\n            continue;\n        }\n        final double ratio = rhs / entry;\n        if (ratio < minRatio) {\n            minRatio = ratio;\n            minRatioPositions.clear();\n            minRatioPositions.add(i);\n        } else if (ratio == minRatio) {\n            minRatioPositions.add(i);\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = numObjectives;\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -1,51 +1,30 @@\n private Integer getPivotRow(SimplexTableau tableau, final int col) {\n-    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n     List<Integer> minRatioPositions = new ArrayList<Integer>();\n     double minRatio = Double.MAX_VALUE;\n-    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n+    int numObjectives = tableau.getNumObjectiveFunctions();\n+    int height = tableau.getHeight();\n+    for (int i = numObjectives; i < height; i++) {\n         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n         final double entry = tableau.getEntry(i, col);\n-        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-            final double ratio = rhs / entry;\n-            // check if the entry is strictly equal to the current min ratio\n-            // do not use a ulp/epsilon check\n-            final int cmp = Double.compare(ratio, minRatio);\n-            if (cmp == 0) {\n-                minRatioPositions.add(i);\n-            } else if (cmp < 0) {\n-                minRatio = ratio;\n-                minRatioPositions = new ArrayList<Integer>();\n-                minRatioPositions.add(i);\n-            }\n+        if (entry <= 0) {\n+            continue;\n+        }\n+        final double ratio = rhs / entry;\n+        if (ratio < minRatio) {\n+            minRatio = ratio;\n+            minRatioPositions.clear();\n+            minRatioPositions.add(i);\n+        } else if (ratio == minRatio) {\n+            minRatioPositions.add(i);\n         }\n     }\n     if (minRatioPositions.size() == 0) {\n         return null;\n     } else if (minRatioPositions.size() > 1) {\n-        // there's a degeneracy as indicated by a tie in the minimum ratio test\n-        // 1. check if there's an artificial variable that can be forced out of the basis\n-        for (Integer row : minRatioPositions) {\n-            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                int column = i + tableau.getArtificialVariableOffset();\n-                final double entry = tableau.getEntry(row, column);\n-                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                    return row;\n-                }\n-            }\n-        }\n-        // 2. apply Bland's rule to prevent cycling:\n-        //    take the row for which the corresponding basic variable has the smallest index\n-        //\n-        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n-        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n-        //\n-        // Additional heuristic: if we did not get a solution after half of maxIterations\n-        //                       revert to the simple case of just returning the top-most row\n-        // This heuristic is based on empirical data gathered while investigating MATH-828.\n         Integer minRow = null;\n         int minIndex = tableau.getWidth();\n         for (Integer row : minRatioPositions) {\n-            int i = tableau.getNumObjectiveFunctions();\n+            int i = numObjectives;\n             for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                 if (row == tableau.getBasicRow(i)) {\n                     if (i < minIndex) {\n", "finish_reason": "stop", "valid": true, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.isEmpty()) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getNumObjectiveFunctions();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -19,7 +19,7 @@\n             }\n         }\n     }\n-    if (minRatioPositions.size() == 0) {\n+    if (minRatioPositions.isEmpty()) {\n         return null;\n     } else if (minRatioPositions.size() > 1) {\n         // there's a degeneracy as indicated by a tie in the minimum ratio test\n@@ -43,7 +43,7 @@\n         //                       revert to the simple case of just returning the top-most row\n         // This heuristic is based on empirical data gathered while investigating MATH-828.\n         Integer minRow = null;\n-        int minIndex = tableau.getWidth();\n+        int minIndex = tableau.getNumObjectiveFunctions();\n         for (Integer row : minRatioPositions) {\n             int i = tableau.getNumObjectiveFunctions();\n             for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        for (Integer row : minRatioPositions) {\n            boolean isForcedOut = false; // Check added\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    isForcedOut = true;  // Check added\n                    break; // Check added\n                }\n            }\n            if (isForcedOut) { // Check added\n                return row;\n            }\n        }\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}", "diff": "--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow\n@@ -25,12 +25,17 @@\n         // there's a degeneracy as indicated by a tie in the minimum ratio test\n         // 1. check if there's an artificial variable that can be forced out of the basis\n         for (Integer row : minRatioPositions) {\n+            boolean isForcedOut = false; // Check added\n             for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                 int column = i + tableau.getArtificialVariableOffset();\n                 final double entry = tableau.getEntry(row, column);\n                 if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                    return row;\n+                    isForcedOut = true;  // Check added\n+                    break; // Check added\n                 }\n+            }\n+            if (isForcedOut) { // Check added\n+                return row;\n             }\n         }\n         // 2. apply Bland's rule to prevent cycling:\n", "finish_reason": "stop", "valid": false, "num": 1}]