--- org/apache/commons/math/optimization/linear/SimplexTableau.java@getBasicRow
+++ org/apache/commons/math/optimization/linear/SimplexTableau.java@getBasicRow
@@ -1,6 +1,6 @@
 private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {
     Integer row = null;
-    int start = getNumObjectiveFunctions();
+    int start = ignoreObjectiveRows ? 1 : 0; // start from 1 if ignoring objective rows
     for (int i = start; i < getHeight(); i++) {
         if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {
             row = i;
--- org/apache/commons/math/optimization/linear/SimplexTableau.java@getSolution
+++ org/apache/commons/math/optimization/linear/SimplexTableau.java@getSolution
@@ -1,10 +1,10 @@
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-    Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());
+    Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset(), false); // do not ignore objective rows
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
     Set<Integer> basicRows = new HashSet<Integer>();
     for (int i = 0; i < coefficients.length; i++) {
-        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i, true); // ignore objective rows
         if (basicRows.contains(basicRow)) {
             // if multiple variables can take a given value
             // then we choose the first and set the rest equal to 0
