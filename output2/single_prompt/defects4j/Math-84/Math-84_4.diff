--- org/apache/commons/math/optimization/direct/MultiDirectional.java@iterateSimplex
+++ org/apache/commons/math/optimization/direct/MultiDirectional.java@iterateSimplex
@@ -10,8 +10,11 @@
         if (comparator.compare(reflected, best) < 0) {
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
-            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-            if (comparator.compare(reflected, expanded) <= 0) {
+            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+                simplex = expandedSimplex;
+            } else {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
@@ -21,8 +24,19 @@
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = contracted;
+        } else {
             // check convergence
-            return;
+            boolean isConverged = true;
+            for (int i = 1; i < simplex.length; i++) {
+                if (comparator.compare(simplex[i], simplex[0]) != 0) {
+                    isConverged = false;
+                    break;
+                }
+            }
+            if (isConverged) {
+                return;
+            }
         }
     }
 }
