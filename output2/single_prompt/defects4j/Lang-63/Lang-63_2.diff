--- org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
+++ org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
@@ -7,9 +7,9 @@
     // timezones get funky around 0, so normalizing everything to GMT
     // stops the hours being off
     Calendar start = Calendar.getInstance(timezone);
-    start.setTime(new Date(startMillis));
+    start.setTimeInMillis(startMillis);
     Calendar end = Calendar.getInstance(timezone);
-    end.setTime(new Date(endMillis));
+    end.setTimeInMillis(endMillis);
     // initial estimates
     int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);
     int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);
@@ -36,12 +36,8 @@
         days -= 1;
     }
     while (days < 0) {
-        days += 31;
-        //days += 31; // TODO: Need tests to show this is bad and the new code is good.
-        // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
-        // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
-        // Also it's contextual - if asked for no M in the format then I should probably
-        // be doing no calculating here.
+        end.add(Calendar.MONTH, -1);
+        days += end.getActualMaximum(Calendar.DAY_OF_MONTH);
         months -= 1;
     }
     while (months < 0) {
--- org/apache/commons/lang/time/DurationFormatUtils.java@reduceAndCorrect
+++ org/apache/commons/lang/time/DurationFormatUtils.java@reduceAndCorrect
@@ -1,11 +1,10 @@
 static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {
-    end.add(field, -1 * difference);
+    end.add(field, -difference);
     int endValue = end.get(field);
     int startValue = start.get(field);
     if (endValue < startValue) {
-        int newdiff = startValue - endValue;
-        end.add(field, newdiff);
-        return newdiff;
+        end.add(field, difference);
+        return startValue - endValue;
     } else {
         return 0;
     }
