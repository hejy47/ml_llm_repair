--- org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
+++ org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
@@ -36,13 +36,15 @@
         days -= 1;
     }
     while (days < 0) {
-        days += 31;
+        int maxDayInMonth = end.getActualMaximum(Calendar.DAY_OF_MONTH);
+        days += maxDayInMonth;
         //days += 31; // TODO: Need tests to show this is bad and the new code is good.
         // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
         // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
         // Also it's contextual - if asked for no M in the format then I should probably
         // be doing no calculating here.
         months -= 1;
+        end.set(Calendar.MONTH, end.get(Calendar.MONTH)-1);
     }
     while (months < 0) {
         months += 12;
@@ -64,7 +66,7 @@
             years = 0;
         } else {
             // TODO: this is a bit weak, needs work to know about leap years
-            days += 365 * years;
+            days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);
             years = 0;
         }
     }
--- org/apache/commons/lang/time/DurationFormatUtils.java@reduceAndCorrect
+++ org/apache/commons/lang/time/DurationFormatUtils.java@reduceAndCorrect
@@ -3,9 +3,8 @@
     int endValue = end.get(field);
     int startValue = start.get(field);
     if (endValue < startValue) {
-        int newdiff = startValue - endValue;
-        end.add(field, newdiff);
-        return newdiff;
+        end.add(field, 1);
+        return 1;
     } else {
         return 0;
     }
