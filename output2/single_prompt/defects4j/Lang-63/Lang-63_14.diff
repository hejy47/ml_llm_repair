--- org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
+++ org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
@@ -36,12 +36,8 @@
         days -= 1;
     }
     while (days < 0) {
-        days += 31;
-        //days += 31; // TODO: Need tests to show this is bad and the new code is good.
-        // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
-        // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
-        // Also it's contextual - if asked for no M in the format then I should probably
-        // be doing no calculating here.
+        // days += 31;  <-- Remove this line
+        days += end.getActualMaximum(Calendar.DAY_OF_MONTH); // <-- Add this line
         months -= 1;
     }
     while (months < 0) {
--- org/apache/commons/lang/time/DurationFormatUtils.java@reduceAndCorrect
+++ org/apache/commons/lang/time/DurationFormatUtils.java@reduceAndCorrect
@@ -1,11 +1,13 @@
 static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {
-    end.add(field, -1 * difference);
-    int endValue = end.get(field);
+    Calendar tempEnd = (Calendar) end.clone(); // create a new copy of end to avoid modifying the input parameter
+    tempEnd.add(field, -1 * difference);
+    int endValue = tempEnd.get(field); // get the value from the temporary end variable
     int startValue = start.get(field);
     if (endValue < startValue) {
+        int maximum = tempEnd.getActualMaximum(field); // get the actual maximum value for the given field
         int newdiff = startValue - endValue;
-        end.add(field, newdiff);
-        return newdiff;
+        end.add(field, newdiff + maximum); // add the maximum value
+        return newdiff + maximum;
     } else {
         return 0;
     }
