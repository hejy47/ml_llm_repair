--- org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
+++ org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
@@ -36,12 +36,14 @@
         days -= 1;
     }
     while (days < 0) {
-        days += 31;
-        //days += 31; // TODO: Need tests to show this is bad and the new code is good.
+        // days += 31; // TODO: Need tests to show this is bad and the new code is good.
         // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
         // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
         // Also it's contextual - if asked for no M in the format then I should probably
         // be doing no calculating here.
+        int maxDay = end.getActualMaximum(Calendar.DAY_OF_MONTH);
+        days += maxDay - start.get(Calendar.DAY_OF_MONTH) + 1;
+        start.add(Calendar.MONTH, 1);
         months -= 1;
     }
     while (months < 0) {
@@ -52,7 +54,6 @@
     seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);
     minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);
     hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);
-    days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);
     months -= reduceAndCorrect(start, end, Calendar.MONTH, months);
     years -= reduceAndCorrect(start, end, Calendar.YEAR, years);
     // This next block of code adds in values that
@@ -64,7 +65,7 @@
             years = 0;
         } else {
             // TODO: this is a bit weak, needs work to know about leap years
-            days += 365 * years;
+            days += (int) ((endMillis- startMillis)/(24*60*60*1000));   // 365 * years;
             years = 0;
         }
     }
