--- org/apache/commons/math3/util/MathArrays.java@linearCombination
+++ org/apache/commons/math3/util/MathArrays.java@linearCombination
@@ -19,20 +19,29 @@
         final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);
         prodLowSum += prodLow;
     }
-    final double prodHighCur = prodHigh[0];
-    double prodHighNext = prodHigh[1];
-    double sHighPrev = prodHighCur + prodHighNext;
-    double sPrime = sHighPrev - prodHighNext;
-    double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-    final int lenMinusOne = len - 1;
-    for (int i = 1; i < lenMinusOne; i++) {
-        prodHighNext = prodHigh[i + 1];
-        final double sHighCur = sHighPrev + prodHighNext;
-        sPrime = sHighCur - prodHighNext;
-        sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
-        sHighPrev = sHighCur;
+    double result;
+    try {
+        final TwoProduct tp = TwoProduct.twoProduct(prodHigh[0], 1.0);
+        double sHighPrev = tp.getProduct2();
+        double sPrime = tp.getProduct1();
+        double sLowSum = 0;
+        for (int i = 1; i < len; i++) {
+            tp.multiply(prodHigh[i], 1.0);
+            final double sHighCur = tp.getProduct2() + sHighPrev;
+            sPrime = tp.getProduct1() + (sHighCur - sHighPrev);
+            sLowSum += (sHighPrev - sPrime) + tp.getProduct1();
+            sHighPrev = sHighCur;
+        }
+        sPrime += prodLowSum + sLowSum;
+        result = sHighPrev + sPrime;
+    } catch (Throwable t) {
+        // either we have split infinite numbers or some coefficients were NaNs,
+        // just rely on the naive implementation and let IEEE754 handle this
+        result = 0;
+        for (int i = 0; i < len; ++i) {
+            result += a[i] * b[i];
+        }
     }
-    double result = sHighPrev + (prodLowSum + sLowSum);
     if (Double.isNaN(result)) {
         // either we have split infinite numbers or some coefficients were NaNs,
         // just rely on the naive implementation and let IEEE754 handle this
