--- com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@enterScope
+++ com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@enterScope
@@ -1,7 +1,7 @@
 @Override
 public void enterScope(NodeTraversal t) {
     if (t.inGlobalScope()) {
-        // Don't even brother. All global variables are likely escaped.
+        // Don't even bother. All global variables are likely escaped.
         return;
     }
     if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) {
@@ -18,18 +18,17 @@
     candidates = Lists.newLinkedList();
     // Using the forward reaching definition search to find all the inline
     // candidates
-    new NodeTraversal(compiler, new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
+    new NodeTraversal(compiler, new GatherCandidates()).traverse(t.getScopeRoot().getLastChild());
     // Compute the backward reaching use. The CFG can be reused.
     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);
     reachingUses.analyze();
     for (Candidate c : candidates) {
-        if (c.canInline()) {
+        if (c.canInline(reachingUses, inlinedNewDependencies)) {
             c.inlineVariable();
             // If definition c has dependencies, then inlining it may have
             // introduced new dependencies for our other inlining candidates.
             //
-            // MustBeReachingVariableDef uses this dependency graph in its
-            // analysis, so some of these candidates may no longer be valid.
+            // MustBeReachingVariableDef uses this dependency graph in its analysis, so some of these candidates may no longer be valid.
             // We keep track of when the variable dependency graph changed
             // so that we can back off appropriately.
             if (!c.defMetadata.depends.isEmpty()) {
--- com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@apply
+++ com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@apply
@@ -1,13 +1,39 @@
 @Override
-public boolean apply(Node input) {
-    switch(input.getType()) {
-        case Token.GETELEM:
-        case Token.GETPROP:
-        case Token.ARRAYLIT:
-        case Token.OBJECTLIT:
-        case Token.REGEXP:
-        case Token.NEW:
-            return true;
+public void enterScope(NodeTraversal t) {
+    if (t.inGlobalScope()) {
+        // Don't even bother. All global variables are likely escaped.
+        return;
     }
-    return false;
+    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) {
+        return;
+    }
+    // Compute the forward reaching definition.
+    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);
+    // Process the body of the function.
+    Preconditions.checkState(t.getScopeRoot().isFunction());
+    cfa.process(null, t.getScopeRoot().getLastChild());
+    cfg = cfa.getCfg();
+    reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);
+    reachingDef.analyze();
+    candidates = Lists.newLinkedList();
+    // Using the forward reaching definition search to find all the inline
+    // candidates
+    new NodeTraversal(compiler, new GatherCandidates()).traverse(t.getScopeRoot().getLastChild());
+    // Compute the backward reaching use. The CFG can be reused.
+    reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);
+    reachingUses.analyze();
+    for (Candidate c : candidates) {
+        if (c.canInline(reachingUses, inlinedNewDependencies)) {
+            c.inlineVariable();
+            // If definition c has dependencies, then inlining it may have
+            // introduced new dependencies for our other inlining candidates.
+            //
+            // MustBeReachingVariableDef uses this dependency graph in its analysis, so some of these candidates may no longer be valid.
+            // We keep track of when the variable dependency graph changed
+            // so that we can back off appropriately.
+            if (!c.defMetadata.depends.isEmpty()) {
+                inlinedNewDependencies.add(t.getScope().getVar(c.varName));
+            }
+        }
+    }
 }
