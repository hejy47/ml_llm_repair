--- com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@enterScope
+++ com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@enterScope
@@ -1,7 +1,7 @@
 @Override
 public void enterScope(NodeTraversal t) {
     if (t.inGlobalScope()) {
-        // Don't even brother. All global variables are likely escaped.
+        // Don't even bother. All global variables are likely escaped.
         return;
     }
     if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) {
@@ -11,14 +11,14 @@
     ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);
     // Process the body of the function.
     Preconditions.checkState(t.getScopeRoot().isFunction());
-    cfa.process(null, t.getScopeRoot().getLastChild());
+    cfa.process(null, t.getScopeRoot());
     cfg = cfa.getCfg();
     reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);
     reachingDef.analyze();
     candidates = Lists.newLinkedList();
     // Using the forward reaching definition search to find all the inline
     // candidates
-    new NodeTraversal(compiler, new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
+    new NodeTraversal(compiler, new GatherCandiates()).traverse(t.getScopeRoot());
     // Compute the backward reaching use. The CFG can be reused.
     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);
     reachingUses.analyze();
--- com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@canInline
+++ com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@canInline
@@ -1,6 +1,6 @@
 private boolean canInline() {
     // Cannot inline a parameter.
-    if (getDefCfgNode().isFunction()) {
+    if (getDefCfgNode().isParamList()) {
         return false;
     }
     // If one of our dependencies has been inlined, then our dependency
@@ -19,7 +19,7 @@
     }
     // Check that the assignment isn't used as a R-Value.
     // TODO(user): Certain cases we can still inline.
-    if (def.isAssign() && !NodeUtil.isExprAssign(def.getParent())) {
+    if (def.isAssign() && !NodeUtil.isExpressionResultUsed(def.getParent())) {
         return false;
     }
     // The right of the definition has side effect:
@@ -40,7 +40,7 @@
     if (NodeUtil.mayHaveSideEffects(def.getLastChild(), compiler)) {
         return false;
     }
-    // TODO(user): We could inline all the uses if the expression is short.
+    // TODO:user: We could inline all the uses if the expression is short.
     // Finally we have to make sure that there are no more than one use
     // in the program and in the CFG node. Even when it is semantically
     // correctly inlining twice increases code size.
@@ -62,7 +62,7 @@
     // Example:
     // var x = a.b.c; j.c = 1; print(x);
     // Inlining print(a.b.c) is not safe consider j and be alias to a.b.
-    // TODO(user): We could get more accuracy by looking more in-detail
+    // TODO:user: We could get more accuracy by looking more in-detail
     // what j is and what x is trying to into to.
     // TODO(johnlenz): rework catch expression handling when we
     // have lexical scope support so catch expressions don't
@@ -87,18 +87,23 @@
         @Override
         public boolean apply(Node input) {
             // Recurse if the node is not a function.
-            return !input.isFunction();
+            return !NodeUtil.isFunctionExpression(input)
+                && !NodeUtil.isFunctionDeclaration(input);
         }
     })) {
         return false;
     }
     // We can skip the side effect check along the paths of two nodes if
     // they are just next to each other.
-    if (NodeUtil.isStatementBlock(getDefCfgNode().getParent()) && getDefCfgNode().getNext() != useCfgNode) {
+    if (NodeUtil.isStatementBlock(getDefCfgNode().getParent())
+        && getDefCfgNode().getNext() != useCfgNode) {
         // Similar side effect check as above but this time the side effect is
         // else where along the path.
         // x = readProp(b); while(modifyProp(b)) {}; print(x);
-        CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);
+        CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck =
+            new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(
+                cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode),
+                SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);
         if (pathCheck.somePathsSatisfyPredicate()) {
             return false;
         }
--- com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@apply
+++ com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@apply
@@ -1,13 +1,40 @@
 @Override
-public boolean apply(Node input) {
-    switch(input.getType()) {
-        case Token.GETELEM:
-        case Token.GETPROP:
-        case Token.ARRAYLIT:
-        case Token.OBJECTLIT:
-        case Token.REGEXP:
-        case Token.NEW:
-            return true;
+public void enterScope(NodeTraversal t) {
+    if (t.inGlobalScope()) {
+        // Don't even bother. All global variables are likely escaped.
+        return;
     }
-    return false;
+    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) {
+        return;
+    }
+    // Compute the forward reaching definition.
+    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);
+    // Process the body of the function.
+    Preconditions.checkState(t.getScopeRoot().isFunction());
+    cfa.process(null, t.getScopeRoot());
+    cfg = cfa.getCfg();
+    reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);
+    reachingDef.analyze();
+    candidates = Lists.newLinkedList();
+    // Using the forward reaching definition search to find all the inline
+    // candidates
+    new NodeTraversal(compiler, new GatherCandiates()).traverse(t.getScopeRoot());
+    // Compute the backward reaching use. The CFG can be reused.
+    reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);
+    reachingUses.analyze();
+    for (Candidate c : candidates) {
+        if (c.canInline()) {
+            c.inlineVariable();
+            // If definition c has dependencies, then inlining it may have
+            // introduced new dependencies for our other inlining candidates.
+            //
+            // MustBeReachingVariableDef uses this dependency graph in its
+            // analysis, so some of these candidates may no longer be valid.
+            // We keep track of when the variable dependency graph changed
+            // so that we can back off appropriately.
+            if (!c.defMetadata.depends.isEmpty()) {
+                inlinedNewDependencies.add(t.getScope().getVar(c.varName));
+            }
+        }
+    }
 }
