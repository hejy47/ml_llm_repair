--- org/joda/time/chrono/ZonedChronology.java@add
+++ org/joda/time/chrono/ZonedChronology.java@add
@@ -1,7 +1,7 @@
 public long add(long instant, int value) {
     if (iTimeField) {
         int offset = getOffsetToAdd(instant);
-        long localInstant = iField.add(instant + offset, value);
+        long localInstant = iField.add(instant, value);
         return localInstant - offset;
     } else {
         long localInstant = iZone.convertUTCToLocal(instant);
--- org/joda/time/chrono/ZonedChronology.java@add1
+++ org/joda/time/chrono/ZonedChronology.java@add1
@@ -1,7 +1,7 @@
 public long add(long instant, long value) {
     if (iTimeField) {
         int offset = getOffsetToAdd(instant);
-        long localInstant = iField.add(instant + offset, value);
+        long localInstant = iField.add(instant, value);
         return localInstant - offset;
     } else {
         long localInstant = iZone.convertUTCToLocal(instant);
--- org/joda/time/chrono/ZonedChronology.java@addWrapField
+++ org/joda/time/chrono/ZonedChronology.java@addWrapField
@@ -1,7 +1,7 @@
 public long addWrapField(long instant, int value) {
     if (iTimeField) {
         int offset = getOffsetToAdd(instant);
-        long localInstant = iField.addWrapField(instant + offset, value);
+        long localInstant = iField.addWrapField(instant, value);
         return localInstant - offset;
     } else {
         long localInstant = iZone.convertUTCToLocal(instant);
--- org/joda/time/chrono/ZonedChronology.java@set
+++ org/joda/time/chrono/ZonedChronology.java@set
@@ -1,9 +1,8 @@
 public long set(long instant, int value) {
     long localInstant = iZone.convertUTCToLocal(instant);
-    localInstant = iField.set(localInstant, value);
-    long result = iZone.convertLocalToUTC(localInstant, false);
-    if (get(result) != value) {
-        throw new IllegalFieldValueException(iField.getType(), new Integer(value), "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(localInstant)) + " (" + iZone.getID() + ")");
+    long newInstant = iField.set(localInstant, value);
+    if (iZone.getOffsetFromLocal(newInstant) != iZone.getOffset(instant)) {
+        throw new IllegalFieldValueException(iField.getType(), new Integer(value), "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(instant)) + " (" + iZone.getID() + ")");
     }
-    return result;
+    return iZone.convertLocalToUTC(newInstant, false);
 }
--- org/joda/time/field/LenientDateTimeField.java@set
+++ org/joda/time/field/LenientDateTimeField.java@set
@@ -1,8 +1,8 @@
 public long set(long instant, int value) {
-    // lenient needs to handle time zone chronologies
-    // so we do the calculation using local milliseconds
-    long localInstant = iBase.getZone().convertUTCToLocal(instant);
-    long difference = FieldUtils.safeSubtract(value, get(instant));
-    localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);
-    return iBase.getZone().convertLocalToUTC(localInstant, false);
+    long localInstant = iZone.convertUTCToLocal(instant);
+    long newInstant = iField.set(localInstant, value);
+    if (iZone.getOffsetFromLocal(newInstant) != iZone.getOffset(instant)) {
+        throw new IllegalFieldValueException(iField.getType(), new Integer(value), "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(instant)) + " (" + iZone.getID() + ")");
+    }
+    return iZone.convertLocalToUTC(newInstant, false);
 }
