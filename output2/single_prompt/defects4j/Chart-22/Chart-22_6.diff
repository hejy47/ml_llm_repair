--- org/jfree/data/KeyedObjects2D.java@getObject
+++ org/jfree/data/KeyedObjects2D.java@getObject
@@ -6,14 +6,8 @@
         throw new IllegalArgumentException("Null 'columnKey' argument.");
     }
     int row = this.rowKeys.indexOf(rowKey);
-    if (row < 0) {
-        throw new UnknownKeyException("Row key (" + rowKey + ") not recognised.");
-    }
     int column = this.columnKeys.indexOf(columnKey);
-    if (column < 0) {
-        throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
-    }
-    if (row >= 0) {
+    if (row >= 0 && column >= 0) { // only return if both row and column are valid
         KeyedObjects rowData = (KeyedObjects) this.rows.get(row);
         return rowData.getObject(columnKey);
     } else {
--- org/jfree/data/KeyedObjects2D.java@removeObject
+++ org/jfree/data/KeyedObjects2D.java@removeObject
@@ -1,18 +1,31 @@
 public void removeObject(Comparable rowKey, Comparable columnKey) {
-    setObject(null, rowKey, columnKey);
-    // 1. check whether the row is now empty.
-    boolean allNull = true;
     int rowIndex = getRowIndex(rowKey);
+    if (rowIndex < 0) {
+        return; // do nothing if rowKey is not found
+    }
     KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex);
-    for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {
-        if (row.getObject(item) != null) {
-            allNull = false;
+    row.removeValue(columnKey); // remove the value
+    if (row.getItemCount() == 0) { // check whether the row is now empty.
+        this.rowKeys.remove(rowIndex);
+        this.rows.remove(rowIndex);
+    }
+    int column = getColumnIndex(columnKey);
+    if (column < 0) {
+        return; // do nothing if columnKey is not found
+    }
+    boolean columnEmpty = true;
+    for (int i = 0; i < this.rows.size(); i++) { // iterate through all rows to check if the column is now empty
+        KeyedObjects rowData = (KeyedObjects) this.rows.get(i);
+        if (rowData.getObject(columnKey) != null) {
+            columnEmpty = false;
             break;
         }
     }
-    if (allNull) {
-        this.rowKeys.remove(rowIndex);
-        this.rows.remove(rowIndex);
+    if (columnEmpty) { // remove the column if it is empty
+        this.columnKeys.remove(columnKey);
+        for (int i = 0; i < this.rows.size(); i++) {
+            KeyedObjects rowData = (KeyedObjects) this.rows.get(i);
+            rowData.removeValue(columnKey);
+        }
     }
-    // 2. check whether the column is now empty.
 }
--- org/jfree/data/KeyedObjects2D.java@removeRow
+++ org/jfree/data/KeyedObjects2D.java@removeRow
@@ -1,4 +1,7 @@
 public void removeRow(Comparable rowKey) {
     int index = getRowIndex(rowKey);
-    removeRow(index);
+    if (index >= 0) { // only remove the row if it exists
+        this.rowKeys.remove(index);
+        this.rows.remove(index);
+    }
 }
--- org/jfree/data/KeyedObjects2D.java@removeColumn
+++ org/jfree/data/KeyedObjects2D.java@removeColumn
@@ -1,12 +1,11 @@
 public void removeColumn(Comparable columnKey) {
     int index = getColumnIndex(columnKey);
     if (index < 0) {
-        throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
+        return; // do nothing if columnKey is not found
     }
-    Iterator iterator = this.rows.iterator();
-    while (iterator.hasNext()) {
-        KeyedObjects rowData = (KeyedObjects) iterator.next();
+    this.columnKeys.remove(index); // remove the column key
+    for (int i = 0; i < this.rows.size(); i++) { // remove the column values from all rows
+        KeyedObjects rowData = (KeyedObjects) this.rows.get(i);
         rowData.removeValue(columnKey);
     }
-    this.columnKeys.remove(columnKey);
 }
