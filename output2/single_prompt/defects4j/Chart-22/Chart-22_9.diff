--- org/jfree/data/KeyedObjects2D.java@getObject
+++ org/jfree/data/KeyedObjects2D.java@getObject
@@ -13,8 +13,8 @@
     if (column < 0) {
         throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
     }
-    if (row >= 0) {
-        KeyedObjects rowData = (KeyedObjects) this.rows.get(row);
+    KeyedObjects rowData = (KeyedObjects) this.rows.get(row);
+    if (column >= 0) {
         return rowData.getObject(columnKey);
     } else {
         return null;
--- org/jfree/data/KeyedObjects2D.java@removeObject
+++ org/jfree/data/KeyedObjects2D.java@removeObject
@@ -1,18 +1,38 @@
 public void removeObject(Comparable rowKey, Comparable columnKey) {
-    setObject(null, rowKey, columnKey);
-    // 1. check whether the row is now empty.
-    boolean allNull = true;
     int rowIndex = getRowIndex(rowKey);
-    KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex);
-    for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {
-        if (row.getObject(item) != null) {
-            allNull = false;
-            break;
+    if (rowIndex >= 0) {
+        KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex);
+        row.removeValue(columnKey);
+        // 1. check whether the row is now empty.
+        boolean allNull = true;
+        for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {
+            if (row.getObject(item) != null) {
+                allNull = false;
+                break;
+            }
+        }
+        if (allNull) {
+            this.rowKeys.remove(rowIndex);
+            this.rows.remove(rowIndex);
         }
     }
-    if (allNull) {
-        this.rowKeys.remove(rowIndex);
-        this.rows.remove(rowIndex);
+    // 2. check whether the column is now empty.
+    int columnIndex = getColumnIndex(columnKey);
+    if (columnIndex >= 0) {
+        allNull = true;
+        for (int i = 0, rowCount = getRowCount(); i < rowCount; i++) {
+            KeyedObjects row = (KeyedObjects) this.rows.get(i);
+            if (row.getObject(columnIndex) != null) {
+                allNull = false;
+                break;
+            }
+        }
+        if (allNull) {
+            Comparable removed = this.columnKeys.remove(columnIndex);
+            for (int i = 0, rowCount = getRowCount(); i < rowCount; i++) {
+                KeyedObjects row = (KeyedObjects) this.rows.get(i);
+                row.removeValue(removed);
+            }
+        }
     }
-    // 2. check whether the column is now empty.
 }
--- org/jfree/data/KeyedObjects2D.java@removeRow
+++ org/jfree/data/KeyedObjects2D.java@removeRow
@@ -1,4 +1,7 @@
 public void removeRow(Comparable rowKey) {
     int index = getRowIndex(rowKey);
-    removeRow(index);
+    if (index >= 0) {
+        this.rowKeys.remove(index);
+        this.rows.remove(index);
+    }
 }
--- org/jfree/data/KeyedObjects2D.java@removeColumn
+++ org/jfree/data/KeyedObjects2D.java@removeColumn
@@ -3,10 +3,9 @@
     if (index < 0) {
         throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
     }
-    Iterator iterator = this.rows.iterator();
-    while (iterator.hasNext()) {
-        KeyedObjects rowData = (KeyedObjects) iterator.next();
-        rowData.removeValue(columnKey);
+    this.columnKeys.remove(index);
+    for (int i = 0, rowCount = getRowCount(); i < rowCount; i++) {
+        KeyedObjects row = (KeyedObjects) this.rows.get(i);
+        row.removeValue(columnKey);
     }
-    this.columnKeys.remove(columnKey);
 }
