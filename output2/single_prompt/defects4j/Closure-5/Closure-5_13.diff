--- com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
+++ com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
@@ -1,6 +1,5 @@
 private boolean isInlinableObject(List<Reference> refs) {
-    boolean ret = false;
-    Set<String> validProperties = Sets.newHashSet();
+    Set<String> validProperties = new HashSet<>();
     for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
@@ -55,12 +54,13 @@
         // but x = {a: 1, b: x.a} is.
         //
         // Also, ES5 getters/setters aren't handled by this pass.
+        Set<String> childProperties = new HashSet<>();
         for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
             if (child.isGetterDef() || child.isSetterDef()) {
                 // ES5 get/set not supported.
                 return false;
             }
-            validProperties.add(child.getString());
+            childProperties.add(child.getString());
             Node childVal = child.getFirstChild();
             // Check if childVal is the parent of any of the passed in
             // references, as that is how self-referential assignments
@@ -76,10 +76,16 @@
                 }
             }
         }
+        // Make sure all child properties are valid
+        for (String prop : childProperties) {
+            if (!validProperties.contains(prop)) {
+                return false;
+            }
+        }
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
-        ret = true;
+        validProperties.addAll(childProperties);
     }
-    return ret;
+    return true;
 }
