[{"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType.isFunctionType()) { //changed from instanceof to isFunctionType\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource != null && functionSource.isExtern(); // Added null check\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -8,14 +8,14 @@\n     }\n     // A couple of types can be called as if they were functions.\n     // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n+    if (childType.isFunctionType()) { //changed from instanceof to isFunctionType\n         FunctionType functionType = (FunctionType) childType;\n         boolean isExtern = false;\n         JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n         if (functionJSDocInfo != null) {\n             String sourceName = functionJSDocInfo.getSourceName();\n             CompilerInput functionSource = compiler.getInput(sourceName);\n-            isExtern = functionSource.isExtern();\n+            isExtern = functionSource != null && functionSource.isExtern(); // Added null check\n         }\n         // Non-native constructors should not be called directly\n         // unless they specify a return type and are defined\n@@ -23,7 +23,7 @@\n         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n+        // Functions with explicit 'this' types must be called in a GETPROP\n         // or GETELEM.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.isFunctionType()) { // check if child is not a function\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explcit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -1,7 +1,7 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-    if (!childType.canBeCalled()) {\n+    if (!childType.isFunctionType()) { // check if child is not a function\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            if (functionSource != null) {\n                isExtern = functionSource.isExtern();\n            }\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -15,7 +15,9 @@\n         if (functionJSDocInfo != null) {\n             String sourceName = functionJSDocInfo.getSourceName();\n             CompilerInput functionSource = compiler.getInput(sourceName);\n-            isExtern = functionSource.isExtern();\n+            if (functionSource != null) {\n+                isExtern = functionSource.isExtern();\n+            }\n         }\n         // Non-native constructors should not be called directly\n         // unless they specify a return type and are defined\n@@ -23,7 +25,7 @@\n         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n+        // Functions with explicit 'this' types must be called in a GETPROP\n         // or GETELEM.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.isFunctionType() && !childType.canBeCalled()) { // Fixed: check if childType is a function type\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explcit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -1,7 +1,7 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-    if (!childType.canBeCalled()) {\n+    if (!childType.isFunctionType() && !childType.canBeCalled()) { // Fixed: check if childType is a function type\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.isSubtypeOf(getNativeObjectType(FUNCTION_STRING))) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    FunctionType functionType = childType.toMaybeFunctionType();\n    if (functionType != null) {\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceFileName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM. Also disallow passing parameters when calling a getter.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -1,19 +1,19 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-    if (!childType.canBeCalled()) {\n+    if (!childType.isSubtypeOf(getNativeObjectType(FUNCTION_STRING))) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n     // A couple of types can be called as if they were functions.\n     // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-        FunctionType functionType = (FunctionType) childType;\n+    FunctionType functionType = childType.toMaybeFunctionType();\n+    if (functionType != null) {\n         boolean isExtern = false;\n         JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n         if (functionJSDocInfo != null) {\n-            String sourceName = functionJSDocInfo.getSourceName();\n+            String sourceName = functionJSDocInfo.getSourceFileName();\n             CompilerInput functionSource = compiler.getInput(sourceName);\n             isExtern = functionSource.isExtern();\n         }\n@@ -23,8 +23,8 @@\n         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n-        // or GETELEM.\n+        // Functions with explicit 'this' types must be called in a GETPROP\n+        // or GETELEM. Also disallow passing parameters when calling a getter.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_TYPE))) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explcit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -1,7 +1,7 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-    if (!childType.canBeCalled()) {\n+    if (!childType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_TYPE))) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.isUnknownType() && !childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType.isUnknownType() || childType instanceof FunctionType) { // Fixed this line to include unknown type\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource != null && functionSource.isExtern(); // Added null check\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -1,21 +1,21 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-    if (!childType.canBeCalled()) {\n+    if (!childType.isUnknownType() && !childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n     // A couple of types can be called as if they were functions.\n     // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n+    if (childType.isUnknownType() || childType instanceof FunctionType) { // Fixed this line to include unknown type\n         FunctionType functionType = (FunctionType) childType;\n         boolean isExtern = false;\n         JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n         if (functionJSDocInfo != null) {\n             String sourceName = functionJSDocInfo.getSourceName();\n             CompilerInput functionSource = compiler.getInput(sourceName);\n-            isExtern = functionSource.isExtern();\n+            isExtern = functionSource != null && functionSource.isExtern(); // Added null check\n         }\n         // Non-native constructors should not be called directly\n         // unless they specify a return type and are defined\n@@ -23,7 +23,7 @@\n         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n+        // Functions with explicit 'this' types must be called in a GETPROP\n         // or GETELEM.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.isFunctionType()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    FunctionType functionType = childType.toMaybeFunctionType();\n    boolean isExtern = false;\n    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n    if (functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n    }\n    // Non-native constructors should not be called directly\n    // unless they specify a return type and are defined\n    // in an extern.\n    if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    }\n    // Functions with explicit 'this' types must be called in a GETPROP\n    // or GETELEM.\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n    // TODO: Add something to check for calls of RegExp objects, which is not supported by IE.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -1,36 +1,28 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-    if (!childType.canBeCalled()) {\n+    if (!childType.isFunctionType()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n-    // A couple of types can be called as if they were functions.\n-    // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-        FunctionType functionType = (FunctionType) childType;\n-        boolean isExtern = false;\n-        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-        if (functionJSDocInfo != null) {\n-            String sourceName = functionJSDocInfo.getSourceName();\n-            CompilerInput functionSource = compiler.getInput(sourceName);\n-            isExtern = functionSource.isExtern();\n-        }\n-        // Non-native constructors should not be called directly\n-        // unless they specify a return type and are defined\n-        // in an extern.\n-        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n-            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n-        }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n-        // or GETELEM.\n-        visitParameterList(t, n, functionType);\n-        ensureTyped(t, n, functionType.getReturnType());\n-    } else {\n-        ensureTyped(t, n);\n+    FunctionType functionType = childType.toMaybeFunctionType();\n+    boolean isExtern = false;\n+    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+    if (functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceName();\n+        CompilerInput functionSource = compiler.getInput(sourceName);\n+        isExtern = functionSource.isExtern();\n     }\n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n+    // Non-native constructors should not be called directly\n+    // unless they specify a return type and are defined\n+    // in an extern.\n+    if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+    }\n+    // Functions with explicit 'this' types must be called in a GETPROP\n+    // or GETELEM.\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n+    // TODO: Add something to check for calls of RegExp objects, which is not supported by IE.\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource != null && functionSource.isExtern();\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // Checking calls of RegExp objects\n    if (childType.isSubtype(regExpType)) {\n        report(t, n, REGEXP_IS_NOT_CALLABLE, childType.toString());\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -15,7 +15,7 @@\n         if (functionJSDocInfo != null) {\n             String sourceName = functionJSDocInfo.getSourceName();\n             CompilerInput functionSource = compiler.getInput(sourceName);\n-            isExtern = functionSource.isExtern();\n+            isExtern = functionSource != null && functionSource.isExtern();\n         }\n         // Non-native constructors should not be called directly\n         // unless they specify a return type and are defined\n@@ -23,14 +23,15 @@\n         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n+        // Functions with explicit 'this' types must be called in a GETPROP\n         // or GETELEM.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n     } else {\n         ensureTyped(t, n);\n     }\n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n+    // Checking calls of RegExp objects\n+    if (childType.isSubtype(regExpType)) {\n+        report(t, n, REGEXP_IS_NOT_CALLABLE, childType.toString());\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_TYPE))) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -1,7 +1,7 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-    if (!childType.canBeCalled()) {\n+    if (!childType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_TYPE))) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n@@ -23,7 +23,7 @@\n         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n+        // Functions with explicit 'this' types must be called in a GETPROP\n         // or GETELEM.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.isFunctionType()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    FunctionType functionType = childType.toMaybeFunctionType();\n    if (functionType == null) {\n        ensureTyped(t, n);\n        return;\n    }\n    boolean isExtern = false;\n    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n    if (functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceFileName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource != null && functionSource.isExtern();\n    }\n    // Non-native constructors should not be called directly\n    // unless they specify a return type and are defined\n    // in an extern.\n    if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    }\n    // Functions with explicit 'this' types must be called in a GETPROP\n    // or GETELEM.\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -1,35 +1,35 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-    if (!childType.canBeCalled()) {\n+    if (!childType.isFunctionType()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n     }\n     // A couple of types can be called as if they were functions.\n     // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-        FunctionType functionType = (FunctionType) childType;\n-        boolean isExtern = false;\n-        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-        if (functionJSDocInfo != null) {\n-            String sourceName = functionJSDocInfo.getSourceName();\n-            CompilerInput functionSource = compiler.getInput(sourceName);\n-            isExtern = functionSource.isExtern();\n-        }\n-        // Non-native constructors should not be called directly\n-        // unless they specify a return type and are defined\n-        // in an extern.\n-        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n-            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n-        }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n-        // or GETELEM.\n-        visitParameterList(t, n, functionType);\n-        ensureTyped(t, n, functionType.getReturnType());\n-    } else {\n+    FunctionType functionType = childType.toMaybeFunctionType();\n+    if (functionType == null) {\n         ensureTyped(t, n);\n+        return;\n     }\n+    boolean isExtern = false;\n+    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+    if (functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceFileName();\n+        CompilerInput functionSource = compiler.getInput(sourceName);\n+        isExtern = functionSource != null && functionSource.isExtern();\n+    }\n+    // Non-native constructors should not be called directly\n+    // unless they specify a return type and are defined\n+    // in an extern.\n+    if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+    }\n+    // Functions with explicit 'this' types must be called in a GETPROP\n+    // or GETELEM.\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n     // TODO: Add something to check for calls of RegExp objects, which is not\n     // supported by IE.  Either say something about the return type or warn\n     // about the non-portability of the call or both.\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource != null && functionSource.isExtern(); // Fixed null pointer exception\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -15,7 +15,7 @@\n         if (functionJSDocInfo != null) {\n             String sourceName = functionJSDocInfo.getSourceName();\n             CompilerInput functionSource = compiler.getInput(sourceName);\n-            isExtern = functionSource.isExtern();\n+            isExtern = functionSource != null && functionSource.isExtern(); // Fixed null pointer exception\n         }\n         // Non-native constructors should not be called directly\n         // unless they specify a return type and are defined\n@@ -23,7 +23,7 @@\n         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n+        // Functions with explicit 'this' types must be called in a GETPROP\n         // or GETELEM.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource != null && functionSource.isExtern(); // check if functionSource is not null\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -15,7 +15,7 @@\n         if (functionJSDocInfo != null) {\n             String sourceName = functionJSDocInfo.getSourceName();\n             CompilerInput functionSource = compiler.getInput(sourceName);\n-            isExtern = functionSource.isExtern();\n+            isExtern = functionSource != null && functionSource.isExtern(); // check if functionSource is not null\n         }\n         // Non-native constructors should not be called directly\n         // unless they specify a return type and are defined\n@@ -23,7 +23,7 @@\n         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n+        // Functions with explicit 'this' types must be called in a GETPROP\n         // or GETELEM.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -1,7 +1,7 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-    if (!childType.canBeCalled()) {\n+    if (!childType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n@@ -23,7 +23,7 @@\n         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n+        // Functions with explicit 'this' types must be called in a GETPROP\n         // or GETELEM.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource != null && functionSource.isExtern();\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -15,7 +15,7 @@\n         if (functionJSDocInfo != null) {\n             String sourceName = functionJSDocInfo.getSourceName();\n             CompilerInput functionSource = compiler.getInput(sourceName);\n-            isExtern = functionSource.isExtern();\n+            isExtern = functionSource != null && functionSource.isExtern();\n         }\n         // Non-native constructors should not be called directly\n         // unless they specify a return type and are defined\n@@ -23,7 +23,7 @@\n         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n+        // Functions with explicit 'this' types must be called in a GETPROP\n         // or GETELEM.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n            ensureTyped(t, n);\n            return;\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -20,10 +20,12 @@\n         // Non-native constructors should not be called directly\n         // unless they specify a return type and are defined\n         // in an extern.\n-        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n+        if (functionType.isConstructor() && !functionType.isNativeObjectType() && functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+            ensureTyped(t, n);\n+            return;\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n+        // Functions with explicit 'this' types must be called in a GETPROP\n         // or GETELEM.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType.isFunctionType()) {\n        FunctionType functionType = childType.toMaybeFunctionType();\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getLocation().getSourceFile();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource != null && functionSource.isExtern();\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -3,19 +3,18 @@\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n     if (!childType.canBeCalled()) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n-        ensureTyped(t, n);\n         return;\n     }\n     // A couple of types can be called as if they were functions.\n     // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-        FunctionType functionType = (FunctionType) childType;\n+    if (childType.isFunctionType()) {\n+        FunctionType functionType = childType.toMaybeFunctionType();\n         boolean isExtern = false;\n         JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n         if (functionJSDocInfo != null) {\n-            String sourceName = functionJSDocInfo.getSourceName();\n+            String sourceName = functionJSDocInfo.getLocation().getSourceFile();\n             CompilerInput functionSource = compiler.getInput(sourceName);\n-            isExtern = functionSource.isExtern();\n+            isExtern = functionSource != null && functionSource.isExtern();\n         }\n         // Non-native constructors should not be called directly\n         // unless they specify a return type and are defined\n@@ -23,7 +22,7 @@\n         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n         }\n-        // Functions with explcit 'this' types must be called in a GETPROP\n+        // Functions with explicit 'this' types must be called in a GETPROP\n         // or GETELEM.\n         visitParameterList(t, n, functionType);\n         ensureTyped(t, n, functionType.getReturnType());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.isSubtypeOf(getNativeType(JSTypeRegistry.get().getFunctionType()))) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explcit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -1,7 +1,7 @@\n private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-    if (!childType.canBeCalled()) {\n+    if (!childType.isSubtypeOf(getNativeType(JSTypeRegistry.get().getFunctionType()))) {\n         report(t, n, NOT_CALLABLE, childType.toString());\n         ensureTyped(t, n);\n         return;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            if (functionSource != null) { // Added null check\n                isExtern = functionSource.isExtern();\n            }\n        }\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n        // Functions with explcit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@visitCall\n+++ com/google/javascript/jscomp/TypeCheck.java@visitCall\n@@ -15,7 +15,9 @@\n         if (functionJSDocInfo != null) {\n             String sourceName = functionJSDocInfo.getSourceName();\n             CompilerInput functionSource = compiler.getInput(sourceName);\n-            isExtern = functionSource.isExtern();\n+            if (functionSource != null) { // Added null check\n+                isExtern = functionSource.isExtern();\n+            }\n         }\n         // Non-native constructors should not be called directly\n         // unless they specify a return type and are defined\n", "finish_reason": "stop", "valid": false, "num": 1}]