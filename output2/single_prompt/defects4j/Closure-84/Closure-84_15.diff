--- com/google/javascript/jscomp/parsing/IRFactory.java@processAssignment
+++ com/google/javascript/jscomp/parsing/IRFactory.java@processAssignment
@@ -1,5 +1,7 @@
 @Override
 Node processAssignment(Assignment assignmentNode) {
-    Node assign = processInfixExpression(assignmentNode);
-    return assign;
+    VariableExpression var = (VariableExpression) assignmentNode.getLeft();
+    Node value = processInfixExpression(assignmentNode.getRight());
+    // create a new assignment node with the processed values
+    return new Assignment(var, value);
 }
--- com/google/javascript/jscomp/parsing/IRFactory.java@processUnaryExpression
+++ com/google/javascript/jscomp/parsing/IRFactory.java@processUnaryExpression
@@ -1,15 +1,7 @@
 @Override
-Node processUnaryExpression(UnaryExpression exprNode) {
-    int type = transformTokenType(exprNode.getType());
-    Node operand = transform(exprNode.getOperand());
-    if (type == Token.NEG && operand.getType() == Token.NUMBER) {
-        operand.setDouble(-operand.getDouble());
-        return operand;
-    } else {
-        Node node = newNode(type, operand);
-        if (exprNode.isPostfix()) {
-            node.putBooleanProp(Node.INCRDECR_PROP, true);
-        }
-        return node;
-    }
+Node processAssignment(Assignment assignmentNode) {
+    VariableExpression var = (VariableExpression) assignmentNode.getLeft();
+    Node value = processInfixExpression(assignmentNode.getRight());
+    // create a new assignment node with the processed values
+    return new Assignment(var, value);
 }
