--- com/google/javascript/jscomp/TypedScopeCreator.java@defineSlot
+++ com/google/javascript/jscomp/TypedScopeCreator.java@defineSlot
@@ -1,19 +1,19 @@
 void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
     Preconditions.checkArgument(inferred || type != null);
-    // Only allow declarations of NAMEs and qualfied names.
+    // Only allow declarations of NAMEs and qualified names.
     boolean shouldDeclareOnGlobalThis = false;
-    if (n.getType() == Token.NAME) {
-        Preconditions.checkArgument(parent.getType() == Token.FUNCTION || parent.getType() == Token.VAR || parent.getType() == Token.LP || parent.getType() == Token.CATCH);
-        shouldDeclareOnGlobalThis = scope.isGlobal() && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);
+    if (n.isName()) {
+        Preconditions.checkArgument(parent.isFunction() || parent.isVar() || parent.isParamList() || parent.isCatch());
+        shouldDeclareOnGlobalThis = scope.isGlobal() && (parent.isVar() || parent.isFunction());
     } else {
-        Preconditions.checkArgument(n.getType() == Token.GETPROP && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));
+        Preconditions.checkArgument(n.isGetProp() && (parent.isAssign() || parent.isExprResult()));
     }
     String variableName = n.getQualifiedName();
-    Preconditions.checkArgument(!variableName.isEmpty());
+    Preconditions.checkArgument(variableName != null && !variableName.isEmpty());
     // If n is a property, then we should really declare it in the
     // scope where the root object appears. This helps out people
     // who declare "global" names in an anonymous namespace.
-    Scope scopeToDeclareIn = scope;
+    Scope scopeToDeclareIn = scope.getClosestHoistScope();
     // don't try to declare in the global scope if there's
     // already a symbol there with this name.
     // declared in closest scope?
@@ -41,7 +41,8 @@
             FunctionType fnType = (FunctionType) type;
             if (fnType.isConstructor() || fnType.isInterface()) {
                 FunctionType superClassCtor = fnType.getSuperClassConstructor();
-                scopeToDeclareIn.declare(variableName + ".prototype", n, fnType.getPrototype(), compiler.getInput(sourceName),                 superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));
+                scopeToDeclareIn.declare(variableName + ".prototype", n, fnType.getPrototype(), compiler.getInput(sourceName), /* declared iff there's an explicit supertype */
+                    superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(JSTypeNative.OBJECT_TYPE)));
             }
         }
     }
