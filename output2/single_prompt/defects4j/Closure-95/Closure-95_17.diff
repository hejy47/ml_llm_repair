--- com/google/javascript/jscomp/TypedScopeCreator.java@defineSlot
+++ com/google/javascript/jscomp/TypedScopeCreator.java@defineSlot
@@ -1,22 +1,22 @@
 void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
     Preconditions.checkArgument(inferred || type != null);
-    // Only allow declarations of NAMEs and qualfied names.
+    // Only allow declarations of NAMEs and qualified names.
     boolean shouldDeclareOnGlobalThis = false;
     if (n.getType() == Token.NAME) {
-        Preconditions.checkArgument(parent.getType() == Token.FUNCTION || parent.getType() == Token.VAR || parent.getType() == Token.LP || parent.getType() == Token.CATCH);
+        Preconditions.checkArgument(parent.getType() == Token.FUNCTION || parent.getType() == Token.VAR || parent.getType() == Token.LET || parent.getType() == Token.CONST || parent.getType() == Token.CATCH);
         shouldDeclareOnGlobalThis = scope.isGlobal() && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);
     } else {
         Preconditions.checkArgument(n.getType() == Token.GETPROP && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));
     }
     String variableName = n.getQualifiedName();
-    Preconditions.checkArgument(!variableName.isEmpty());
+    Preconditions.checkArgument(variableName != null && !variableName.isEmpty());
     // If n is a property, then we should really declare it in the
     // scope where the root object appears. This helps out people
     // who declare "global" names in an anonymous namespace.
     Scope scopeToDeclareIn = scope;
-    // don't try to declare in the global scope if there's
+    // Don't try to declare in the global scope if there's
     // already a symbol there with this name.
-    // declared in closest scope?
+    // Declared in closest scope?
     if (scopeToDeclareIn.isDeclared(variableName, false)) {
         Var oldVar = scopeToDeclareIn.getVar(variableName);
         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);
@@ -25,7 +25,11 @@
             setDeferredType(n, type);
         }
         CompilerInput input = compiler.getInput(sourceName);
-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);
+        boolean isDeclared = scopeToDeclareIn.declare(variableName, n, type, input, inferred);
+        if (!isDeclared) {
+            // Happens when the variable was declared as extern in the externs.
+            return;
+        }
         if (shouldDeclareOnGlobalThis) {
             ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
             boolean isExtern = input.isExtern();
@@ -41,7 +45,8 @@
             FunctionType fnType = (FunctionType) type;
             if (fnType.isConstructor() || fnType.isInterface()) {
                 FunctionType superClassCtor = fnType.getSuperClassConstructor();
-                scopeToDeclareIn.declare(variableName + ".prototype", n, fnType.getPrototype(), compiler.getInput(sourceName),                 superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));
+                scopeToDeclareIn.declare(variableName + ".prototype", n, fnType.getPrototype(), compiler.getInput(sourceName), /* declared iff there's an explicit supertype */
+                        superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(JSTypeNative.OBJECT_TYPE)));
             }
         }
     }
