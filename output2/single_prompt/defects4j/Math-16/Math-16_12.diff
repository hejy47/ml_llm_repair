--- org/apache/commons/math3/util/FastMath.java@cosh
+++ org/apache/commons/math3/util/FastMath.java@cosh
@@ -1,23 +1,19 @@
 public static double cosh(double x) {
-    if (x != x) {
-        return x;
+    if (Double.isNaN(x)) {
+        return Double.NaN;
     }
     // cosh[z] = (exp(z) + exp(-z))/2
     // for numbers with magnitude 20 or so,
     // exp(-z) can be ignored in comparison with exp(z)
-    if (x > 20) {
+    if (Math.abs(x) > 20) {
         // Avoid overflow (MATH-905).
-        return 0.5 * exp(x);
-    }
-    if (x < -20) {
-        // Avoid overflow (MATH-905).
-        return 0.5 * exp(-x);
+        return (x > 0) ? 0.5 * Math.exp(x) : 0.5 * Math.exp(-x);
     }
     final double[] hiPrec = new double[2];
     if (x < 0.0) {
         x = -x;
     }
-    exp(x, 0.0, hiPrec);
+    Math.exp(x, 0.0, hiPrec);
     double ya = hiPrec[0] + hiPrec[1];
     double yb = -(ya - hiPrec[0] - hiPrec[1]);
     double temp = ya * HEX_40000000;
--- org/apache/commons/math3/util/FastMath.java@sinh
+++ org/apache/commons/math3/util/FastMath.java@sinh
@@ -1,30 +1,26 @@
 public static double sinh(double x) {
+    if (Double.isNaN(x)) {
+        return Double.NaN;
+    }
     boolean negate = false;
-    if (x != x) {
+    // sinh[z] = (exp(z) - exp(-z)) / 2
+    // for values of z larger than about 20,
+    // exp(-z) can be ignored in comparison with exp(z)
+    if (Math.abs(x) > 20) {
+        // Avoid overflow (MATH-905).
+        return (x > 0) ? 0.5 * Math.exp(x) : -0.5 * Math.exp(-x);
+    }
+    if (x == 0.0) {
         return x;
     }
-    // sinh[z] = (exp(z) - exp(-z) / 2
-    // for values of z larger than about 20,
-    // exp(-z) can be ignored in comparison with exp(z)
-    if (x > 20) {
-        // Avoid overflow (MATH-905).
-        return 0.5 * exp(x);
-    }
-    if (x < -20) {
-        // Avoid overflow (MATH-905).
-        return -0.5 * exp(-x);
-    }
-    if (x == 0) {
-        return x;
-    }
+    double result;
     if (x < 0.0) {
         x = -x;
         negate = true;
     }
-    double result;
     if (x > 0.25) {
-        double[] hiPrec = new double[2];
-        exp(x, 0.0, hiPrec);
+        final double[] hiPrec = new double[2];
+        Math.exp(x, 0.0, hiPrec);
         double ya = hiPrec[0] + hiPrec[1];
         double yb = -(ya - hiPrec[0] - hiPrec[1]);
         double temp = ya * HEX_40000000;
@@ -51,11 +47,11 @@
         result = ya + yb;
         result *= 0.5;
     } else {
-        double[] hiPrec = new double[2];
-        expm1(x, hiPrec);
+        final double[] hiPrec = new double[2];
+        Math.expm1(x, hiPrec);
         double ya = hiPrec[0] + hiPrec[1];
         double yb = -(ya - hiPrec[0] - hiPrec[1]);
-                double denom = 1.0 + ya;
+        double denom = 1.0 + ya;
         double denomr = 1.0 / denom;
         double denomb = -(denom - 1.0 - ya) + yb;
         double ratio = ya * denomr;
