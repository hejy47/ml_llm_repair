--- org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java@chooseInitialCenters
+++ org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java@chooseInitialCenters
@@ -1,18 +1,18 @@
 private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
-    final List<T> pointSet = new ArrayList<T>(points);
-    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
+    final List<T> pointSet = new ArrayList<>(points);
+    final List<Cluster<T>> resultSet = new ArrayList<>(k);
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
-    resultSet.add(new Cluster<T>(firstPoint));
+    resultSet.add(new Cluster<>(firstPoint));
     final double[] dx2 = new double[pointSet.size()];
+
     while (resultSet.size() < k) {
         // For each data point x, compute D(x), the distance between x and
         // the nearest center that has already been chosen.
         int sum = 0;
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
-            final Cluster<T> nearest = getNearestCluster(resultSet, p);
-            final double d = p.distanceFrom(nearest.getCenter());
+            final double d = distanceToNearestCluster(p, resultSet);
             sum += d * d;
             dx2[i] = sum;
         }
@@ -22,7 +22,7 @@
         for (int i = 0; i < dx2.length; i++) {
             if (dx2[i] >= r) {
                 final T p = pointSet.remove(i);
-                resultSet.add(new Cluster<T>(p));
+                resultSet.add(new Cluster<>(p));
                 break;
             }
         }
