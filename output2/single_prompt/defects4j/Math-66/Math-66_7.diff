--- org/apache/commons/math/optimization/univariate/BrentOptimizer.java@optimize
+++ org/apache/commons/math/optimization/univariate/BrentOptimizer.java@optimize
@@ -1,4 +1,4 @@
 public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {
     clearResult();
-    return localMin(getGoalType() == GoalType.MINIMIZE, f, goalType, min, startValue, max, getRelativeAccuracy(), getAbsoluteAccuracy());
+    return localMin(goalType == GoalType.MINIMIZE, f, goalType, min, startValue, max, getRelativeAccuracy(), getAbsoluteAccuracy());
 }
--- org/apache/commons/math/optimization/univariate/BrentOptimizer.java@localMin
+++ org/apache/commons/math/optimization/univariate/BrentOptimizer.java@localMin
@@ -18,115 +18,83 @@
     double w = x;
     double d = 0;
     double e = 0;
-    double fx = computeObjectiveValue(f, x);
+    double fx = f.value(x);
     if (goalType == GoalType.MAXIMIZE) {
         fx = -fx;
     }
     double fv = fx;
     double fw = fx;
     int count = 0;
-    while (count < maximalIterationCount) {
-        double m = 0.5 * (a + b);
-        final double tol1 = eps * Math.abs(x) + t;
-        final double tol2 = 2 * tol1;
-        // Check stopping criterion.
-        if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
-            double p = 0;
-            double q = 0;
-            double r = 0;
-            double u = 0;
-            if (Math.abs(e) > tol1) {
-                // Fit parabola.
-                r = (x - w) * (fx - fv);
-                q = (x - v) * (fx - fw);
-                p = (x - v) * q - (x - w) * r;
-                q = 2 * (q - r);
-                if (q > 0) {
-                    p = -p;
-                } else {
-                    q = -q;
-                }
-                r = e;
-                e = d;
-                if (p > q * (a - x) && p < q * (b - x) && Math.abs(p) < Math.abs(0.5 * q * r)) {
-                    // Parabolic interpolation step.
-                    d = p / q;
-                    u = x + d;
-                    // f must not be evaluated too close to a or b.
-                    if (u - a < tol2 || b - u < tol2) {
-                        if (x <= m) {
-                            d = tol1;
-                        } else {
-                            d = -tol1;
-                        }
-                    }
-                } else {
-                    // Golden section step.
-                    if (x < m) {
-                        e = b - x;
-                    } else {
-                        e = a - x;
-                    }
-                    d = GOLDEN_SECTION * e;
-                }
+    while (count < getMaximalIterationCount()) {
+        double m = (a + b) / 2.0;
+        double tol1 = eps + t * Math.abs(x);
+        double tol2 = 2.0 * tol1;
+        if (Math.abs(x - m) <= tol2 - 0.5 * (b - a)) {
+            setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);
+            return x;
+        }
+        if (Math.abs(e) > tol1) {
+            double r = (x - w) * (fx - fv);
+            double q = (x - v) * (fx - fw);
+            double p = (x - v) * q - (x - w) * r;
+            q = 2.0 * (q - r);
+            if (q > 0.0) {
+                p = -p;
+            }
+            q = Math.abs(q);
+            double etemp = e;
+            e = d;
+            if (Math.abs(p) >= Math.abs(0.5 * q * etemp) || p <= q * (a - x) || p >= q * (b - x)) {
+                d = CGOLD * (e = (x >= m ? a - x : b - x));
             } else {
-                // Golden section step.
-                if (x < m) {
-                    e = b - x;
-                } else {
-                    e = a - x;
-                }
-                d = GOLDEN_SECTION * e;
-            }
-            // Update by at least "tol1".
-            if (Math.abs(d) < tol1) {
-                if (d >= 0) {
-                    u = x + tol1;
-                } else {
-                    u = x - tol1;
-                }
-            } else {
-                u = x + d;
-            }
-            double fu = computeObjectiveValue(f, u);
-            if (goalType == GoalType.MAXIMIZE) {
-                fu = -fu;
-            }
-            // Update a, b, v, w and x.
-            if (fu <= fx) {
-                if (u < x) {
-                    b = x;
-                } else {
-                    a = x;
-                }
-                v = w;
-                fv = fw;
-                w = x;
-                fw = fx;
-                x = u;
-                fx = fu;
-            } else {
-                if (u < x) {
-                    a = u;
-                } else {
-                    b = u;
-                }
-                if (fu <= fw || w == x) {
-                    v = w;
-                    fv = fw;
-                    w = u;
-                    fw = fu;
-                } else if (fu <= fv || v == x || v == w) {
-                    v = u;
-                    fv = fu;
+                d = p / q;
+                double u = x + d;
+                if (u - a < tol2 || b - u < tol2) {
+                    d = x < m ? tol1 : -tol1;
                 }
             }
         } else {
-            // termination
-            setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);
-            return x;
+            d = CGOLD * (e = (x >= m ? a - x : b - x));
+        }
+        double u;
+        if (Math.abs(d) >= tol1) {
+            u = x + d;
+        } else {
+            u = x + (d > 0 ? tol1 : -tol1);
+        }
+        double fu = f.value(u);
+        if (goalType == GoalType.MAXIMIZE) {
+            fu = -fu;
+        }
+        if (fu <= fx) {
+            if (u >= x) {
+                a = x;
+            } else {
+                b = x;
+            }
+            v = w;
+            fv = fw;
+            w = x;
+            fw = fx;
+            x = u;
+            fx = fu;
+        } else {
+            if (u < x) {
+                a = u;
+            } else {
+                b = u;
+            }
+            if (fu <= fw || w == x) {
+                v = w;
+                fv = fw;
+                w = u;
+                fw = fu;
+            } else if (fu <= fv || v == x || v == w) {
+                v = u;
+                fv = fu;
+            }
         }
         ++count;
     }
-    throw new MaxIterationsExceededException(maximalIterationCount);
+    throw new MaxIterationsExceededException(getMaximalIterationCount());
 }
