--- org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java@prelim
+++ org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java@prelim
@@ -1,7 +1,6 @@
 // altmov
 // ----------------------------------------------------------------------------------------
 private void prelim(double[] lowerBound, double[] upperBound) {
-    // XXX
     printMethod();
     final int n = currentBest.getDimension();
     final int npt = numberOfInterpolationPoints;
@@ -29,134 +28,85 @@
             zMatrix.setEntry(k, j, ZERO);
         }
     }
+
+    int lastInterpolationPointIndex = -1;
     // Begin the initialization procedure. NF becomes one more than the number
     // of function values so far. The coordinates of the displacement of the
     // next initial interpolation point from XBASE are set in XPT(NF+1,.).
-    int ipt = 0;
-    int jpt = 0;
-    double fbeg = Double.NaN;
-    do {
-        final int nfm = getEvaluations();
-        final int nfx = nfm - n;
-        final int nfmm = nfm - 1;
-        final int nfxm = nfx - 1;
-        double stepa = 0;
-        double stepb = 0;
-        if (nfm <= 2 * n) {
-            if (nfm >= 1 && nfm <= n) {
-                stepa = initialTrustRegionRadius;
-                if (upperDifference.getEntry(nfmm) == ZERO) {
-                    stepa = -stepa;
-                    // XXX
-                    throw new PathIsExploredException();
+    for (int currentInterpolationPointIndex = 0; currentInterpolationPointIndex < npt; currentInterpolationPointIndex++) {
+        final int nfm = currentInterpolationPointIndex + 1;
+        if (nfm == 1) { // We generate X_1 first.
+            // The trust-region center is X_1.
+            trustRegionCenterInterpolationPointIndex = 0;
+            // Initial step is always the initial trust-region radius.
+            double initialStepSize = initialTrustRegionRadius;
+            // Find the index of the first non-fixed variable.
+            int freeVariableIndex = -1;
+            do {
+                freeVariableIndex++;
+            } while (freeVariableIndex < n && (lowerBound[freeVariableIndex] == upperBound[freeVariableIndex]));
+            if (freeVariableIndex == n) {
+                throw new MoreVariablesThanEquationsException();
+            }
+            // Calculate the initial point X_1.
+            interpolationPoints.setEntry(nfm, freeVariableIndex, initialStepSize);
+        } else { // We generate X_{nfm} for \geq 2.
+            // Update the last interpolation point to X_{nfm-1}.
+            for (int j = 0; j < n; j++) {
+                interpolationPoints.setEntry(lastInterpolationPointIndex, j, currentBest.getEntry(j));
+            }
+            double objectiveValueAtLastInterpolationPoint = computeObjectiveValue(currentBest.toArray());
+            fAtInterpolationPoints.setEntry(lastInterpolationPointIndex, isMinimize ? objectiveValueAtLastInterpolationPoint : -objectiveValueAtLastInterpolationPoint);
+            double fAtLastInterpolationPoint = fAtInterpolationPoints.getEntry(lastInterpolationPointIndex);
+            // If we have generated fewer points than n+1, we simply generate the
+            // next point according to the fixed pattern.
+            if (nfm <= n + 1) {
+                int j = nfm - 2;
+                int sign = (j % 2 == 0) ? 1 : -1;
+                j /= 2;
+                int currentInterpolationPointIndex0 = currentInterpolationPointIndex - n;
+                final int index1 = trustRegionCenterInterpolationPointIndex;
+                final double deltaX1 = interpolationPoints.getEntry(currentInterpolationPointIndex0, index1);
+                final double x1 = currentBest.getEntry(index1);
+                final double lowerBound1 = lowerBound[index1];
+                final double upperBound1 = upperBound[index1];
+                final double currentPointComponent = x1;
+                final double newPointComponent = Math.min(Math.max(lowerBound1, x1 + sign * deltaX1), upperBound1);
+                final double deltaXDiff = newPointComponent - currentPointComponent;
+                interpolationPoints.setEntry(nfm, index1, deltaXDiff);
+                for (int i = 0; i < j; i++) {
+                    final int indexI = indices[i];
+                    final double deltaXI = coordinateDifference.getEntry(i);
+                    final double xI = currentBest.getEntry(indexI);
+                    final double lowerBoundI = lowerBound[indexI];
+                    final double upperBoundI = upperBound[indexI];
+                    final double currentPointComponentI = xI;
+                    final double newPointComponentI = Math.min(Math.max(lowerBoundI, xI + sign * deltaXI), upperBoundI);
+                    final double deltaXDiffI = newPointComponentI - currentPointComponentI;
+                    interpolationPoints.setEntry(nfm, indexI, deltaXDiffI);
                 }
-                interpolationPoints.setEntry(nfm, nfmm, stepa);
-            } else if (nfm > n) {
-                stepa = interpolationPoints.getEntry(nfx, nfxm);
-                stepb = -initialTrustRegionRadius;
-                if (lowerDifference.getEntry(nfxm) == ZERO) {
-                    stepb = Math.min(TWO * initialTrustRegionRadius, upperDifference.getEntry(nfxm));
-                    // XXX
-                    throw new PathIsExploredException();
+            } else {
+                // We generate X_{nfm} using quadratic model.
+                trustRegionCenterInterpolationPointIndex = 0;
+                lastInterpolationPointIndex = currentInterpolationPointIndex - 1;
+                update(bMatrix, zMatrix, modelSecondDerivativesValues, interpolationPoints, fAtInterpolationPoints, trustRegionCenterInterpolationPointIndex, currentInterpolationPointIndex, interpolateEndpoints);
+                for (int j = 0; j < n; j++) {
+                    currentBest.setEntry(j, Math.min(Math.max(lowerBound[j], originShift.getEntry(j) + interpolationPoints.getEntry(currentInterpolationPointIndex, j)), upperBound[j]));
+                    if (interpolationPoints.getEntry(currentInterpolationPointIndex, j) == lowerDifference.getEntry(j)) {
+                        currentBest.setEntry(j, lowerBound[j]);
+                    }
+                    if (interpolationPoints.getEntry(currentInterpolationPointIndex, j) == upperDifference.getEntry(j)) {
+                        currentBest.setEntry(j, upperBound[j]);
+                    }
                 }
-                if (upperDifference.getEntry(nfxm) == ZERO) {
-                    stepb = Math.max(-TWO * initialTrustRegionRadius, lowerDifference.getEntry(nfxm));
-                    // XXX
-                    throw new PathIsExploredException();
+                final double objectiveValue = computeObjectiveValue(currentBest.toArray());
+                final double f = isMinimize ? objectiveValue : -objectiveValue;
+                fAtInterpolationPoints.setEntry(currentInterpolationPointIndex, f);
+                if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {
+                    trustRegionCenterInterpolationPointIndex = currentInterpolationPointIndex;
                 }
-                interpolationPoints.setEntry(nfm, nfxm, stepb);
-            }
-        } else {
-            final int tmp1 = (nfm - np) / n;
-            jpt = nfm - tmp1 * n - n;
-            ipt = jpt + tmp1;
-            if (ipt > n) {
-                final int tmp2 = jpt;
-                jpt = ipt - n;
-                ipt = tmp2;
-                // XXX
-                throw new PathIsExploredException();
-            }
-            final int iptMinus1 = ipt;
-            final int jptMinus1 = jpt;
-            interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));
-            interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));
-        }
-        // Calculate the next value of F. The least function value so far and
-        // its index are required.
-        for (int j = 0; j < n; j++) {
-            currentBest.setEntry(j, Math.min(Math.max(lowerBound[j], originShift.getEntry(j) + interpolationPoints.getEntry(nfm, j)), upperBound[j]));
-            if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {
-                currentBest.setEntry(j, lowerBound[j]);
-            }
-            if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {
-                currentBest.setEntry(j, upperBound[j]);
             }
         }
-        final double objectiveValue = computeObjectiveValue(currentBest.toArray());
-        final double f = isMinimize ? objectiveValue : -objectiveValue;
-        // nfm + 1
-        final int numEval = getEvaluations();
-        fAtInterpolationPoints.setEntry(nfm, f);
-        if (numEval == 1) {
-            fbeg = f;
-            trustRegionCenterInterpolationPointIndex = 0;
-        } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {
-            trustRegionCenterInterpolationPointIndex = nfm;
-        }
-        // Set the nonzero initial elements of BMAT and the quadratic model in the
-        // cases when NF is at most 2*N+1. If NF exceeds N+1, then the positions
-        // of the NF-th and (NF-N)-th interpolation points may be switched, in
-        // order that the function value at the first of them contributes to the
-        // off-diagonal second derivative terms of the initial quadratic model.
-        if (numEval <= 2 * n + 1) {
-            if (numEval >= 2 && numEval <= n + 1) {
-                gradientAtTrustRegionCenter.setEntry(nfmm, (f - fbeg) / stepa);
-                if (npt < numEval + n) {
-                    final double oneOverStepA = ONE / stepa;
-                    bMatrix.setEntry(0, nfmm, -oneOverStepA);
-                    bMatrix.setEntry(nfm, nfmm, oneOverStepA);
-                    bMatrix.setEntry(npt + nfmm, nfmm, -HALF * rhosq);
-                    // XXX
-                    throw new PathIsExploredException();
-                }
-            } else if (numEval >= n + 2) {
-                final int ih = nfx * (nfx + 1) / 2 - 1;
-                final double tmp = (f - fbeg) / stepb;
-                final double diff = stepb - stepa;
-                modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);
-                gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);
-                if (stepa * stepb < ZERO) {
-                    if (f < fAtInterpolationPoints.getEntry(nfm - n)) {
-                        fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));
-                        fAtInterpolationPoints.setEntry(nfm - n, f);
-                        if (trustRegionCenterInterpolationPointIndex == nfm) {
-                            trustRegionCenterInterpolationPointIndex = nfm - n;
-                        }
-                        interpolationPoints.setEntry(nfm - n, nfxm, stepb);
-                        interpolationPoints.setEntry(nfm, nfxm, stepa);
-                    }
-                }
-                bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));
-                bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));
-                bMatrix.setEntry(nfm - n, nfxm, -bMatrix.getEntry(0, nfxm) - bMatrix.getEntry(nfm, nfxm));
-                zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));
-                zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);
-                // zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) * recip); // XXX "testAckley" and "testDiffPow" fail.
-                zMatrix.setEntry(nfm - n, nfxm, -zMatrix.getEntry(0, nfxm) - zMatrix.getEntry(nfm, nfxm));
-            }
-            // Set the off-diagonal second derivatives of the Lagrange functions and
-            // the initial quadratic model.
-        } else {
-            zMatrix.setEntry(0, nfxm, recip);
-            zMatrix.setEntry(nfm, nfxm, recip);
-            zMatrix.setEntry(ipt, nfxm, -recip);
-            zMatrix.setEntry(jpt, nfxm, -recip);
-            final int ih = ipt * (ipt - 1) / 2 + jpt - 1;
-            final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);
-            modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);
-            // XXX
-            throw new PathIsExploredException();
-        }
-    } while (getEvaluations() < npt);
+        lastInterpolationPointIndex = currentInterpolationPointIndex;
+    }
 }
