--- com/google/javascript/jscomp/InlineVariables.java@canInline
+++ com/google/javascript/jscomp/InlineVariables.java@canInline
@@ -1,14 +1,14 @@
 private boolean canInline(Reference declaration, Reference initialization, Reference reference) {
-    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {
+    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference))  {
         return false;
     }
     // If the value is read more than once, skip it.
     // VAR declarations and EXPR_RESULT don't need the value, but other
     // ASSIGN expressions parents do.
-    if (declaration != initialization && !initialization.getGrandparent().isExprResult()) {
+    if (declaration != initialization && !initialization.getGrandparent().isFunction()) { // changed isExprResult() to isFunction() to correctly handle arrow functions
         return false;
     }
-    // Be very conservative and do no cross control structures or
+    // Be very conservative and do not cross control structures or
     // scope boundaries
     if (declaration.getBasicBlock() != initialization.getBasicBlock() || declaration.getBasicBlock() != reference.getBasicBlock()) {
         return false;
@@ -24,12 +24,12 @@
     // is ok.
     Node value = initialization.getAssignedValue();
     Preconditions.checkState(value != null);
-    if (value.isGetProp() && reference.getParent().isCall() && reference.getParent().getFirstChild() == reference.getNode()) {
+    if (value.isGetProp() && reference.getParent().isCall() && reference.getParent().getFirstChild() == reference) { // changed reference.getNode() to reference
         return false;
     }
     if (value.isFunction()) {
         Node callNode = reference.getParent();
-        if (reference.getParent().isCall()) {
+        if (callNode != null && callNode.isCall()) { // added null check for callNode
             CodingConvention convention = compiler.getCodingConvention();
             // Bug 2388531: Don't inline subclass definitions into class defining
             // calls as this confused class removing logic.
