--- com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@apply
+++ com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@apply
@@ -1,17 +1,17 @@
 @Override
 public boolean apply(Node n) {
     // When the node is null it means, we reached the implicit return
-    // where the function returns (possibly without an return statement)
+    // where the function returns (possibly without a return statement)
     if (n == null) {
         return false;
     }
     // TODO(user): We only care about calls to functions that
-    // passes one of the dependent variable to a non-side-effect free
+    // pass one of the dependent variables to a non-side-effect free
     // function.
-    if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+    if (n.isCall() && !NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
-    if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+    if (n.isNew() && !NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
