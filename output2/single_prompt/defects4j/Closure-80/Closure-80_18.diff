--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
@@ -4,7 +4,7 @@
             // A result that is aliased by a non-local name, is the effectively the
             // same as returning a non-local name, but this doesn't matter if the
             // value is immutable.
-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.test(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
@@ -20,30 +20,30 @@
                 return true;
             }
         case Token.THIS:
-            return locals.apply(value);
+            return locals.test(value);
         case Token.NAME:
-            return isImmutableValue(value) || locals.apply(value);
+            return isImmutableValue(value) || locals.test(value);
         case Token.GETELEM:
         case Token.GETPROP:
             // There is no information about the locality of object properties.
-            return locals.apply(value);
+            return locals.test(value);
         case Token.CALL:
-            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
+            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);
         case Token.NEW:
-            return newHasLocalResult(value) || locals.apply(value);
+            return newHasLocalResult(value) || locals.test(value);
         case Token.FUNCTION:
         case Token.REGEXP:
         case Token.ARRAYLIT:
         case Token.OBJECTLIT:
-            // Literals objects with non-literal children are allowed.
+            // Literal objects with non-literal children are allowed.
             return true;
         case Token.IN:
             // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
             return true;
         default:
-            // Other op force a local value:
-            //  x = '' + g (x is now an local string)
-            //  x -= g (x is now an local number)
+            // Other ops force a local value:
+            //  x = '' + g (x is now a local string)
+            //  x -= g (x is now a local number)
             if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                 return true;
             }
