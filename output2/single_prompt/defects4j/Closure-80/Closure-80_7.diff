--- com/google/javascript/jscomp/NodeUtil.java@isBooleanResultHelper
+++ com/google/javascript/jscomp/NodeUtil.java@isBooleanResultHelper
@@ -12,13 +12,14 @@
         case Token.GT:
         case Token.LE:
         case Token.GE:
-        // Queryies
+        // Queries
         case Token.IN:
         case Token.INSTANCEOF:
         // Inversion
         case Token.NOT:
             // delete operator returns a boolean.
             return true;
+        // Handle default case as well
         default:
             return false;
     }
--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
@@ -4,7 +4,7 @@
             // A result that is aliased by a non-local name, is the effectively the
             // same as returning a non-local name, but this doesn't matter if the
             // value is immutable.
-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
@@ -26,7 +26,7 @@
         case Token.GETELEM:
         case Token.GETPROP:
             // There is no information about the locality of object properties.
-            return locals.apply(value);
+            return locals.apply(value.getFirstChild());
         case Token.CALL:
             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
         case Token.NEW:
@@ -38,8 +38,8 @@
             // Literals objects with non-literal children are allowed.
             return true;
         case Token.IN:
-            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
-            return true;
+            // The IN operator is not a simple operator, so it should be handled here
+            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
         default:
             // Other op force a local value:
             //  x = '' + g (x is now an local string)
