--- com/google/javascript/jscomp/NodeUtil.java@isBooleanResultHelper
+++ com/google/javascript/jscomp/NodeUtil.java@isBooleanResultHelper
@@ -17,6 +17,8 @@
         case Token.INSTANCEOF:
         // Inversion
         case Token.NOT:
+        // TYPEOF operator returns a string.
+        case Token.TYPEOF:
             // delete operator returns a boolean.
             return true;
         default:
--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
@@ -20,7 +20,6 @@
                 return true;
             }
         case Token.THIS:
-            return locals.apply(value);
         case Token.NAME:
             return isImmutableValue(value) || locals.apply(value);
         case Token.GETELEM:
@@ -44,7 +43,7 @@
             // Other op force a local value:
             //  x = '' + g (x is now an local string)
             //  x -= g (x is now an local number)
-            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
+            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value) || isUnaryOp(value)) {
                 return true;
             }
             throw new IllegalStateException("Unexpected expression node" + value + "\n parent:" + value.getParent());
