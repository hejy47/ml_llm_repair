--- com/google/javascript/jscomp/CheckAccessControls.java@checkPropertyVisibility
+++ com/google/javascript/jscomp/CheckAccessControls.java@checkPropertyVisibility
@@ -1,10 +1,10 @@
 private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {
-    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
+    ObjectType objectType = dereference(getprop.getFirstChild().getJSType()).autobox();
     String propertyName = getprop.getLastChild().getString();
     if (objectType != null) {
         // Is this a normal property access, or are we trying to override
         // an existing property?
-        boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;
+        boolean isOverride = t.inGlobalScope() && parent.isAssign() && parent.getFirstChild() == getprop;
         // Find the lowest property defined on a class with visibility
         // information.
         if (isOverride) {
@@ -13,8 +13,11 @@
         JSDocInfo docInfo = null;
         for (; objectType != null; objectType = objectType.getImplicitPrototype()) {
             docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
-            if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {
-                break;
+            if (docInfo != null) {
+                Visibility visibility = docInfo.getVisibility();
+                if (visibility != Visibility.INHERITED) {
+                    break;
+                }
             }
         }
         if (objectType == null) {
@@ -28,20 +31,23 @@
             // Check an ASSIGN statement that's trying to override a property
             // on a superclass.
             JSDocInfo overridingInfo = parent.getJSDocInfo();
-            Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();
+            Visibility overridingVisibility = null;
+            if (overridingInfo != null) {
+                overridingVisibility = overridingInfo.getVisibility();
+            }
             // Check that (a) the property *can* be overridden, and
             // (b) that the visibility of the override is the same as the
             // visibility of the original property.
             if (visibility == Visibility.PRIVATE && !sameInput) {
                 compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));
-            } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {
+            } else if (overridingVisibility != null && overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {
                 compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));
             }
         } else {
             if (sameInput) {
                 // private access is always allowed in the same file.
                 return;
-            } else if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) {
+            } else if (visibility == Visibility.PRIVATE && (currentClass == null || !currentClass.equals(ownerType))) {
                 if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {
                     return;
                 }
