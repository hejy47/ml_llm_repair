--- com/google/javascript/jscomp/Compiler.java@initOptions
+++ com/google/javascript/jscomp/Compiler.java@initOptions
@@ -18,12 +18,12 @@
         // If DiagnosticGroups did not override the plain checkTypes
         // option, and checkTypes is enabled, then turn off the
         // parser type warnings.
-        options.setWarningLevel(DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);
+        options.setWarningLevel(DiagnosticGroups.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);
     }
     if (options.checkGlobalThisLevel.isOn()) {
         options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);
     }
-    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {
+    if (options.getLanguageIn().equals(LanguageMode.ECMASCRIPT5_STRICT)) {
         options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR);
     }
     // Initialize the warnings guard.
@@ -36,7 +36,7 @@
     // checks the externs file for validity. If you don't want to warn
     // about missing variable declarations, we shut that specific
     // error off.
-    if (!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
+    if (!options.checkSymbols() && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
         composedGuards.addGuard(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
     this.warningsGuard = composedGuards;
