--- com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java@tryMinimizeIf
+++ com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java@tryMinimizeIf
@@ -1,8 +1,8 @@
 private Node tryMinimizeIf(Node n) {
     Node parent = n.getParent();
     Node cond = n.getFirstChild();
-        if (NodeUtil.isLiteralValue(cond, true)) {
-        return n;
+    if (NodeUtil.isLiteralValue(cond, true)) {
+        return cond.cloneNode();
     }
     Node thenBranch = cond.getNext();
     Node elseBranch = thenBranch.getNext();
@@ -60,10 +60,10 @@
                     }
                 }
             }
+            return n.cloneNode();
         }
-        return n;
     }
-        tryRemoveRepeatedStatements(n);
+    tryRemoveRepeatedStatements(n);
     // if(!x)foo();else bar(); -> if(x)bar();else foo();
     // An additional set of curly braces isn't worth it.
     if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
@@ -77,16 +77,11 @@
     if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
         Node thenExpr = getBlockReturnExpression(thenBranch);
         Node elseExpr = getBlockReturnExpression(elseBranch);
-        n.removeChild(cond);
-        thenExpr.detachFromParent();
-        elseExpr.detachFromParent();
-        // note - we ignore any cases with "return;", technically this
-        // can be converted to "return undefined;" or some variant, but
-        // that does not help code size.
-        Node returnNode = IR.returnNode(IR.hook(cond, thenExpr, elseExpr).srcref(n));
-        parent.replaceChild(n, returnNode);
+        Node conditionExpression = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+        Node returnStatement = new Node(Token.RETURN, conditionExpression).srcref(n);
+        parent.replaceChild(n, returnStatement);
         reportCodeChange();
-        return returnNode;
+        return returnStatement;
     }
     boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
     boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
@@ -102,13 +97,11 @@
                 // NOTE - there are some circumstances where we can
                 // proceed even if there are side effects...
                 !mayEffectMutableState(lhs)) {
-                    n.removeChild(cond);
                     Node assignName = thenOp.removeFirstChild();
                     Node thenExpr = thenOp.removeFirstChild();
-                    Node elseExpr = elseOp.getLastChild();
-                    elseOp.removeChild(elseExpr);
-                    Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
-                    Node assign = new Node(thenOp.getType(), assignName, hookNode).srcref(thenOp);
+                    Node elseExpr = elseOp.getLastChild().detachFromParent();
+                    Node conditionExpression = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+                    Node assign = new Node(thenOp.getType(), assignName, conditionExpression).srcref(thenOp);
                     Node expr = NodeUtil.newExpr(assign);
                     parent.replaceChild(n, expr);
                     reportCodeChange();
@@ -117,10 +110,10 @@
             }
         }
         // if(x)foo();else bar(); -> x?foo():bar()
-        n.removeChild(cond);
-        thenOp.detachFromParent();
-        elseOp.detachFromParent();
-        Node expr = IR.exprResult(IR.hook(cond, thenOp, elseOp).srcref(n));
+        Node thenExpr = getBlockExpression(thenBranch).removeFirstChild();
+        Node elseExpr = getBlockExpression(elseBranch).removeFirstChild();
+        Node conditionExpression = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+        Node expr = NodeUtil.newExpr(conditionExpression);
         parent.replaceChild(n, expr);
         reportCodeChange();
         return expr;
@@ -136,10 +129,9 @@
         if (name1.hasChildren() && maybeName2.isName() && name1.getString().equals(maybeName2.getString())) {
             Node thenExpr = name1.removeChildren();
             Node elseExpr = elseAssign.getLastChild().detachFromParent();
-            cond.detachFromParent();
-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+            Node conditionExpression = IR.hook(cond, thenExpr, elseExpr).srcref(n);
             var.detachFromParent();
-            name1.addChildrenToBack(hookNode);
+            name1.addChildrenToBack(conditionExpression);
             parent.replaceChild(n, var);
             reportCodeChange();
             return var;
@@ -153,14 +145,13 @@
         if (name2.hasChildren() && maybeName1.isName() && maybeName1.getString().equals(name2.getString())) {
             Node thenExpr = thenAssign.getLastChild().detachFromParent();
             Node elseExpr = name2.removeChildren();
-            cond.detachFromParent();
-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+            Node conditionExpression = IR.hook(cond, thenExpr, elseExpr).srcref(n);
             var.detachFromParent();
-            name2.addChildrenToBack(hookNode);
+            name2.addChildrenToBack(conditionExpression);
             parent.replaceChild(n, var);
             reportCodeChange();
             return var;
         }
     }
-    return n;
+    return n.cloneNode();
 }
