--- com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java@tryMinimizeIf
+++ com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java@tryMinimizeIf
@@ -1,7 +1,7 @@
 private Node tryMinimizeIf(Node n) {
     Node parent = n.getParent();
     Node cond = n.getFirstChild();
-        if (NodeUtil.isLiteralValue(cond, true)) {
+    if (NodeUtil.isLiteralValue(cond, true)) {
         return n;
     }
     Node thenBranch = cond.getNext();
@@ -60,107 +60,108 @@
                     }
                 }
             }
+            return n;
+        }
+    } else {
+        tryRemoveRepeatedStatements(n);
+        // if(!x)foo();else bar(); -> if(x)bar();else foo();
+        // An additional set of curly braces isn't worth it.
+        if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
+            n.replaceChild(cond, cond.removeFirstChild());
+            n.removeChild(thenBranch);
+            n.addChildToBack(thenBranch);
+            reportCodeChange();
+            return n;
+        }
+        // if(x)return 1;else return 2; -> return x?1:2;
+        if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
+            Node thenExpr = getBlockReturnExpression(thenBranch);
+            Node elseExpr = getBlockReturnExpression(elseBranch);
+            n.removeChild(cond);
+            thenExpr.detachFromParent();
+            elseExpr.detachFromParent();
+            // note - we ignore any cases with "return;", technically this
+            // can be converted to "return undefined;" or some variant, but
+            // that does not help code size.
+            Node returnNode = IR.returnNode(IR.hook(cond, thenExpr, elseExpr).srcref(n));
+            parent.replaceChild(n, returnNode);
+            reportCodeChange();
+            return returnNode;
+        }
+        boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
+        boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
+        if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
+            Node thenOp = getBlockExpression(thenBranch).getFirstChild();
+            Node elseOp = getBlockExpression(elseBranch).getFirstChild();
+            if (thenOp.getType() == elseOp.getType()) {
+                // if(x)a=1;else a=2; -> a=x?1:2;
+                if (NodeUtil.isAssignmentOp(thenOp)) {
+                    Node lhs = thenOp.getFirstChild();
+                    if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) && // if LHS has side effects, don't proceed [since the optimization
+                        // evaluates LHS before cond]
+                        // NOTE - there are some circumstances where we can
+                        // proceed even if there are side effects...
+                        !mayEffectMutableState(lhs)) {
+                        n.removeChild(cond);
+                        Node assignName = thenOp.removeFirstChild();
+                        Node thenExpr = thenOp.removeFirstChild();
+                        Node elseExpr = elseOp.getLastChild();
+                        elseOp.removeChild(elseExpr);
+                        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+                        Node assign = new Node(thenOp.getType(), assignName, hookNode).srcref(thenOp);
+                        Node expr = NodeUtil.newExpr(assign);
+                        parent.replaceChild(n, expr);
+                        reportCodeChange();
+                        return expr;
+                    }
+                }
+            }
+            // if(x)foo();else bar(); -> x?foo():bar()
+            n.removeChild(cond);
+            thenOp.detachFromParent();
+            elseOp.detachFromParent();
+            Node expr = IR.exprResult(IR.hook(cond, thenOp, elseOp).srcref(n));
+            parent.replaceChild(n, expr);
+            reportCodeChange();
+            return expr;
+        }
+        boolean thenBranchIsVar = isVarBlock(thenBranch);
+        boolean elseBranchIsVar = isVarBlock(elseBranch);
+        // if(x)var y=1;else y=2  ->  var y=x?1:2
+        if (thenBranchIsVar && elseBranchIsExpressionBlock && getBlockExpression(elseBranch).getFirstChild().isAssign()) {
+            Node var = getBlockVar(thenBranch);
+            Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
+            Node name1 = var.getFirstChild();
+            Node maybeName2 = elseAssign.getFirstChild();
+            if (name1.hasChildren() && maybeName2.isName() && name1.getString().equals(maybeName2.getString())) {
+                Node thenExpr = name1.removeChildren();
+                Node elseExpr = elseAssign.getLastChild().detachFromParent();
+                cond.detachFromParent();
+                Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+                var.detachFromParent();
+                name1.addChildrenToBack(hookNode);
+                parent.replaceChild(n, var);
+                reportCodeChange();
+                return var;
+            }
+            // if(x)y=1;else var y=2  ->  var y=x?1:2
+        } else if (elseBranchIsVar && thenBranchIsExpressionBlock && getBlockExpression(thenBranch).getFirstChild().isAssign()) {
+            Node var = getBlockVar(elseBranch);
+            Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
+            Node maybeName1 = thenAssign.getFirstChild();
+            Node name2 = var.getFirstChild();
+            if (name2.hasChildren() && maybeName1.isName() && maybeName1.getString().equals(name2.getString())) {
+                Node thenExpr = thenAssign.getLastChild().detachFromParent();
+                Node elseExpr = name2.removeChildren();
+                cond.detachFromParent();
+                Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+                var.detachFromParent();
+                name2.addChildrenToBack(hookNode);
+                parent.replaceChild(n, var);
+                reportCodeChange();
+                return var;
+            }
         }
         return n;
     }
-        tryRemoveRepeatedStatements(n);
-    // if(!x)foo();else bar(); -> if(x)bar();else foo();
-    // An additional set of curly braces isn't worth it.
-    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
-        n.replaceChild(cond, cond.removeFirstChild());
-        n.removeChild(thenBranch);
-        n.addChildToBack(thenBranch);
-        reportCodeChange();
-        return n;
-    }
-    // if(x)return 1;else return 2; -> return x?1:2;
-    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
-        Node thenExpr = getBlockReturnExpression(thenBranch);
-        Node elseExpr = getBlockReturnExpression(elseBranch);
-        n.removeChild(cond);
-        thenExpr.detachFromParent();
-        elseExpr.detachFromParent();
-        // note - we ignore any cases with "return;", technically this
-        // can be converted to "return undefined;" or some variant, but
-        // that does not help code size.
-        Node returnNode = IR.returnNode(IR.hook(cond, thenExpr, elseExpr).srcref(n));
-        parent.replaceChild(n, returnNode);
-        reportCodeChange();
-        return returnNode;
-    }
-    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
-    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
-    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
-        Node thenOp = getBlockExpression(thenBranch).getFirstChild();
-        Node elseOp = getBlockExpression(elseBranch).getFirstChild();
-        if (thenOp.getType() == elseOp.getType()) {
-            // if(x)a=1;else a=2; -> a=x?1:2;
-            if (NodeUtil.isAssignmentOp(thenOp)) {
-                Node lhs = thenOp.getFirstChild();
-                if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) && // if LHS has side effects, don't proceed [since the optimization
-                // evaluates LHS before cond]
-                // NOTE - there are some circumstances where we can
-                // proceed even if there are side effects...
-                !mayEffectMutableState(lhs)) {
-                    n.removeChild(cond);
-                    Node assignName = thenOp.removeFirstChild();
-                    Node thenExpr = thenOp.removeFirstChild();
-                    Node elseExpr = elseOp.getLastChild();
-                    elseOp.removeChild(elseExpr);
-                    Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
-                    Node assign = new Node(thenOp.getType(), assignName, hookNode).srcref(thenOp);
-                    Node expr = NodeUtil.newExpr(assign);
-                    parent.replaceChild(n, expr);
-                    reportCodeChange();
-                    return expr;
-                }
-            }
-        }
-        // if(x)foo();else bar(); -> x?foo():bar()
-        n.removeChild(cond);
-        thenOp.detachFromParent();
-        elseOp.detachFromParent();
-        Node expr = IR.exprResult(IR.hook(cond, thenOp, elseOp).srcref(n));
-        parent.replaceChild(n, expr);
-        reportCodeChange();
-        return expr;
-    }
-    boolean thenBranchIsVar = isVarBlock(thenBranch);
-    boolean elseBranchIsVar = isVarBlock(elseBranch);
-    // if(x)var y=1;else y=2  ->  var y=x?1:2
-    if (thenBranchIsVar && elseBranchIsExpressionBlock && getBlockExpression(elseBranch).getFirstChild().isAssign()) {
-        Node var = getBlockVar(thenBranch);
-        Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
-        Node name1 = var.getFirstChild();
-        Node maybeName2 = elseAssign.getFirstChild();
-        if (name1.hasChildren() && maybeName2.isName() && name1.getString().equals(maybeName2.getString())) {
-            Node thenExpr = name1.removeChildren();
-            Node elseExpr = elseAssign.getLastChild().detachFromParent();
-            cond.detachFromParent();
-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
-            var.detachFromParent();
-            name1.addChildrenToBack(hookNode);
-            parent.replaceChild(n, var);
-            reportCodeChange();
-            return var;
-        }
-        // if(x)y=1;else var y=2  ->  var y=x?1:2
-    } else if (elseBranchIsVar && thenBranchIsExpressionBlock && getBlockExpression(thenBranch).getFirstChild().isAssign()) {
-        Node var = getBlockVar(elseBranch);
-        Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
-        Node maybeName1 = thenAssign.getFirstChild();
-        Node name2 = var.getFirstChild();
-        if (name2.hasChildren() && maybeName1.isName() && maybeName1.getString().equals(name2.getString())) {
-            Node thenExpr = thenAssign.getLastChild().detachFromParent();
-            Node elseExpr = name2.removeChildren();
-            cond.detachFromParent();
-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
-            var.detachFromParent();
-            name2.addChildrenToBack(hookNode);
-            parent.replaceChild(n, var);
-            reportCodeChange();
-            return var;
-        }
-    }
-    return n;
 }
