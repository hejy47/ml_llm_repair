--- com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
+++ com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
@@ -1,5 +1,4 @@
 private boolean isInlinableObject(List<Reference> refs) {
-    boolean ret = false;
     for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
@@ -13,61 +12,73 @@
             if (gramps.isCall() && gramps.getFirstChild() == parent) {
                 return false;
             }
-            // NOTE(nicksantos): This pass's object-splitting algorithm has
-            // a blind spot. It assumes that if a property isn't defined on an
-            // object, then the value is undefined. This is not true, because
-            // Object.prototype can have arbitrary properties on it.
-            //
-            // We short-circuit this problem by bailing out if we see a reference
-            // to a property that isn't defined on the object literal. This
-            // isn't a perfect algorithm, but it should catch most cases.
-            continue;
-        }
-        // Only rewrite VAR declarations or simple assignment statements
-        if (!isVarOrAssignExprLhs(name)) {
-            return false;
-        }
-        Node val = ref.getAssignedValue();
-        if (val == null) {
-            // A var with no assignment.
-            continue;
-        }
-        // We're looking for object literal assignments only.
-        if (!val.isObjectLit()) {
-            return false;
-        }
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
-            if (child.isGetterDef() || child.isSetterDef()) {
-                // ES5 get/set not supported.
+            // To fix the blind spot problem, confirm that names in property
+            // accesses are only literal properties.
+            Node obj = parent.getFirstChild();
+            Node prop = obj.getNext();
+            if (obj.isQualifiedName()) {
+                // Reject all qualified names.
+                return false;
+            } else if (obj.isThis()) {
+                // Allow 'this.prop', since it can't be Object.prototype.
+            } else if (obj.isName()) {
+                if (!isDefinitelyObject(obj)) {
+                    return false;
+                }
+            } else {
+                throw new RuntimeException("Unexpected node type");
+            }
+            if (prop.isString()) {
+                String pname = prop.getString();
+                if (NodeUtil.getObjectLiteralKeyName(pname) == null) {
+                    return false;
+                }
+            } else {
+                Preconditions.checkState(prop.isNumber());
+            }
+        } else {
+            // Only rewrite VAR declarations or simple assignment statements
+            if (!isVarOrAssignExprLhs(name)) {
                 return false;
             }
-            Node childVal = child.getFirstChild();
-            // Check if childVal is the parent of any of the passed in
-            // references, as that is how self-referential assignments
-            // will happen.
-            for (Reference t : refs) {
-                Node refNode = t.getParent();
-                while (!NodeUtil.isStatementBlock(refNode)) {
-                    if (refNode == childVal) {
-                        // There's a self-referential assignment
-                        return false;
+            Node val = ref.getAssignedValue();
+            if (val == null) {
+                // A var with no assignment.
+                continue;
+            }
+            // We're looking for object literal assignments only.
+            if (!val.isObjectLit()) {
+                return false;
+            }
+            // Make sure that the value is not self-refential. IOW,
+            // disallow things like x = {b: x.a}.
+            //
+            // TODO: Only exclude unorderable self-referential
+            // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
+            // but x = {a: 1, b: x.a} is.
+            //
+            // Also, ES5 getters/setters aren't handled by this pass.
+            for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+                if (child.isGetterDef() || child.isSetterDef()) {
+                    // ES5 get/set not supported.
+                    return false;
+                }
+                Node childVal = child.getFirstChild();
+                // Check if childVal is the parent of any of the passed in
+                // references, as that is how self-referential assignments
+                // will happen.
+                for (Reference t : refs) {
+                    Node refNode = t.getParent();
+                    while (!NodeUtil.isStatementBlock(refNode)) {
+                        if (refNode == childVal) {
+                            // There's a self-referential assignment
+                            return false;
+                        }
+                        refNode = refNode.getParent();
                     }
-                    refNode = refNode.getParent();
                 }
             }
         }
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
     }
-    return ret;
+    return true;
 }
