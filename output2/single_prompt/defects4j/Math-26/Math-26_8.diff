--- org/apache/commons/math3/fraction/Fraction.java@Fraction
+++ org/apache/commons/math3/fraction/Fraction.java@Fraction
@@ -24,17 +24,19 @@
         ++n;
         double r1 = 1.0 / (r0 - a0);
         long a1 = (long) FastMath.floor(r1);
+        long ptemp = p2;
+        long qtemp = q2;
         p2 = (a1 * p1) + p0;
         q2 = (a1 * q1) + q0;
+        p0 = p1;
+        p1 = ptemp;
+        q0 = q1;
+        q1 = qtemp;
         if ((p2 > overflow) || (q2 > overflow)) {
             throw new FractionConversionException(value, p2, q2);
         }
         double convergent = (double) p2 / (double) q2;
         if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
-            p0 = p1;
-            p1 = p2;
-            q0 = q1;
-            q1 = q2;
             a0 = a1;
             r0 = r1;
         } else {
@@ -43,12 +45,8 @@
     } while (!stop);
     if (n >= maxIterations) {
         throw new FractionConversionException(value, maxIterations);
-    }
-    if (q2 < maxDenominator) {
+    } else {
         this.numerator = (int) p2;
         this.denominator = (int) q2;
-    } else {
-        this.numerator = (int) p1;
-        this.denominator = (int) q1;
     }
 }
