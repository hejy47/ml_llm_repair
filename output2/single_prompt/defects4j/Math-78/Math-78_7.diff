--- org/apache/commons/math/ode/events/EventState.java@evaluateStep
+++ org/apache/commons/math/ode/events/EventState.java@evaluateStep
@@ -1,19 +1,18 @@
 public boolean evaluateStep(final StepInterpolator interpolator) throws DerivativeException, EventException, ConvergenceException {
     try {
-        forward = interpolator.isForward();
         final double t1 = interpolator.getCurrentTime();
         final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
         final double h = (t1 - t0) / n;
         double ta = t0;
         double ga = g0;
-        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+        double tb = t0 + (convergence * Math.signum(h));
         for (int i = 0; i < n; ++i) {
             // evaluate handler value at the end of the substep
             tb += h;
             interpolator.setInterpolatedTime(tb);
             final double gb = handler.g(tb, interpolator.getInterpolatedState());
             // check events occurrence
-            if (g0Positive ^ (gb >= 0)) {
+            if (Math.signum(g0) != Math.signum(gb)) {
                 // there is a sign change: an event is expected during this step
                 // this is a corner case:
                 // - there was an event near ta,
@@ -25,23 +24,17 @@
                 // this should never happen
                 // variation direction, with respect to the integration direction
                 increasing = gb >= ga;
-                final UnivariateRealFunction f = new UnivariateRealFunction() {
-
-                    public double value(final double t) throws FunctionEvaluationException {
-                        try {
-                            interpolator.setInterpolatedTime(t);
-                            return handler.g(t, interpolator.getInterpolatedState());
-                        } catch (DerivativeException e) {
-                            throw new FunctionEvaluationException(e, t);
-                        } catch (EventException e) {
-                            throw new FunctionEvaluationException(e, t);
-                        }
-                    }
-                };
                 final BrentSolver solver = new BrentSolver();
                 solver.setAbsoluteAccuracy(convergence);
                 solver.setMaximalIterationCount(maxIterationCount);
-                final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+                final double root = solver.solve((double t) -> {
+                    try {
+                        interpolator.setInterpolatedTime(t);
+                        return handler.g(t, interpolator.getInterpolatedState());
+                    } catch (DerivativeException | EventException e) {
+                        throw new RuntimeException(e);
+                    }
+                }, ta, tb);
                 if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
                     // we have either found nothing or found (again ?) a past event, we simply ignore it
                     ta = tb;
@@ -70,7 +63,7 @@
         pendingEvent = false;
         pendingEventTime = Double.NaN;
         return false;
-    } catch (FunctionEvaluationException e) {
+    } catch (RuntimeException e) {
         final Throwable cause = e.getCause();
         if ((cause != null) && (cause instanceof DerivativeException)) {
             throw (DerivativeException) cause;
