--- com/google/javascript/jscomp/CheckSideEffects.java@visit
+++ com/google/javascript/jscomp/CheckSideEffects.java@visit
@@ -19,22 +19,24 @@
             if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
                 return;
             }
-        }
-        // This no-op statement was there so that JSDoc information could
-        // be attached to the name. This check should not complain about it.
-        if (n == parent.getLastChild()) {
-            for (Node an : parent.getAncestors()) {
-                int ancestorType = an.getType();
-                if (ancestorType == Token.COMMA)
-                    continue;
-                if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-                    return;
-                else
-                    break;
+            // This no-op statement was there so that JSDoc information could
+            // be attached to the name. This check should not complain about it.
+            if (n == parent.getLastChild()) {
+                for (Node an : parent.getAncestors()) {
+                    int ancestorType = an.getType();
+                    if (ancestorType == Token.COMMA)
+                        continue;
+                    if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+                        return;
+                    else
+                        break;
+                }
             }
         }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
         if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {
+            // Fix for skipping over 'in' and 'of' in for loops
+            return;
         } else {
             return;
         }
@@ -42,9 +44,10 @@
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
-        if (n.isQualifiedName() && n.getJSDocInfo() != null) {
+        // Fixes for ignoring the lack of side effects in specific cases
+        if (n.isQualifiedName() && (n.getJSDocInfo() != null || n.getParent().getType() == Token.ASSIGN)) {
             return;
-        } else if (n.isExprResult()) {
+        } else if (n.isExprResult() || (n.getParent().getType() == Token.FOR && n == n.getParent().getLastChild().getFirstChild())) {
             return;
         }
         String msg = "This code lacks side-effects. Is there a bug?";
