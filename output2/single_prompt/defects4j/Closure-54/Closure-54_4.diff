--- com/google/javascript/jscomp/TypedScopeCreator.java@maybeDeclareQualifiedName
+++ com/google/javascript/jscomp/TypedScopeCreator.java@maybeDeclareQualifiedName
@@ -28,7 +28,7 @@
     // So if F does not have an explicitly declared super type,
     // allow F.prototype to be redefined arbitrarily.
     if ("prototype".equals(propName)) {
-        Var qVar = scope.getVar(qName);
+        Var qVar = t.getScope().getVar(qName);
         if (qVar != null) {
             // If the programmer has declared that F inherits from Super,
             // and they assign F.prototype to an object literal,
@@ -43,8 +43,8 @@
                 // what props are going to be on that prototype.
                 return;
             }
-            if (qVar.getScope() == scope) {
-                scope.undeclare(qVar);
+            if (qVar.getScope() == t.getScope()) {
+                t.getScope().undeclare(qVar);
             }
         }
     }
@@ -61,7 +61,7 @@
     }
     if (inferred) {
         // Determining declaration for #2
-        inferred = !(rhsValue != null && rhsValue.getType() == Token.FUNCTION && (info != null || !scope.isDeclared(qName, false)));
+        inferred = !(rhsValue != null && rhsValue.getType() == Token.FUNCTION && (info != null || !t.getScope().isDeclared(qName, false)));
     }
     if (!inferred) {
         ObjectType ownerType = getObjectSlot(ownerName);
@@ -76,7 +76,7 @@
         }
         // If the property is already declared, the error will be
         // caught when we try to declare it in the current scope.
-        defineSlot(n, parent, valueType, inferred);
+        t.getScope().declare(qName, n, valueType, inferred);
     } else if (rhsValue != null && rhsValue.getType() == Token.TRUE) {
         // We declare these for delegate proxy method properties.
         FunctionType ownerType = JSType.toMaybeFunctionType(getObjectSlot(ownerName));
@@ -85,7 +85,7 @@
             String delegateName = codingConvention.getDelegateSuperclassName();
             JSType delegateType = delegateName == null ? null : typeRegistry.getType(delegateName);
             if (delegateType != null && ownerTypeOfThis.isSubtype(delegateType)) {
-                defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);
+                t.getScope().declare(qName, n, getNativeType(BOOLEAN_TYPE), true);
             }
         }
     }
--- com/google/javascript/rhino/jstype/FunctionType.java@setPrototypeBasedOn
+++ com/google/javascript/rhino/jstype/FunctionType.java@setPrototypeBasedOn
@@ -19,5 +19,6 @@
     if (baseType.hasReferenceName() || baseType.isUnknownType() || isNativeObjectType() || baseType.isFunctionPrototypeType() || !(baseType instanceof PrototypeObjectType)) {
         baseType = new PrototypeObjectType(registry, this.getReferenceName() + ".prototype", baseType);
     }
+    setInstanceType(new PrototypeObjectType(registry, this.getReferenceName() + ".prototype", baseType));
     setPrototype((PrototypeObjectType) baseType);
 }
--- com/google/javascript/rhino/jstype/FunctionType.java@setPrototype
+++ com/google/javascript/rhino/jstype/FunctionType.java@setPrototype
@@ -6,6 +6,7 @@
     if (isConstructor() && prototype == getInstanceType()) {
         return false;
     }
+    setInstanceType((PrototypeObjectType) prototype);
     boolean replacedPrototype = prototype != null;
     this.prototype = prototype;
     this.prototypeSlot = new SimpleSlot("prototype", prototype, true);
