--- org/jfree/chart/axis/Axis.java@drawLabel
+++ org/jfree/chart/axis/Axis.java@drawLabel
@@ -1,5 +1,4 @@
 protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {
-    // it is unlikely that 'state' will be null, but check anyway...
     if (state == null) {
         throw new IllegalArgumentException("Null 'state' argument.");
     }
@@ -12,52 +11,38 @@
     g2.setPaint(getLabelPaint());
     FontMetrics fm = g2.getFontMetrics();
     Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);
+
     Shape hotspot = null;
+    double labelx, labely;
+    float w = (float) labelBounds.getWidth();
+    float h = (float) labelBounds.getHeight();
+
     if (edge == RectangleEdge.TOP) {
-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());
-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-        labelBounds = rotatedLabelBounds.getBounds2D();
-        float w = (float) labelBounds.getWidth();
-        float h = (float) labelBounds.getHeight();
-        float labelx = (float) dataArea.getCenterX();
-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);
-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);
-        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());
+        labelx = (float) dataArea.getCenterX();
+        labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);
+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);
+        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
+        state.cursorUp(insets.getTop() + hotspot.getHeight() + insets.getBottom());
     } else if (edge == RectangleEdge.BOTTOM) {
-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());
-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-        labelBounds = rotatedLabelBounds.getBounds2D();
-        float w = (float) labelBounds.getWidth();
-        float h = (float) labelBounds.getHeight();
-        float labelx = (float) dataArea.getCenterX();
-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);
-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);
-        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());
+        labelx = (float) dataArea.getCenterX();
+        labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);
+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);
+        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);
+        state.cursorDown(insets.getTop() + hotspot.getHeight() + insets.getBottom());
     } else if (edge == RectangleEdge.LEFT) {
-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());
-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-        labelBounds = rotatedLabelBounds.getBounds2D();
-        float w = (float) labelBounds.getWidth();
-        float h = (float) labelBounds.getHeight();
-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);
-        float labely = (float) dataArea.getCenterY();
-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);
-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);
-        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());
+        labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);
+        labely = (float) dataArea.getCenterY();
+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);
+        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);
+        state.cursorLeft(insets.getLeft() + hotspot.getWidth() + insets.getRight());
     } else if (edge == RectangleEdge.RIGHT) {
-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());
-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
-        labelBounds = rotatedLabelBounds.getBounds2D();
-        float w = (float) labelBounds.getWidth();
-        float h = (float) labelBounds.getHeight();
-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);
-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);
-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);
-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);
-        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());
+        labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);
+        labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);
+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);
+        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);
+        state.cursorRight(insets.getLeft() + hotspot.getWidth() + insets.getRight());
     }
+
     if (plotState != null && hotspot != null) {
         ChartRenderingInfo owner = plotState.getOwner();
         EntityCollection entities = owner.getEntityCollection();
