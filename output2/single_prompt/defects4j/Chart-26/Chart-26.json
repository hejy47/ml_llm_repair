[{"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n        double labely = dataArea.getY() + dataArea.getHeight() / 2.0;\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -17,45 +17,45 @@\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n+        double labely = dataArea.getCenterY();\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n+        double labely = dataArea.getY() + dataArea.getHeight() / 2.0;\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     }\n     if (plotState != null && hotspot != null) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, getLabelToolTip(), getLabelURL()));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -17,52 +17,52 @@\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n+        double labely = dataArea.getCenterY();\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n+        double labely = dataArea.getCenterY();\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     }\n     if (plotState != null && hotspot != null) {\n         ChartRenderingInfo owner = plotState.getOwner();\n         EntityCollection entities = owner.getEntityCollection();\n         if (entities != null) {\n-            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n+            entities.add(new AxisLabelEntity(this, hotspot, getLabelToolTip(), getLabelURL()));\n         }\n     }\n     return state;\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n        \n        /* Fixed line of code: */\n        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        \n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n        \n        /* Fixed line of code: */\n        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        \n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n        double labely = dataArea.getCenterY();\n        \n        /* Fixed line of code: */\n        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        \n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n        double labely = dataArea.getCenterY();\n        \n        /* Fixed line of code: */\n        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        \n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -17,45 +17,57 @@\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n+        \n+        /* Fixed line of code: */\n+        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        \n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n+        \n+        /* Fixed line of code: */\n+        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        \n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n+        double labely = dataArea.getCenterY();\n+        \n+        /* Fixed line of code: */\n+        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n+        \n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n+        double labely = dataArea.getCenterY();\n+        \n+        /* Fixed line of code: */\n+        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n+        \n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     }\n     if (plotState != null && hotspot != null) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorUp(insets.getTop() + h + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorDown(insets.getTop() + h + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorLeft(insets.getLeft() + w + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorRight(insets.getLeft() + w + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -17,46 +17,46 @@\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        state.cursorUp(insets.getTop() + h + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        state.cursorDown(insets.getTop() + h + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n+        double labely = dataArea.getCenterY();\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        state.cursorLeft(insets.getLeft() + w + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n+        double labely = dataArea.getCenterY();\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        state.cursorRight(insets.getLeft() + w + insets.getRight());\n     }\n     if (plotState != null && hotspot != null) {\n         ChartRenderingInfo owner = plotState.getOwner();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.getLabelToolTip(), this.getLabelURL()));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -17,52 +17,52 @@\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n+        double labely = dataArea.getCenterY();\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n+        double labely = dataArea.getCenterY();\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     }\n     if (plotState != null && hotspot != null) {\n         ChartRenderingInfo owner = plotState.getOwner();\n         EntityCollection entities = owner.getEntityCollection();\n         if (entities != null) {\n-            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n+            entities.add(new AxisLabelEntity(this, hotspot, this.getLabelToolTip(), this.getLabelURL()));\n         }\n     }\n     return state;\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    double labelx = 0.0, labely = 0.0;\n    if (edge == RectangleEdge.TOP) {\n        hotspot = computeTopLabelHotspot(g2, edge, labelBounds, insets, dataArea, state);\n    } else if (edge == RectangleEdge.BOTTOM) {\n        hotspot = computeBottomLabelHotspot(g2, edge, labelBounds, insets, dataArea, state);\n    } else if (edge == RectangleEdge.LEFT) {\n        hotspot = computeLeftLabelHotspot(g2, edge, labelBounds, insets, dataArea, state);\n    } else if (edge == RectangleEdge.RIGHT) {\n        hotspot = computeRightLabelHotspot(g2, edge, labelBounds, insets, dataArea, state);\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, getLabelToolTip(), getLabelURL()));\n        }\n    }\n    return state;\n}\n\nprivate Shape computeTopLabelHotspot(Graphics2D g2, RectangleEdge edge, Rectangle2D labelBounds, RectangleInsets insets, Rectangle2D dataArea, AxisState state) {\n    AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n    Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n    Rectangle2D rotatedBounds = rotatedLabelBounds.getBounds2D();\n    double startX = dataArea.getCenterX();\n    double startY = state.getCursor() - insets.getBottom() - rotatedBounds.getHeight() / 2.0;\n    TextUtilities.drawRotatedString(getLabel(), g2, (float) startX, (float) startY, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n    state.cursorUp(insets.getTop() + rotatedBounds.getHeight() + insets.getBottom());\n    return new Rectangle2D.Double(startX - rotatedBounds.getWidth() / 2.0, startY - rotatedBounds.getHeight() / 2.0,\n            rotatedBounds.getWidth(), rotatedBounds.getHeight());\n}\n\nprivate Shape computeBottomLabelHotspot(Graphics2D g2, RectangleEdge edge, Rectangle2D labelBounds, RectangleInsets insets, Rectangle2D dataArea, AxisState state) {\n    AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n    Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n    Rectangle2D rotatedBounds = rotatedLabelBounds.getBounds2D();\n    double startX = dataArea.getCenterX();\n    double startY = state.getCursor() + insets.getTop() + rotatedBounds.getHeight() / 2.0;\n    TextUtilities.drawRotatedString(getLabel(), g2, (float) startX, (float) startY, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n    state.cursorDown(insets.getTop() + rotatedBounds.getHeight() + insets.getBottom());\n    return new Rectangle2D.Double(startX - rotatedBounds.getWidth() / 2.0, startY - rotatedBounds.getHeight() / 2.0,\n            rotatedBounds.getWidth(), rotatedBounds.getHeight());\n}\n\nprivate Shape computeLeftLabelHotspot(Graphics2D g2, RectangleEdge edge, Rectangle2D labelBounds, RectangleInsets insets, Rectangle2D dataArea, AxisState state) {\n    AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n    Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n    Rectangle2D rotatedBounds = rotatedLabelBounds.getBounds2D();\n    double startX = state.getCursor() - insets.getRight() - rotatedBounds.getWidth() / 2.0;\n    double startY = dataArea.getCenterY();\n    TextUtilities.drawRotatedString(getLabel(), g2, (float) startX, (float) startY, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n    state.cursorLeft(insets.getLeft() + rotatedBounds.getWidth() + insets.getRight());\n    return new Rectangle2D.Double(startX - rotatedBounds.getWidth() / 2.0, startY - rotatedBounds.getHeight() / 2.0,\n            rotatedBounds.getWidth(), rotatedBounds.getHeight());\n}\n\nprivate Shape computeRightLabelHotspot(Graphics2D g2, RectangleEdge edge, Rectangle2D labelBounds, RectangleInsets insets, Rectangle2D dataArea, AxisState state) {\n    AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n    Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n    Rectangle2D rotatedBounds = rotatedLabelBounds.getBounds2D();\n    double startX = state.getCursor() + insets.getLeft() + rotatedBounds.getWidth() / 2.0;\n    double startY = dataArea.getCenterY();\n    TextUtilities.drawRotatedString(getLabel(), g2, (float) startX, (float) startY, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n    state.cursorRight(insets.getLeft() + rotatedBounds.getWidth() + insets.getRight());\n    return new Rectangle2D.Double(startX - rotatedBounds.getWidth() / 2.0, startY - rotatedBounds.getHeight() / 2.0,\n            rotatedBounds.getWidth(), rotatedBounds.getHeight());\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -1,5 +1,4 @@\n protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n-    // it is unlikely that 'state' will be null, but check anyway...\n     if (state == null) {\n         throw new IllegalArgumentException(\"Null 'state' argument.\");\n     }\n@@ -13,56 +12,21 @@\n     FontMetrics fm = g2.getFontMetrics();\n     Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n     Shape hotspot = null;\n+    double labelx = 0.0, labely = 0.0;\n     if (edge == RectangleEdge.TOP) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        hotspot = computeTopLabelHotspot(g2, edge, labelBounds, insets, dataArea, state);\n     } else if (edge == RectangleEdge.BOTTOM) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        hotspot = computeBottomLabelHotspot(g2, edge, labelBounds, insets, dataArea, state);\n     } else if (edge == RectangleEdge.LEFT) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n+        hotspot = computeLeftLabelHotspot(g2, edge, labelBounds, insets, dataArea, state);\n     } else if (edge == RectangleEdge.RIGHT) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n+        hotspot = computeRightLabelHotspot(g2, edge, labelBounds, insets, dataArea, state);\n     }\n     if (plotState != null && hotspot != null) {\n         ChartRenderingInfo owner = plotState.getOwner();\n         EntityCollection entities = owner.getEntityCollection();\n         if (entities != null) {\n-            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n+            entities.add(new AxisLabelEntity(this, hotspot, getLabelToolTip(), getLabelURL()));\n         }\n     }\n     return state;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n\n    Shape hotspot = null;\n    double labelx, labely;\n    float w = (float) labelBounds.getWidth();\n    float h = (float) labelBounds.getHeight();\n\n    if (edge == RectangleEdge.TOP) {\n        labelx = (float) dataArea.getCenterX();\n        labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        state.cursorUp(insets.getTop() + hotspot.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        labelx = (float) dataArea.getCenterX();\n        labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        state.cursorDown(insets.getTop() + hotspot.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n        labely = (float) dataArea.getCenterY();\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        state.cursorLeft(insets.getLeft() + hotspot.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n        labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        state.cursorRight(insets.getLeft() + hotspot.getWidth() + insets.getRight());\n    }\n\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -1,5 +1,4 @@\n protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n-    // it is unlikely that 'state' will be null, but check anyway...\n     if (state == null) {\n         throw new IllegalArgumentException(\"Null 'state' argument.\");\n     }\n@@ -12,52 +11,38 @@\n     g2.setPaint(getLabelPaint());\n     FontMetrics fm = g2.getFontMetrics();\n     Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n+\n     Shape hotspot = null;\n+    double labelx, labely;\n+    float w = (float) labelBounds.getWidth();\n+    float h = (float) labelBounds.getHeight();\n+\n     if (edge == RectangleEdge.TOP) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        labelx = (float) dataArea.getCenterX();\n+        labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        state.cursorUp(insets.getTop() + hotspot.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        labelx = (float) dataArea.getCenterX();\n+        labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        state.cursorDown(insets.getTop() + hotspot.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n+        labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n+        labely = (float) dataArea.getCenterY();\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n+        state.cursorLeft(insets.getLeft() + hotspot.getWidth() + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n+        labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n+        labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        TextUtilities.drawRotatedString(label, g2, (float) hotspot.getCenterX(), (float) hotspot.getCenterY(), TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n+        state.cursorRight(insets.getLeft() + hotspot.getWidth() + insets.getRight());\n     }\n+\n     if (plotState != null && hotspot != null) {\n         ChartRenderingInfo owner = plotState.getOwner();\n         EntityCollection entities = owner.getEntityCollection();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getLeft() - w / 2.0); // fixed: minus instead of plus\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() + insets.getRight() + w / 2.0); // fixed: plus instead of minus\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -41,7 +41,7 @@\n         labelBounds = rotatedLabelBounds.getBounds2D();\n         float w = (float) labelBounds.getWidth();\n         float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n+        float labelx = (float) (state.getCursor() - insets.getLeft() - w / 2.0); // fixed: minus instead of plus\n         float labely = (float) dataArea.getCenterY();\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n         hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n@@ -52,7 +52,7 @@\n         labelBounds = rotatedLabelBounds.getBounds2D();\n         float w = (float) labelBounds.getWidth();\n         float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n+        float labelx = (float) (state.getCursor() + insets.getRight() + w / 2.0); // fixed: plus instead of minus\n         float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n         hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() - insets.getBottom() - (h/2.0);\n        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() + insets.getTop() + (h/2.0);\n        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() - insets.getRight() - (w/2.0);\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() + insets.getLeft() + (w/2.0);\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.getLabelToolTip(), this.getLabelURL()));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -17,52 +17,52 @@\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() - insets.getBottom() - (h/2.0);\n+        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() + insets.getTop() + (h/2.0);\n+        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() - insets.getRight() - (w/2.0);\n+        double labely = dataArea.getCenterY();\n+        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() + insets.getLeft() + (w/2.0);\n+        double labely = dataArea.getCenterY();\n+        TextUtilities.drawRotatedString(label, g2, (float)labelx, (float)labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     }\n     if (plotState != null && hotspot != null) {\n         ChartRenderingInfo owner = plotState.getOwner();\n         EntityCollection entities = owner.getEntityCollection();\n         if (entities != null) {\n-            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n+            entities.add(new AxisLabelEntity(this, hotspot, this.getLabelToolTip(), this.getLabelURL()));\n         }\n     }\n     return state;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorUp(insets.getTop() + h + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorDown(insets.getTop() + h + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorLeft(insets.getLeft() + w + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorRight(insets.getLeft() + w + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, getToolTipText(), getURL()));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -17,52 +17,52 @@\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        state.cursorUp(insets.getTop() + h + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        state.cursorDown(insets.getTop() + h + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n+        double labely = dataArea.getCenterY();\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        state.cursorLeft(insets.getLeft() + w + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n+        double labely = dataArea.getCenterY();\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        state.cursorRight(insets.getLeft() + w + insets.getRight());\n     }\n     if (plotState != null && hotspot != null) {\n         ChartRenderingInfo owner = plotState.getOwner();\n         EntityCollection entities = owner.getEntityCollection();\n         if (entities != null) {\n-            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n+            entities.add(new AxisLabelEntity(this, hotspot, getToolTipText(), getURL()));\n         }\n     }\n     return state;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    \n    // Fixed: Get label font and insets before changing the graphics context\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    \n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);  // Fixed: Subtract insets.getRight() instead of adding\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -6,8 +6,11 @@\n     if ((label == null) || (label.equals(\"\"))) {\n         return state;\n     }\n+    \n+    // Fixed: Get label font and insets before changing the graphics context\n     Font font = getLabelFont();\n     RectangleInsets insets = getLabelInsets();\n+    \n     g2.setFont(font);\n     g2.setPaint(getLabelPaint());\n     FontMetrics fm = g2.getFontMetrics();\n@@ -41,7 +44,7 @@\n         labelBounds = rotatedLabelBounds.getBounds2D();\n         float w = (float) labelBounds.getWidth();\n         float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n+        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);  // Fixed: Subtract insets.getRight() instead of adding\n         float labely = (float) dataArea.getCenterY();\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n         hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    double labelx, labely;\n\n    if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n\n        labelx = dataArea.getCenterX();\n        if (edge == RectangleEdge.TOP) {\n            labely = state.getCursor() - insets.getBottom() - h / 2.0;\n            state.cursorUp(insets.getTop() + h + insets.getBottom());\n        } else { // BOTTOM\n            labely = state.getCursor() + insets.getTop() + h / 2.0;\n            state.cursorDown(insets.getTop() + h + insets.getBottom());\n        }\n\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n    } else if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - (Math.PI / 2.0), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n\n        labely = dataArea.getCenterY();\n        if (edge == RectangleEdge.LEFT) {\n            labelx = state.getCursor() - insets.getRight() - w / 2.0;\n            state.cursorLeft(insets.getLeft() + w + insets.getRight());\n        } else { // RIGHT\n            labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n            state.cursorRight(insets.getLeft() + w + insets.getRight());\n        }\n\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() - (Math.PI / 2.0), TextAnchor.CENTER);\n    }\n\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        if (owner != null) {\n            EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(hotspot, this.labelToolTip, this.labelURL));\n            }\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -13,56 +13,53 @@\n     FontMetrics fm = g2.getFontMetrics();\n     Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n     Shape hotspot = null;\n-    if (edge == RectangleEdge.TOP) {\n+    double labelx, labely;\n+\n+    if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n-    } else if (edge == RectangleEdge.BOTTOM) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+\n+        labelx = dataArea.getCenterX();\n+        if (edge == RectangleEdge.TOP) {\n+            labely = state.getCursor() - insets.getBottom() - h / 2.0;\n+            state.cursorUp(insets.getTop() + h + insets.getBottom());\n+        } else { // BOTTOM\n+            labely = state.getCursor() + insets.getTop() + h / 2.0;\n+            state.cursorDown(insets.getTop() + h + insets.getBottom());\n+        }\n+\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+    } else if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {\n+        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - (Math.PI / 2.0), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n-    } else if (edge == RectangleEdge.LEFT) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n-    } else if (edge == RectangleEdge.RIGHT) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+\n+        labely = dataArea.getCenterY();\n+        if (edge == RectangleEdge.LEFT) {\n+            labelx = state.getCursor() - insets.getRight() - w / 2.0;\n+            state.cursorLeft(insets.getLeft() + w + insets.getRight());\n+        } else { // RIGHT\n+            labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n+            state.cursorRight(insets.getLeft() + w + insets.getRight());\n+        }\n+\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() - (Math.PI / 2.0), TextAnchor.CENTER);\n     }\n+\n     if (plotState != null && hotspot != null) {\n         ChartRenderingInfo owner = plotState.getOwner();\n-        EntityCollection entities = owner.getEntityCollection();\n-        if (entities != null) {\n-            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n+        if (owner != null) {\n+            EntityCollection entities = owner.getEntityCollection();\n+            if (entities != null) {\n+                entities.add(new AxisLabelEntity(hotspot, this.labelToolTip, this.labelURL));\n+            }\n         }\n     }\n     return state;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, getToolTipText(), getURL()));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -17,52 +17,52 @@\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() - insets.getRight() - w / 2.0;\n+        double labely = dataArea.getCenterY();\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() + insets.getLeft() + w / 2.0;\n+        double labely = dataArea.getCenterY();\n+        TextUtilities.drawRotatedString(label, g2, (float) labelx, (float) labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     }\n     if (plotState != null && hotspot != null) {\n         ChartRenderingInfo owner = plotState.getOwner();\n         EntityCollection entities = owner.getEntityCollection();\n         if (entities != null) {\n-            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n+            entities.add(new AxisLabelEntity(this, hotspot, getToolTipText(), getURL()));\n         }\n     }\n     return state;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.isBlank())) { // use isBlank() method to check if string is empty or contains only white spaces\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth(); // cast width and height to double\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h); // create a new Double instead of Float\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = dataArea.getCenterX();\n        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() - insets.getRight() - w / 2.0; // fix width calculation\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth();\n        double h = labelBounds.getHeight();\n        double labelx = state.getCursor() + insets.getLeft() + w / 2.0; // fix width calculation\n        double labely = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -1,9 +1,8 @@\n protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n-    // it is unlikely that 'state' will be null, but check anyway...\n     if (state == null) {\n         throw new IllegalArgumentException(\"Null 'state' argument.\");\n     }\n-    if ((label == null) || (label.equals(\"\"))) {\n+    if ((label == null) || (label.isBlank())) { // use isBlank() method to check if string is empty or contains only white spaces\n         return state;\n     }\n     Font font = getLabelFont();\n@@ -17,45 +16,45 @@\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n+        double w = labelBounds.getWidth(); // cast width and height to double\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() - insets.getBottom() - h / 2.0;\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h); // create a new Double instead of Float\n         state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = dataArea.getCenterX();\n+        double labely = state.getCursor() + insets.getTop() + h / 2.0;\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() - insets.getRight() - w / 2.0; // fix width calculation\n+        double labely = dataArea.getCenterY();\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n+        double w = labelBounds.getWidth();\n+        double h = labelBounds.getHeight();\n+        double labelx = state.getCursor() + insets.getLeft() + w / 2.0; // fix width calculation\n+        double labely = dataArea.getCenterY();\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h);\n         state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     }\n     if (plotState != null && hotspot != null) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "There are no obvious bugs in the provided function.", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics(font); // Changed to get the font metrics of the current font\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth(); // Using doubles instead of floats\n        double h = labelBounds.getHeight(); // Using doubles instead of floats\n        double labelx = dataArea.getCenterX(); // Using doubles instead of floats\n        double labely = state.getCursor() - insets.getBottom() - h / 2.0; // Using doubles instead of floats\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h); // Using doubles instead of floats\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth(); // Using doubles instead of floats\n        double h = labelBounds.getHeight(); // Using doubles instead of floats\n        double labelx = dataArea.getCenterX(); // Using doubles instead of floats\n        double labely = state.getCursor() + insets.getTop() + h / 2.0; // Using doubles instead of floats\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h); // Using doubles instead of floats\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth(); // Using doubles instead of floats\n        double h = labelBounds.getHeight(); // Using doubles instead of floats\n        double labelx = state.getCursor() - insets.getRight() - w / 2.0; // Using doubles instead of floats\n        double labely = dataArea.getCenterY(); // Using doubles instead of floats\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h); // Using doubles instead of floats\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        double w = labelBounds.getWidth(); // Using doubles instead of floats\n        double h = labelBounds.getHeight(); // Using doubles instead of floats\n        double labelx = state.getCursor() + insets.getLeft() + w / 2.0; // Using doubles instead of floats\n        double labely = dataArea.getCenterY(); // Using doubles instead of floats\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h); // Using doubles instead of floats\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -10,52 +10,52 @@\n     RectangleInsets insets = getLabelInsets();\n     g2.setFont(font);\n     g2.setPaint(getLabelPaint());\n-    FontMetrics fm = g2.getFontMetrics();\n+    FontMetrics fm = g2.getFontMetrics(font); // Changed to get the font metrics of the current font\n     Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n     Shape hotspot = null;\n     if (edge == RectangleEdge.TOP) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n+        double w = labelBounds.getWidth(); // Using doubles instead of floats\n+        double h = labelBounds.getHeight(); // Using doubles instead of floats\n+        double labelx = dataArea.getCenterX(); // Using doubles instead of floats\n+        double labely = state.getCursor() - insets.getBottom() - h / 2.0; // Using doubles instead of floats\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h); // Using doubles instead of floats\n         state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n+        double w = labelBounds.getWidth(); // Using doubles instead of floats\n+        double h = labelBounds.getHeight(); // Using doubles instead of floats\n+        double labelx = dataArea.getCenterX(); // Using doubles instead of floats\n+        double labely = state.getCursor() + insets.getTop() + h / 2.0; // Using doubles instead of floats\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h); // Using doubles instead of floats\n         state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n+        double w = labelBounds.getWidth(); // Using doubles instead of floats\n+        double h = labelBounds.getHeight(); // Using doubles instead of floats\n+        double labelx = state.getCursor() - insets.getRight() - w / 2.0; // Using doubles instead of floats\n+        double labely = dataArea.getCenterY(); // Using doubles instead of floats\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h); // Using doubles instead of floats\n         state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n         labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n+        double w = labelBounds.getWidth(); // Using doubles instead of floats\n+        double h = labelBounds.getHeight(); // Using doubles instead of floats\n+        double labelx = state.getCursor() + insets.getLeft() + w / 2.0; // Using doubles instead of floats\n+        double labely = dataArea.getCenterY(); // Using doubles instead of floats\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        hotspot = new Rectangle2D.Double(labelx - w / 2.0, labely - h / 2.0, w, h); // Using doubles instead of floats\n         state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     }\n     if (plotState != null && hotspot != null) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    double labelx = 0, labely = 0, angle = 0;\n    if (edge == RectangleEdge.TOP) {\n        angle = -getLabelAngle();\n        labelx = dataArea.getCenterX();\n        labely = state.getCursor() - insets.getBottom() - labelBounds.getHeight() / 2.0;\n        hotspot = new Rectangle2D.Double(labelx - labelBounds.getWidth() / 2.0, labely - labelBounds.getHeight() / 2.0, labelBounds.getWidth(), labelBounds.getHeight());\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        angle = getLabelAngle();\n        labelx = dataArea.getCenterX();\n        labely = state.getCursor() + insets.getTop() + labelBounds.getHeight() / 2.0;\n        hotspot = new Rectangle2D.Double(labelx - labelBounds.getWidth() / 2.0, labely - labelBounds.getHeight() / 2.0, labelBounds.getWidth(), labelBounds.getHeight());\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n    } else if (edge == RectangleEdge.LEFT) {\n        angle = -getLabelAngle() - Math.PI / 2.0;\n        labelx = state.getCursor() - insets.getRight() - labelBounds.getWidth() / 2.0;\n        labely = dataArea.getCenterY();\n        hotspot = new Rectangle2D.Double(labelx - labelBounds.getWidth() / 2.0, labely - labelBounds.getHeight() / 2.0, labelBounds.getWidth(), labelBounds.getHeight());\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    } else if (edge == RectangleEdge.RIGHT) {\n        angle = getLabelAngle() + Math.PI / 2.0;\n        labelx = state.getCursor() + insets.getLeft() + labelBounds.getWidth() / 2.0;\n        labely = dataArea.getCenterY();\n        hotspot = new Rectangle2D.Double(labelx - labelBounds.getWidth() / 2.0, labely - labelBounds.getHeight() / 2.0, labelBounds.getWidth(), labelBounds.getHeight());\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n    }\n    AffineTransform t = AffineTransform.getRotateInstance(angle, labelx, labely);\n    Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n    TextUtilities.drawRotatedString(label, g2, (float) rotatedLabelBounds.getBounds2D().getCenterX(), (float) rotatedLabelBounds.getBounds2D().getCenterY(), TextAnchor.CENTER, angle, TextAnchor.CENTER);\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -13,51 +13,35 @@\n     FontMetrics fm = g2.getFontMetrics();\n     Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n     Shape hotspot = null;\n+    double labelx = 0, labely = 0, angle = 0;\n     if (edge == RectangleEdge.TOP) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        angle = -getLabelAngle();\n+        labelx = dataArea.getCenterX();\n+        labely = state.getCursor() - insets.getBottom() - labelBounds.getHeight() / 2.0;\n+        hotspot = new Rectangle2D.Double(labelx - labelBounds.getWidth() / 2.0, labely - labelBounds.getHeight() / 2.0, labelBounds.getWidth(), labelBounds.getHeight());\n         state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.BOTTOM) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) dataArea.getCenterX();\n-        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        angle = getLabelAngle();\n+        labelx = dataArea.getCenterX();\n+        labely = state.getCursor() + insets.getTop() + labelBounds.getHeight() / 2.0;\n+        hotspot = new Rectangle2D.Double(labelx - labelBounds.getWidth() / 2.0, labely - labelBounds.getHeight() / 2.0, labelBounds.getWidth(), labelBounds.getHeight());\n         state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n     } else if (edge == RectangleEdge.LEFT) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n-        float labely = (float) dataArea.getCenterY();\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        angle = -getLabelAngle() - Math.PI / 2.0;\n+        labelx = state.getCursor() - insets.getRight() - labelBounds.getWidth() / 2.0;\n+        labely = dataArea.getCenterY();\n+        hotspot = new Rectangle2D.Double(labelx - labelBounds.getWidth() / 2.0, labely - labelBounds.getHeight() / 2.0, labelBounds.getWidth(), labelBounds.getHeight());\n         state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     } else if (edge == RectangleEdge.RIGHT) {\n-        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n-        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-        labelBounds = rotatedLabelBounds.getBounds2D();\n-        float w = (float) labelBounds.getWidth();\n-        float h = (float) labelBounds.getHeight();\n-        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n-        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n-        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n-        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n+        angle = getLabelAngle() + Math.PI / 2.0;\n+        labelx = state.getCursor() + insets.getLeft() + labelBounds.getWidth() / 2.0;\n+        labely = dataArea.getCenterY();\n+        hotspot = new Rectangle2D.Double(labelx - labelBounds.getWidth() / 2.0, labely - labelBounds.getHeight() / 2.0, labelBounds.getWidth(), labelBounds.getHeight());\n         state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n     }\n+    AffineTransform t = AffineTransform.getRotateInstance(angle, labelx, labely);\n+    Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n+    TextUtilities.drawRotatedString(label, g2, (float) rotatedLabelBounds.getBounds2D().getCenterX(), (float) rotatedLabelBounds.getBounds2D().getCenterY(), TextAnchor.CENTER, angle, TextAnchor.CENTER);\n     if (plotState != null && hotspot != null) {\n         ChartRenderingInfo owner = plotState.getOwner();\n         EntityCollection entities = owner.getEntityCollection();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + h + insets.getBottom()); // Fixes issue with incorrect cursor positioning\n    } else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + h + insets.getBottom()); // Fixes issue with incorrect cursor positioning\n    } else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getRight() - w / 2.0);\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + w + insets.getRight()); // Fixes issue with incorrect cursor positioning\n    } else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() + insets.getLeft() + w / 2.0);\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + w + insets.getRight()); // Fixes issue with incorrect cursor positioning\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n    return state;\n}", "diff": "--- org/jfree/chart/axis/Axis.java@drawLabel\n+++ org/jfree/chart/axis/Axis.java@drawLabel\n@@ -23,7 +23,7 @@\n         float labely = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n         hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        state.cursorUp(insets.getTop() + h + insets.getBottom()); // Fixes issue with incorrect cursor positioning\n     } else if (edge == RectangleEdge.BOTTOM) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n@@ -34,7 +34,7 @@\n         float labely = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n         hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        state.cursorDown(insets.getTop() + h + insets.getBottom()); // Fixes issue with incorrect cursor positioning\n     } else if (edge == RectangleEdge.LEFT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n@@ -45,7 +45,7 @@\n         float labely = (float) dataArea.getCenterY();\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, TextAnchor.CENTER);\n         hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n+        state.cursorLeft(insets.getLeft() + w + insets.getRight()); // Fixes issue with incorrect cursor positioning\n     } else if (edge == RectangleEdge.RIGHT) {\n         AffineTransform t = AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0, labelBounds.getCenterX(), labelBounds.getCenterY());\n         Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n@@ -56,7 +56,7 @@\n         float labely = (float) (dataArea.getY() + dataArea.getHeight() / 2.0);\n         TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, TextAnchor.CENTER);\n         hotspot = new Rectangle2D.Float(labelx - w / 2.0f, labely - h / 2.0f, w, h);\n-        state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n+        state.cursorRight(insets.getLeft() + w + insets.getRight()); // Fixes issue with incorrect cursor positioning\n     }\n     if (plotState != null && hotspot != null) {\n         ChartRenderingInfo owner = plotState.getOwner();\n", "finish_reason": "stop", "valid": false, "num": 1}]