--- org/apache/commons/lang3/ArrayUtils.java@add
+++ org/apache/commons/lang3/ArrayUtils.java@add
@@ -1,15 +1,16 @@
 public static <T> T[] add(T[] array, T element) {
     Class<?> type;
     if (array != null) {
-        type = array.getClass();
+        type = array.getClass().getComponentType();
     } else if (element != null) {
         type = element.getClass();
     } else {
-        type = Object.class;
+        throw new IllegalArgumentException("Both input array and element are null");
     }
-    // type must be T
+
     @SuppressWarnings("unchecked")
-    T[] newArray = (T[]) copyArrayGrow1(array, type);
-    newArray[newArray.length - 1] = element;
+    T[] newArray = (T[]) Array.newInstance(type, array.length + 1);
+    System.arraycopy(array, 0, newArray, 0, array.length);
+    newArray[array.length] = element;
     return newArray;
 }
--- org/apache/commons/lang3/ArrayUtils.java@add1
+++ org/apache/commons/lang3/ArrayUtils.java@add1
@@ -1,14 +1,21 @@
 public static <T> T[] add(T[] array, int index, T element) {
+    if (index > array.length || index < 0) {
+        throw new IndexOutOfBoundsException("Index " + index + " out of bounds for length " + array.length);
+    }
+
     Class<?> clss = null;
     if (array != null) {
         clss = array.getClass().getComponentType();
     } else if (element != null) {
         clss = element.getClass();
     } else {
-        return (T[]) new Object[] { null };
+        throw new IllegalArgumentException("Both input array and element are null");
     }
-    // the add method creates an array of type clss, which is type T
+
     @SuppressWarnings("unchecked")
-    final T[] newArray = (T[]) add(array, index, element, clss);
+    final T[] newArray = (T[]) Array.newInstance(clss, array.length + 1);
+    System.arraycopy(array, 0, newArray, 0, index);
+    newArray[index] = element;
+    System.arraycopy(array, index, newArray, index + 1, array.length - index);
     return newArray;
 }
