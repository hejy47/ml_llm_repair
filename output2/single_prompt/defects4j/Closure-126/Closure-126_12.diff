--- com/google/javascript/jscomp/MinimizeExitPoints.java@tryMinimizeExits
+++ com/google/javascript/jscomp/MinimizeExitPoints.java@tryMinimizeExits
@@ -26,7 +26,7 @@
             Node catchCodeBlock = catchNode.getLastChild();
             tryMinimizeExits(catchCodeBlock, exitType, labelName);
         }
-                if (NodeUtil.hasFinally(n)) {
+        if (NodeUtil.hasFinally(n)) {
             Node finallyBlock = n.getLastChild();
             tryMinimizeExits(finallyBlock, exitType, labelName);
         }
@@ -43,31 +43,17 @@
     }
     // Multiple if-exits can be converted in a single pass.
     // Convert "if (blah) break;  if (blah2) break; other_stmt;" to
-    // become "if (blah); else { if (blah2); else { other_stmt; } }"
-    // which will get converted to "if (!blah && !blah2) { other_stmt; }".
-    for (Node c : n.children()) {
-        // An 'if' block to process below.
-        if (c.isIf()) {
-            Node ifTree = c;
-            Node trueBlock, falseBlock;
-            // First, the true condition block.
-            trueBlock = ifTree.getFirstChild().getNext();
-            falseBlock = trueBlock.getNext();
-            tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);
-            // Now the else block.
-            // The if blocks may have changed, get them again.
-            trueBlock = ifTree.getFirstChild().getNext();
-            falseBlock = trueBlock.getNext();
-            if (falseBlock != null) {
-                tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);
-            }
-        }
-        if (c == n.getLastChild()) {
-            break;
+    // become "if (!blah && !blah2) { other_stmt; }".
+    LinkedList<Node> nonExitStatements = new LinkedList<>();
+    boolean hasIfExitBlock = tryMinimizeIfBlockExits(n, nonExitStatements, exitType, labelName);
+    if (hasIfExitBlock) {
+        for (Node nonExit : nonExitStatements) {
+            NodeUtil.removeChild(n, nonExit);
+            NodeUtil.insertBefore(n.getLastChild(), nonExit);
         }
     }
-    // Now try to minimize the exits of the last child, if it is removed
-    // look at what has become the last child.
+    // Try to minimize the exits of the last child,
+    // if it is removed look at what has become the last child.
     for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
         tryMinimizeExits(c, exitType, labelName);
         // If the node is still the last child, we are done.
