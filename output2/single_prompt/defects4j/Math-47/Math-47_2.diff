--- org/apache/commons/math/complex/Complex.java@divide
+++ org/apache/commons/math/complex/Complex.java@divide
@@ -1,13 +1,13 @@
 public Complex divide(Complex divisor) throws NullArgumentException {
     MathUtils.checkNotNull(divisor);
     if (isNaN || divisor.isNaN) {
-        return NaN;
+        return Complex.NaN; //change to reference the static constant
     }
     if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {
-        return NaN;
+        return Complex.NaN; //change to reference the static constant
     }
     if (divisor.isInfinite() && !isInfinite()) {
-        return ZERO;
+        return Complex.ZERO; //change to reference the static constant
     }
     final double c = divisor.getReal();
     final double d = divisor.getImaginary();
--- org/apache/commons/math/complex/Complex.java@divide2
+++ org/apache/commons/math/complex/Complex.java@divide2
@@ -1,12 +1,12 @@
 public Complex divide(double divisor) {
     if (isNaN || Double.isNaN(divisor)) {
-        return NaN;
+        return Complex.NaN; //change to reference the static constant
     }
     if (divisor == 0d) {
-        return NaN;
+        return Complex.NaN; //change to reference the static constant
     }
     if (Double.isInfinite(divisor)) {
-        return !isInfinite() ? ZERO : NaN;
+        return !isInfinite() ? Complex.ZERO : Complex.NaN; //change to reference the static constants
     }
     return createComplex(real / divisor, imaginary / divisor);
 }
