--- com/google/javascript/jscomp/ProcessCommonJSModules.java@normalizeSourceName
+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@normalizeSourceName
@@ -1,8 +1,8 @@
 private String normalizeSourceName(String filename) {
     // The DOS command shell will normalize "/" to "\", so we have to
     // wrestle it back.
-    if (filename.indexOf(filenamePrefix) == 0) {
+    if (filename.startsWith(filenamePrefix)) {
         filename = filename.substring(filenamePrefix.length());
     }
-    return filename;
+    return filename.replace("/", "\\");
 }
--- com/google/javascript/jscomp/ProcessCommonJSModules.java@visitScript
+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@visitScript
@@ -5,11 +5,18 @@
     if (reportDependencies) {
         CompilerInput ci = t.getInput();
         ci.addProvide(moduleName);
-        JSModule m = new JSModule(moduleName);
-        m.addAndOverrideModule(ci);
-        module = m;
+        JSModule m = compiler.getModuleMap().getModule(moduleName);
+        if (m == null) {
+            m = new JSModule(moduleName);
+            compiler.getModuleMap().addModule(m);
+        }
+        m.add(ci);
     }
-    script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name("goog"), IR.string("provide")), IR.string(moduleName))).copyInformationFromForTree(script));
+    Node provideCall = IR.call(
+            IR.getprop(IR.name("goog"), IR.string("provide")),
+            IR.string(moduleName));
+    JsDocSetter.setJSDocInfo(provideCall, IR.jsdocInfo(IR.block()));
+    script.addChildToFront(IR.exprResult(provideCall).copyInformationFromForTree(script));
     emitOptionalModuleExportsOverride(script, moduleName);
     // Rename vars to not conflict in global scope.
     NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName));
