--- org/apache/commons/lang3/math/Fraction.java@greatestCommonDivisor
+++ org/apache/commons/lang3/math/Fraction.java@greatestCommonDivisor
@@ -32,27 +32,28 @@
     }
     // B2. Initialize: u and v have been divided by 2^k and at least
     //     one is odd.
-    int t = ((u & 1) == 1) ? v : -(u / 2);
-    // t negative: u was odd, v may be even (t replaces v)
-    // t positive: u was even, v is odd (t replaces u)
+    int t;
     do {
-                // B4/B3: cast out twos from t.
-        while ((t & 1) == 0) {
+        // B4/B3: cast out twos from t.
+        while (u % 2 == 0) {
             // while t is even..
             // cast out twos
-            t /= 2;
+            u /= 2;
+        }
+        while (v % 2 == 0) {
+            // while t is even..
+            // cast out twos
+            v /= 2;
         }
         // B5 [reset max(u,v)]
-        if (t > 0) {
-            u = -t;
-        } else {
+        if (u > v) {
+            t = u;
+            u = v;
             v = t;
         }
         // B6/B3. at this point both u and v should be odd.
-        t = (v - u) / 2;
-        // |u| larger: t positive (replace u)
-        // |v| larger: t negative (replace v)
-    } while (t != 0);
+        v = v - u;
+    } while (v != 0);
     // gcd is u*2^k
     return -u * (1 << k);
 }
