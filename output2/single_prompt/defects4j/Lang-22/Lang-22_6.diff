--- org/apache/commons/lang3/math/Fraction.java@greatestCommonDivisor
+++ org/apache/commons/lang3/math/Fraction.java@greatestCommonDivisor
@@ -32,24 +32,32 @@
     }
     // B2. Initialize: u and v have been divided by 2^k and at least
     //     one is odd.
-    int t = ((u & 1) == 1) ? v : -(u / 2);
+    int t = ((u & 1) == 1) ? u : -(v / 2);
     // t negative: u was odd, v may be even (t replaces v)
     // t positive: u was even, v is odd (t replaces u)
     do {
-                // B4/B3: cast out twos from t.
-        while ((t & 1) == 0) {
+        // B4/B3: cast out twos from t.
+        while ((t & 1) == 0 && t != 0) {
             // while t is even..
             // cast out twos
             t /= 2;
         }
         // B5 [reset max(u,v)]
         if (t > 0) {
-            u = -t;
-        } else {
-            v = t;
+            int temp = -t;
+            t = -u;
+            u = temp;
+        } else if (t < 0){
+            int temp = -t;
+            t = -v;
+            v = temp;
         }
         // B6/B3. at this point both u and v should be odd.
-        t = (v - u) / 2;
+        if (u <= v && t != 0) {
+            t = v - u;
+        } else if (u > v && t != 0) {
+            t = u - v;
+        }
         // |u| larger: t positive (replace u)
         // |v| larger: t negative (replace v)
     } while (t != 0);
