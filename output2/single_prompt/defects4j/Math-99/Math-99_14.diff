--- org/apache/commons/math/util/MathUtils.java@gcd
+++ org/apache/commons/math/util/MathUtils.java@gcd
@@ -8,7 +8,7 @@
     // -2^31, while positive numbers can only be as large as 2^31-1
     // (i.e. we can't necessarily negate a negative number without
     // overflow)
-        if (u > 0) {
+    if (u > 0) {
         u = -u;
     }
     // make u negative
@@ -31,26 +31,25 @@
     }
     // B2. Initialize: u and v have been divided by 2^k and at least
     // one is odd.
-    int t = ((u & 1) == 1) ? v : -(u / 2);
+    int t = ((u & 1) == 1) ? u : -(v / 2);
     // t negative: u was odd, v may be even (t replaces v)
     // t positive: u was even, v is odd (t replaces u)
     do {
-                // B4/B3: cast out twos from t.
+        // B3: cast out twos from t.
         while ((t & 1) == 0) {
             // while t is even..
             // cast out twos
             t /= 2;
         }
-        // B5 [reset max(u,v)]
+        // B4 [get absolute value of t]
         if (t > 0) {
             u = -t;
         } else {
             v = t;
         }
-        // B6/B3. at this point both u and v should be odd.
+        // B5. t always even here
         t = (v - u) / 2;
-        // |u| larger: t positive (replace u)
-        // |v| larger: t negative (replace v)
+        // u or v is now even
     } while (t != 0);
     // gcd is u*2^k
     return -u * (1 << k);
--- org/apache/commons/math/util/MathUtils.java@lcm
+++ org/apache/commons/math/util/MathUtils.java@lcm
@@ -3,5 +3,8 @@
         return 0;
     }
     int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
+    if (lcm == Integer.MAX_VALUE) {
+        throw new ArithmeticException("overflow: lcm(" + a + ", " + b + ") is larger than " + Integer.MAX_VALUE);
+    }
     return lcm;
 }
