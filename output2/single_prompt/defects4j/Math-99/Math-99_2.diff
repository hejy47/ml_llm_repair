--- org/apache/commons/math/util/MathUtils.java@gcd
+++ org/apache/commons/math/util/MathUtils.java@gcd
@@ -8,7 +8,7 @@
     // -2^31, while positive numbers can only be as large as 2^31-1
     // (i.e. we can't necessarily negate a negative number without
     // overflow)
-        if (u > 0) {
+    if (u > 0) {
         u = -u;
     }
     // make u negative
@@ -35,7 +35,7 @@
     // t negative: u was odd, v may be even (t replaces v)
     // t positive: u was even, v is odd (t replaces u)
     do {
-                // B4/B3: cast out twos from t.
+        // B4/B3: cast out twos from t.
         while ((t & 1) == 0) {
             // while t is even..
             // cast out twos
--- org/apache/commons/math/util/MathUtils.java@lcm
+++ org/apache/commons/math/util/MathUtils.java@lcm
@@ -3,5 +3,8 @@
         return 0;
     }
     int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
+    if (lcm == Integer.MIN_VALUE) {
+        throw MathArithmeticException.createArithmeticException("overflow: lcm({0}, {1}) is 2^31", new Object[] { a, b });
+    }
     return lcm;
 }
