--- org/apache/commons/math/util/MathUtils.java@gcd
+++ org/apache/commons/math/util/MathUtils.java@gcd
@@ -4,11 +4,11 @@
     if ((u == 0) || (v == 0)) {
         return (Math.abs(u) + Math.abs(v));
     }
-    // keep u and v negative, as negative integers range down to
+    // Keep u and v negative, as negative integers range down to
     // -2^31, while positive numbers can only be as large as 2^31-1
     // (i.e. we can't necessarily negate a negative number without
     // overflow)
-        if (u > 0) {
+    if (u > 0) {
         u = -u;
     }
     // make u negative
@@ -16,6 +16,7 @@
         v = -v;
     }
     // make v negative
+  
     // B1. [Find power of 2]
     int k = 0;
     while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
@@ -31,11 +32,11 @@
     }
     // B2. Initialize: u and v have been divided by 2^k and at least
     // one is odd.
-    int t = ((u & 1) == 1) ? v : -(u / 2);
-    // t negative: u was odd, v may be even (t replaces v)
+    int t = ((u & 1) == 1) ? u : -(u / 2);
+    // t negative: u was odd, v may be even (t replaces u)
     // t positive: u was even, v is odd (t replaces u)
     do {
-                // B4/B3: cast out twos from t.
+        // B4/B3: cast out twos from t.
         while ((t & 1) == 0) {
             // while t is even..
             // cast out twos
@@ -43,9 +44,9 @@
         }
         // B5 [reset max(u,v)]
         if (t > 0) {
-            u = -t;
+            v = -t;
         } else {
-            v = t;
+            u = t;
         }
         // B6/B3. at this point both u and v should be odd.
         t = (v - u) / 2;
--- org/apache/commons/math/util/MathUtils.java@lcm
+++ org/apache/commons/math/util/MathUtils.java@lcm
@@ -3,5 +3,8 @@
         return 0;
     }
     int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
+    if (lcm == Integer.MIN_VALUE) {
+        throw MathRuntimeException.createArithmeticException("overflow: lcm({0}, {1}) is 2^31", new Object[] { a, b });
+    }
     return lcm;
 }
