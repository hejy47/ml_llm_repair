--- org/apache/commons/math/util/MathUtils.java@gcd
+++ org/apache/commons/math/util/MathUtils.java@gcd
@@ -8,7 +8,7 @@
     // -2^31, while positive numbers can only be as large as 2^31-1
     // (i.e. we can't necessarily negate a negative number without
     // overflow)
-        if (u > 0) {
+    if (u > 0) {
         u = -u;
     }
     // make u negative
@@ -18,24 +18,22 @@
     // make v negative
     // B1. [Find power of 2]
     int k = 0;
-    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
-        // while u and v are
-        // both even...
+    while (((u & 1) == 0 || (v & 1) == 0) && k < 31) {
+        // while u and v are both even...
         u /= 2;
         v /= 2;
         // cast out twos.
         k++;
     }
     if (k == 31) {
-        throw MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", new Object[] { p, q });
+        throw MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", new Object[]{p, q});
     }
-    // B2. Initialize: u and v have been divided by 2^k and at least
-    // one is odd.
+    // B2. Initialize: u and v have been divided by 2^k and at least one is odd.
     int t = ((u & 1) == 1) ? v : -(u / 2);
     // t negative: u was odd, v may be even (t replaces v)
     // t positive: u was even, v is odd (t replaces u)
     do {
-                // B4/B3: cast out twos from t.
+        // B4/B3: cast out twos from t.
         while ((t & 1) == 0) {
             // while t is even..
             // cast out twos
--- org/apache/commons/math/util/MathUtils.java@lcm
+++ org/apache/commons/math/util/MathUtils.java@lcm
@@ -2,6 +2,10 @@
     if (a == 0 || b == 0) {
         return 0;
     }
-    int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
+    int gcd = gcd(a, b);
+    if (gcd == 0) {
+        return 0;
+    }
+    int lcm = Math.abs(Math.multiplyExact(a / gcd, b));
     return lcm;
 }
