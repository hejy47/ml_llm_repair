--- org/apache/commons/math/geometry/euclidean/threed/Rotation.java@Rotation
+++ org/apache/commons/math/geometry/euclidean/threed/Rotation.java@Rotation
@@ -25,7 +25,7 @@
     Vector3D k = v1Su1.crossProduct(v2Su2);
     Vector3D u3 = u1.crossProduct(u2);
     double c = k.dotProduct(u3);
-    if (c == 0) {
+    if (c == 0 || Double.isNaN(c) || Double.isInfinite(c)) { //Fixed NaN or Infinity handling
         // the (q1, q2, q3) vector is close to the (u1, u2) plane
         // we try other vectors
         Vector3D v3 = Vector3D.crossProduct(v1, v2);
@@ -33,14 +33,14 @@
         k = v1Su1.crossProduct(v3Su3);
         Vector3D u2Prime = u1.crossProduct(u3);
         c = k.dotProduct(u2Prime);
-        if (c == 0) {
+        if (c == 0 || Double.isNaN(c) || Double.isInfinite(c)) {
             // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
             // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
             k = v2Su2.crossProduct(v3Su3);
             ;
             c = k.dotProduct(u2.crossProduct(u3));
             ;
-            if (c == 0) {
+            if (c == 0 || Double.isNaN(c) || Double.isInfinite(c)) {
                 // the (q1, q2, q3) vector is aligned with everything
                 // this is really the identity rotation
                 q0 = 1.0;
@@ -54,12 +54,20 @@
             vRef = v2;
         }
     }
-    // compute the vectorial part
+    // compute the positive scalar part
     c = FastMath.sqrt(c);
     double inv = 1.0 / (c + c);
     q1 = inv * k.getX();
     q2 = inv * k.getY();
     q3 = inv * k.getZ();
+    q0 = 0.5 * inv * FastMath.sqrt(u1u1 * u2u2 / (v1v1 * v2v2) - q1 * q1 - q2 * q2 - q3 * q3);
+    //Ensure q0 is positive
+    if(q0 < 0) {
+        q0 = -q0;
+        q1 = -q1;
+        q2 = -q2;
+        q3 = -q3;
+    }
     // compute the scalar part
     k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2, uRef.getZ() * q1 - uRef.getX() * q3, uRef.getX() * q2 - uRef.getY() * q1);
     q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
