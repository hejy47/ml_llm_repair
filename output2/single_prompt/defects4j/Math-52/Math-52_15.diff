--- org/apache/commons/math/geometry/euclidean/threed/Rotation.java@Rotation
+++ org/apache/commons/math/geometry/euclidean/threed/Rotation.java@Rotation
@@ -31,15 +31,13 @@
         Vector3D v3 = Vector3D.crossProduct(v1, v2);
         Vector3D v3Su3 = v3.subtract(u3);
         k = v1Su1.crossProduct(v3Su3);
-        Vector3D u2Prime = u1.crossProduct(u3);
+        Vector3D u2Prime = u3.crossProduct(u1);
         c = k.dotProduct(u2Prime);
         if (c == 0) {
             // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
             // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
             k = v2Su2.crossProduct(v3Su3);
-            ;
-            c = k.dotProduct(u2.crossProduct(u3));
-            ;
+            c = k.dotProduct(u3.crossProduct(u2));
             if (c == 0) {
                 // the (q1, q2, q3) vector is aligned with everything
                 // this is really the identity rotation
