--- com/google/javascript/jscomp/SourceFile.java@getLine
+++ com/google/javascript/jscomp/SourceFile.java@getLine
@@ -1,37 +1,36 @@
 public String getLine(int lineNumber) {
     String js = "";
     try {
-        // NOTE(nicksantos): Right now, this is optimized for few warnings.
-        // This is probably the right trade-off, but will be slow if there
-        // are lots of warnings in one file.
-        js = getCode();
+        js = getCode(); //remove unnecessary comment
     } catch (IOException e) {
         return null;
     }
     int pos = 0;
     int startLine = 1;
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
     if (lineNumber >= lastLine) {
         pos = lastOffset;
         startLine = lastLine;
     }
-    for (int n = startLine; n < lineNumber; n++) {
+    int currentLine = startLine; //create variable to keep track of current line number
+    while (currentLine < lineNumber) { //use while loop to iterate until current line number matches target line number
         int nextpos = js.indexOf('\n', pos);
         if (nextpos == -1) {
             return null;
         }
         pos = nextpos + 1;
+        currentLine++; //increment currentLine variable
     }
-    // Remember this offset for the next search we do.
     lastOffset = pos;
     lastLine = lineNumber;
-    if (js.indexOf('\n', pos) == -1) {
-        // If next new line cannot be found, there are two cases
-        // 1. pos already reaches the end of file, then null should be returned
-        // 2. otherwise, return the contents between pos and the end of file.
-        return null;
+    int nextLinePos = js.indexOf('\n', pos);
+    if (nextLinePos == -1) { //check if next new line can be found
+        if (pos >= js.length()) { //check if pos already reaches end of file
+            return null;
+        }
+        else {
+            return js.substring(pos); //if not, return contents between pos and end of file
+        }
     } else {
-        return js.substring(pos, js.indexOf('\n', pos));
+        return js.substring(pos, nextLinePos);
     }
 }
