--- com/google/javascript/jscomp/SourceFile.java@getLine
+++ com/google/javascript/jscomp/SourceFile.java@getLine
@@ -1,20 +1,20 @@
 public String getLine(int lineNumber) {
     String js = "";
     try {
-        // NOTE(nicksantos): Right now, this is optimized for few warnings.
-        // This is probably the right trade-off, but will be slow if there
-        // are lots of warnings in one file.
         js = getCode();
     } catch (IOException e) {
         return null;
     }
     int pos = 0;
     int startLine = 1;
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
     if (lineNumber >= lastLine) {
         pos = lastOffset;
         startLine = lastLine;
+    } else {
+        // If we're searching for a line before our last search,
+        // reset the position to the beginning of the file.
+        lastOffset = 0;
+        lastLine = 1;
     }
     for (int n = startLine; n < lineNumber; n++) {
         int nextpos = js.indexOf('\n', pos);
@@ -23,15 +23,18 @@
         }
         pos = nextpos + 1;
     }
-    // Remember this offset for the next search we do.
     lastOffset = pos;
     lastLine = lineNumber;
-    if (js.indexOf('\n', pos) == -1) {
-        // If next new line cannot be found, there are two cases
-        // 1. pos already reaches the end of file, then null should be returned
-        // 2. otherwise, return the contents between pos and the end of file.
+    // Check if we've reached the end of the file
+    if (pos >= js.length()) {
         return null;
+    }
+    // If we haven't reached the end of the file, find the next line break.
+    int nextpos = js.indexOf('\n', pos);
+    if (nextpos == -1) {
+        // If we can't find the next line break, return the rest of the file.
+        return js.substring(pos);
     } else {
-        return js.substring(pos, js.indexOf('\n', pos));
+        return js.substring(pos, nextpos);
     }
 }
