--- org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
+++ org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
@@ -27,11 +27,34 @@
         // Calculate the next approximation.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
-        // If the new approximation is the exact root, return it. Since
-        // this is not an under-approximation or an over-approximation,
-        // we can return it regardless of the allowed solutions.
-        if (fx == 0.0) {
-            return x;
+        // Handle too small function values.
+        if (FastMath.abs(fx) <= ftol) {
+            switch (allowed) {
+                case ANY_SIDE:
+                    return x;
+                case LEFT_SIDE:
+                    if (inverted) {
+                        return x;
+                    }
+                    break;
+                case RIGHT_SIDE:
+                    if (!inverted) {
+                        return x;
+                    }
+                    break;
+                case BELOW_SIDE:
+                    if (fx <= 0) {
+                        return x;
+                    }
+                    break;
+                case ABOVE_SIDE:
+                    if (fx >= 0) {
+                        return x;
+                    }
+                    break;
+                default:
+                    throw new MathInternalError();
+            }
         }
         // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
@@ -41,69 +64,60 @@
             f0 = f1;
             inverted = !inverted;
         } else {
-            switch(method) {
+            switch (method) {
                 case ILLINOIS:
-                    f0 *= 0.5;
+                    if (f0 * fx < 0) {
+                        f1 *= 0.5;
+                    } else {
+                        f0 = f1;
+                        f1 *= 0.5;
+                    }
                     break;
                 case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                    if (f0 * fx < 0) {
+                        final double q = f0 / f1;
+                        final double t = f0 / (f0 + f1);
+                        f1 = fx;
+                        f0 *= t;
+                        x1 = x;
+                        x0 += q * (x - x0);
+                    } else {
+                        final double q = f1 / f0;
+                        final double t = f1 / (f0 + f1);
+                        f0 = fx;
+                        f1 *= t;
+                        x0 = x;
+                        x1 += q * (x - x1);
+                    }
                     break;
-                // Update formula cannot make any progress: Update the
-                // search interval.
                 default:
+                    // Update formula cannot make any progress: Update the
+                    // search interval.
+                    x0 = x;
+                    f0 = fx;
+                    f1 *= 0.5;
+                    break;
             }
         }
-        // Update from [x0, x1] to [x0, x].
-        x1 = x;
-        f1 = fx;
-        // If the function value of the last approximation is too small,
-        // given the function value accuracy, then we can't get closer to
-        // the root than we already are.
-        if (FastMath.abs(f1) <= ftol) {
-            switch(allowed) {
+        // If the current interval is within the given accuracies, we
+        // are satisfied with the current approximation.
+        if (FastMath.abs(x1 - x0) <= FastMath.max(rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0)), atol)) {
+            switch (allowed) {
                 case ANY_SIDE:
-                    return x1;
+                    return x;
                 case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
+                    return inverted ? x : x0;
                 case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
+                    return inverted ? x1 : x;
                 case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
+                    return (fx <= 0) ? x : x0;
                 case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
+                    return (fx >= 0) ? x : x0;
                 default:
                     throw new MathInternalError();
             }
         }
-        // If the current interval is within the given accuracies, we
-        // are satisfied with the current approximation.
-        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
-            switch(allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    return inverted ? x1 : x0;
-                case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
-                case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
-                case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
-                default:
-                    throw new MathInternalError();
-            }
-        }
+        x1 = x;
+        f1 = fx;
     }
 }
