--- com/google/javascript/jscomp/TypedScopeCreator.java@visit
+++ com/google/javascript/jscomp/TypedScopeCreator.java@visit
@@ -2,12 +2,12 @@
 public void visit(NodeTraversal t, Node n, Node parent) {
     inputId = t.getInputId();
     attachLiteralTypes(t, n);
-    switch(n.getType()) {
-        case Token.CALL:
+    switch(n.getToken()) { // Use getToken() instead of getType()
+        case CALL: // Use enum constant instead of Token value
             checkForClassDefiningCalls(t, n, parent);
             checkForCallingConventionDefiningCalls(n, delegateCallingConventions);
             break;
-        case Token.FUNCTION:
+        case FUNCTION: // Use enum constant instead of Token value
             if (t.getInput() == null || !t.getInput().isExtern()) {
                 nonExternFunctions.add(n);
             }
@@ -16,25 +16,28 @@
                 defineFunctionLiteral(n, parent);
             }
             break;
-        case Token.ASSIGN:
+        case ASSIGN: // Use enum constant instead of Token value
             // Handle initialization of properties.
             Node firstChild = n.getFirstChild();
             if (firstChild.isGetProp() && firstChild.isQualifiedName()) {
                 maybeDeclareQualifiedName(t, n.getJSDocInfo(), firstChild, n, firstChild.getNext());
             }
             break;
-        case Token.CATCH:
+        case CATCH: // Use enum constant instead of Token value
             defineCatch(n, parent);
             break;
-        case Token.VAR:
+        case VAR: // Use enum constant instead of Token value
             defineVar(n, parent);
             break;
-        case Token.GETPROP:
+        case GETPROP: // Use enum constant instead of Token value
             // Handle stubbed properties.
             if (parent.isExprResult() && n.isQualifiedName()) {
                 maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);
             }
             break;
+        case OBJECTLIT: // Use enum constant instead of Token value
+            // Analyze any @lends object literals in this statement.
+            defineObjectLiteral(n);
+            break;
     }
-    // Analyze any @lends object literals in this statement.
 }
--- com/google/javascript/jscomp/TypedScopeCreator.java@attachLiteralTypes
+++ com/google/javascript/jscomp/TypedScopeCreator.java@attachLiteralTypes
@@ -1,28 +1,28 @@
 private void attachLiteralTypes(NodeTraversal t, Node n) {
-    switch(n.getType()) {
-        case Token.NULL:
+    switch(n.getToken()) { // Use getToken() instead of getType()
+        case NULL: // Use enum constant instead of Token value
             n.setJSType(getNativeType(NULL_TYPE));
             break;
-        case Token.VOID:
+        case VOID: // Use enum constant instead of Token value
             n.setJSType(getNativeType(VOID_TYPE));
             break;
-        case Token.STRING:
+        case STRING: // Use enum constant instead of Token value
             // Defer keys to the Token.OBJECTLIT case
             if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                 n.setJSType(getNativeType(STRING_TYPE));
             }
             break;
-        case Token.NUMBER:
+        case NUMBER: // Use enum constant instead of Token value
             n.setJSType(getNativeType(NUMBER_TYPE));
             break;
-        case Token.TRUE:
-        case Token.FALSE:
+        case TRUE:
+        case FALSE:
             n.setJSType(getNativeType(BOOLEAN_TYPE));
             break;
-        case Token.REGEXP:
+        case REGEXP:
             n.setJSType(getNativeType(REGEXP_TYPE));
-            break;
-        case Token.OBJECTLIT:
+            break; 
+        case OBJECTLIT: // Use enum constant instead of Token value
             defineObjectLiteral(n);
             break;
     }
