[{"output": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is the effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value.getLastChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value.getString());\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties.\n            return locals.apply(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            // TODO(nicksantos): This needs to be changed so that it\n            // returns true iff we're sure the value was never aliased from inside\n            // the constructor (similar to callHasLocalResult)\n            return true;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n            return true;\n        default:\n            // Other op force a local value:\n            //  x = '' + g (x is now an local string)\n            //  x -= g (x is now an local number)\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n@@ -4,7 +4,7 @@\n             // A result that is aliased by a non-local name, is the effectively the\n             // same as returning a non-local name, but this doesn't matter if the\n             // value is immutable.\n-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value.getLastChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n@@ -22,11 +22,11 @@\n         case Token.THIS:\n             return locals.apply(value);\n         case Token.NAME:\n-            return isImmutableValue(value) || locals.apply(value);\n+            return isImmutableValue(value) || locals.apply(value.getString());\n         case Token.GETELEM:\n         case Token.GETPROP:\n             // There is no information about the locality of object properties.\n-            return locals.apply(value);\n+            return locals.apply(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.CALL:\n             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n         case Token.NEW:\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value.getLastChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties,\n            // so we assume that the property value is not a local value.\n            return false;\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            // Similarly to CALL, we assume that constructor arguments are not local,\n            // but the result of the constructor is a local value if it is assigned to a local name.\n            return locals.apply(value.getParent());\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // IN operator is not a simple operator, so we need to check it separately.\n            return evaluatesToLocalValue(value.getFirstChild(), locals)\n                && evaluatesToLocalValue(value.getLastChild(), locals);\n        default:\n            // Other op force a local value:\n            //  x = '' + g (x is now an local string)\n            //  x -= g (x is now an local number)\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n@@ -1,10 +1,7 @@\n static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n     switch(value.getType()) {\n         case Token.ASSIGN:\n-            // A result that is aliased by a non-local name, is the effectively the\n-            // same as returning a non-local name, but this doesn't matter if the\n-            // value is immutable.\n-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value.getLastChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n@@ -25,15 +22,15 @@\n             return isImmutableValue(value) || locals.apply(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n-            // There is no information about the locality of object properties.\n-            return locals.apply(value);\n+            // There is no information about the locality of object properties,\n+            // so we assume that the property value is not a local value.\n+            return false;\n         case Token.CALL:\n             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n         case Token.NEW:\n-            // TODO(nicksantos): This needs to be changed so that it\n-            // returns true iff we're sure the value was never aliased from inside\n-            // the constructor (similar to callHasLocalResult)\n-            return true;\n+            // Similarly to CALL, we assume that constructor arguments are not local,\n+            // but the result of the constructor is a local value if it is assigned to a local name.\n+            return locals.apply(value.getParent());\n         case Token.FUNCTION:\n         case Token.REGEXP:\n         case Token.ARRAYLIT:\n@@ -41,8 +38,9 @@\n             // Literals objects with non-literal children are allowed.\n             return true;\n         case Token.IN:\n-            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n-            return true;\n+            // IN operator is not a simple operator, so we need to check it separately.\n+            return evaluatesToLocalValue(value.getFirstChild(), locals)\n+                && evaluatesToLocalValue(value.getLastChild(), locals);\n         default:\n             // Other op force a local value:\n             //  x = '' + g (x is now an local string)\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is the effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.test(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.test(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.test(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties.\n            return locals.test(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n        case Token.NEW:\n            // TODO(nicksantos): This needs to be changed so that it\n            // returns true iff we're sure the value was never aliased from inside\n            // the constructor (similar to callHasLocalResult)\n            return true;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n            return true;\n        default:\n            // Other op force a local value:\n            //  x = '' + g (x is now an local string)\n            //  x -= g (x is now an local number)\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n@@ -4,7 +4,7 @@\n             // A result that is aliased by a non-local name, is the effectively the\n             // same as returning a non-local name, but this doesn't matter if the\n             // value is immutable.\n-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.test(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n@@ -20,15 +20,15 @@\n                 return true;\n             }\n         case Token.THIS:\n-            return locals.apply(value);\n+            return locals.test(value);\n         case Token.NAME:\n-            return isImmutableValue(value) || locals.apply(value);\n+            return isImmutableValue(value) || locals.test(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n             // There is no information about the locality of object properties.\n-            return locals.apply(value);\n+            return locals.test(value);\n         case Token.CALL:\n-            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n+            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n         case Token.NEW:\n             // TODO(nicksantos): This needs to be changed so that it\n             // returns true iff we're sure the value was never aliased from inside\n", "finish_reason": "stop", "valid": false, "num": 9}, {"output": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is the effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.test(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return (evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getSecondChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.test(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.test(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties.\n            return locals.test(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n        case Token.NEW:\n            // TODO(nicksantos): This needs to be changed so that it\n            // returns true iff we're sure the value was never aliased from inside\n            // the constructor (similar to callHasLocalResult)\n            return true;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n            return true;\n        default:\n            // Other op force a local value:\n            //  x = '' + g (x is now an local string)\n            //  x -= g (x is now an local number)\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n@@ -4,14 +4,14 @@\n             // A result that is aliased by a non-local name, is the effectively the\n             // same as returning a non-local name, but this doesn't matter if the\n             // value is immutable.\n-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.test(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n         case Token.OR:\n             return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.HOOK:\n-            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n+            return (evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getSecondChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.INC:\n         case Token.DEC:\n             if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n@@ -20,15 +20,15 @@\n                 return true;\n             }\n         case Token.THIS:\n-            return locals.apply(value);\n+            return locals.test(value);\n         case Token.NAME:\n-            return isImmutableValue(value) || locals.apply(value);\n+            return isImmutableValue(value) || locals.test(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n             // There is no information about the locality of object properties.\n-            return locals.apply(value);\n+            return locals.test(value);\n         case Token.CALL:\n-            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n+            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n         case Token.NEW:\n             // TODO(nicksantos): This needs to be changed so that it\n             // returns true iff we're sure the value was never aliased from inside\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is the effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.test(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.test(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.test(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n        case Token.CLASS:\n            // There is no information about the locality of object properties.\n            // Class element access (e.g. class.method()) is also treated as non-local.\n            return locals.test(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n        case Token.NEW:\n            // TODO(nicksantos): This needs to be changed so that it\n            // returns true iff we're sure the value was never aliased from inside\n            // the constructor (similar to callHasLocalResult)\n            return true;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literal objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n            return true;\n        default:\n            // Other ops force a local value:\n            //  x = '' + g (x is now an local string)\n            //  x -= g (x is now an local number)\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n@@ -4,7 +4,7 @@\n             // A result that is aliased by a non-local name, is the effectively the\n             // same as returning a non-local name, but this doesn't matter if the\n             // value is immutable.\n-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.test(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n@@ -20,15 +20,17 @@\n                 return true;\n             }\n         case Token.THIS:\n-            return locals.apply(value);\n+            return locals.test(value);\n         case Token.NAME:\n-            return isImmutableValue(value) || locals.apply(value);\n+            return isImmutableValue(value) || locals.test(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n+        case Token.CLASS:\n             // There is no information about the locality of object properties.\n-            return locals.apply(value);\n+            // Class element access (e.g. class.method()) is also treated as non-local.\n+            return locals.test(value);\n         case Token.CALL:\n-            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n+            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n         case Token.NEW:\n             // TODO(nicksantos): This needs to be changed so that it\n             // returns true iff we're sure the value was never aliased from inside\n@@ -38,13 +40,13 @@\n         case Token.REGEXP:\n         case Token.ARRAYLIT:\n         case Token.OBJECTLIT:\n-            // Literals objects with non-literal children are allowed.\n+            // Literal objects with non-literal children are allowed.\n             return true;\n         case Token.IN:\n             // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n             return true;\n         default:\n-            // Other op force a local value:\n+            // Other ops force a local value:\n             //  x = '' + g (x is now an local string)\n             //  x -= g (x is now an local number)\n             if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is the effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.test(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.test(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.test(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties.\n            return locals.test(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n        case Token.NEW:\n            // TODO(nicksantos): This needs to be changed so that it\n            // returns true iff we're sure the value was never aliased from inside\n            // the constructor (similar to callHasLocalResult)\n            return true;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n            return true;\n        default:\n            // Other op force a local value:\n            //  x = '' + g (x is now an local string)\n            //  x -= g (x is now an local number)\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n@@ -4,7 +4,7 @@\n             // A result that is aliased by a non-local name, is the effectively the\n             // same as returning a non-local name, but this doesn't matter if the\n             // value is immutable.\n-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.test(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n@@ -20,15 +20,15 @@\n                 return true;\n             }\n         case Token.THIS:\n-            return locals.apply(value);\n+            return locals.test(value);\n         case Token.NAME:\n-            return isImmutableValue(value) || locals.apply(value);\n+            return isImmutableValue(value) || locals.test(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n             // There is no information about the locality of object properties.\n-            return locals.apply(value);\n+            return locals.test(value);\n         case Token.CALL:\n-            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n+            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n         case Token.NEW:\n             // TODO(nicksantos): This needs to be changed so that it\n             // returns true iff we're sure the value was never aliased from inside\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is the effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return NodeUtil.isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties.\n            return locals.apply(value.getFirstChild());\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            // TODO(nicksantos): This needs to be changed so that it\n            // returns true iff we're sure the value was never aliased from inside\n            // the constructor (similar to callHasLocalResult)\n            return true;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n            return true;\n        default:\n            // Other op force a local value:\n            //  x = '' + g (x is now an local string)\n            //  x -= g (x is now an local number)\n            if (NodeUtil.isAssignmentOp(value) || NodeUtil.isSimpleOperator(value) || NodeUtil.isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n@@ -22,11 +22,11 @@\n         case Token.THIS:\n             return locals.apply(value);\n         case Token.NAME:\n-            return isImmutableValue(value) || locals.apply(value);\n+            return NodeUtil.isImmutableValue(value) || locals.apply(value);\n         case Token.GETELEM:\n         case Token.GETPROP:\n             // There is no information about the locality of object properties.\n-            return locals.apply(value);\n+            return locals.apply(value.getFirstChild());\n         case Token.CALL:\n             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n         case Token.NEW:\n@@ -47,7 +47,7 @@\n             // Other op force a local value:\n             //  x = '' + g (x is now an local string)\n             //  x -= g (x is now an local number)\n-            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n+            if (NodeUtil.isAssignmentOp(value) || NodeUtil.isSimpleOperator(value) || NodeUtil.isImmutableValue(value)) {\n                 return true;\n             }\n             throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value.getLastChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties.\n            return false;\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            // TODO(nicksantos): This needs to be changed so that it\n            // returns true iff we're sure the value was never aliased from inside\n            // the constructor (similar to callHasLocalResult)\n            return false;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n            return true;\n        default:\n            // Other op force a local value:\n            //  x = '' + g (x is now an local string)\n            //  x -= g (x is now an local number)\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n@@ -1,10 +1,7 @@\n static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n     switch(value.getType()) {\n         case Token.ASSIGN:\n-            // A result that is aliased by a non-local name, is the effectively the\n-            // same as returning a non-local name, but this doesn't matter if the\n-            // value is immutable.\n-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value.getLastChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n@@ -26,14 +23,14 @@\n         case Token.GETELEM:\n         case Token.GETPROP:\n             // There is no information about the locality of object properties.\n-            return locals.apply(value);\n+            return false;\n         case Token.CALL:\n             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n         case Token.NEW:\n             // TODO(nicksantos): This needs to be changed so that it\n             // returns true iff we're sure the value was never aliased from inside\n             // the constructor (similar to callHasLocalResult)\n-            return true;\n+            return false;\n         case Token.FUNCTION:\n         case Token.REGEXP:\n         case Token.ARRAYLIT:\n", "finish_reason": "stop", "valid": true, "num": 1}, {"output": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is the effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value.getLastChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties.\n            return locals.apply(value);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            // TODO(nicksantos): This needs to be changed so that it\n            // returns true iff we're sure the value was never aliased from inside\n            // the constructor (similar to callHasLocalResult)\n            return true;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n            return true;\n        default:\n            // Other op force a local value:\n            //  x = '' + g (x is now an local string)\n            //  x -= g (x is now an local number)\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue\n@@ -4,7 +4,7 @@\n             // A result that is aliased by a non-local name, is the effectively the\n             // same as returning a non-local name, but this doesn't matter if the\n             // value is immutable.\n-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value.getLastChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n         case Token.COMMA:\n             return evaluatesToLocalValue(value.getLastChild(), locals);\n         case Token.AND:\n", "finish_reason": "stop", "valid": false, "num": 1}]