--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
@@ -4,7 +4,7 @@
             // A result that is aliased by a non-local name, is the effectively the
             // same as returning a non-local name, but this doesn't matter if the
             // value is immutable.
-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.test(value) && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
@@ -20,15 +20,15 @@
                 return true;
             }
         case Token.THIS:
-            return locals.apply(value);
+            return locals.test(value);
         case Token.NAME:
-            return isImmutableValue(value) || locals.apply(value);
+            return isImmutableValue(value) || locals.test(value);
         case Token.GETELEM:
         case Token.GETPROP:
             // There is no information about the locality of object properties.
-            return locals.apply(value);
+            return locals.test(value);
         case Token.CALL:
-            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
+            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);
         case Token.NEW:
             // TODO(nicksantos): This needs to be changed so that it
             // returns true iff we're sure the value was never aliased from inside
