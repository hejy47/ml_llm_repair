--- org/apache/commons/math/estimation/AbstractEstimator.java@getCovariances
+++ org/apache/commons/math/estimation/AbstractEstimator.java@getCovariances
@@ -1,6 +1,6 @@
 public double[][] getCovariances(EstimationProblem problem) throws EstimationException {
     // set up the jacobian
-    updateJacobian();
+    problem.updateJacobian();
     // compute transpose(J).J, avoiding building big intermediate matrices
     final int rows = problem.getMeasurements().length;
     final int cols = problem.getAllParameters().length;
@@ -10,7 +10,7 @@
         for (int j = i; j < cols; ++j) {
             double sum = 0;
             for (int k = 0; k < max; k += cols) {
-                sum += jacobian[k + i] * jacobian[k + j];
+                sum += problem.getJacobian()[k + i] * problem.getJacobian()[k + j];
             }
             jTj[i][j] = sum;
             jTj[j][i] = sum;
--- org/apache/commons/math/estimation/AbstractEstimator.java@guessParametersErrors
+++ org/apache/commons/math/estimation/AbstractEstimator.java@guessParametersErrors
@@ -5,8 +5,8 @@
         throw new EstimationException("no degrees of freedom ({0} measurements, {1} parameters)", new Object[] { new Integer(m), new Integer(p) });
     }
     double[] errors = new double[problem.getAllParameters().length];
-    final double c = Math.sqrt(getChiSquare(problem) / (m - p));
-    double[][] covar = getCovariances(problem);
+    final double c = Math.sqrt(problem.getChiSquare() / (m - p));
+    double[][] covar = problem.getCovariances();
     for (int i = 0; i < errors.length; ++i) {
         errors[i] = Math.sqrt(covar[i][i]) * c;
     }
