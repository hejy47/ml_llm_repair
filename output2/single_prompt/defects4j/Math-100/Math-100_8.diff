--- org/apache/commons/math/estimation/AbstractEstimator.java@getCovariances
+++ org/apache/commons/math/estimation/AbstractEstimator.java@getCovariances
@@ -18,7 +18,9 @@
     }
     try {
         // compute the covariances matrix
-        return new RealMatrixImpl(jTj).inverse().getData();
+        RealMatrixImpl jTjMatrix = new RealMatrixImpl(jTj);
+        DecompositionSolver solver = new LUDecompositionImpl(jTjMatrix).getSolver();
+        return solver.getInverse().getData();
     } catch (InvalidMatrixException ime) {
         throw new EstimationException("unable to compute covariances: singular problem", new Object[0]);
     }
--- org/apache/commons/math/estimation/AbstractEstimator.java@guessParametersErrors
+++ org/apache/commons/math/estimation/AbstractEstimator.java@guessParametersErrors
@@ -4,10 +4,10 @@
     if (m <= p) {
         throw new EstimationException("no degrees of freedom ({0} measurements, {1} parameters)", new Object[] { new Integer(m), new Integer(p) });
     }
-    double[] errors = new double[problem.getAllParameters().length];
+    double[] errors = new double[p];
     final double c = Math.sqrt(getChiSquare(problem) / (m - p));
     double[][] covar = getCovariances(problem);
-    for (int i = 0; i < errors.length; ++i) {
+    for (int i = 0; i < p; ++i) {
         errors[i] = Math.sqrt(covar[i][i]) * c;
     }
     return errors;
