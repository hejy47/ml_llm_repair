--- org/apache/commons/math/estimation/AbstractEstimator.java@getCovariances
+++ org/apache/commons/math/estimation/AbstractEstimator.java@getCovariances
@@ -9,8 +9,8 @@
     for (int i = 0; i < cols; ++i) {
         for (int j = i; j < cols; ++j) {
             double sum = 0;
-            for (int k = 0; k < max; k += cols) {
-                sum += jacobian[k + i] * jacobian[k + j];
+            for (int k = 0; k < rows; ++k){
+                 sum += jacobian[k][i] * jacobian[k][j];
             }
             jTj[i][j] = sum;
             jTj[j][i] = sum;
--- org/apache/commons/math/estimation/AbstractEstimator.java@guessParametersErrors
+++ org/apache/commons/math/estimation/AbstractEstimator.java@guessParametersErrors
@@ -2,7 +2,7 @@
     int m = problem.getMeasurements().length;
     int p = problem.getAllParameters().length;
     if (m <= p) {
-        throw new EstimationException("no degrees of freedom ({0} measurements, {1} parameters)", new Object[] { new Integer(m), new Integer(p) });
+        throw new EstimationException(java.text.MessageFormat.format("no degrees of freedom ({0} measurements, {1} parameters)", new Object[] { new Integer(m), new Integer(p) }));
     }
     double[] errors = new double[problem.getAllParameters().length];
     final double c = Math.sqrt(getChiSquare(problem) / (m - p));
