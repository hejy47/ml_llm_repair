--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,3 +1,6 @@
 public int compareTo(DurationField durationField) {
-    return 0;
+    if (getClass() == durationField.getClass()) {
+        return getName().compareTo(durationField.getName());
+    }
+    return Long.compare(getUnitMillis(), durationField.getUnitMillis());
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -27,7 +27,7 @@
         DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
         if (i > 0) {
             int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
+            if (compare < 0 || (compare == 0 && !lastUnitField.isSupported() && loopUnitField.isSupported())) {
                 throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
             } else if (compare == 0) {
                 if (types[i - 1].getRangeDurationType() == null) {
--- org/joda/time/Partial.java@with
+++ org/joda/time/Partial.java@with
@@ -23,6 +23,8 @@
                         DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                         if (rangeField.compareTo(loopRangeField) > 0) {
                             break;
+                        } else if (rangeField == loopRangeField) {
+                            throw new IllegalArgumentException("Types array must not contain duplicate: " + fieldType.getName() + " and " + loopType.getName());
                         }
                     }
                 }
