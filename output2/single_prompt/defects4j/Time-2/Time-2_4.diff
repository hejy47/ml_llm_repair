--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,3 +1,13 @@
 public int compareTo(DurationField durationField) {
-    return 0;
+    if (this == durationField) {
+        return 0;
+    }
+    if (durationField == null) {
+        throw new NullPointerException();
+    }
+    DurationFieldType otherType = durationField.getType();
+    if (getType().equals(otherType)) {
+        return 0;
+    }
+    throw new ClassCastException("Invalid DurationField type: " + otherType);
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -11,47 +11,17 @@
     if (values.length != types.length) {
         throw new IllegalArgumentException("Values array must be the same length as the types array");
     }
-    if (types.length == 0) {
+    if (types.length == 1) {
+        validate(types[0], values[0]);
         iTypes = types;
         iValues = values;
         return;
     }
-    for (int i = 0; i < types.length; i++) {
-        if (types[i] == null) {
-            throw new IllegalArgumentException("Types array must not contain null: index " + i);
-        }
-    }
-    DurationField lastUnitField = null;
-    for (int i = 0; i < types.length; i++) {
-        DateTimeFieldType loopType = types[i];
-        DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
-        if (i > 0) {
-            int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
-                throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-            } else if (compare == 0) {
-                if (types[i - 1].getRangeDurationType() == null) {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
-                    }
-                } else {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
-                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                    if (lastRangeField.compareTo(loopRangeField) < 0) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    if (lastRangeField.compareTo(loopRangeField) == 0) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
-                    }
-                }
-            }
-        }
-        lastUnitField = loopUnitField;
-    }
-    iTypes = (DateTimeFieldType[]) types.clone();
-    chronology.validate(this, values);
-    iValues = (int[]) values.clone();
+    DateTimeFieldType[] typesCopy = (DateTimeFieldType[]) types.clone();
+    int[] valuesCopy = (int[]) values.clone();
+    PartialConverter converter = new PartialConverter();
+    converter.convert(this, typesCopy, valuesCopy);
+    iTypes = (DateTimeFieldType[]) typesCopy.clone();
+    iValues = (int[]) valuesCopy.clone();
+    chronology.validate(this, valuesCopy);
 }
--- org/joda/time/Partial.java@with
+++ org/joda/time/Partial.java@with
@@ -7,7 +7,6 @@
     if (index == -1) {
         DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
         int[] newValues = new int[newTypes.length];
-        // find correct insertion point to keep largest-smallest order
         int i = 0;
         DurationField unitField = fieldType.getDurationType().getField(iChronology);
         if (unitField.isSupported()) {
@@ -28,22 +27,21 @@
                 }
             }
         }
+        // Arraycopy elements before insert index
         System.arraycopy(iTypes, 0, newTypes, 0, i);
         System.arraycopy(iValues, 0, newValues, 0, i);
+        // Insert new element
         newTypes[i] = fieldType;
         newValues[i] = value;
-        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-        // use public constructor to ensure full validation
-        // this isn't overly efficient, but is safe
-        Partial newPartial = new Partial(newTypes, newValues, iChronology);
-        iChronology.validate(newPartial, newValues);
-        return newPartial;
+        // Arraycopy elements after insert index
+        System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);
+        System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);
+        return new Partial(newTypes, newValues, iChronology);
     }
     if (value == getValue(index)) {
         return this;
     }
-    int[] newValues = getValues();
+    int[] newValues = (int[]) iValues.clone();
     newValues = getField(index).set(this, index, newValues, value);
     return new Partial(this, newValues);
 }
