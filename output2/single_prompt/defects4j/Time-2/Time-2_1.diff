--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,3 +1,15 @@
 public int compareTo(DurationField durationField) {
-    return 0;
+    if (durationField instanceof UnsupportedDurationField) {
+        return 1;
+    }
+    DurationField other = (DurationField) durationField;
+    long thisUnitMillis = getUnitMillis();
+    long otherUnitMillis = other.getUnitMillis();
+    if (thisUnitMillis == otherUnitMillis) {
+        return 0;
+    } else if (thisUnitMillis < otherUnitMillis) {
+        return -1;
+    } else {
+        return 1;
+    }
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -21,35 +21,44 @@
             throw new IllegalArgumentException("Types array must not contain null: index " + i);
         }
     }
-    DurationField lastUnitField = null;
+    DurationFieldType currentRangeType = null;
+    DurationField currentRangeDurationField = null;
     for (int i = 0; i < types.length; i++) {
         DateTimeFieldType loopType = types[i];
-        DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+        DurationField loopDurationField = loopType.getDurationType().getField(iChronology);
         if (i > 0) {
-            int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
-                throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-            } else if (compare == 0) {
-                if (types[i - 1].getRangeDurationType() == null) {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
-                    }
-                } else {
-                    if (loopType.getRangeDurationType() == null) {
+            if (currentRangeType == null && currentRangeDurationField == null) {
+                currentRangeType = types[i - 1].getRangeDurationType();
+                if (currentRangeType != null) {
+                    currentRangeDurationField = currentRangeType.getField(iChronology);
+                }
+            }
+            if (currentRangeType != null) {
+                DurationField loopRangeDurationField = loopType.getRangeDurationType().getField(iChronology);
+                if (currentRangeDurationField.compareTo(loopRangeDurationField) < 0) {
+                    throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
+                } else if (currentRangeDurationField.compareTo(loopRangeDurationField) == 0) {
+                    if (currentRangeType.compareTo(loopType.getRangeDurationType()) < 0) {
                         throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
-                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                    if (lastRangeField.compareTo(loopRangeField) < 0) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    if (lastRangeField.compareTo(loopRangeField) == 0) {
+                    } else if (currentRangeType.compareTo(loopType.getRangeDurationType()) == 0) {
                         throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
                     }
                 }
+                currentRangeType = loopType.getRangeDurationType();
+                if (currentRangeType == null) {
+                    currentRangeDurationField = null;
+                } else {
+                    currentRangeDurationField = currentRangeType.getField(iChronology);
+                }
+            } else {
+                int compare = currentRangeDurationField.compareTo(loopDurationField);
+                if (compare < 0) {
+                    throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
+                } else if (compare == 0) {
+                    throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
+                }
             }
         }
-        lastUnitField = loopUnitField;
     }
     iTypes = (DateTimeFieldType[]) types.clone();
     chronology.validate(this, values);
--- org/joda/time/Partial.java@with
+++ org/joda/time/Partial.java@with
@@ -11,7 +11,8 @@
         int i = 0;
         DurationField unitField = fieldType.getDurationType().getField(iChronology);
         if (unitField.isSupported()) {
-            for (; i < iTypes.length; i++) {
+            int len = iTypes.length;
+            for (; i < len; i++) {
                 DateTimeFieldType loopType = iTypes[i];
                 DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                 if (loopUnitField.isSupported()) {
@@ -23,6 +24,8 @@
                         DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                         if (rangeField.compareTo(loopRangeField) > 0) {
                             break;
+                        } else if (rangeField.compareTo(loopRangeField) == 0) {
+                            throw new IllegalArgumentException("Types array must not contain duplicate: " + fieldType.getName() + " and " + loopType.getName());
                         }
                     }
                 }
