--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,3 +1,14 @@
 public int compareTo(DurationField durationField) {
-    return 0;
+    if (durationField instanceof PreciseDurationField) {
+        PreciseDurationField other = (PreciseDurationField) durationField;
+        long thisMillis = getUnitMillis();
+        long otherMillis = other.getUnitMillis();
+        if (thisMillis < otherMillis) {
+            return -1;
+        } else if (thisMillis > otherMillis) {
+            return 1;
+        }
+    }
+    return (getUnitMillis() == durationField.getUnitMillis() ? 0 :
+            (getUnitMillis() < durationField.getUnitMillis() ? -1 : 1));
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -21,13 +21,13 @@
             throw new IllegalArgumentException("Types array must not contain null: index " + i);
         }
     }
-    DurationField lastUnitField = null;
+    DurationFieldType lastUnitFieldType = null;
     for (int i = 0; i < types.length; i++) {
         DateTimeFieldType loopType = types[i];
-        DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+        DurationFieldType loopUnitFieldType = loopType.getDurationType();
         if (i > 0) {
-            int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
+            int compare = lastUnitFieldType.compareTo(loopUnitFieldType);
+            if (compare < 0 || (compare != 0 && loopUnitFieldType.isSupported() == false)) {
                 throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
             } else if (compare == 0) {
                 if (types[i - 1].getRangeDurationType() == null) {
@@ -38,18 +38,18 @@
                     if (loopType.getRangeDurationType() == null) {
                         throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
                     }
-                    DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
-                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                    if (lastRangeField.compareTo(loopRangeField) < 0) {
+                    DurationFieldType lastRangeFieldType = types[i - 1].getRangeDurationType();
+                    DurationFieldType loopRangeFieldType = loopType.getRangeDurationType();
+                    if (lastRangeFieldType.compareTo(loopRangeFieldType) < 0) {
                         throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
                     }
-                    if (lastRangeField.compareTo(loopRangeField) == 0) {
+                    if (lastRangeFieldType.compareTo(loopRangeFieldType) == 0) {
                         throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
                     }
                 }
             }
         }
-        lastUnitField = loopUnitField;
+        lastUnitFieldType = loopUnitFieldType;
     }
     iTypes = (DateTimeFieldType[]) types.clone();
     chronology.validate(this, values);
