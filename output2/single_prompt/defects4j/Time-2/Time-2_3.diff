--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,3 +1,11 @@
 public int compareTo(DurationField durationField) {
-    return 0;
+    if (durationField instanceof PreciseDurationField) {
+        PreciseDurationField other = (PreciseDurationField) durationField;
+        if (iUnitMillis == other.iUnitMillis) {
+            return 0;
+        }
+    }
+    long otherMillis = durationField.getUnitMillis(); // safe from ClassCastException
+    long thisMillis = getUnitMillis();
+    return (thisMillis < otherMillis ? -1 : (thisMillis == otherMillis ? 0 : 1));
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -27,7 +27,7 @@
         DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
         if (i > 0) {
             int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
+            if (compare < 0 || (compare != 0 && !loopUnitField.isSupported())) {
                 throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
             } else if (compare == 0) {
                 if (types[i - 1].getRangeDurationType() == null) {
--- org/joda/time/Partial.java@with
+++ org/joda/time/Partial.java@with
@@ -45,5 +45,5 @@
     }
     int[] newValues = getValues();
     newValues = getField(index).set(this, index, newValues, value);
-    return new Partial(this, newValues);
+    return new Partial(this, newValues, iChronology);
 }
