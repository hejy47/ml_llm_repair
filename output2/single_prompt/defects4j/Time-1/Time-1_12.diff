--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,6 +1,12 @@
 public int compareTo(DurationField durationField) {
     if (durationField.isSupported()) {
-        return 1;
+        if (durationField.getUnitMillis() < getUnitMillis()) {
+            return 1;
+        } else if (durationField.getUnitMillis() == getUnitMillis()) {
+            return 0;
+        } else {
+            return -1;
+        }
     }
-    return 0;
+    throw new IllegalArgumentException("Invalid duration field type to compare with");
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -26,18 +26,16 @@
         DateTimeFieldType loopType = types[i];
         DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
         if (i > 0) {
-            int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0) {
+            if (lastUnitField.compareTo(loopUnitField) < 0) {
                 throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-            } else if (compare == 0) {
-                if (types[i - 1].getRangeDurationType() == null) {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
-                    }
+            } else if (lastUnitField.compareTo(loopUnitField) == 0) {
+                if (types[i - 1].getRangeDurationType() == null && loopType.getRangeDurationType() == null) {
+                    throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
+                } else if (types[i - 1].getRangeDurationType() != null && loopType.getRangeDurationType() == null) {
+                    throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
+                } else if (types[i - 1].getRangeDurationType() == null && loopType.getRangeDurationType() != null) {
+                    throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
                 } else {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
                     DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
                     DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                     if (lastRangeField.compareTo(loopRangeField) < 0) {
