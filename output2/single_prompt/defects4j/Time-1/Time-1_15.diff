--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,6 +1,6 @@
 public int compareTo(DurationField durationField) {
-    if (durationField.isSupported()) {
-        return 1;
+    if (durationField == null || !durationField.isSupported()) { // added null check
+        return -1; // return -1 instead of 0
     }
-    return 0;
+    return 1;
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -12,8 +12,8 @@
         throw new IllegalArgumentException("Values array must be the same length as the types array");
     }
     if (types.length == 0) {
-        iTypes = types;
-        iValues = values;
+        iTypes = types.clone(); // fix shallow copy
+        iValues = values.clone(); // fix shallow copy
         return;
     }
     for (int i = 0; i < types.length; i++) {
@@ -21,37 +21,32 @@
             throw new IllegalArgumentException("Types array must not contain null: index " + i);
         }
     }
-    DurationField lastUnitField = null;
+    DurationFieldType lastUnitType = null; // fix variable name
     for (int i = 0; i < types.length; i++) {
         DateTimeFieldType loopType = types[i];
-        DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+        DurationFieldType loopUnitType = loopType.getDurationType().getFieldType();
         if (i > 0) {
-            int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0) {
-                throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
+            int compare = lastUnitType.compareTo(loopUnitType);
+            if (compare > 0) { // fix the comparison order
+                throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " > " + loopType.getName());
             } else if (compare == 0) {
-                if (types[i - 1].getRangeDurationType() == null) {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
+                if (types[i - 1].getRangeDurationType() == null || loopType.getRangeDurationType() == null) { // fix null check
+                    throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
+                } else {
+                    DurationFieldType lastRangeType = types[i - 1].getRangeDurationType().getFieldType();
+                    DurationFieldType loopRangeType = loopType.getRangeDurationType().getFieldType();
+                    if (lastRangeType.compareTo(loopRangeType) < 0) {
+                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " > " + loopType.getName());
                     }
-                } else {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
-                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                    if (lastRangeField.compareTo(loopRangeField) < 0) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    if (lastRangeField.compareTo(loopRangeField) == 0) {
+                    if (lastRangeType.compareTo(loopRangeType) == 0) {
                         throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
                     }
                 }
             }
         }
-        lastUnitField = loopUnitField;
+        lastUnitType = loopUnitType;
     }
-    iTypes = (DateTimeFieldType[]) types.clone();
+    iTypes = types.clone(); // fix shallow copy
     chronology.validate(this, values);
-    iValues = (int[]) values.clone();
+    iValues = values.clone(); // fix shallow copy
 }
