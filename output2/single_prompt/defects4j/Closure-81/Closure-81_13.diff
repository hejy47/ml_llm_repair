--- com/google/javascript/jscomp/parsing/IRFactory.java@processFunctionNode
+++ com/google/javascript/jscomp/parsing/IRFactory.java@processFunctionNode
@@ -1,11 +1,10 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
     Name name = functionNode.getFunctionName();
-    Boolean isUnnamedFunction = false;
-    if (name == null) {
+    boolean isUnnamedFunction = (name == null || name.getIdentifier().isEmpty());
+    if (isUnnamedFunction) {
         name = new Name();
         name.setIdentifier("");
-        isUnnamedFunction = true;
     }
     Node node = newNode(Token.FUNCTION);
     Node newName = transform(name);
@@ -16,7 +15,7 @@
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getBody().getRelativeOffset();
         newName.setCharno(position2charno(lpColumn));
     }
     node.addChildToBack(newName);
@@ -27,14 +26,13 @@
     // function name (or else a semicolon will be inserted.)  If there's no
     // function name, assume the paren was on the same line as the function.
     // TODO(bowdidge): Mark line number of paren correctly.
-    Name fnName = functionNode.getFunctionName();
-    if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
+    if (name != null) {
+        lp.setLineno(name.getLineno());
     } else {
         lp.setLineno(functionNode.getLineno());
     }
-    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
-    lp.setCharno(position2charno(lparenCharno));
+    int lparenCharno = functionNode.getBaseLineno() + functionNode.getBaseColumn() + "function".length();
+    lp.setCharno(lparenCharno);
     for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
     }
