--- org/apache/commons/math/ode/AbstractIntegrator.java@acceptStep
+++ org/apache/commons/math/ode/AbstractIntegrator.java@acceptStep
@@ -11,21 +11,25 @@
     }
     // search for next events that may occur during the step
     final int orderingSign = interpolator.isForward() ? +1 : -1;
-    SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                public int compare(EventState es0, EventState es1) {
-            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+    SortedSet<EventState> occurringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
+        public int compare(EventState es0, EventState es1) {
+            int cmp = Double.compare(es0.getEventTime(), es1.getEventTime());
+            if (cmp == 0) {
+                // make sure distinct events can be sorted
+                cmp = System.identityHashCode(es0) - System.identityHashCode(es1);
+            }
+            return orderingSign * cmp;
         }
     });
     for (final EventState state : eventsStates) {
         if (state.evaluateStep(interpolator)) {
             // the event occurs during the current step
-            occuringEvents.add(state);
+            occurringEvents.add(state);
         }
     }
-    while (!occuringEvents.isEmpty()) {
+    while (!occurringEvents.isEmpty()) {
         // handle the chronologically first event
-        final Iterator<EventState> iterator = occuringEvents.iterator();
+        final Iterator<EventState> iterator = occurringEvents.iterator();
         final EventState currentEvent = iterator.next();
         iterator.remove();
         // restrict the interpolator to the first part of the step, up to the event
@@ -61,7 +65,7 @@
         // check if the same event occurs again in the remaining part of the step
         if (currentEvent.evaluateStep(interpolator)) {
             // the event occurs during the current step
-            occuringEvents.add(currentEvent);
+            occurringEvents.add(currentEvent);
         }
     }
     interpolator.setInterpolatedTime(currentT);
