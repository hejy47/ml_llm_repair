--- com/google/javascript/jscomp/ControlFlowAnalysis.java@mayThrowException
+++ com/google/javascript/jscomp/ControlFlowAnalysis.java@mayThrowException
@@ -1,21 +1,22 @@
 private static boolean mayThrowException(Node n) {
-    switch(n.getType()) {
-        case Token.CALL:
-        case Token.GETPROP:
-        case Token.GETELEM:
-        case Token.THROW:
-        case Token.NEW:
-        case Token.ASSIGN:
-        case Token.INC:
-        case Token.DEC:
+    switch(n.getToken()) {
+        case CALL:
+        case GETPROP:
+        case GETELEM:
+        case THROW:
+        case NEW:
+        case ASSIGN:
+        case INC:
+        case DEC:
             return true;
-        case Token.FUNCTION:
+        case FUNCTION:
+            return false;
+        default:
+            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+                if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {
+                    return true;
+                }
+            }
             return false;
     }
-    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {
-            return true;
-        }
-    }
-    return false;
 }
--- com/google/javascript/jscomp/DisambiguateProperties.java@getTypeWithProperty
+++ com/google/javascript/jscomp/DisambiguateProperties.java@getTypeWithProperty
@@ -1,7 +1,7 @@
 @Override
 public ObjectType getTypeWithProperty(String field, JSType type) {
     if (!(type instanceof ObjectType)) {
-        if (type.autoboxesTo() != null) {
+        if (type.autoboxesTo() != null && type.autoboxesTo() instanceof ObjectType) {
             type = type.autoboxesTo();
         } else {
             return null;
@@ -15,10 +15,11 @@
     // this appears.  This will make references to overriden properties look
     // like references to the initial property, so they are renamed alike.
     ObjectType foundType = null;
-    ObjectType objType = ObjectType.cast(type);
+    ObjectType objType = (ObjectType) type;
     while (objType != null && objType.getImplicitPrototype() != objType) {
         if (objType.hasOwnProperty(field)) {
             foundType = objType;
+            break;
         }
         objType = objType.getImplicitPrototype();
     }
@@ -27,5 +28,11 @@
     // getGreatestSubtypeWithProperty does not guarantee that the property
     // is defined on the returned type, it just indicates that it might be,
     // so we have to double check.
+    if (foundType == null) {
+        ObjectType subType = objType.getGreatestSubtypeWithProperty(field);
+        if (subType != null && subType.hasOwnProperty(field)) {
+            foundType = subType;
+        }
+    }
     return foundType;
 }
