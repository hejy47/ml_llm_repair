[{"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    if (classLoader == null) {\n        this.classLoader = Thread.currentThread().getContextClassLoader();\n    } else {\n        this.classLoader = classLoader;\n    }\n}\n\n## Fixed Function 2\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        if (classLoader != Thread.currentThread().getContextClassLoader()) {\n            return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n        } else {\n            throw ex;\n        }\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,8 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    if (classLoader == null) {\n+        this.classLoader = Thread.currentThread().getContextClassLoader();\n+    } else {\n+        this.classLoader = classLoader;\n+    }\n }\n--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -4,6 +4,10 @@\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        if (classLoader != Thread.currentThread().getContextClassLoader()) {\n+            return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        } else {\n+            throw ex;\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    if (classLoader == null) {\n        this.classLoader = Thread.currentThread().getContextClassLoader();\n    } else {\n        this.classLoader = classLoader;\n    }\n}\n\n## Fixed Function 2\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return super.resolveClass(desc);\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,8 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    if (classLoader == null) {\n+        this.classLoader = Thread.currentThread().getContextClassLoader();\n+    } else {\n+        this.classLoader = classLoader;\n+    }\n }\n--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -4,6 +4,6 @@\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        return super.resolveClass(desc);\n     }\n }\n", "finish_reason": "stop", "valid": true, "num": 1}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader();\n}\n\n## Fixed Function 2\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,4 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    this.classLoader = classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader();\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n}\n\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    try {\n        return Class.forName(desc.getName(), false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return super.resolveClass(desc);\n    }\n}\n\n## Fixed Function 2\n// No fix needed for this function.", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -1,9 +1,8 @@\n @Override\n protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n-    String name = desc.getName();\n     try {\n-        return Class.forName(name, false, classLoader);\n+        return Class.forName(desc.getName(), false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        return super.resolveClass(desc);\n     }\n }\n", "finish_reason": "stop", "valid": true, "num": 1}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    if (classLoader == null) {\n        this.classLoader = Thread.currentThread().getContextClassLoader();\n    } else {\n        this.classLoader = classLoader;\n    }\n}\n\n## Fixed Function 2\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        Class<?> clazz = Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n        if (clazz.getClassLoader() == null || classLoader == null || !clazz.getClassLoader().equals(classLoader)) {\n            throw ex;\n        } else {\n            return clazz;\n        }\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,8 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    if (classLoader == null) {\n+        this.classLoader = Thread.currentThread().getContextClassLoader();\n+    } else {\n+        this.classLoader = classLoader;\n+    }\n }\n--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -4,6 +4,11 @@\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        Class<?> clazz = Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        if (clazz.getClassLoader() == null || classLoader == null || !clazz.getClassLoader().equals(classLoader)) {\n+            throw ex;\n+        } else {\n+            return clazz;\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n}\n\n// Add the following method to load classes\nprotected Class<?> resolveClass(String className) throws ClassNotFoundException {\n    try {\n        return Class.forName(className, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return Class.forName(className, false, Thread.currentThread().getContextClassLoader());\n    }\n}\n\n## Fixed Function 2\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    return resolveClass(name);\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -1,9 +1,5 @@\n @Override\n protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n     String name = desc.getName();\n-    try {\n-        return Class.forName(name, false, classLoader);\n-    } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n-    }\n+    return resolveClass(name);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic class ClassLoaderAwareObjectInputStream extends ObjectInputStream {\n    private final ClassLoader classLoader;\n\n    public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n        super(in);\n        this.classLoader = classLoader;\n    }\n\n    @Override\n    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n        String name = desc.getName();\n        return Class.forName(name, false, classLoader);\n    }\n}\n\n## Fixed Function 2\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return super.resolveClass(desc);\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,11 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n-    super(in);\n-    this.classLoader = classLoader;\n+        super(in);\n+        this.classLoader = classLoader;\n+    }\n+\n+    @Override\n+    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n+        String name = desc.getName();\n+        return Class.forName(name, false, classLoader);\n+    }\n }\n--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -1,9 +1,6 @@\n @Override\n-protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n-    String name = desc.getName();\n-    try {\n+    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n+        String name = desc.getName();\n         return Class.forName(name, false, classLoader);\n-    } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    if (classLoader == null) {\n        this.classLoader = Thread.currentThread().getContextClassLoader();\n    } else {\n        this.classLoader = classLoader;\n    }\n}\n\n## Fixed Function 2\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return Class.forName(name, false, getClass().getClassLoader());\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,8 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    if (classLoader == null) {\n+        this.classLoader = Thread.currentThread().getContextClassLoader();\n+    } else {\n+        this.classLoader = classLoader;\n+    }\n }\n--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -4,6 +4,6 @@\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        return Class.forName(name, false, getClass().getClassLoader());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n}\n\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        Thread currentThread = Thread.currentThread();\n        return Class.forName(name, false, currentThread.getContextClassLoader());\n    }\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic class ClassLoaderAwareObjectInputStream extends ObjectInputStream {\n\n    private ClassLoader classLoader;\n\n    public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n        super(in);\n        this.classLoader = classLoader;\n    }\n\n    @Override\n    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n        String name = desc.getName();\n        try {\n            return Class.forName(name, false, classLoader);\n        } catch (ClassNotFoundException ex) {\n            return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n        }\n    }\n}\n\n## Fixed Function 2 (no changes needed)\nThis function doesn't have any issues.", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,15 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n-    super(in);\n-    this.classLoader = classLoader;\n+        super(in);\n+        this.classLoader = classLoader;\n+    }\n+\n+    @Override\n+    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n+        String name = desc.getName();\n+        try {\n+            return Class.forName(name, false, classLoader);\n+        } catch (ClassNotFoundException ex) {\n+            return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        }\n+    }\n }\n--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -1,9 +1,10 @@\n @Override\n-protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n-    String name = desc.getName();\n-    try {\n-        return Class.forName(name, false, classLoader);\n-    } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n+        String name = desc.getName();\n+        try {\n+            return Class.forName(name, false, classLoader);\n+        } catch (ClassNotFoundException ex) {\n+            return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    if(classLoader == null) {\n        this.classLoader = Thread.currentThread().getContextClassLoader();\n    } else {\n        this.classLoader = classLoader;\n    }\n}\n\n## Fixed Function 2\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,8 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    if(classLoader == null) {\n+        this.classLoader = Thread.currentThread().getContextClassLoader();\n+    } else {\n+        this.classLoader = classLoader;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n}\n\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return super.resolveClass(desc);\n    }\n}\n\n## Fixed Function 2\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n}\n\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -4,6 +4,6 @@\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        return super.resolveClass(desc);\n     }\n }\n", "finish_reason": "stop", "valid": true, "num": 1}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    if (classLoader == null) {\n        this.classLoader = Thread.currentThread().getContextClassLoader();\n    } else {\n        this.classLoader = classLoader;\n    }\n}\n\n## Fixed Function 2\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,8 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    if (classLoader == null) {\n+        this.classLoader = Thread.currentThread().getContextClassLoader();\n+    } else {\n+        this.classLoader = classLoader;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n}\n\n@Override\npublic Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return super.resolveClass(desc);\n    }\n}\n\n## Fixed Function 2\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n}\n\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return super.resolveClass(desc);\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -1,9 +1,9 @@\n @Override\n-protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n+public Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n     String name = desc.getName();\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        return super.resolveClass(desc);\n     }\n }\n", "finish_reason": "stop", "valid": true, "num": 1}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader();\n}\n\n## Fixed Function 2\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();\n        if (classLoader != currentClassLoader) {\n            return Class.forName(name, false, currentClassLoader);\n        }\n        throw ex;\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,4 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    this.classLoader = classLoader != null ? classLoader : Thread.currentThread().getContextClassLoader();\n }\n--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -4,6 +4,10 @@\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();\n+        if (classLoader != currentClassLoader) {\n+            return Class.forName(name, false, currentClassLoader);\n+        }\n+        throw ex;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n}\n\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        Class<?> clazz = Class.forName(name, false, classLoader);\n        if (clazz != null) {\n            return clazz;\n        }\n    } catch (ClassNotFoundException ex) {\n        // ignore and fallback to default behavior\n    }\n    return super.resolveClass(desc);\n}\n\n## Fixed Function 2\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    Class<?> clazz;\n    try {\n        clazz = Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        clazz = Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n    }\n    return clazz;\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -2,8 +2,12 @@\n protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n     String name = desc.getName();\n     try {\n-        return Class.forName(name, false, classLoader);\n+        Class<?> clazz = Class.forName(name, false, classLoader);\n+        if (clazz != null) {\n+            return clazz;\n+        }\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        // ignore and fallback to default behavior\n     }\n+    return super.resolveClass(desc);\n }\n", "finish_reason": "stop", "valid": true, "num": 1}]