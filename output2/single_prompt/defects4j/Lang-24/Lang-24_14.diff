--- org/apache/commons/lang3/math/NumberUtils.java@isNumber
+++ org/apache/commons/lang3/math/NumberUtils.java@isNumber
@@ -6,93 +6,59 @@
     int sz = chars.length;
     boolean hasExp = false;
     boolean hasDecPoint = false;
-    boolean allowSigns = false;
+    boolean allowSigns = true; // Set to true to allow a leading sign
     boolean foundDigit = false;
-    // deal with any possible sign up front
-    int start = (chars[0] == '-') ? 1 : 0;
-    if (sz > start + 1) {
-        if (chars[start] == '0' && chars[start + 1] == 'x') {
-            int i = start + 2;
-            if (i == sz) {
-                // str == "0x"
-                return false;
-            }
-            // checking hex (it can't be anything else)
-            for (; i < chars.length; i++) {
-                if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
-                    return false;
-                }
-            }
-            return true;
-        }
+    int start = 0;
+    if (sz > 0 && (chars[0] == '-' || chars[0] == '+')) {
+        // Set start to 1 for a leading sign
+        start = 1;
     }
-    // don't want to loop to the last char, check it afterwords
+    // Don't want to loop to the last char in case there is a sign at the end
     sz--;
-    // for type qualifiers
     int i = start;
-    // loop to the next to last char or to the last char if we need another digit to
-    // make a valid number (e.g. chars[0..5] = "1234E")
-    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
+    // Loop through each character and validate if it is a number
+    while (i <= sz) {
         if (chars[i] >= '0' && chars[i] <= '9') {
             foundDigit = true;
-            allowSigns = false;
         } else if (chars[i] == '.') {
             if (hasDecPoint || hasExp) {
-                // two decimal points or dec in exponent
+                // Two decimal points or a decimal point in exponent
                 return false;
             }
             hasDecPoint = true;
         } else if (chars[i] == 'e' || chars[i] == 'E') {
-            // we've already taken care of hex.
             if (hasExp) {
-                // two E's
+                // Two E's in number
                 return false;
             }
             if (!foundDigit) {
+                // Need to have at least one digit before exponent
                 return false;
             }
             hasExp = true;
-            allowSigns = true;
-        } else if (chars[i] == '+' || chars[i] == '-') {
+            allowSigns = true; // Allow sign after exponent
+            foundDigit = false; // Need a digit after the exponent
+        } else if (chars[i] == '-' || chars[i] == '+') {
             if (!allowSigns) {
+                // Sign not in expected position
                 return false;
             }
-            allowSigns = false;
-            // we need a digit after the E
+            allowSigns = false; // Only allow if it's immediately after E
             foundDigit = false;
         } else {
+            // Invalid character found
             return false;
         }
         i++;
     }
     if (i < chars.length) {
-        if (chars[i] >= '0' && chars[i] <= '9') {
-            // no type qualifier, OK
-            return true;
+        if (chars[i] == 'f' || chars[i] == 'F' || chars[i] == 'd' || chars[i] == 'D') {
+            // Check for valid type qualifier
+            i++;
         }
-        if (chars[i] == 'e' || chars[i] == 'E') {
-            // can't have an E at the last byte
-            return false;
+        if (i < chars.length) {
+            return false; // Extra characters at end of number
         }
-        if (chars[i] == '.') {
-            if (hasDecPoint || hasExp) {
-                // two decimal points or dec in exponent
-                return false;
-            }
-            // single trailing decimal point after non-exponent is ok
-            return foundDigit;
-        }
-        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
-            return foundDigit;
-        }
-        if (chars[i] == 'l' || chars[i] == 'L') {
-            // not allowing L with an exponent or decimal point
-            return foundDigit && !hasExp;
-        }
-        // last character is illegal
-        return false;
     }
-    // allowSigns is true iff the val ends in 'E'
-    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
-    return !allowSigns && foundDigit;
+    return foundDigit;
 }
