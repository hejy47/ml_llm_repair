--- org/apache/commons/lang3/math/NumberUtils.java@isNumber
+++ org/apache/commons/lang3/math/NumberUtils.java@isNumber
@@ -1,12 +1,12 @@
 public static boolean isNumber(String str) {
-    if (StringUtils.isEmpty(str)) {
+    if (StringUtils.isBlank(str)) {
         return false;
     }
     char[] chars = str.toCharArray();
     int sz = chars.length;
     boolean hasExp = false;
     boolean hasDecPoint = false;
-    boolean allowSigns = false;
+    boolean allowSigns = true;
     boolean foundDigit = false;
     // deal with any possible sign up front
     int start = (chars[0] == '-') ? 1 : 0;
@@ -26,13 +26,12 @@
             return true;
         }
     }
-    // don't want to loop to the last char, check it afterwords
+    // don't want to loop to the last char, check it afterwards
     sz--;
-    // for type qualifiers
-    int i = start;
     // loop to the next to last char or to the last char if we need another digit to
     // make a valid number (e.g. chars[0..5] = "1234E")
-    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
+    int i = start;
+    while (i < sz) {
         if (chars[i] >= '0' && chars[i] <= '9') {
             foundDigit = true;
             allowSigns = false;
@@ -87,7 +86,7 @@
         }
         if (chars[i] == 'l' || chars[i] == 'L') {
             // not allowing L with an exponent or decimal point
-            return foundDigit && !hasExp;
+            return foundDigit && !hasExp && !hasDecPoint;
         }
         // last character is illegal
         return false;
