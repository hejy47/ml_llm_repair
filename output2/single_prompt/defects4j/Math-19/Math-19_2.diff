--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@checkParameters
+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@checkParameters
@@ -5,7 +5,7 @@
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
-        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {
+        if (!Double.isInfinite(lB[i]) && !Double.isInfinite(uB[i])) { // fixed logical operator
             hasFiniteBounds = true;
             break;
         }
@@ -29,6 +29,13 @@
             boundaries[0] = lB;
             boundaries[1] = uB;
             // Abort early if the normalization will overflow (cf. "encode" method).
+            if (boundaries[0] != null) { // added null check
+                for (int i = 0; i < boundaries[0].length; i++) { // corrected index
+                    if ((boundaries[1][i] - boundaries[0][i]) / constants.getNormalization() > Double.MAX_VALUE) { // corrected overflow check
+                        throw new MathIllegalArgumentException(LocalizedFormats.OVERFLOW_IN_COST_EVALUATION);
+                    }
+                }
+            }
         }
     } else {
         // Convert API to internal handling of boundaries.
