--- com/google/javascript/jscomp/ScopedAliases.java@findAliases
+++ com/google/javascript/jscomp/ScopedAliases.java@findAliases
@@ -9,12 +9,12 @@
         } else if (v.isBleedingFunction()) {
             // Bleeding functions already get a BAD_PARAMETERS error, so just
             // do nothing.
-        } else if (parent.getType() == Token.LP) {
-            // Parameters of the scope function also get a BAD_PARAMETERS
-            // error.
+        } else if (parent.getType() == Token.LP || parent.getType() == Token.FUNCTION) {
+            // Parameters and function expressions of the scope function also get a BAD_PARAMETERS
+            // error. They cannot be aliased.
         } else if (isVar) {
             Node grandparent = parent.getParent();
-            Node value = n.hasChildren() ? v.getInitialValue().detachFromParent() : null;
+            Node value = n.hasChildren() ? v.getInitialValue().detach() : null;
             Node varNode = parent;
             String name = n.getString();
             int nameCount = scopedAliasNames.count(name);
--- com/google/javascript/rhino/Node.java@getChildBefore
+++ com/google/javascript/rhino/Node.java@getChildBefore
@@ -1,5 +1,5 @@
 public Node getChildBefore(Node child) {
-    if (child == first) {
+    if (child == first || child == null) {
         return null;
     }
     Node n = first;
