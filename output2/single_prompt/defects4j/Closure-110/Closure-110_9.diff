--- com/google/javascript/jscomp/ScopedAliases.java@findAliases
+++ com/google/javascript/jscomp/ScopedAliases.java@findAliases
@@ -12,7 +12,7 @@
         } else if (parent.getType() == Token.LP) {
             // Parameters of the scope function also get a BAD_PARAMETERS
             // error.
-        } else if (isVar) {
+        } else if (isVar && parent.hasOneChild() && v.isDeclaredOrInferred()) { // fix
             Node grandparent = parent.getParent();
             Node value = n.hasChildren() ? v.getInitialValue().detachFromParent() : null;
             Node varNode = parent;
@@ -21,27 +21,30 @@
             scopedAliasNames.add(name);
             String globalName = "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));
             compiler.ensureLibraryInjected("base");
-            // First, we need to free up the function expression (EXPR)
-            // to be used in another expression.
-            // Replace "function NAME() { ... }" with "var NAME;".
-            // We can't keep the local name on the function expression,
-            // because IE is buggy and will leak the name into the global
-            // scope. This is covered in more detail here:
-            // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
-            //
-            // This will only cause problems if this is a hoisted, recursive
-            // function, and the programmer is using the hoisting.
-            // If this is a VAR, we can just detach the expression and
-            // the tree will still be valid.
-            // Add $jscomp.scope.name = EXPR;
-            // Make sure we copy over all the jsdoc and debug info.
-            if (value != null || v.getJSDocInfo() != null) {
-                Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(compiler.getCodingConvention(), globalName, value, v.getJSDocInfo()).useSourceInfoIfMissingFromForTree(n);
-                NodeUtil.setDebugInformation(newDecl.getFirstChild().getFirstChild(), n, name);
-                grandparent.addChildBefore(newDecl, varNode);
+            // check if variable is declared or inferred first.
+            if (v.isDeclaredOrInferred()) { // fix
+                // First, we need to free up the function expression (EXPR)
+                // to be used in another expression.
+                // Replace "function NAME() { ... }" with "var NAME;".
+                // We can't keep the local name on the function expression,
+                // because IE is buggy and will leak the name into the global
+                // scope. This is covered in more detail here:
+                // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
+                //
+                // This will only cause problems if this is a hoisted, recursive
+                // function, and the programmer is using the hoisting.
+                // If this is a VAR, we can just detach the expression and
+                // the tree will still be valid.
+                // Add $jscomp.scope.name = EXPR;
+                // Make sure we copy over all the jsdoc and debug info.
+                if (value != null || v.getJSDocInfo() != null) {
+                    Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(compiler.getCodingConvention(), globalName, value, v.getJSDocInfo()).useSourceInfoIfMissingFromForTree(n);
+                    NodeUtil.setDebugInformation(newDecl.getFirstChild().getFirstChild(), n, name);
+                    grandparent.addChildBefore(newDecl, varNode);
+                }
+                // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
+                v.getNameNode().addChildToFront(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), globalName, n, name));
             }
-            // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
-            v.getNameNode().addChildToFront(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), globalName, n, name));
             recordAlias(v);
         } else {
             // Do not other kinds of local symbols, like catch params.
--- com/google/javascript/rhino/Node.java@getChildBefore
+++ com/google/javascript/rhino/Node.java@getChildBefore
@@ -4,7 +4,7 @@
     }
     Node n = first;
     while (n.next != child) {
-        n = n.next;
+        n = n.getNext();
         if (n == null) {
             throw new RuntimeException("node is not a child");
         }
