--- com/google/javascript/jscomp/ScopedAliases.java@findAliases
+++ com/google/javascript/jscomp/ScopedAliases.java@findAliases
@@ -1,11 +1,13 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
+    ScopedAliases scopedAliases = new ScopedAliases();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         Node parent = n.getParent();
-        boolean isVar = parent.isVar();
+        boolean isVar = parent.isVar() || parent.isCatch();
+        boolean isFunction = parent.isFunction();
         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
-            recordAlias(v);
+            recordAlias(v, scopedAliases);
         } else if (v.isBleedingFunction()) {
             // Bleeding functions already get a BAD_PARAMETERS error, so just
             // do nothing.
@@ -14,12 +16,9 @@
             // error.
         } else if (isVar) {
             Node grandparent = parent.getParent();
-            Node value = n.hasChildren() ? v.getInitialValue().detachFromParent() : null;
-            Node varNode = parent;
-            String name = n.getString();
-            int nameCount = scopedAliasNames.count(name);
-            scopedAliasNames.add(name);
-            String globalName = "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));
+            Node value = NodeUtil.getRValueOfLValue(n);
+            int nameCount = scopedAliases.countName(v.getName());
+            String globalName = "$jscomp.scope." + v.getName() + (nameCount == 0 ? "" : ("$" + nameCount));
             compiler.ensureLibraryInjected("base");
             // First, we need to free up the function expression (EXPR)
             // to be used in another expression.
@@ -33,16 +32,14 @@
             // function, and the programmer is using the hoisting.
             // If this is a VAR, we can just detach the expression and
             // the tree will still be valid.
-            // Add $jscomp.scope.name = EXPR;
-            // Make sure we copy over all the jsdoc and debug info.
             if (value != null || v.getJSDocInfo() != null) {
                 Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(compiler.getCodingConvention(), globalName, value, v.getJSDocInfo()).useSourceInfoIfMissingFromForTree(n);
-                NodeUtil.setDebugInformation(newDecl.getFirstChild().getFirstChild(), n, name);
-                grandparent.addChildBefore(newDecl, varNode);
+                NodeUtil.setDebugInformation(newDecl.getFirstChild().getFirstChild(), n, v.getName());
+                grandparent.addChildBefore(newDecl, parent);
             }
             // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
-            v.getNameNode().addChildToFront(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), globalName, n, name));
-            recordAlias(v);
+            n.replaceWith(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), globalName, n, v.getName()));
+            recordAlias(v, scopedAliases);
         } else {
             // Do not other kinds of local symbols, like catch params.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
--- com/google/javascript/rhino/Node.java@getChildBefore
+++ com/google/javascript/rhino/Node.java@getChildBefore
@@ -3,8 +3,8 @@
         return null;
     }
     Node n = first;
-    while (n.next != child) {
-        n = n.next;
+    while (n.getNext() != child) {
+        n = n.getNext();
         if (n == null) {
             throw new RuntimeException("node is not a child");
         }
