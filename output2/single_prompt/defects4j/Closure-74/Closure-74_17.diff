--- com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldComparison
+++ com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldComparison
@@ -13,7 +13,7 @@
     boolean undefinedRight = ((Token.NAME == right.getType() && right.getString().equals("undefined")) || (Token.VOID == right.getType() && NodeUtil.isLiteralValue(right.getFirstChild(), false)));
     int lhType = left.getType();
     int rhType = right.getType();
-    switch(lhType) {
+    switch (lhType) {
         case Token.VOID:
             if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {
                 return n;
@@ -33,7 +33,7 @@
             if (rhType != Token.TRUE && rhType != Token.FALSE && rhType != Token.NULL) {
                 return n;
             }
-            switch(op) {
+            switch (op) {
                 case Token.SHEQ:
                 case Token.EQ:
                     result = lhType == rhType;
@@ -59,63 +59,28 @@
             }
             break;
         case Token.THIS:
-            if (right.getType() != Token.THIS) {
-                return n;
-            }
-            switch(op) {
-                case Token.SHEQ:
-                case Token.EQ:
-                    result = true;
-                    break;
-                case Token.SHNE:
-                case Token.NE:
-                    result = false;
-                    break;
-                // We can only handle == and != here.
-                // GT, LT, GE, LE depend on the type of "this" and how it will
-                // be converted to number.  The results are different depending on
-                // whether it is a string, NaN or other number value.
-                default:
-                    return n;
-            }
-            break;
         case Token.STRING:
-            if (undefinedRight) {
-                result = compareToUndefined(left, op);
-                break;
-            }
-            if (Token.STRING != right.getType()) {
-                // Only eval if they are the same type
-                return n;
-            }
-            switch(op) {
-                case Token.SHEQ:
-                case Token.EQ:
-                    result = left.getString().equals(right.getString());
-                    break;
-                case Token.SHNE:
-                case Token.NE:
-                    result = !left.getString().equals(right.getString());
-                    break;
-                default:
-                    // we only handle == and != here
-                    return n;
-            }
-            break;
         case Token.NUMBER:
             if (undefinedRight) {
                 result = compareToUndefined(left, op);
                 break;
             }
-            if (Token.NUMBER != right.getType()) {
+            if (!NodeUtil.isLiteralValue(right, false)) {
                 // Only eval if they are the same type
                 return n;
             }
-            Boolean compareResult = compareAsNumbers(op, left, right);
-            if (compareResult != null) {
-                result = compareResult;
-            } else {
-                return null;
+            switch (op) {
+                case Token.SHEQ:
+                case Token.EQ:
+                    result = left.isEquivalentTo(right);
+                    break;
+                case Token.SHNE:
+                case Token.NE:
+                    result = !left.isEquivalentTo(right);
+                    break;
+                default:
+                    // we only handle == and != here
+                    return n;
             }
             break;
         case Token.NAME:
@@ -140,7 +105,7 @@
                 // Not the same value name.
                 return n;
             }
-            switch(op) {
+            switch (op) {
                 // If we knew the named value wouldn't be NaN, it would be nice
                 // to handle EQ,NE,LE,GE,SHEQ, and SHNE.
                 case Token.LT:
