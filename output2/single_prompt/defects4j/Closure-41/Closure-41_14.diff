--- com/google/javascript/jscomp/FunctionTypeBuilder.java@inferFromOverriddenFunction
+++ com/google/javascript/jscomp/FunctionTypeBuilder.java@inferFromOverriddenFunction
@@ -30,10 +30,20 @@
                 }
             } else {
                 warnedAboutArgList |= addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));
+                oldParam = paramBuilder.build().getLastChild();
+                oldParam.setOptionalArg(codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs);
+                oldParam.setVarArgs(codingConvention.isVarArgsParameter(currentParam));
             }
         }
         // Clone any remaining params that aren't in the function literal.
         parametersNode = paramBuilder.build();
+        while (oldParams.hasNext()) {
+            Node oldParam = oldParams.next();
+            Node newParam = paramBuilder.newParameterFromNode(oldParam);
+            oldParam = paramBuilder.build().getLastChild();
+            oldParam.setOptionalArg(oldParam.isOptionalArg() || oldParam.isOptionalArg());
+            oldParam.setVarArgs(oldParam.isVarArgs() || oldParam.isVarArgs());
+        }
     }
     return this;
 }
--- com/google/javascript/jscomp/FunctionTypeBuilder.java@inferParameterTypes
+++ com/google/javascript/jscomp/FunctionTypeBuilder.java@inferParameterTypes
@@ -16,6 +16,7 @@
     Set<String> allJsDocParams = (info == null) ? Sets.<String>newHashSet() : Sets.newHashSet(info.getParameterNames());
     boolean foundTemplateType = false;
     boolean isVarArgs = false;
+    Node lastAddedNode = null; // Keeps track of the last parameter node added to the parametersNode list
     for (Node arg : argsParent.children()) {
         String argumentName = arg.getString();
         allJsDocParams.remove(argumentName);
@@ -39,13 +40,24 @@
             foundTemplateType = true;
         }
         warnedAboutArgList |= addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);
+        Node lastParameterNode = builder.build().getLastChild();
+        lastParameterNode.setOptionalArg(isOptionalParam);
+        lastParameterNode.setVarArgs(isVarArgs);
         if (oldParameterType != null) {
             oldParameterType = oldParameterType.getNext();
         }
+        lastAddedNode = lastParameterNode;
     }
     // Copy over any old parameters that aren't in the param list.
     if (templateTypeName != null && !foundTemplateType) {
         reportError(TEMPLATE_TYPE_EXPECTED, fnName);
+    }
+    while (oldParameterType != null) {
+        Node newParam = builder.newParameterFromNode(oldParameterType);
+        lastAddedNode = parametersNode.addChildToBack(newParam);
+        lastAddedNode.setOptionalArg(lastAddedNode.isOptionalArg() || oldParameterType.isOptionalArg());
+        lastAddedNode.setVarArgs(lastAddedNode.isVarArgs() || oldParameterType.isVarArgs());
+        oldParameterType = oldParameterType.getNext();
     }
     for (String inexistentName : allJsDocParams) {
         reportWarning(INEXISTANT_PARAM, inexistentName, fnName);
