--- org/apache/commons/math/util/MathUtils.java@gcd
+++ org/apache/commons/math/util/MathUtils.java@gcd
@@ -6,7 +6,7 @@
     // -2^31, while positive numbers can only be as large as 2^31-1
     // (i.e. we can't necessarily negate a negative number without
     // overflow)
-        if (u > 0) {
+    if (u > 0) {
         u = -u;
     }
     // make u negative
@@ -29,11 +29,11 @@
     }
     // B2. Initialize: u and v have been divided by 2^k and at least
     // one is odd.
-    int t = ((u & 1) == 1) ? v : -(u / 2);
-    // t negative: u was odd, v may be even (t replaces v)
-    // t positive: u was even, v is odd (t replaces u)
+    int t = ((u & 1) == 1) ? u : (u / 2);
+    // t positive: u is odd (t replaces u)
+    // t negative: u is even (t replaces u)
     do {
-                // B4/B3: cast out twos from t.
+        // B4/B3: cast out twos from t.
         while ((t & 1) == 0) {
             // while t is even..
             // cast out twos
@@ -43,7 +43,7 @@
         if (t > 0) {
             u = -t;
         } else {
-            v = t;
+            v = -t;
         }
         // B6/B3. at this point both u and v should be odd.
         t = (v - u) / 2;
