--- com/google/javascript/jscomp/Compiler.java@parseInputs
+++ com/google/javascript/jscomp/Compiler.java@parseInputs
@@ -64,10 +64,12 @@
                 }
             }
         }
+        List<CompilerInput> inputsToRemove = new ArrayList<>();
         for (CompilerInput input : inputs) {
             Node n = input.getAstRoot(this);
             // Inputs can have a null AST during initial parse.
             if (n == null) {
+                inputsToRemove.add(input);
                 continue;
             }
             if (n.getJSDocInfo() != null) {
@@ -86,19 +88,8 @@
                     staleInputs = true;
                 }
             }
-        }
-        if (staleInputs) {
-            fillEmptyModules(modules);
-            rebuildInputsFromModules();
-        }
-        // Build the AST.
-        for (CompilerInput input : inputs) {
-            Node n = input.getAstRoot(this);
-            if (n == null) {
-                continue;
-            }
             if (devMode) {
-                runSanityCheck();
+                runSanityCheck(input);
                 if (hasErrors()) {
                     return null;
                 }
@@ -111,6 +102,11 @@
             }
             jsRoot.addChildToBack(n);
         }
+        inputs.removeAll(inputsToRemove);
+        if (staleInputs) {
+            fillEmptyModules(modules);
+            rebuildInputsFromModules();
+        }
         if (hasErrors()) {
             return null;
         }
