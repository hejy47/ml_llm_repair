--- com/google/javascript/jscomp/ScopedAliases.java@findAliases
+++ com/google/javascript/jscomp/ScopedAliases.java@findAliases
@@ -4,21 +4,21 @@
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
-            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-                String name = n.getString();
-                Var aliasVar = scope.getVar(name);
-                aliases.put(name, aliasVar);
-                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
-                transformation.addAlias(name, qualifiedName);
-                // Bleeding functions already get a BAD_PARAMETERS error, so just
-                // do nothing.
-                // Parameters of the scope function also get a BAD_PARAMETERS
-                // error.
-            } else {
-                // TODO(robbyw): Support using locals for private variables.
-                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-            }
+        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+            String name = n.getString();
+            Var aliasVar = scope.getVar(name);
+            aliases.put(name, aliasVar);
+            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
+            transformation.addAlias(name, qualifiedName);
+        } else if (parent.isFunction() && n.getFirstChild() == null) {
+            // Bleeding functions already get a BAD_PARAMETERS error, so just
+            // do nothing.
+        } else if (parent.isParamList() && parent.getParent().isFunction()) {
+            // Parameters of the scope function also get a BAD_PARAMETERS
+            // error.
+        } else {
+            // TODO(robbyw): Support using locals for private variables.
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
     }
 }
