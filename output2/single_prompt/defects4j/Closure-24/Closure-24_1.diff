--- com/google/javascript/jscomp/ScopedAliases.java@findAliases
+++ com/google/javascript/jscomp/ScopedAliases.java@findAliases
@@ -4,17 +4,13 @@
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
+        if (parent.isVar() && !n.isParam()) { // added check for not being a function parameter
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
                 aliases.put(name, aliasVar);
                 String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
                 transformation.addAlias(name, qualifiedName);
-                // Bleeding functions already get a BAD_PARAMETERS error, so just
-                // do nothing.
-                // Parameters of the scope function also get a BAD_PARAMETERS
-                // error.
             } else {
                 // TODO(robbyw): Support using locals for private variables.
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
