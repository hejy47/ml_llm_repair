--- com/google/javascript/jscomp/ScopedAliases.java@findAliases
+++ com/google/javascript/jscomp/ScopedAliases.java@findAliases
@@ -4,19 +4,20 @@
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
+        if (parent != null && parent.isVar()) { // check if parent exists first
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
-                aliases.put(name, aliasVar);
-                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
-                transformation.addAlias(name, qualifiedName);
-                // Bleeding functions already get a BAD_PARAMETERS error, so just
-                // do nothing.
-                // Parameters of the scope function also get a BAD_PARAMETERS
-                // error.
+                if (aliasVar != null && aliasVar.getInitialValue() != null) { // check if aliasVar and initialValue exist
+                    aliases.put(name, aliasVar);
+                    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
+                    transformation.addAlias(name, qualifiedName);
+                }
+                else {
+                    // handle the case where aliasVar or initialValue is null
+                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+                }
             } else {
-                // TODO(robbyw): Support using locals for private variables.
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
         }
