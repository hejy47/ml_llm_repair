--- com/google/javascript/jscomp/TypedScopeCreator.java@maybeDeclareQualifiedName
+++ com/google/javascript/jscomp/TypedScopeCreator.java@maybeDeclareQualifiedName
@@ -5,14 +5,14 @@
     String propName = n.getLastChild().getString();
     Preconditions.checkArgument(qName != null && ownerName != null);
     // Precedence of type information on GETPROPs:
-    // 1) @type annnotation / @enum annotation
+    // 1) @type annotation / @enum annotation
     // 2) ASSIGN to FUNCTION literal
     // 3) @param/@return annotation (with no function literal)
     // 4) ASSIGN to something marked @const
     // 5) ASSIGN to anything else
     //
-    // 1, 3, and 4 are declarations, 5 is inferred, and 2 is a declaration iff
-    // the function has jsdoc or has not been declared before.
+    // 1, 3, and 4 are declarations, 5 is inferred, and 2 is a declaration if
+    // the function has JSDoc or has not been declared before.
     //
     // FUNCTION literals are special because TypedScopeCreator is very smart
     // about getting as much type information as possible for them.
@@ -33,19 +33,23 @@
             // If the programmer has declared that F inherits from Super,
             // and they assign F.prototype to an object literal,
             // then they are responsible for making sure that the object literal's
-            // implicit prototype is set up appropriately. We just obey
-            // the @extends tag.
+            // implicit prototype is set up appropriately. We just obey the
+            // @extends tag.
             ObjectType qVarType = ObjectType.cast(qVar.getType());
             if (qVarType != null && rhsValue != null && rhsValue.isObjectLit()) {
-                typeRegistry.resetImplicitPrototype(rhsValue.getJSType(), qVarType.getImplicitPrototype());
+                ObjectType prototypeType = new ObjectType(qVarType.getImplicitPrototype());
+                typeRegistry.resetImplicitPrototype(prototypeType, rhsValue.getJSType());
             } else if (!qVar.isTypeInferred()) {
                 // If the programmer has declared that F inherits from Super,
                 // and they assign F.prototype to some arbitrary expression,
                 // there's not much we can do. We just ignore the expression,
                 // and hope they've annotated their code in a way to tell us
                 // what props are going to be on that prototype.
+                // See test cases: testInheritPrototypeObjectType14 and
+                // testInheritPrototypeObjectType15.
                 return;
             }
+            // Only undeclare vars declared in this scope.
             if (qVar.getScope() == scope) {
                 scope.undeclare(qVar);
             }
@@ -58,17 +62,19 @@
         return;
     }
     // NOTE(nicksantos): Determining whether a property is declared or not
-    // is really really obnoxious.
+    // is really obnoxious.
     //
     // The problem is that there are two (equally valid) coding styles:
     //
     // (function() {
-    //       //   goog.bar = function() {};
+    //   /* The authoritative definition of goog.bar. */
+    //   goog.bar = function() {};
     // })();
     //
     // function f() {
     //   goog.bar();
-    //       //   goog.bar = function() {};
+    //   /* Reset goog.bar to a no-op. */
+    //   goog.bar = function() {};
     // }
     //
     // In a dynamic language with first-class functions, it's very difficult
@@ -77,7 +83,7 @@
     // of this, but there are some really pathological cases as well).
     //
     // The current algorithm checks if either the declaration has
-    // jsdoc type information, or @const with a known type,
+    // JSDoc type information, or @const with a known type,
     // or a function literal with a name we haven't seen before.
     boolean inferred = true;
     if (info != null) {
@@ -91,12 +97,17 @@
     if (!inferred) {
         ObjectType ownerType = getObjectSlot(ownerName);
         if (ownerType != null) {
-            // Only declare this as an official property if it has not been
-            // declared yet.
-            boolean isExtern = t.getInput() != null && t.getInput().isExtern();
-            if ((!ownerType.hasOwnProperty(propName) || ownerType.isPropertyTypeInferred(propName)) && ((isExtern && !ownerType.isNativeObjectType()) || !ownerType.isInstanceType())) {
-                // If the property is undeclared or inferred, declare it now.
-                ownerType.defineDeclaredProperty(propName, valueType, n);
+            // Only define if this is an object, prototype creations will not be defined.
+            if (ownerType.isObject()) {
+                // Only declare this as an official property if it has not been
+                // declared yet.
+                if (!(ownerType.hasOwnProperty(propName) || ownerType.isPropertyTypeInferred(propName))) {
+                    boolean isExtern = t.getInput() != null && t.getInput().isExtern();
+                    if ((isExtern && !ownerType.isNativeObjectType()) || !ownerType.isInstanceType()) {
+                        // If the property is undeclared or inferred, declare it now.
+                        ownerType.defineDeclaredProperty(propName, valueType, n);
+                    }
+                }
             }
         }
         // If the property is already declared, the error will be
