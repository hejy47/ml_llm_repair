--- com/google/javascript/jscomp/TypedScopeCreator.java@maybeDeclareQualifiedName
+++ com/google/javascript/jscomp/TypedScopeCreator.java@maybeDeclareQualifiedName
@@ -28,26 +28,29 @@
     // So if F does not have an explicitly declared super type,
     // allow F.prototype to be redefined arbitrarily.
     if ("prototype".equals(propName)) {
-        Var qVar = scope.getVar(qName);
-        if (qVar != null) {
-            // If the programmer has declared that F inherits from Super,
-            // and they assign F.prototype to an object literal,
-            // then they are responsible for making sure that the object literal's
-            // implicit prototype is set up appropriately. We just obey
-            // the @extends tag.
-            ObjectType qVarType = ObjectType.cast(qVar.getType());
-            if (qVarType != null && rhsValue != null && rhsValue.isObjectLit()) {
-                typeRegistry.resetImplicitPrototype(rhsValue.getJSType(), qVarType.getImplicitPrototype());
-            } else if (!qVar.isTypeInferred()) {
+        ObjectType ownerType = getObjectSlot(ownerName);
+        if (ownerType != null) {
+            Var qVar = scope.getVar(qName);
+            if (qVar != null) {
                 // If the programmer has declared that F inherits from Super,
-                // and they assign F.prototype to some arbitrary expression,
-                // there's not much we can do. We just ignore the expression,
-                // and hope they've annotated their code in a way to tell us
-                // what props are going to be on that prototype.
-                return;
-            }
-            if (qVar.getScope() == scope) {
-                scope.undeclare(qVar);
+                // and they assign F.prototype to an object literal,
+                // then they are responsible for making sure that the object literal's
+                // implicit prototype is set up appropriately. We just obey
+                // the @extends tag.
+                ObjectType qVarType = ObjectType.cast(qVar.getType());
+                if (qVarType != null && rhsValue != null && rhsValue.isObjectLit()) {
+                    typeRegistry.resetImplicitPrototype(rhsValue.getJSType(), qVarType.getImplicitPrototype());
+                } else if (!qVar.isTypeInferred()) {
+                    // If the programmer has declared that F inherits from Super,
+                    // and they assign F.prototype to some arbitrary expression,
+                    // there's not much we can do. We just ignore the expression,
+                    // and hope they've annotated their code in a way to tell us
+                    // what props are going to be on that prototype.
+                    return;
+                }
+                if (qVar.getScope() == scope) {
+                    scope.undeclare(qVar);
+                }
             }
         }
     }
@@ -63,12 +66,14 @@
     // The problem is that there are two (equally valid) coding styles:
     //
     // (function() {
-    //       //   goog.bar = function() {};
+    //   /* The authoritative definition of goog.bar. */
+    //   goog.bar = function() {};
     // })();
     //
     // function f() {
     //   goog.bar();
-    //       //   goog.bar = function() {};
+    //   /* Reset goog.bar to a no-op. */
+    //   goog.bar = function() {};
     // }
     //
     // In a dynamic language with first-class functions, it's very difficult
