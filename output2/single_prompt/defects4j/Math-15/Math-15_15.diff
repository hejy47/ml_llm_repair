--- org/apache/commons/math3/util/FastMath.java@pow
+++ org/apache/commons/math3/util/FastMath.java@pow
@@ -78,19 +78,12 @@
             return 0.0;
         }
     }
-        if (x < 0) {
-        // y is an even integer in this case
-        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
-            return pow(-x, y);
-        }
-        if (y == (long) y) {
-            // If y is an integer
-            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
-        } else {
+    if (x < 0) {
+        if (y != (int) y) {
             return Double.NaN;
         }
     }
-        double ya;
+    double ya;
     double yb;
     if (y < 8e298 && y > -8e298) {
         double tmp1 = y * HEX_40000000;
@@ -102,14 +95,14 @@
         ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
         yb = y - ya;
     }
-        final double lores = log(x, lns);
+    final double lores = log(x, lns);
     if (Double.isInfinite(lores)) {
         // don't allow this to be converted to NaN
         return lores;
     }
     double lna = lns[0];
     double lnb = lns[1];
-        double tmp1 = lna * HEX_40000000;
+    double tmp1 = lna * HEX_40000000;
     double tmp2 = lna + tmp1 - tmp1;
     lnb += lna - tmp2;
     lna = tmp2;
