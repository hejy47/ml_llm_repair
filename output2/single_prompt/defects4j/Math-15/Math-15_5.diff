--- org/apache/commons/math3/util/FastMath.java@pow
+++ org/apache/commons/math3/util/FastMath.java@pow
@@ -78,8 +78,8 @@
             return 0.0;
         }
     }
-        if (x < 0) {
-        // y is an even integer in this case
+    if (x < 0) {
+        // y is an integer in this case
         if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
             return pow(-x, y);
         }
@@ -90,7 +90,7 @@
             return Double.NaN;
         }
     }
-        double ya;
+    double ya;
     double yb;
     if (y < 8e298 && y > -8e298) {
         double tmp1 = y * HEX_40000000;
@@ -102,29 +102,50 @@
         ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
         yb = y - ya;
     }
-        final double lores = log(x, lns);
+    final double lores = log(x, lns);
     if (Double.isInfinite(lores)) {
         // don't allow this to be converted to NaN
         return lores;
     }
     double lna = lns[0];
     double lnb = lns[1];
-        double tmp1 = lna * HEX_40000000;
-    double tmp2 = lna + tmp1 - tmp1;
-    lnb += lna - tmp2;
-    lna = tmp2;
-    // y*ln(x) = (aa+ab)
-    final double aa = lna * ya;
-    final double ab = lna * yb + lnb * ya + lnb * yb;
-    lna = aa + ab;
-    lnb = -(lna - aa - ab);
-    double z = 1.0 / 120.0;
-    z = z * lnb + (1.0 / 24.0);
-    z = z * lnb + (1.0 / 6.0);
-    z = z * lnb + 0.5;
-    z = z * lnb + 1.0;
-    z = z * lnb;
-    final double result = exp(lna, z, null);
-    //result = result + result * z;
-    return result;
+    double aa, ab, ac, ad, ae, af;
+
+    // split y into 2 parts
+    double tmp1 = HEX_40000000 * y;
+    double tmp2 = y + tmp1 - tmp1;
+    double y1 = tmp2;
+    double y2 = y - y1;
+
+    // Compute ln(x) * y1 using Accurate High Order Product
+    aa = lna * y1;
+    ab = lna * y2 + lnb * y1;
+    ac = lnb * y2;
+    ad = aa + ab;
+    ae = aa - ad + ab + ac;
+    af = ad - aa;
+    aa = ad;
+    ab = ae;
+    ac = af;
+    ad = aa + ab;
+    ae = aa - ad + ab + ac;
+    af = ad - aa;
+    aa = ad;
+    ab = ae;
+    ac = af;
+    ad = aa + ab;
+    ae = aa - ad + ab + ac;
+    double lnproduct = ad + ae;
+
+    // If ln(x) * y1 is infinite, the result is infinite.
+    if (Double.isInfinite(lnproduct)) {
+        return processAsSpecial(x, lnproduct);
+    }
+
+    // Compute exp(ln(x) * y1) using Accurate High-Order Product
+    double z = lnproduct * 1.4426950408889634;
+    double zf = z - 512 * HEX_40000000 * 0.6931471805599453;
+    double z2 = zf - z;
+    final double result = exp(lnproduct, z2 + zf, null);
+    return processResult(x, lnproduct, result);
 }
