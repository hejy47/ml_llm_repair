--- com/google/javascript/jscomp/ControlFlowAnalysis.java@computeFollowNode
+++ com/google/javascript/jscomp/ControlFlowAnalysis.java@computeFollowNode
@@ -1,22 +1,18 @@
 private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {
-        Node parent = node.getParent();
+    Node parent = node.getParent();
     if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) {
         return null;
     }
-    // If we are just before a IF/WHILE/DO/FOR:
     switch(parent.getType()) {
-        // The follow() of any of the path from IF would be what follows IF.
         case Token.IF:
             return computeFollowNode(fromNode, parent, cfa);
         case Token.CASE:
         case Token.DEFAULT_CASE:
-            // After the body of a CASE, the control goes to the body of the next
-            // case, without having to go to the case condition.
             if (parent.getNext() != null) {
                 if (parent.getNext().isCase()) {
-                    return parent.getNext().getFirstChild().getNext();
+                    return computeBoundaries(parent.getNext().getFirstChild().getNext());
                 } else if (parent.getNext().isDefaultCase()) {
-                    return parent.getNext().getFirstChild();
+                    return computeBoundaries(parent.getNext().getFirstChild());
                 } else {
                     Preconditions.checkState(false, "Not reachable");
                 }
@@ -27,6 +23,14 @@
         case Token.FOR:
             if (NodeUtil.isForIn(parent)) {
                 return parent;
+            } else if (NodeUtil.isFor(parent)) {
+                if (node == NodeUtil.getConditionExpression(parent)) {
+                    return computeBoundaries(NodeUtil.getConditionExpression(parent).getFirstChild());
+                } else if (NodeUtil.getIncrementExpression(parent) != null && node == NodeUtil.getIncrementExpression(parent)) {
+                    return computeBoundaries(NodeUtil.getIncrementExpression(parent).getFirstChild());
+                } else {
+                    return computeBoundaries(NodeUtil.getLoopBody(parent));
+                }
             } else {
                 return parent.getFirstChild().getNext().getNext();
             }
@@ -34,44 +38,34 @@
         case Token.DO:
             return parent;
         case Token.TRY:
-            // If we are coming out of the TRY block...
             if (parent.getFirstChild() == node) {
                 if (NodeUtil.hasFinally(parent)) {
-                    // and have FINALLY block.
-                    return computeFallThrough(parent.getLastChild());
-                } else {
-                    // and have no FINALLY.
-                    return computeFollowNode(fromNode, parent, cfa);
-                }
-                // CATCH block.
-            } else if (NodeUtil.getCatchBlock(parent) == node) {
-                if (NodeUtil.hasFinally(parent)) {
-                    // and have FINALLY block.
-                    return computeFallThrough(node.getNext());
+                    return computeBoundaries(NodeUtil.getFinallyBlock(parent));
                 } else {
                     return computeFollowNode(fromNode, parent, cfa);
                 }
-                // If we are coming out of the FINALLY block...
+            } else if (NodeUtil.getCatchBlock(parent) == node) {
+                if (NodeUtil.hasFinally(parent)) {
+                    return computeBoundaries(node.getNext());
+                } else {
+                    return computeFollowNode(fromNode, parent, cfa);
+                }
             } else if (parent.getLastChild() == node) {
                 if (cfa != null) {
                     for (Node finallyNode : cfa.finallyMap.get(parent)) {
                         cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
                     }
                 }
-                return computeFollowNode(fromNode, parent, cfa);
+                return computeBoundaries(parent.getNext());
             }
     }
-    // Now that we are done with the special cases follow should be its
-    // immediate sibling, unless its sibling is a function
     Node nextSibling = node.getNext();
-    // Skip function declarations because control doesn't get pass into it.
     while (nextSibling != null && nextSibling.isFunction()) {
         nextSibling = nextSibling.getNext();
     }
     if (nextSibling != null) {
-        return computeFallThrough(nextSibling);
+        return computeBoundaries(nextSibling);
     } else {
-        // If there are no more siblings, control is transferred up the AST.
         return computeFollowNode(fromNode, parent, cfa);
     }
 }
