--- com/google/javascript/jscomp/TypedScopeCreator.java@getDeclaredType
+++ com/google/javascript/jscomp/TypedScopeCreator.java@getDeclaredType
@@ -16,23 +16,21 @@
             // Check if this is constant, and if it has a known type.
             if (info.isConstant()) {
                 JSType knownType = null;
-                if (rValue != null) {
-                    if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                        // If rValue has a type-cast, we use the type in the type-cast.
-                        // If rValue's type was already computed during scope creation,
-                        // then we can safely use that.
-                        return rValue.getJSType();
-                    } else if (rValue.isOr()) {
-                        // Check for a very specific JS idiom:
-                        // var x = x || TYPE;
-                        // This is used by Closure's base namespace for esoteric
-                        // reasons.
-                        Node firstClause = rValue.getFirstChild();
-                        Node secondClause = firstClause.getNext();
-                        boolean namesMatch = firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString());
-                        if (namesMatch && secondClause.getJSType() != null && !secondClause.getJSType().isUnknownType()) {
-                            return secondClause.getJSType();
-                        }
+                if (rValue != null && rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
+                    // If rValue has a type-cast, we use the type in the type-cast.
+                    // If rValue's type was already computed during scope creation,
+                    // then we can safely use that.
+                    return rValue.getJSType();
+                } else if (rValue != null && rValue.isOr()) {
+                    // Check for a very specific JS idiom:
+                    // var x = x || TYPE;
+                    // This is used by Closure's base namespace for esoteric
+                    // reasons.
+                    Node firstClause = rValue.getFirstChild();
+                    Node secondClause = firstClause.getNext();
+                    boolean namesMatch = firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString());
+                    if (namesMatch && secondClause.getJSType() != null && !secondClause.getJSType().isUnknownType()) {
+                        return secondClause.getJSType();
                     }
                 }
             }
