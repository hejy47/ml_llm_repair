--- org/joda/time/chrono/GJChronology.java@getInstance
+++ org/joda/time/chrono/GJChronology.java@getInstance
@@ -11,22 +11,19 @@
         ArrayList<GJChronology> chronos = cCache.get(zone);
         if (chronos == null) {
             chronos = new ArrayList<GJChronology>(2);
+            chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
+            chronos.add(chrono);
             cCache.put(zone, chronos);
         } else {
-            for (int i = chronos.size(); --i >= 0; ) {
+            for (int i = chronos.size(); --i >= 0;) {
                 chrono = chronos.get(i);
                 if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) {
                     return chrono;
                 }
             }
+            chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
+            chronos.add(chrono);
         }
-        if (zone == DateTimeZone.UTC) {
-            chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
-        } else {
-            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
-            chrono = new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
-        }
-        chronos.add(chrono);
     }
     return chrono;
 }
--- org/joda/time/chrono/GJChronology.java@add
+++ org/joda/time/chrono/GJChronology.java@add
@@ -3,7 +3,9 @@
         instant = iGregorianField.add(instant, value);
         if (instant < iCutover) {
             // Only adjust if gap fully crossed.
-            if (instant + iGapDuration < iCutover) {
+            if (instant + iGapDuration >= iCutover) {
+                instant = iGregorianField.add(instant, iGapDuration);
+            } else {
                 instant = gregorianToJulian(instant);
             }
         }
@@ -11,8 +13,9 @@
         instant = iJulianField.add(instant, value);
         if (instant >= iCutover) {
             // Only adjust if gap fully crossed.
-            if (instant - iGapDuration >= iCutover) {
-                // no special handling for year zero as cutover always after year zero
+            if (instant - iGapDuration < iCutover) {
+                instant = iJulianField.add(instant, iGapDuration);
+            } else {
                 instant = julianToGregorian(instant);
             }
         }
--- org/joda/time/chrono/GJChronology.java@add2
+++ org/joda/time/chrono/GJChronology.java@add2
@@ -3,7 +3,9 @@
         instant = iGregorianField.add(instant, value);
         if (instant < iCutover) {
             // Only adjust if gap fully crossed.
-            if (instant + iGapDuration < iCutover) {
+            if (instant + iGapDuration >= iCutover) {
+                instant = iGregorianField.add(instant, iGapDuration);
+            } else {
                 instant = gregorianToJulian(instant);
             }
         }
@@ -11,8 +13,9 @@
         instant = iJulianField.add(instant, value);
         if (instant >= iCutover) {
             // Only adjust if gap fully crossed.
-            if (instant - iGapDuration >= iCutover) {
-                // no special handling for year zero as cutover always after year zero
+            if (instant - iGapDuration < iCutover) {
+                instant = iJulianField.add(instant, iGapDuration);
+            } else {
                 instant = julianToGregorian(instant);
             }
         }
