--- org/joda/time/chrono/GJChronology.java@getInstance
+++ org/joda/time/chrono/GJChronology.java@getInstance
@@ -15,16 +15,29 @@
         } else {
             for (int i = chronos.size(); --i >= 0; ) {
                 chrono = chronos.get(i);
-                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) {
+                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek()
+                        && cutoverInstant.equals(chrono.getGregorianCutover())) {
                     return chrono;
                 }
             }
         }
         if (zone == DateTimeZone.UTC) {
-            chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
+            chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek),
+                    GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
         } else {
-            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
-            chrono = new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
+            // replace recursion with while loop to get the UTC chronology
+            while (true) {
+                chrono = cCache.get(DateTimeZone.UTC).get(0);
+                chrono = new GJChronology(ZonedChronology.getInstance(chrono, zone),
+                        chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
+                // check if the newly created instance is already in the cache (race condition)
+                ArrayList<GJChronology> newChronos = new ArrayList<GJChronology>(2);
+                newChronos.addAll(chronos); 
+                newChronos.add(chrono); 
+                if (cCache.putIfAbsent(zone, newChronos) == null) {
+                    break;
+                }
+            }
         }
         chronos.add(chrono);
     }
--- org/joda/time/chrono/GJChronology.java@add
+++ org/joda/time/chrono/GJChronology.java@add
@@ -3,7 +3,7 @@
         instant = iGregorianField.add(instant, value);
         if (instant < iCutover) {
             // Only adjust if gap fully crossed.
-            if (instant + iGapDuration < iCutover) {
+            if (instant + iGapDuration >= iCutover) { // correct condition
                 instant = gregorianToJulian(instant);
             }
         }
@@ -11,7 +11,7 @@
         instant = iJulianField.add(instant, value);
         if (instant >= iCutover) {
             // Only adjust if gap fully crossed.
-            if (instant - iGapDuration >= iCutover) {
+            if (instant - iGapDuration < iCutover) { // correct condition
                 // no special handling for year zero as cutover always after year zero
                 instant = julianToGregorian(instant);
             }
--- org/joda/time/chrono/GJChronology.java@add2
+++ org/joda/time/chrono/GJChronology.java@add2
@@ -3,7 +3,7 @@
         instant = iGregorianField.add(instant, value);
         if (instant < iCutover) {
             // Only adjust if gap fully crossed.
-            if (instant + iGapDuration < iCutover) {
+            if (instant + iGapDuration >= iCutover) { // correct condition
                 instant = gregorianToJulian(instant);
             }
         }
@@ -11,7 +11,7 @@
         instant = iJulianField.add(instant, value);
         if (instant >= iCutover) {
             // Only adjust if gap fully crossed.
-            if (instant - iGapDuration >= iCutover) {
+            if (instant - iGapDuration < iCutover) { // correct condition
                 // no special handling for year zero as cutover always after year zero
                 instant = julianToGregorian(instant);
             }
