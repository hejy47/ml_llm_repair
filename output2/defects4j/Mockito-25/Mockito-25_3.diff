--- org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java@answer
+++ org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java@answer
@@ -1,8 +1,8 @@
 public Object answer(InvocationOnMock invocation) throws Throwable {
-    GenericMetadataSupport returnTypeGenericMetadata = actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
+    GenericMetadataSupport returnTypeGenericMetadata = new DefaultMockitoMetadata().actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
     Class<?> rawType = returnTypeGenericMetadata.rawType();
-    if (!new MockCreationValidator().isTypeMockable(rawType)) {
-        return delegate.returnValueFor(rawType);
+    if (!new MockCreationValidator(new DefaultMockitoMetadata()).isTypeMockable(rawType)) {
+        return UnnecessaryStubbingException.throwFor(rawType);
     }
     return getMock(invocation);
 }
--- org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java@getMock
+++ org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java@getMock
@@ -2,10 +2,9 @@
     InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
     InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
     // matches invocation for verification
-    for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
-        if (container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
-            return stubbedInvocationMatcher.answer(invocation);
-        }
+    StubbedInvocationMatcher invokingChecker = container.getInvocationForPotentialStubbing(invocation);
+    if (invokingChecker != null) {
+        return invokingChecker.answer(invocation);
     }
     // deep stub
     return recordDeepStubMock(invocation, container);
--- org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java@recordDeepStubMock
+++ org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java@recordDeepStubMock
@@ -1,8 +1,7 @@
 private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {
     Class<?> clz = invocation.getMethod().getReturnType();
-    final Object mock = org.mockito.Mockito.mock(clz, this);
+    final Object mock = org.mockito.Mockito.mock(clz, withSettings().stubOnly().defaultAnswer(RETURNS_DEEP_STUBS));
     container.addAnswer(new Answer<Object>() {
-
         public Object answer(InvocationOnMock invocation) throws Throwable {
             return mock;
         }
