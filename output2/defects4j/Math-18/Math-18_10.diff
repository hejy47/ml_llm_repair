--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode
+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode
@@ -4,7 +4,7 @@
     }
     double[] res = new double[x.length];
     for (int i = 0; i < x.length; i++) {
-        double diff = boundaries[1][i] - boundaries[0][i];
+        double diff = boundaries[0][i] - boundaries[1][i]; // fixed flipping of boundary values
         res[i] = (x[i] - boundaries[0][i]) / diff;
     }
     return res;
--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible
+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible
@@ -3,10 +3,10 @@
         return true;
     }
     for (int i = 0; i < x.length; i++) {
-        if (x[i] < 0) {
+        if (x[i] < boundaries[0][i]) { // fixed comparison with lower boundary
             return false;
         }
-        if (x[i] > 1.0) {
+        if (x[i] > boundaries[1][i]) {
             return false;
         }
     }
