--- org/joda/time/format/DateTimeFormatter.java@parseInto
+++ org/joda/time/format/DateTimeFormatter.java@parseInto
@@ -4,24 +4,24 @@
     if (instant == null) {
         throw new IllegalArgumentException("Instant must not be null");
     }
-    long instantMillis = instant.getMillis();
-    Chronology chrono = instant.getChronology();
-    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-    chrono = selectChronology(chrono);
-    int defaultYear = chrono.year().get(instantLocal);
-    DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+    Chronology chrono = selectChronology(instant.getChronology());
+    DateTimeParserBucket bucket = new DateTimeParserBucket(instant.getMillis(), chrono, iLocale, iPivotYear, null);
     int newPos = parser.parseInto(bucket, text, position);
-    instant.setMillis(bucket.computeMillis(false, text));
+    instant.setMillis(bucket.computeMillis());
     if (iOffsetParsed && bucket.getOffsetInteger() != null) {
         int parsedOffset = bucket.getOffsetInteger();
         DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
         chrono = chrono.withZone(parsedZone);
-    } else if (bucket.getZone() != null) {
-        chrono = chrono.withZone(bucket.getZone());
-    }
-    instant.setChronology(chrono);
-    if (iZone != null) {
-        instant.setZone(iZone);
+        instant.setChronology(chrono);
+    } else {
+        if (bucket.getZone() != null) {
+            DateTimeZone parsedZone = bucket.getZone();
+            chrono = chrono.withZone(parsedZone);
+            instant.setChronology(chrono);
+        }
+        if (iZone != null) {
+            instant.setZone(iZone);
+        }
     }
     return newPos;
 }
