--- org/joda/time/format/DateTimeFormatter.java@parseInto
+++ org/joda/time/format/DateTimeFormatter.java@parseInto
@@ -4,22 +4,19 @@
     if (instant == null) {
         throw new IllegalArgumentException("Instant must not be null");
     }
-    long instantMillis = instant.getMillis();
     Chronology chrono = instant.getChronology();
-    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-    chrono = selectChronology(chrono);
-    int defaultYear = chrono.year().get(instantLocal);
-    DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+    DateTimeParserBucket bucket = new DateTimeParserBucket(instant, chrono, iLocale, iPivotYear);
     int newPos = parser.parseInto(bucket, text, position);
     instant.setMillis(bucket.computeMillis(false, text));
     if (iOffsetParsed && bucket.getOffsetInteger() != null) {
         int parsedOffset = bucket.getOffsetInteger();
         DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
         chrono = chrono.withZone(parsedZone);
+        instant.setChronology(chrono);
     } else if (bucket.getZone() != null) {
         chrono = chrono.withZone(bucket.getZone());
+        instant.setChronology(chrono);
     }
-    instant.setChronology(chrono);
     if (iZone != null) {
         instant.setZone(iZone);
     }
