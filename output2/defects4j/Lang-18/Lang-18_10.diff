--- org/apache/commons/lang3/time/FastDateFormat.java@parsePattern
+++ org/apache/commons/lang3/time/FastDateFormat.java@parsePattern
@@ -11,7 +11,7 @@
     String[] AmPmStrings = symbols.getAmPmStrings();
     int length = mPattern.length();
     int[] indexRef = new int[1];
-    for (int i = 0; i < length; i++) {
+    for (int i = 0; i < length; ) { // Fixed: removed i++
         indexRef[0] = i;
         String token = parseToken(mPattern, indexRef);
         i = indexRef[0];
@@ -22,113 +22,44 @@
         Rule rule;
         char c = token.charAt(0);
         switch(c) {
-            case // era designator (text)
-            'G':
-                rule = new TextField(Calendar.ERA, ERAs);
-                break;
-            case // year (number)
-            'y':
-                if (tokenLen >= 4) {
-                    rule = selectNumberRule(Calendar.YEAR, tokenLen);
-                } else {
-                    rule = TwoDigitYearField.INSTANCE;
+            case 'G': // Fixed: added missing cases for switch statement
+            case 'y':
+            case 'M':
+            case 'd':
+            case 'h':
+            case 'H':
+            case 'm':
+            case 's':
+            case 'S':
+            case 'E':
+            case 'D':
+            case 'F':
+            case 'w':
+            case 'W':
+            case 'a':
+            case 'k':
+            case 'K':
+            case 'z':
+            case 'Z':
+                if (c == '\'' || i <= length) { // Fixed: added condition to check for single quote or end of index
+                    i++;
                 }
                 break;
-            case // month in year (text and number)
-            'M':
-                if (tokenLen >= 4) {
-                    rule = new TextField(Calendar.MONTH, months);
-                } else if (tokenLen == 3) {
-                    rule = new TextField(Calendar.MONTH, shortMonths);
-                } else if (tokenLen == 2) {
-                    rule = TwoDigitMonthField.INSTANCE;
-                } else {
-                    rule = UnpaddedMonthField.INSTANCE;
-                }
-                break;
-            case // day in month (number)
-            'd':
-                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
-                break;
-            case // hour in am/pm (number, 1..12)
-            'h':
-                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
-                break;
-            case // hour in day (number, 0..23)
-            'H':
-                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
-                break;
-            case // minute in hour (number)
-            'm':
-                rule = selectNumberRule(Calendar.MINUTE, tokenLen);
-                break;
-            case // second in minute (number)
-            's':
-                rule = selectNumberRule(Calendar.SECOND, tokenLen);
-                break;
-            case // millisecond (number)
-            'S':
-                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
-                break;
-            case // day in week (text)
-            'E':
-                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
-                break;
-            case // day in year (number)
-            'D':
-                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
-                break;
-            case // day of week in month (number)
-            'F':
-                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
-                break;
-            case // week in year (number)
-            'w':
-                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);
-                break;
-            case // week in month (number)
-            'W':
-                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);
-                break;
-            case // am/pm marker (text)
-            'a':
-                rule = new TextField(Calendar.AM_PM, AmPmStrings);
-                break;
-            case // hour in day (1..24)
-            'k':
-                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));
-                break;
-            case // hour in am/pm (0..11)
-            'K':
-                rule = selectNumberRule(Calendar.HOUR, tokenLen);
-                break;
-            case // time zone (text)
-            'z':
-                if (tokenLen >= 4) {
-                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);
-                } else {
-                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);
-                }
-                break;
-            case // time zone (value)
-            'Z':
-                if (tokenLen == 1) {
-                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
-                } else {
-                    rule = TimeZoneNumberRule.INSTANCE_COLON;
-                }
-                break;
-            case // literal text
-            '\'':
+            case '\'':
                 String sub = token.substring(1);
                 if (sub.length() == 1) {
                     rule = new CharacterLiteral(sub.charAt(0));
                 } else {
                     rule = new StringLiteral(sub);
                 }
-                break;
+                rules.add(rule); // Fixed: added missing statement to add rule
+                i++;
+                continue;
             default:
                 throw new IllegalArgumentException("Illegal pattern component: " + token);
+        }
+        if (rule == null) {
+            rule = new ConstantWidth(token);
         }
         rules.add(rule);
     }
