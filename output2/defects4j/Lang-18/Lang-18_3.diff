--- org/apache/commons/lang3/time/FastDateFormat.java@parsePattern
+++ org/apache/commons/lang3/time/FastDateFormat.java@parsePattern
@@ -11,10 +11,10 @@
     String[] AmPmStrings = symbols.getAmPmStrings();
     int length = mPattern.length();
     int[] indexRef = new int[1];
-    for (int i = 0; i < length; i++) {
-        indexRef[0] = i;
+    for (int i = 0; i < length; ) { // Change loop variable from "i++" to the end of the switch statement
+        // indexRef[0] = i; // Commented out unnecessary line
         String token = parseToken(mPattern, indexRef);
-        i = indexRef[0];
+        i = indexRef[0]; // Update loop variable
         int tokenLen = token.length();
         if (tokenLen == 0) {
             break;
@@ -22,20 +22,17 @@
         Rule rule;
         char c = token.charAt(0);
         switch(c) {
-            case // era designator (text)
-            'G':
+            case 'G': // Add case label with missing quotes
                 rule = new TextField(Calendar.ERA, ERAs);
                 break;
-            case // year (number)
-            'y':
+            case 'y':
                 if (tokenLen >= 4) {
                     rule = selectNumberRule(Calendar.YEAR, tokenLen);
                 } else {
                     rule = TwoDigitYearField.INSTANCE;
                 }
                 break;
-            case // month in year (text and number)
-            'M':
+            case 'M':
                 if (tokenLen >= 4) {
                     rule = new TextField(Calendar.MONTH, months);
                 } else if (tokenLen == 3) {
@@ -46,80 +43,63 @@
                     rule = UnpaddedMonthField.INSTANCE;
                 }
                 break;
-            case // day in month (number)
-            'd':
+            case 'd':
                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
                 break;
-            case // hour in am/pm (number, 1..12)
-            'h':
+            case 'h':
                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
                 break;
-            case // hour in day (number, 0..23)
-            'H':
+            case 'H':
                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
                 break;
-            case // minute in hour (number)
-            'm':
+            case 'm':
                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);
                 break;
-            case // second in minute (number)
-            's':
+            case 's':
                 rule = selectNumberRule(Calendar.SECOND, tokenLen);
                 break;
-            case // millisecond (number)
-            'S':
+            case 'S':
                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
                 break;
-            case // day in week (text)
-            'E':
+            case 'E':
                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
                 break;
-            case // day in year (number)
-            'D':
+            case 'D':
                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
                 break;
-            case // day of week in month (number)
-            'F':
+            case 'F':
                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                 break;
-            case // week in year (number)
-            'w':
+            case 'w':
                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);
                 break;
-            case // week in month (number)
-            'W':
+            case 'W':
                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);
                 break;
-            case // am/pm marker (text)
-            'a':
+            case 'a':
                 rule = new TextField(Calendar.AM_PM, AmPmStrings);
                 break;
-            case // hour in day (1..24)
-            'k':
+            case 'k':
                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));
                 break;
-            case // hour in am/pm (0..11)
-            'K':
+            case 'K':
                 rule = selectNumberRule(Calendar.HOUR, tokenLen);
                 break;
-            case // time zone (text)
-            'z':
+            case 'z':
                 if (tokenLen >= 4) {
                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);
                 } else {
                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);
                 }
                 break;
-            case // time zone (value)
-            'Z':
+            case 'Z':
                 if (tokenLen == 1) {
                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
                 } else {
                     rule = TimeZoneNumberRule.INSTANCE_COLON;
                 }
                 break;
-            case // literal text
-            '\'':
+            case '\'':
                 String sub = token.substring(1);
                 if (sub.length() == 1) {
                     rule = new CharacterLiteral(sub.charAt(0));
@@ -130,6 +110,7 @@
             default:
                 throw new IllegalArgumentException("Illegal pattern component: " + token);
         }
+        i++; // Increment loop variable after switch statement
         rules.add(rule);
     }
     return rules;
