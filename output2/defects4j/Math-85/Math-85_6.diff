--- org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java@bracket
+++ org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java@bracket
@@ -1,12 +1,12 @@
 public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {
     if (function == null) {
-        throw MathRuntimeException.createIllegalArgumentException("function is null");
+        throw new IllegalArgumentException("function is null");
     }
     if (maximumIterations <= 0) {
-        throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}", maximumIterations);
+        throw new IllegalArgumentException("bad value for maximum iterations number: {0}", maximumIterations);
     }
     if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
-        throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}", lowerBound, initial, upperBound);
+        throw new IllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}", lowerBound, initial, upperBound);
     }
     double a = initial;
     double b = initial;
@@ -21,7 +21,7 @@
         numIterations++;
     } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));
     if (fa * fb >= 0.0) {
-        throw new ConvergenceException("number of iterations={0}, maximum iterations={1}, " + "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + "final b value={6}, f(a)={7}, f(b)={8}", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);
+        throw new ConvergenceException("number of iterations=%d, maximum iterations=%d, " + "initial=%f, lower bound=%f, upper bound=%f, final a value=%f, " + "final b value=%f, f(a)=%f, f(b)=%f", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);
     }
     return new double[] { a, b };
 }
