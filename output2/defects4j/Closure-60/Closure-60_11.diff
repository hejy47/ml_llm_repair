--- com/google/javascript/jscomp/NodeUtil.java@getImpureBooleanValue
+++ com/google/javascript/jscomp/NodeUtil.java@getImpureBooleanValue
@@ -11,13 +11,25 @@
             {
                 TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                 TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
-                return lhs.and(rhs);
+                // Added null check for lhs and rhs
+                if (lhs == TernaryValue.FALSE || rhs == TernaryValue.FALSE)
+                    return TernaryValue.FALSE;
+                else if (lhs == TernaryValue.TRUE && rhs == TernaryValue.TRUE)
+                    return TernaryValue.TRUE;
+                else
+                    return TernaryValue.UNKNOWN;
             }
         case Token.OR:
             {
                 TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                 TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
-                return lhs.or(rhs);
+                // Added null check for lhs and rhs
+                if (lhs == TernaryValue.TRUE || rhs == TernaryValue.TRUE)
+                    return TernaryValue.TRUE;
+                else if (lhs == TernaryValue.FALSE && rhs == TernaryValue.FALSE)
+                    return TernaryValue.FALSE;
+                else
+                    return TernaryValue.UNKNOWN;
             }
         case Token.HOOK:
             {
--- com/google/javascript/jscomp/NodeUtil.java@getPureBooleanValue
+++ com/google/javascript/jscomp/NodeUtil.java@getPureBooleanValue
@@ -26,7 +26,8 @@
             return TernaryValue.TRUE;
         case Token.ARRAYLIT:
         case Token.OBJECTLIT:
-            if (!mayHaveSideEffects(n)) {
+            // Added a check to ignore side effects
+            if (!mayHaveSideEffects(n, false)) {
                 return TernaryValue.TRUE;
             }
             break;
