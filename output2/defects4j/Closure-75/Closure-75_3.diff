--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue
+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue
@@ -1,30 +1,22 @@
 static Double getStringNumberValue(String rawJsString) {
-    // vertical tab is not always whitespace
     String s = trimJsWhiteSpace(rawJsString);
-    // return ScriptRuntime.toNumber(s);
     if (s.length() == 0) {
         return 0.0;
-    }
-    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
-        // Attempt to convert hex numbers.
-        try {
-            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
-        } catch (NumberFormatException e) {
-            return Double.NaN;
-        }
-    }
-    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
-        // hex numbers with explicit signs vary between browsers.
-        return null;
-    }
-    // FireFox and IE treat the "Infinity" differently. FireFox is case
-    // insensitive, but IE treats "infinity" as NaN.  So leave it alone.
-    if (s.equals("infinity") || s.equals("-infinity") || s.equals("+infinity")) {
-        return null;
     }
     try {
         return Double.parseDouble(s);
     } catch (NumberFormatException e) {
+        if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
+            try {
+                return Double.valueOf(Integer.parseInt(s.substring(2), 16));
+            } catch (NumberFormatException ex) {
+                return Double.NaN;
+            }
+        } else if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
+            return null;
+        } else if (s.equalsIgnoreCase("infinity") || s.equalsIgnoreCase("-infinity") || s.equalsIgnoreCase("+infinity")) {
+            return null;
+        }
         return Double.NaN;
     }
 }
--- com/google/javascript/jscomp/NodeUtil.java@isStrWhiteSpaceChar
+++ com/google/javascript/jscomp/NodeUtil.java@isStrWhiteSpaceChar
@@ -2,7 +2,6 @@
     switch(c) {
         case // <VT>
         '\u000B':
-            return TernaryValue.TRUE;
         // <SP>
         case ' ':
         // <LF>
@@ -23,6 +22,6 @@
         '\uFEFF':
             return TernaryValue.TRUE;
         default:
-            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
+            return (Character.getType(c) == Character.SPACE_SEPARATOR || Character.isWhitespace(c)) ? TernaryValue.TRUE : TernaryValue.FALSE;
     }
 }
