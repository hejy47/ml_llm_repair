--- org/apache/commons/math/optimization/direct/MultiDirectional.java@iterateSimplex
+++ org/apache/commons/math/optimization/direct/MultiDirectional.java@iterateSimplex
@@ -10,10 +10,13 @@
         if (comparator.compare(reflected, best) < 0) {
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
-            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-            if (comparator.compare(reflected, expanded) <= 0) {
+            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);
+            if (comparator.compare(expanded, reflected) < 0) {
+                // accept the expanded simplex
+                simplex = reflectedSimplex;
+            } else {
                 // accept the reflected simplex
-                simplex = reflectedSimplex;
+                simplex = reflected;
             }
             return;
         }
@@ -22,7 +25,18 @@
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
             // check convergence
+            simplex = contracted;
             return;
+        } else {
+            // perform a reduction step
+            for (int i = 1; i < original.length; i++) {
+                final double[] res = new double[original[i].getPointRef().length];
+                for (int j = 0; j < res.length; j++) {
+                    res[j] = rho * (original[i].getPointRef()[j] - best.getPointRef()[j]);
+                    res[j] += best.getPointRef()[j];
+                }
+                original[i] = new RealPointValuePair(res, Double.NaN);
+            }
         }
     }
 }
