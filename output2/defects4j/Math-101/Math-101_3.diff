--- org/apache/commons/math/complex/ComplexFormat.java@parse
+++ org/apache/commons/math/complex/ComplexFormat.java@parse
@@ -46,16 +46,20 @@
         return null;
     }
     // parse imaginary character
-    int n = getImaginaryCharacter().length();
-    startIndex = pos.getIndex();
-    int endIndex = startIndex + n;
-    if (source.substring(startIndex, endIndex).compareTo(getImaginaryCharacter()) != 0) {
+    String imaginaryChar = getImaginaryCharacter();
+    if (source.length() - pos.getIndex() < imaginaryChar.length()) {
+        // not enough characters to possibly be the imaginaryChar
+        return new Complex(re.doubleValue(), im.doubleValue() * sign);
+    }
+    if (source.substring(pos.getIndex(), pos.getIndex() + imaginaryChar.length()).equals(imaginaryChar)) {
+        // imaginary character found
+        pos.setIndex(pos.getIndex() + imaginaryChar.length());
+        return new Complex(re.doubleValue(), im.doubleValue() * sign);
+    } else {
         // set index back to initial, error index should be the start index
         // character examined.
         pos.setIndex(initialIndex);
-        pos.setErrorIndex(startIndex);
+        pos.setErrorIndex(pos.getIndex());
         return null;
     }
-    pos.setIndex(endIndex);
-    return new Complex(re.doubleValue(), im.doubleValue() * sign);
 }
