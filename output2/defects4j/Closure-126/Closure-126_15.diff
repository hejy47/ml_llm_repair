--- com/google/javascript/jscomp/MinimizeExitPoints.java@tryMinimizeExits
+++ com/google/javascript/jscomp/MinimizeExitPoints.java@tryMinimizeExits
@@ -26,7 +26,7 @@
             Node catchCodeBlock = catchNode.getLastChild();
             tryMinimizeExits(catchCodeBlock, exitType, labelName);
         }
-                if (NodeUtil.hasFinally(n)) {
+        if (NodeUtil.hasFinally(n)) {
             Node finallyBlock = n.getLastChild();
             tryMinimizeExits(finallyBlock, exitType, labelName);
         }
@@ -45,34 +45,45 @@
     // Convert "if (blah) break;  if (blah2) break; other_stmt;" to
     // become "if (blah); else { if (blah2); else { other_stmt; } }"
     // which will get converted to "if (!blah && !blah2) { other_stmt; }".
-    for (Node c : n.children()) {
-        // An 'if' block to process below.
-        if (c.isIf()) {
-            Node ifTree = c;
-            Node trueBlock, falseBlock;
-            // First, the true condition block.
-            trueBlock = ifTree.getFirstChild().getNext();
-            falseBlock = trueBlock.getNext();
-            tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);
-            // Now the else block.
-            // The if blocks may have changed, get them again.
-            trueBlock = ifTree.getFirstChild().getNext();
-            falseBlock = trueBlock.getNext();
-            if (falseBlock != null) {
-                tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);
+    Iterator<Node> iterator = n.children().iterator();
+    Node prev = null;
+    while (iterator.hasNext()) {
+        Node c = iterator.next();
+        if (c.isIf() && prev != null && prev.isIf()) {
+            // Merge if blocks
+            Node ifTree1 = prev;
+            Node ifTree2 = c;
+            Node trueBlock1 = ifTree1.getFirstChild().getNext();
+            Node falseBlock1 = trueBlock1.getNext();
+            Node trueBlock2 = ifTree2.getFirstChild().getNext();
+            Node falseBlock2 = trueBlock2.getNext();
+            Node trueBlock = IR.block();
+            Node falseBlock = IR.block();
+            // Build nested if block
+            ifTree1.replaceChild(falseBlock1, IR.ifNode(falseBlock1.detach(), trueBlock.detach()));
+            ifTree1.replaceChild(trueBlock1, IR.ifNode(trueBlock1.detach(), falseBlock));
+            // Merge true blocks
+            trueBlock.addChildToBack(trueBlock1.detach());
+            trueBlock.addChildToBack(trueBlock2.detach());
+            // Merge false blocks
+            if (falseBlock1.hasChildren() && falseBlock2.hasChildren()) {
+                Node tempTrue = IR.block();
+                Node tempFalse = IR.block();
+                tryMinimizeIfBlockExits(falseBlock1, falseBlock2, ifTree2, exitType, labelName);
+                tempTrue.addChildrenToFront(falseBlock1.removeChildren());
+                tempFalse.addChildrenToFront(falseBlock2.removeChildren());
+                falseBlock.addChildToBack(IR.ifNode(tempTrue.detach(), tempFalse.detach()));
+            } else if (falseBlock1.hasChildren()) {
+                falseBlock.addChildrenToFront(falseBlock1.removeChildren());
+            } else if (falseBlock2.hasChildren()) {
+                falseBlock.addChildrenToFront(falseBlock2.removeChildren());
             }
+            NodeUtil.removeChild(n, ifTree2);
+            compiler.reportCodeChange();
+            c = ifTree1;
+            iterator = n.children().iterator();
         }
-        if (c == n.getLastChild()) {
-            break;
-        }
-    }
-    // Now try to minimize the exits of the last child, if it is removed
-    // look at what has become the last child.
-    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
         tryMinimizeExits(c, exitType, labelName);
-        // If the node is still the last child, we are done.
-        if (c == n.getLastChild()) {
-            break;
-        }
+        prev = c;
     }
 }
