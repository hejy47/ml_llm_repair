--- com/google/javascript/jscomp/MinimizeExitPoints.java@tryMinimizeExits
+++ com/google/javascript/jscomp/MinimizeExitPoints.java@tryMinimizeExits
@@ -19,15 +19,14 @@
     if (n.isTry()) {
         Node tryBlock = n.getFirstChild();
         tryMinimizeExits(tryBlock, exitType, labelName);
-        Node allCatchNodes = NodeUtil.getCatchBlock(n);
-        if (NodeUtil.hasCatchHandler(allCatchNodes)) {
-            Preconditions.checkState(allCatchNodes.hasOneChild());
-            Node catchNode = allCatchNodes.getFirstChild();
-            Node catchCodeBlock = catchNode.getLastChild();
+        Node catchBlock = NodeUtil.getCatchBlock(n);
+        if (catchBlock != null) {
+            Preconditions.checkState(catchBlock.hasOneChild());
+            Node catchCodeBlock = catchBlock.getFirstChild();
             tryMinimizeExits(catchCodeBlock, exitType, labelName);
         }
-                if (NodeUtil.hasFinally(n)) {
-            Node finallyBlock = n.getLastChild();
+        if (NodeUtil.hasFinally(n)) {
+            Node finallyBlock = NodeUtil.getFinallyBlock(n);
             tryMinimizeExits(finallyBlock, exitType, labelName);
         }
     }
@@ -35,9 +34,9 @@
     if (n.isLabel()) {
         Node labelBlock = n.getLastChild();
         tryMinimizeExits(labelBlock, exitType, labelName);
+        return;
     }
-    // TODO(johnlenz): The last case of SWITCH statement?
-    // The rest assumes a block with at least one child, bail on anything else.
+    // The rest assumes a block with at least one child.
     if (!n.isBlock() || n.getLastChild() == null) {
         return;
     }
@@ -49,29 +48,24 @@
         // An 'if' block to process below.
         if (c.isIf()) {
             Node ifTree = c;
-            Node trueBlock, falseBlock;
-            // First, the true condition block.
-            trueBlock = ifTree.getFirstChild().getNext();
-            falseBlock = trueBlock.getNext();
+            Node trueBlock = ifTree.getFirstChild().getNext();
+            Node falseBlock = trueBlock.getNext();
+
+            // Fix the true block.
             tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);
-            // Now the else block.
-            // The if blocks may have changed, get them again.
-            trueBlock = ifTree.getFirstChild().getNext();
-            falseBlock = trueBlock.getNext();
+
+            // Fix the else block only if it exists.
             if (falseBlock != null) {
                 tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);
             }
         }
-        if (c == n.getLastChild()) {
-            break;
-        }
-    }
-    // Now try to minimize the exits of the last child, if it is removed
-    // look at what has become the last child.
-    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
+
+        // Recurse on this child of n.
         tryMinimizeExits(c, exitType, labelName);
-        // If the node is still the last child, we are done.
-        if (c == n.getLastChild()) {
+
+        // Once the child is processed it may go away and be replaced
+        // with the next sibling, so only continue if c is still a child of n.
+        if (c.getParent() != n) {
             break;
         }
     }
