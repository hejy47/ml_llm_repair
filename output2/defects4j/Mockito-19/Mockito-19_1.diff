--- org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java@filterCandidate
+++ org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java@filterCandidate
@@ -10,6 +10,7 @@
                     }
                 } catch (RuntimeException e) {
                     new Reporter().cannotInjectDependency(field, matchingMock, e);
+                    return null;
                 }
                 return matchingMock;
             }
--- org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java@filterCandidate
+++ org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java@filterCandidate
@@ -1 +1,15 @@
 OngoingInjecter filterCandidate(Collection<Object> mocks, Field fieldToBeInjected, Object fieldInstance);
+
+## Fixed Function 3
+public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {
+    List<Object> mockNameMatches = new ArrayList<Object>();
+    if (mocks.size() > 1) {
+        for (Object mock : mocks) {
+            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {
+                mockNameMatches.add(mock);
+            }
+        }
+        return next.filterCandidate(mockNameMatches, field, fieldInstance);
+            }
+    return next.filterCandidate(mocks, field, fieldInstance);
+}
--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate
+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate
@@ -1,9 +1,12 @@
 public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {
-    List<Object> mockTypeMatches = new ArrayList<Object>();
-    for (Object mock : mocks) {
-        if (field.getType().isAssignableFrom(mock.getClass())) {
-            mockTypeMatches.add(mock);
+    List<Object> mockNameMatches = new ArrayList<Object>();
+    if (mocks.size() > 1) {
+        for (Object mock : mocks) {
+            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {
+                mockNameMatches.add(mock);
+            }
         }
-    }
-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);
+        return next.filterCandidate(mockNameMatches, field, fieldInstance);
+            }
+    return next.filterCandidate(mocks, field, fieldInstance);
 }
--- org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java@injectMockCandidatesOnFields
+++ org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java@injectMockCandidatesOnFields
@@ -1,11 +1,14 @@
 private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {
     for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {
         Field field = it.next();
-        Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();
-        if (injected != null) {
-            injectionOccurred |= true;
-            mocks.remove(injected);
-            it.remove();
+        OngoingInjecter injecter = mockCandidateFilter.filterCandidate(mocks, field, instance);
+        if (injecter != null) {
+            Object injected = injecter.thenInject();
+            if (injected != null) {
+                injectionOccurred = true;
+                mocks.remove(injected);
+                it.remove();
+            }
         }
     }
     return injectionOccurred;
