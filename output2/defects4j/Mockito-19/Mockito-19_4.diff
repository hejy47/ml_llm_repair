--- org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java@filterCandidate
+++ org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java@filterCandidate
@@ -14,11 +14,13 @@
                 return matchingMock;
             }
         };
+    } else if (mocks.size() > 1) {
+        return new OngoingInjecter() {
+
+            public Object thenInject() {
+                return null;
+            }
+        };
     }
-    return new OngoingInjecter() {
-
-        public Object thenInject() {
-            return null;
-        }
-    };
+    return null;
 }
--- org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java@filterCandidate
+++ org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java@filterCandidate
@@ -1 +1,16 @@
 OngoingInjecter filterCandidate(Collection<Object> mocks, Field fieldToBeInjected, Object fieldInstance);
+
+## Fixed Function 3
+public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {
+    List<Object> mockNameMatches = new ArrayList<Object>();
+    for (Object mock : mocks) {
+        if (field.getName().equals(mockUtil.getMockName(mock).toString())) {
+            mockNameMatches.add(mock);
+        }
+    }
+    if (mockNameMatches.size() > 0) {
+        return next.filterCandidate(mockNameMatches, field, fieldInstance);
+    } else {
+        return next.filterCandidate(mocks, field, fieldInstance);
+    }
+}
--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate
+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate
@@ -1,12 +1,13 @@
 public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {
     List<Object> mockNameMatches = new ArrayList<Object>();
-    if (mocks.size() > 1) {
-        for (Object mock : mocks) {
-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {
-                mockNameMatches.add(mock);
-            }
+    for (Object mock : mocks) {
+        if (field.getName().equals(mockUtil.getMockName(mock).toString())) {
+            mockNameMatches.add(mock);
         }
+    }
+    if (mockNameMatches.size() > 0) {
         return next.filterCandidate(mockNameMatches, field, fieldInstance);
-            }
-    return next.filterCandidate(mocks, field, fieldInstance);
+    } else {
+        return next.filterCandidate(mocks, field, fieldInstance);
+    }
 }
--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate
+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate
@@ -1,9 +1,13 @@
 public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {
-    List<Object> mockTypeMatches = new ArrayList<Object>();
+    List<Object> mockNameMatches = new ArrayList<Object>();
     for (Object mock : mocks) {
-        if (field.getType().isAssignableFrom(mock.getClass())) {
-            mockTypeMatches.add(mock);
+        if (field.getName().equals(mockUtil.getMockName(mock).toString())) {
+            mockNameMatches.add(mock);
         }
     }
-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);
+    if (mockNameMatches.size() > 0) {
+        return next.filterCandidate(mockNameMatches, field, fieldInstance);
+    } else {
+        return next.filterCandidate(mocks, field, fieldInstance);
+    }
 }
--- org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java@injectMockCandidatesOnFields
+++ org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java@injectMockCandidatesOnFields
@@ -1,11 +1,14 @@
 private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {
     for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {
         Field field = it.next();
-        Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();
-        if (injected != null) {
-            injectionOccurred |= true;
-            mocks.remove(injected);
-            it.remove();
+        OngoingInjecter injecter = mockCandidateFilter.filterCandidate(mocks, field, instance);
+        if (injecter != null) {
+            Object injected = injecter.thenInject();
+            if (injected != null) {
+                injectionOccurred |= true;
+                mocks.remove(injected);
+                it.remove();
+            }
         }
     }
     return injectionOccurred;
