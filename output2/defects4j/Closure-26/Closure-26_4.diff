--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride
+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride
@@ -1,4 +1,9 @@
 private void emitOptionalModuleExportsOverride(Node script, String moduleName) {
     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string("module$exports"));
-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));
+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));
+    ifNode.setJSDocInfo(
+        (new JSDocInfoBuilder(true))
+            .addSuppressions("uselessCode", "12345")
+            .build());
+    script.addChildToBack(ifNode.copyInformationFromForTree(script));
 }
--- com/google/javascript/jscomp/ProcessCommonJSModules.java@visitModuleExports
+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@visitModuleExports
@@ -1,9 +1,9 @@
 private void visitModuleExports(Node prop) {
-    String moduleName = guessCJSModuleName(prop.getSourceFileName());
-    Node module = prop.getChildAtIndex(0);
+    String moduleName = prop.getFirstChild().getString();
+    Node module = prop.getFirstChild();
     module.putProp(Node.ORIGINALNAME_PROP, "module");
-    module.setString(moduleName);
-    Node exports = prop.getChildAtIndex(1);
+    Node exports = prop.getLastChild();
     exports.putProp(Node.ORIGINALNAME_PROP, "exports");
     exports.setString("module$exports");
+    module.setString(moduleName);
 }
