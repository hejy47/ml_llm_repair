--- org/apache/commons/math/geometry/euclidean/threed/Rotation.java@Rotation
+++ org/apache/commons/math/geometry/euclidean/threed/Rotation.java@Rotation
@@ -37,9 +37,7 @@
             // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
             // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
             k = v2Su2.crossProduct(v3Su3);
-            ;
             c = k.dotProduct(u2.crossProduct(u3));
-            ;
             if (c == 0) {
                 // the (q1, q2, q3) vector is aligned with everything
                 // this is really the identity rotation
@@ -62,5 +60,12 @@
     q3 = inv * k.getZ();
     // compute the scalar part
     k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2, uRef.getZ() * q1 - uRef.getX() * q3, uRef.getX() * q2 - uRef.getY() * q1);
-    q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+    q0 = vRef.dotProduct(k) / (2.0 * k.getNormSq());
+    //fixing returned rotation quaternion
+    Quaternion q = new Quaternion(q0, q1, q2, q3);
+    q = q.normalize();
+    q0 = q.getS();
+    q1 = q.getQ1();
+    q2 = q.getQ2();
+    q3 = q.getQ3();
 }
