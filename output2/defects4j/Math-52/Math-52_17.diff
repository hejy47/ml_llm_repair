--- org/apache/commons/math/geometry/euclidean/threed/Rotation.java@Rotation
+++ org/apache/commons/math/geometry/euclidean/threed/Rotation.java@Rotation
@@ -18,49 +18,45 @@
     double alpha = coeffU - beta * coeffV;
     v2 = new Vector3D(alpha, v1, beta, v2);
     // preliminary computation
-    Vector3D uRef = u1;
-    Vector3D vRef = v1;
-    Vector3D v1Su1 = v1.subtract(u1);
-    Vector3D v2Su2 = v2.subtract(u2);
-    Vector3D k = v1Su1.crossProduct(v2Su2);
     Vector3D u3 = u1.crossProduct(u2);
-    double c = k.dotProduct(u3);
-    if (c == 0) {
-        // the (q1, q2, q3) vector is close to the (u1, u2) plane
-        // we try other vectors
-        Vector3D v3 = Vector3D.crossProduct(v1, v2);
-        Vector3D v3Su3 = v3.subtract(u3);
-        k = v1Su1.crossProduct(v3Su3);
-        Vector3D u2Prime = u1.crossProduct(u3);
-        c = k.dotProduct(u2Prime);
-        if (c == 0) {
-            // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-            // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-            k = v2Su2.crossProduct(v3Su3);
-            ;
-            c = k.dotProduct(u2.crossProduct(u3));
-            ;
-            if (c == 0) {
-                // the (q1, q2, q3) vector is aligned with everything
-                // this is really the identity rotation
-                q0 = 1.0;
-                q1 = 0.0;
-                q2 = 0.0;
-                q3 = 0.0;
-                return;
-            }
-            // we will have to use u2 and v2 to compute the scalar part
-            uRef = u2;
-            vRef = v2;
+    Vector3D v3 = v1.crossProduct(v2);
+    double normU3 = u3.getNorm();
+    double normV3 = v3.getNorm();
+    if (normU3 == 0 || normV3 == 0) {
+        // the (q1, q2, q3) vector is aligned with everything
+        // this is really the identity rotation
+        q0 = 1.0;
+        q1 = 0.0;
+        q2 = 0.0;
+        q3 = 0.0;
+        return;
+    }
+    double dotProduct = u3.dotProduct(v3) / (normU3 * normV3);
+    double delta = dotProduct + 1;
+    if (delta < SINGULARITY_THRESHOLD) {
+        // special case u3 and v3 are parallel
+        Vector3D w = u2.crossProduct(v2);
+        double normW = w.getNorm();
+        if (normW == 0) {
+            // u2 and v2 are also parallel, we can select any orthogonal vectors
+            w = u1.orthogonal();
         }
+        q0 = 0;
+        q1 = w.getX();
+        q2 = w.getY();
+        q3 = w.getZ();
+        return;
     }
     // compute the vectorial part
-    c = FastMath.sqrt(c);
-    double inv = 1.0 / (c + c);
-    q1 = inv * k.getX();
-    q2 = inv * k.getY();
-    q3 = inv * k.getZ();
+    Vector3D w = u3.crossProduct(v3);
+    double normW = w.getNorm();
+    q1 = w.getX() / normW;
+    q2 = w.getY() / normW;
+    q3 = w.getZ() / normW;
     // compute the scalar part
-    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2, uRef.getZ() * q1 - uRef.getX() * q3, uRef.getX() * q2 - uRef.getY() * q1);
-    q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
+    q0 = FastMath.sqrt(delta / 2.0);
+    double inverse = 1 / (2.0 * q0 * normW);
+    q1 *= inverse;
+    q2 *= inverse;
+    q3 *= inverse;
 }
