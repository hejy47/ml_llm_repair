--- org/apache/commons/math/geometry/euclidean/threed/Rotation.java@Rotation
+++ org/apache/commons/math/geometry/euclidean/threed/Rotation.java@Rotation
@@ -9,6 +9,17 @@
     }
     // normalize v1 in order to have (v1'|v1') = (u1|u1)
     v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
+
+    //Check for parallel cases to avoid zero division
+    if(FastMath.abs(v1.dotProduct(u1)) == FastMath.sqrt(v1.getNormSq()*u1.getNormSq())){
+        if(FastMath.abs(v2.dotProduct(u2)) == FastMath.sqrt(v2.getNormSq()*u2.getNormSq())){
+            q0 = 1.0;
+            q1 = 0.0;
+            q2 = 0.0;
+            q3 = 0.0;
+            return;
+        }
+    } 
     // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
     double u1u2 = u1.dotProduct(u2);
     double v1v2 = v1.dotProduct(v2);
@@ -16,6 +27,14 @@
     double coeffV = v1v2 / u1u1;
     double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
     double alpha = coeffU - beta * coeffV;
+
+    //Checking whether the dot product results in infinity or NaN
+    if(Double.isInfinite(alpha)){
+        alpha = 1.0;
+    } else if(Double.isNaN(alpha)){
+        alpha = 1.0;
+    }
+
     v2 = new Vector3D(alpha, v1, beta, v2);
     // preliminary computation
     Vector3D uRef = u1;
@@ -62,5 +81,21 @@
     q3 = inv * k.getZ();
     // compute the scalar part
     k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2, uRef.getZ() * q1 - uRef.getX() * q3, uRef.getX() * q2 - uRef.getY() * q1);
+
+    //Checking whether the dot product results in infinity or NaN
+    if(Double.isInfinite(k.getNormSq())){
+        q0 = 1.0;
+        q1 = 0.0;
+        q2 = 0.0;
+        q3 = 0.0;
+        return;
+    } else if(Double.isNaN(k.getNormSq())){
+        q0 = 1.0;
+        q1 = 0.0;
+        q2 = 0.0;
+        q3 = 0.0;
+        return;
+    }
+
     q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
 }
