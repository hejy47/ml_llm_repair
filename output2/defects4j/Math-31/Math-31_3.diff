--- org/apache/commons/math3/util/ContinuedFraction.java@evaluate
+++ org/apache/commons/math3/util/ContinuedFraction.java@evaluate
@@ -20,7 +20,7 @@
             double scaleFactor = 1d;
             double lastScaleFactor = 1d;
             final int maxPower = 5;
-            final double scale = FastMath.max(a, b);
+            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));
             if (scale <= 0) {
                 // Can't scale
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
@@ -28,7 +28,7 @@
             for (int i = 0; i < maxPower; i++) {
                 lastScaleFactor = scaleFactor;
                 scaleFactor *= scale;
-                if (a != 0.0 && a > b) {
+                if (a != 0.0 && FastMath.abs(a) > FastMath.abs(b)) {
                     cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
                     q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
                 } else if (b != 0) {
