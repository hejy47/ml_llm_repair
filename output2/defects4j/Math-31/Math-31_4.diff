--- org/apache/commons/math3/util/ContinuedFraction.java@evaluate
+++ org/apache/commons/math3/util/ContinuedFraction.java@evaluate
@@ -7,16 +7,16 @@
     }
     int n = 1;
     double dPrev = 0.0;
-    double p0 = 1.0;
-    double q1 = 1.0;
+    double pPrev = 1.0;
+    double qPrev = 0.0;
     double cPrev = hPrev;
     double hN = hPrev;
     while (n < maxIterations) {
         final double a = getA(n, x);
         final double b = getB(n, x);
-        double cN = a * hPrev + b * p0;
-        double q2 = a * q1 + b * dPrev;
-        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
+        double cN = a * hPrev + b * pPrev;
+        double qN = a * qPrev + b * dPrev;
+        if (Double.isInfinite(cN) || Double.isInfinite(qN)) {
             double scaleFactor = 1d;
             double lastScaleFactor = 1d;
             final int maxPower = 5;
@@ -29,18 +29,21 @@
                 lastScaleFactor = scaleFactor;
                 scaleFactor *= scale;
                 if (a != 0.0 && a > b) {
-                    cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
-                    q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
+                    cN = hPrev / lastScaleFactor + (b / scaleFactor * pPrev);
+                    qN = qPrev / lastScaleFactor + (b / scaleFactor * dPrev);
                 } else if (b != 0) {
-                    cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
-                    q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
+                    cN = (a / scaleFactor * hPrev) + pPrev / lastScaleFactor;
+                    qN = (a / scaleFactor * qPrev) + dPrev / lastScaleFactor;
                 }
-                if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
+                if (!(Double.isInfinite(cN) || Double.isInfinite(qN))) {
                     break;
                 }
             }
+            if (Double.isInfinite(cN) || Double.isInfinite(qN)) {
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
+            }
         }
-        final double deltaN = cN / q2 / cPrev;
+        final double deltaN = cN / qN / cPrev;
         hN = cPrev * deltaN;
         if (Double.isInfinite(hN)) {
             throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
@@ -51,11 +54,11 @@
         if (FastMath.abs(deltaN - 1.0) < epsilon) {
             break;
         }
-        dPrev = q1;
-        cPrev = cN / q2;
-        p0 = hPrev;
+        dPrev = qPrev;
+        qPrev = qN;
+        pPrev = pPrev * deltaN;
+        cPrev = cN / qN;
         hPrev = cN;
-        q1 = q2;
         n++;
     }
     if (n >= maxIterations) {
