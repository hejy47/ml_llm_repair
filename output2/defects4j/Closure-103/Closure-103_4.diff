--- com/google/javascript/jscomp/ControlFlowAnalysis.java@mayThrowException
+++ com/google/javascript/jscomp/ControlFlowAnalysis.java@mayThrowException
@@ -5,10 +5,25 @@
         case Token.GETELEM:
         case Token.THROW:
         case Token.NEW:
+            return true;
         case Token.ASSIGN:
         case Token.INC:
         case Token.DEC:
-            return true;
+            if (NodeUtil.isExpressionNode(n)) {
+                // Only expressions that are part of lists can throw
+                // if they are not in the left hand side of an assign.
+                Node parent = n.getParent();
+                if (parent != null &&
+                    NodeUtil.isIndexableNode(parent) &&
+                    NodeUtil.isAssignmentOp(parent)) {
+                    if (parent.getFirstChild() == n ||
+                        parent.getLastChild() == n) {
+                        return false;
+                    }
+                }
+                return true;
+            }
+            break;
         case Token.FUNCTION:
             return false;
     }
--- com/google/javascript/jscomp/DisambiguateProperties.java@getTypeWithProperty
+++ com/google/javascript/jscomp/DisambiguateProperties.java@getTypeWithProperty
@@ -17,7 +17,7 @@
     ObjectType foundType = null;
     ObjectType objType = ObjectType.cast(type);
     while (objType != null && objType.getImplicitPrototype() != objType) {
-        if (objType.hasOwnProperty(field)) {
+        if (objType.hasProperty(field)) {
             foundType = objType;
         }
         objType = objType.getImplicitPrototype();
@@ -27,5 +27,11 @@
     // getGreatestSubtypeWithProperty does not guarantee that the property
     // is defined on the returned type, it just indicates that it might be,
     // so we have to double check.
+    if (foundType == null && type instanceof ObjectType) {
+        foundType = ((ObjectType) type).getGreatestSubtypeWithProperty(field);
+        if (foundType != null && !foundType.hasProperty(field)) {
+            foundType = null;
+        }
+    }
     return foundType;
 }
