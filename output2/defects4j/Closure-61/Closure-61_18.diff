--- com/google/javascript/jscomp/NodeUtil.java@functionCallHasSideEffects
+++ com/google/javascript/jscomp/NodeUtil.java@functionCallHasSideEffects
@@ -1,6 +1,6 @@
 static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {
-    if (callNode.getType() != Token.CALL) {
-        throw new IllegalStateException("Expected CALL node, got " + Token.name(callNode.getType()));
+    if (callNode == null || callNode.getType() != Token.CALL) {
+        throw new IllegalStateException("Expected CALL node, got " + (callNode != null ? Token.name(callNode.getType()) : "null"));
     }
     if (callNode.isNoSideEffectsCall()) {
         return false;
@@ -21,12 +21,13 @@
         }
         // Functions in the "Math" namespace have no side effects.
         if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-            if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+            if (nameNode.getFirstChild() != null && nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                 return false;
-            } else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+            } else if (nameNode.getFirstChild() != null && nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                 Node param = nameNode.getNext();
-                if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP))
+                if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {
                     return false;
+                }
             }
         }
     }
