--- com/google/javascript/jscomp/NodeUtil.java@functionCallHasSideEffects
+++ com/google/javascript/jscomp/NodeUtil.java@functionCallHasSideEffects
@@ -1,34 +1,38 @@
 static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {
-    if (callNode.getType() != Token.CALL) {
-        throw new IllegalStateException("Expected CALL node, got " + Token.name(callNode.getType()));
+    if (callNode.getToken() != Token.CALL) {
+        throw new IllegalStateException("Expected CALL node, got " + callNode.getToken());
     }
-    if (callNode.isNoSideEffectsCall()) {
-        return false;
+    if (callNode.isNoSideEffectCall()) {
+      return false;
     }
     Node nameNode = callNode.getFirstChild();
-    // Built-in functions with no side effects.
-    if (nameNode.getType() == Token.NAME) {
-        String name = nameNode.getString();
-        if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
-            return false;
+    if (!nameNode.isQualifiedName()) {
+      return true;
+    }
+    String name = nameNode.getQualifiedName();
+    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
+      return false;
+    }
+    if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(name) && callNode.hasOneChild()) {
+      Node child = callNode.getSecondChild();
+      if (child != null && child.isString()) {
+        String prop = child.getString();
+        if (prop.equals("toString") || prop.equals("valueOf")) {
+          return false;
         }
-    } else if (nameNode.getType() == Token.GETPROP) {
-        if (callNode.hasOneChild() && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
-            return false;
+      }
+    }
+    if (name.equals("String") && callNode.hasOneChild() && callNode.getFirstChild().isTemplateLit()) {
+      return false;
+    }
+    if (name.equals("Math") && callNode.hasTwoChildren()) {
+      Node methodNameNode = nameNode.getNext();
+      if (methodNameNode != null && methodNameNode.isString()) {
+        String methodName = methodNameNode.getString();
+        if (MATH_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(methodName)) {
+          return false;
         }
-        if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(nameNode.getFirstChild())) {
-            return false;
-        }
-        // Functions in the "Math" namespace have no side effects.
-        if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-            if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
-                return false;
-            } else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
-                Node param = nameNode.getNext();
-                if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP))
-                    return false;
-            }
-        }
+      }
     }
     return true;
 }
