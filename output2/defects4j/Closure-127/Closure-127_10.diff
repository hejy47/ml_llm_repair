--- com/google/javascript/jscomp/UnreachableCodeElimination.java@tryRemoveUnconditionalBranching
+++ com/google/javascript/jscomp/UnreachableCodeElimination.java@tryRemoveUnconditionalBranching
@@ -1,6 +1,6 @@
 @SuppressWarnings("fallthrough")
 private void tryRemoveUnconditionalBranching(Node n) {
-        // If n is null the target is the end of the function, nothing to do.
+    // If n is null the target is the end of the function, nothing to do.
     if (n == null) {
         return;
     }
@@ -13,6 +13,8 @@
             if (n.hasChildren()) {
                 break;
             }
+            // add a break statement to exit the switch statement
+            break;
         case Token.BREAK:
         case Token.CONTINUE:
             // We are looking for a control flow changing statement that always
@@ -20,7 +22,7 @@
             // branches to the same node, it is safe to remove.
             List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();
             if (outEdges.size() == 1 && // If there is a next node, this jump is not useless.
-            (n.getNext() == null || n.getNext().isFunction())) {
+                (n.getNext() == null || n.getNext().isFunction())) {
                 Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
                 Node fallThrough = computeFollowing(n);
                 Node nextCfgNode = outEdges.get(0).getDestination().getValue();
@@ -28,5 +30,10 @@
                     removeNode(n);
                 }
             }
+            // add a break statement to exit the switch statement
+            break;
+        // add a default statement to handle all other cases
+        default:
+            break;
     }
 }
