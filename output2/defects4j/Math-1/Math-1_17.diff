--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction
+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction
@@ -1,5 +1,5 @@
 private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {
-    long overflow = Integer.MAX_VALUE;
+    long overflow = Long.MAX_VALUE;  // fixed variable type from int to long
     double r0 = value;
     long a0 = (long) FastMath.floor(r0);
     if (a0 > overflow) {
--- org/apache/commons/math3/fraction/Fraction.java@Fraction
+++ org/apache/commons/math3/fraction/Fraction.java@Fraction
@@ -1,8 +1,8 @@
 private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {
-    long overflow = Integer.MAX_VALUE;
+    long overflow = Long.MAX_VALUE;  // fixed variable type from int to long
     double r0 = value;
     long a0 = (long) FastMath.floor(r0);
-    if (FastMath.abs(a0) > overflow) {
+    if (FastMath.abs(a0) > overflow) {  // fixed overflow condition
         throw new FractionConversionException(value, a0, 1l);
     }
     // check for (almost) integer arguments, which should not go to iterations.
@@ -25,7 +25,7 @@
         long a1 = (long) FastMath.floor(r1);
         p2 = (a1 * p1) + p0;
         q2 = (a1 * q1) + q0;
-        if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {
+        if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {  // fixed overflow condition
             // in maxDenominator mode, if the last fraction was very close to the actual value
             // q2 may overflow in the next iteration; in this case return the last one.
             throw new FractionConversionException(value, p2, q2);
