--- org/apache/commons/math/optimization/univariate/BrentOptimizer.java@doOptimize
+++ org/apache/commons/math/optimization/univariate/BrentOptimizer.java@doOptimize
@@ -1,3 +1,3 @@
 protected double doOptimize() throws MaxIterationsExceededException, FunctionEvaluationException {
-    throw new UnsupportedOperationException();
+    throw new MathUnsupportedOperationException();
 }
--- org/apache/commons/math/optimization/univariate/BrentOptimizer.java@localMin
+++ org/apache/commons/math/optimization/univariate/BrentOptimizer.java@localMin
@@ -5,128 +5,110 @@
     if (t <= 0) {
         throw new NotStrictlyPositiveException(t);
     }
-    double a, b;
-    if (lo < hi) {
-        a = lo;
-        b = hi;
-    } else {
-        a = hi;
-        b = lo;
-    }
-    double x = mid;
-    double v = x;
-    double w = x;
-    double d = 0;
-    double e = 0;
-    double fx = computeObjectiveValue(f, x);
+    final double golden = 0.5*(3.0 - Math.sqrt(5.0));
+    double a, b, d = 0.0, e = 0.0, etemp, fu, fv, fw, fx, p, q, r, tol1, tol2, u, v, w, x, xm;
+    x = mid;
+    a = (lo < hi ? lo : hi);
+    b = (lo > hi ? lo : hi);
+    e = 0.0;
+    v = x;
+    w = x;
+    fx = computeObjectiveValue(f, x);
     if (goalType == GoalType.MAXIMIZE) {
         fx = -fx;
     }
-    double fv = fx;
-    double fw = fx;
-    int count = 0;
-    while (count < maximalIterationCount) {
-        double m = 0.5 * (a + b);
-        final double tol1 = eps * Math.abs(x) + t;
-        final double tol2 = 2 * tol1;
-        // Check stopping criterion.
-        if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
-            double p = 0;
-            double q = 0;
-            double r = 0;
-            double u = 0;
-            if (Math.abs(e) > tol1) {
-                // Fit parabola.
-                r = (x - w) * (fx - fv);
-                q = (x - v) * (fx - fw);
-                p = (x - v) * q - (x - w) * r;
-                q = 2 * (q - r);
-                if (q > 0) {
-                    p = -p;
+    fv = fx;
+    fw = fx;
+    tol1 = eps*Math.abs(x) + t;
+    tol2 = 2.0*tol1;
+    while (true) {
+        xm = 0.5*(a + b);
+        tol1 = eps*Math.abs(x) + t;
+        tol2 = 2.0*tol1;
+        if (Math.abs(x - xm) <= (tol2 - 0.5*(b - a))) {
+            setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, getEvaluations());
+            return x;
+        }
+        if (Math.abs(e) > tol1) {
+            r = (x - w)*(fx - fv);
+            q = (x - v)*(fx - fw);
+            p = (x - v)*q - (x - w)*r;
+            q = 2.0*(q - r);
+            if (q > 0.0) {
+                p = -p;
+            }
+            q = Math.abs(q);
+            etemp = e;
+            e = d;
+            if ((Math.abs(p) >= Math.abs(0.5*q*etemp)) || (p <= q*(a - x)) || (p >= q*(b - x))) {
+                // Fall back to golden section step.
+                if (x >= xm) {
+                    e = a - x;
                 } else {
-                    q = -q;
+                    e = b - x;
                 }
-                r = e;
-                e = d;
-                if (p > q * (a - x) && p < q * (b - x) && Math.abs(p) < Math.abs(0.5 * q * r)) {
-                    // Parabolic interpolation step.
-                    d = p / q;
-                    u = x + d;
-                    // f must not be evaluated too close to a or b.
-                    if (u - a < tol2 || b - u < tol2) {
-                        if (x <= m) {
-                            d = tol1;
-                        } else {
-                            d = -tol1;
-                        }
+                d = golden*e;
+            } else {
+                d = p/q;
+                u = x + d;
+                if (((u - a) < tol2) || ((b - u) < tol2)) {
+                    if (x < xm) {
+                        d = tol1;
+                    } else {
+                        d = -tol1;
                     }
-                } else {
-                    // Golden section step.
-                    if (x < m) {
-                        e = b - x;
-                    } else {
-                        e = a - x;
-                    }
-                    d = GOLDEN_SECTION * e;
-                }
-            } else {
-                // Golden section step.
-                if (x < m) {
-                    e = b - x;
-                } else {
-                    e = a - x;
-                }
-                d = GOLDEN_SECTION * e;
-            }
-            // Update by at least "tol1".
-            if (Math.abs(d) < tol1) {
-                if (d >= 0) {
-                    u = x + tol1;
-                } else {
-                    u = x - tol1;
-                }
-            } else {
-                u = x + d;
-            }
-            double fu = computeObjectiveValue(f, u);
-            if (goalType == GoalType.MAXIMIZE) {
-                fu = -fu;
-            }
-            // Update a, b, v, w and x.
-            if (fu <= fx) {
-                if (u < x) {
-                    b = x;
-                } else {
-                    a = x;
-                }
-                v = w;
-                fv = fw;
-                w = x;
-                fw = fx;
-                x = u;
-                fx = fu;
-            } else {
-                if (u < x) {
-                    a = u;
-                } else {
-                    b = u;
-                }
-                if (fu <= fw || w == x) {
-                    v = w;
-                    fv = fw;
-                    w = u;
-                    fw = fu;
-                } else if (fu <= fv || v == x || v == w) {
-                    v = u;
-                    fv = fu;
                 }
             }
         } else {
-            // termination
-            setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);
-            return x;
+            // Golden section step.
+            if (x >= xm) {
+                e = a - x;
+            } else {
+                e = b - x;
+            }
+            d = golden*e;
         }
-        ++count;
+        if (Math.abs(d) >= tol1) {
+            u = x + d;
+        } else {
+            if (d > 0) {
+                u = x + tol1;
+            } else {
+                u = x - tol1;
+            }
+        }
+        fu = computeObjectiveValue(f, u);
+        if (goalType == GoalType.MAXIMIZE) {
+            fu = -fu;
+        }
+        etemp = (x >= xm ? a - x : b - x);
+        if (fu <= fx) {
+            if (x >= xm) {
+                a = x;
+            } else {
+                b = x;
+            }
+            v = w;
+            fv = fw;
+            w = x;
+            fw = fx;
+            x = u;
+            fx = fu;
+        } else {
+            if (x < xm) {
+                a = u;
+            } else {
+                b = u;
+            }
+            if ((fu <= fw) || (w == x)) {
+                v = w;
+                fv = fw;
+                w = u;
+                fw = fu;
+            } else if ((fu <= fv) || (v == x) || (v == w)) {
+                v = u;
+                fv = fu;
+            }
+        }
     }
-    throw new MaxIterationsExceededException(maximalIterationCount);
 }
