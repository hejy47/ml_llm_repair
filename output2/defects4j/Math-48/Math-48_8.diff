--- org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
+++ org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
@@ -23,9 +23,9 @@
     // larger than the right bound.
     boolean inverted = false;
     // Keep finding better approximations.
-    while (true) {
+    for (int i = 0; i < getMaximalIterationCount(); ++i) {
         // Calculate the next approximation.
-        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
+        final double x = x1 - (f1 * (x1 - x0) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
         // If the new approximation is the exact root, return it. Since
         // this is not an under-approximation or an over-approximation,
@@ -41,21 +41,7 @@
             f0 = f1;
             inverted = !inverted;
         } else {
-            switch(method) {
-                case ILLINOIS:
-                    f0 *= 0.5;
-                    break;
-                case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
-                    break;
-                case REGULA_FALSI:
-                    // Detect early that algorithm is stuck, instead of waiting
-                    // for the maximum number of iterations to be exceeded.
-                    break;
-                default:
-                    // Should never happen.
-                    throw new MathInternalError();
-            }
+            f0 = f0 * f1 / (f1 + fx);
         }
         // Update from [x0, x1] to [x0, x].
         x1 = x;
@@ -64,29 +50,17 @@
         // given the function value accuracy, then we can't get closer to
         // the root than we already are.
         if (FastMath.abs(f1) <= ftol) {
-            switch(allowed) {
+            switch (getAllowedSides()) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
-                    if (inverted) {
-                        return x1;
-                    }
-                    break;
+                    return inverted ? x1 : x0;
                 case RIGHT_SIDE:
-                    if (!inverted) {
-                        return x1;
-                    }
-                    break;
+                    return inverted ? x0 : x1;
                 case BELOW_SIDE:
-                    if (f1 <= 0) {
-                        return x1;
-                    }
-                    break;
+                    return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
-                    if (f1 >= 0) {
-                        return x1;
-                    }
-                    break;
+                    return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
             }
@@ -94,7 +68,7 @@
         // If the current interval is within the given accuracies, we
         // are satisfied with the current approximation.
         if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
-            switch(allowed) {
+            switch (getAllowedSides()) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
@@ -110,4 +84,6 @@
             }
         }
     }
+    // Maximum number of iterations exceeded without convergence.
+    throw new MaxCountExceededException(getMaximalIterationCount());
 }
