--- org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
+++ org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
@@ -22,8 +22,8 @@
     // Keep track of inverted intervals, meaning that the left bound is
     // larger than the right bound.
     boolean inverted = false;
-    // Keep finding better approximations.
-    while (true) {
+    // Keep finding better approximations with maximum of 100 iterations and error as limit
+    for(int i = 0; i < 100 && (FastMath.abs(x1 - x0) >= FastMath.max(rtol * FastMath.abs(x1), atol)); i++) {
         // Calculate the next approximation.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
@@ -51,6 +51,9 @@
                 case REGULA_FALSI:
                     // Detect early that algorithm is stuck, instead of waiting
                     // for the maximum number of iterations to be exceeded.
+                    if(FastMath.abs(f0-f1) < FastMath.ulp(f1) || FastMath.abs(fx-f1) < FastMath.ulp(f1)){
+                        throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED);
+                    }
                     break;
                 default:
                     // Should never happen.
@@ -91,23 +94,23 @@
                     throw new MathInternalError();
             }
         }
-        // If the current interval is within the given accuracies, we
-        // are satisfied with the current approximation.
-        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
-            switch(allowed) {
-                case ANY_SIDE:
-                    return x1;
-                case LEFT_SIDE:
-                    return inverted ? x1 : x0;
-                case RIGHT_SIDE:
-                    return inverted ? x0 : x1;
-                case BELOW_SIDE:
-                    return (f1 <= 0) ? x1 : x0;
-                case ABOVE_SIDE:
-                    return (f1 >= 0) ? x1 : x0;
-                default:
-                    throw new MathInternalError();
-            }
+        
+    }
+    
+    // If the current interval is within the given accuracies, we
+    // are satisfied with the current approximation.
+        switch(allowed) {
+            case ANY_SIDE:
+                return x1;
+            case LEFT_SIDE:
+                return inverted ? x1 : x0;
+            case RIGHT_SIDE:
+                return inverted ? x0 : x1;
+            case BELOW_SIDE:
+                return (f1 <= 0) ? x1 : x0;
+            case ABOVE_SIDE:
+                return (f1 >= 0) ? x1 : x0;
+            default:
+                throw new MathInternalError();
         }
-    }
 }
