--- org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
+++ org/apache/commons/math/analysis/solvers/BaseSecantSolver.java@doSolve
@@ -23,7 +23,8 @@
     // larger than the right bound.
     boolean inverted = false;
     // Keep finding better approximations.
-    while (true) {
+    int maxIterations = getMaximalIterationCount();
+    while (maxIterations-- > 0) {
         // Calculate the next approximation.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
@@ -46,11 +47,14 @@
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
-                    f0 *= f1 / (f1 + fx);
+                    f0 *= f1 / (f1 - fx);
                     break;
                 case REGULA_FALSI:
                     // Detect early that algorithm is stuck, instead of waiting
                     // for the maximum number of iterations to be exceeded.
+                    if (FastMath.abs(fx) > FastMath.abs(f1)) {
+                        f0 *= 0.5;
+                    }
                     break;
                 default:
                     // Should never happen.
@@ -110,4 +114,5 @@
             }
         }
     }
+    throw new MaxIterationsExceededException(maxIterations);
 }
