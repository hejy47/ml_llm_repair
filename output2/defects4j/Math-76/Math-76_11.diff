--- org/apache/commons/math/linear/SingularValueDecompositionImpl.java@getV
+++ org/apache/commons/math/linear/SingularValueDecompositionImpl.java@getV
@@ -3,8 +3,8 @@
         final int p = singularValues.length;
         if (m >= n) {
             // the tridiagonal matrix is Bt.B, where B is upper bidiagonal
-            final RealMatrix e = eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);
-            cachedV = transformer.getV().multiply(e);
+            final RealMatrix e = eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, n - 1);
+            cachedV = transformer.getV().multiply(e.transpose());
         } else {
             // the tridiagonal matrix is B.Bt, where B is lower bidiagonal
             // compute W = Bt.E.S^(-1) where E is the eigenvectors matrix
@@ -28,7 +28,7 @@
             for (int i = p; i < n; ++i) {
                 wData[i] = new double[p];
             }
-            cachedV = transformer.getV().multiply(MatrixUtils.createRealMatrix(wData));
+            cachedV = transformer.getV().multiply(MatrixUtils.createRealMatrix(wData)).transpose();
         }
     }
     // return the cached matrix
