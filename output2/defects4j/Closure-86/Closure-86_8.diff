--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
@@ -1,10 +1,7 @@
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch(value.getType()) {
         case Token.ASSIGN:
-            // A result that is aliased by a non-local name, is the effectively the
-            // same as returning a non-local name, but this doesn't matter if the
-            // value is immutable.
-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value.getLastChild()) && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
@@ -26,14 +23,14 @@
         case Token.GETELEM:
         case Token.GETPROP:
             // There is no information about the locality of object properties.
-            return locals.apply(value);
+            return false;
         case Token.CALL:
             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
         case Token.NEW:
             // TODO(nicksantos): This needs to be changed so that it
             // returns true iff we're sure the value was never aliased from inside
             // the constructor (similar to callHasLocalResult)
-            return true;
+            return false;
         case Token.FUNCTION:
         case Token.REGEXP:
         case Token.ARRAYLIT:
