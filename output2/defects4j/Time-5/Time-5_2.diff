--- org/joda/time/Period.java@normalizedStandard
+++ org/joda/time/Period.java@normalizedStandard
@@ -2,24 +2,12 @@
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
     // no overflow can happen, even with Integer.MAX_VALUEs
-    long millis = getMillis();
-    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+    long millis = (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-    int years = getYears();
-    int months = getMonths();
-    if (years != 0 || months != 0) {
-        years = FieldUtils.safeAdd(years, months / 12);
-        months = months % 12;
-        if (years != 0) {
-            result = result.withYears(years);
-        }
-        if (months != 0) {
-            result = result.withMonths(months);
-        }
-    }
+    Period result = new Period(getYears(), getMonths(), getWeeks(), getDays(), getHours(), getMinutes(), getSeconds(), millis, type);
+    result = result.normalizedStandard(type); // added this line to ensure standard normalization
     return result;
 }
