--- org/apache/commons/lang3/math/NumberUtils.java@isNumber
+++ org/apache/commons/lang3/math/NumberUtils.java@isNumber
@@ -26,23 +26,23 @@
             return true;
         }
     }
-    // don't want to loop to the last char, check it afterwords
+    // don't want to loop to the last char, check it afterwards
     sz--;
-    // for type qualifiers
+    // loop to the next to the last char or to the last char if we need another digit to
+    // make a valid number (e.g. chars[0..5] = "1234E")
     int i = start;
-    // loop to the next to last char or to the last char if we need another digit to
-    // make a valid number (e.g. chars[0..5] = "1234E")
     while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
-        if (chars[i] >= '0' && chars[i] <= '9') {
+        char c = chars[i];
+        if (c >= '0' && c <= '9') {
             foundDigit = true;
             allowSigns = false;
-        } else if (chars[i] == '.') {
+        } else if (c == '.') {
             if (hasDecPoint || hasExp) {
                 // two decimal points or dec in exponent
                 return false;
             }
             hasDecPoint = true;
-        } else if (chars[i] == 'e' || chars[i] == 'E') {
+        } else if (c == 'e' || c == 'E') {
             // we've already taken care of hex.
             if (hasExp) {
                 // two E's
@@ -53,7 +53,7 @@
             }
             hasExp = true;
             allowSigns = true;
-        } else if (chars[i] == '+' || chars[i] == '-') {
+        } else if (c == '+' || c == '-') {
             if (!allowSigns) {
                 return false;
             }
@@ -65,34 +65,30 @@
         }
         i++;
     }
-    if (i < chars.length) {
-        if (chars[i] >= '0' && chars[i] <= '9') {
-            // no type qualifier, OK
-            return true;
-        }
-        if (chars[i] == 'e' || chars[i] == 'E') {
-            // can't have an E at the last byte
+    char c = chars[i];
+    if (c >= '0' && c <= '9') {
+        // no type qualifier, OK
+        return true;
+    }
+    if (c == 'e' || c == 'E') {
+        // can't have an E at the last byte
+        return false;
+    }
+    if (c == '.') {
+        if (hasDecPoint || hasExp) {
+            // two decimal points or dec in exponent
             return false;
         }
-        if (chars[i] == '.') {
-            if (hasDecPoint || hasExp) {
-                // two decimal points or dec in exponent
-                return false;
-            }
-            // single trailing decimal point after non-exponent is ok
-            return foundDigit;
-        }
-        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
-            return foundDigit;
-        }
-        if (chars[i] == 'l' || chars[i] == 'L') {
-            // not allowing L with an exponent or decimal point
-            return foundDigit && !hasExp;
-        }
-        // last character is illegal
-        return false;
+        // single trailing decimal point after non-exponent is ok
+        return foundDigit;
     }
-    // allowSigns is true iff the val ends in 'E'
-    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
-    return !allowSigns && foundDigit;
+    if (!allowSigns && (c == 'd' || c == 'D' || c == 'f' || c == 'F')) {
+        return foundDigit;
+    }
+    if (c == 'l' || c == 'L') {
+        // not allowing L with an exponent or decimal point
+        return foundDigit && !hasExp && !hasDecPoint;
+    }
+    // last character is illegal
+    return false;
 }
