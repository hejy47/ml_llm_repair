--- com/google/javascript/jscomp/TypedScopeCreator.java@defineSlot
+++ com/google/javascript/jscomp/TypedScopeCreator.java@defineSlot
@@ -3,13 +3,13 @@
     // Only allow declarations of NAMEs and qualfied names.
     boolean shouldDeclareOnGlobalThis = false;
     if (n.getType() == Token.NAME) {
-        Preconditions.checkArgument(parent.getType() == Token.FUNCTION || parent.getType() == Token.VAR || parent.getType() == Token.LP || parent.getType() == Token.CATCH);
+        Preconditions.checkArgument(parent.getType() == Token.FUNCTION || parent.getType() == Token.VAR || parent.getType() == Token.LET || parent.getType() == Token.CONST || parent.getType() == Token.CATCH);
         shouldDeclareOnGlobalThis = scope.isGlobal() && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);
     } else {
         Preconditions.checkArgument(n.getType() == Token.GETPROP && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));
     }
     String variableName = n.getQualifiedName();
-    Preconditions.checkArgument(!variableName.isEmpty());
+    Preconditions.checkArgument(variableName != null && !variableName.isEmpty());
     // If n is a property, then we should really declare it in the
     // scope where the root object appears. This helps out people
     // who declare "global" names in an anonymous namespace.
@@ -18,7 +18,7 @@
     // already a symbol there with this name.
     // declared in closest scope?
     if (scopeToDeclareIn.isDeclared(variableName, false)) {
-        Var oldVar = scopeToDeclareIn.getVar(variableName);
+        Var oldVar = scope.getVar(variableName);
         validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);
     } else {
         if (!inferred) {
@@ -29,11 +29,17 @@
         if (shouldDeclareOnGlobalThis) {
             ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
             boolean isExtern = input.isExtern();
-            if (inferred) {
-                globalThis.defineInferredProperty(variableName, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);
-            } else {
-                globalThis.defineDeclaredProperty(variableName, type, isExtern);
+            boolean isDeclared = !inferred;
+            if (!isDeclared) {
+                isDeclared = typeRegistry.getExpressionType(n) != null;
             }
+            Property prop =
+                ObjectType.getPropertyWithGlobalFallback(
+                    globalThis, variableName, isDeclared, isExtern);
+            JSType propType =
+                inferred ? (type == null ? getNativeType(JSTypeNative.NO_TYPE) : type) : typeRegistry.getExpressionType(n);
+            propType = ObjectType.mayExcludeReceiver(propType);
+            ObjectType.setProperty(prop, propType, input, inferred);
         }
         // If we're in the global scope, also declare var.prototype
         // in the scope chain.
@@ -41,7 +47,8 @@
             FunctionType fnType = (FunctionType) type;
             if (fnType.isConstructor() || fnType.isInterface()) {
                 FunctionType superClassCtor = fnType.getSuperClassConstructor();
-                scopeToDeclareIn.declare(variableName + ".prototype", n, fnType.getPrototype(), compiler.getInput(sourceName),                 superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));
+                scopeToDeclareIn.declare(variableName + ".prototype", n, fnType.getPrototype(), compiler.getInput(sourceName), /* declared iff there's an explicit supertype */
+                superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));
             }
         }
     }
