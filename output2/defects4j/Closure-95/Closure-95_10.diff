--- com/google/javascript/jscomp/TypedScopeCreator.java@defineSlot
+++ com/google/javascript/jscomp/TypedScopeCreator.java@defineSlot
@@ -2,18 +2,19 @@
     Preconditions.checkArgument(inferred || type != null);
     // Only allow declarations of NAMEs and qualfied names.
     boolean shouldDeclareOnGlobalThis = false;
+    int parentType = parent.getType();
     if (n.getType() == Token.NAME) {
-        Preconditions.checkArgument(parent.getType() == Token.FUNCTION || parent.getType() == Token.VAR || parent.getType() == Token.LP || parent.getType() == Token.CATCH);
-        shouldDeclareOnGlobalThis = scope.isGlobal() && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);
+        Preconditions.checkArgument(parentType == Token.FUNCTION || parentType == Token.VAR || parentType == Token.LET || parentType == Token.CONST || parentType == Token.CATCH);
+        shouldDeclareOnGlobalThis = scope.isGlobal() && (parentType == Token.VAR || parentType == Token.FUNCTION);
     } else {
-        Preconditions.checkArgument(n.getType() == Token.GETPROP && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT));
+        Preconditions.checkArgument(n.getType() == Token.GETPROP && (parentType == Token.ASSIGN || parentType == Token.EXPR_RESULT));
     }
     String variableName = n.getQualifiedName();
-    Preconditions.checkArgument(!variableName.isEmpty());
+    Preconditions.checkArgument(variableName != null && !variableName.isEmpty());
     // If n is a property, then we should really declare it in the
     // scope where the root object appears. This helps out people
     // who declare "global" names in an anonymous namespace.
-    Scope scopeToDeclareIn = scope;
+    Scope scopeToDeclareIn = scope.getClosestHoistScope();
     // don't try to declare in the global scope if there's
     // already a symbol there with this name.
     // declared in closest scope?
@@ -37,11 +38,14 @@
         }
         // If we're in the global scope, also declare var.prototype
         // in the scope chain.
-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
+        if (scope.isGlobal() && type instanceof FunctionType) {
             FunctionType fnType = (FunctionType) type;
             if (fnType.isConstructor() || fnType.isInterface()) {
                 FunctionType superClassCtor = fnType.getSuperClassConstructor();
-                scopeToDeclareIn.declare(variableName + ".prototype", n, fnType.getPrototype(), compiler.getInput(sourceName),                 superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));
+                ObjectType instanceType = fnType.getInstanceType();
+                boolean isImplicitProtoAlias = n.matchesQualifiedName("prototype") && !inferred;
+                scopeToDeclareIn.declare(variableName + ".prototype", n, instanceType.getPrototype(), compiler.getInput(sourceName), /* declared iff there's an explicit supertype */
+                superClassCtor == null || instanceType.equals(getNativeType(OBJECT_TYPE)) || isImplicitProtoAlias);
             }
         }
     }
