--- com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java@tryMinimizeIf
+++ com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java@tryMinimizeIf
@@ -1,7 +1,7 @@
 private Node tryMinimizeIf(Node n) {
     Node parent = n.getParent();
     Node cond = n.getFirstChild();
-        if (NodeUtil.isLiteralValue(cond, true)) {
+    if (NodeUtil.isLiteralValue(cond, true)) {
         return n;
     }
     Node thenBranch = cond.getNext();
@@ -32,8 +32,13 @@
                 // One additional set of parentheses is worth the change even if
                 // there is no immediate code size win. However, two extra pair of
                 // {}, we would have to think twice. (unless we know for sure the
-                // we can further optimize its parent.
-                return n;
+                // we can further optimize its parent).
+                n.removeChild(cond);
+                Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
+                Node newExpr = NodeUtil.newExpr(and);
+                parent.replaceChild(n, newExpr);
+                reportCodeChange();
+                return newExpr;
             }
             n.removeChild(cond);
             Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
@@ -60,10 +65,10 @@
                     }
                 }
             }
+            return n;
         }
-        return n;
     }
-        tryRemoveRepeatedStatements(n);
+    tryRemoveRepeatedStatements(n);
     // if(!x)foo();else bar(); -> if(x)bar();else foo();
     // An additional set of curly braces isn't worth it.
     if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
@@ -105,8 +110,7 @@
                     n.removeChild(cond);
                     Node assignName = thenOp.removeFirstChild();
                     Node thenExpr = thenOp.removeFirstChild();
-                    Node elseExpr = elseOp.getLastChild();
-                    elseOp.removeChild(elseExpr);
+                    Node elseExpr = elseOp.getLastChild().detachFromParent();
                     Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
                     Node assign = new Node(thenOp.getType(), assignName, hookNode).srcref(thenOp);
                     Node expr = NodeUtil.newExpr(assign);
@@ -118,9 +122,10 @@
         }
         // if(x)foo();else bar(); -> x?foo():bar()
         n.removeChild(cond);
-        thenOp.detachFromParent();
-        elseOp.detachFromParent();
-        Node expr = IR.exprResult(IR.hook(cond, thenOp, elseOp).srcref(n));
+        Node thenExp = getBlockExpression(thenBranch).removeFirstChild();
+        Node elseExp = getBlockExpression(elseBranch).removeFirstChild();
+        Node ternary = IR.hook(cond, thenExp, elseExp).srcref(n);
+        Node expr = NodeUtil.newExpr(ternary);
         parent.replaceChild(n, expr);
         reportCodeChange();
         return expr;
@@ -137,14 +142,14 @@
             Node thenExpr = name1.removeChildren();
             Node elseExpr = elseAssign.getLastChild().detachFromParent();
             cond.detachFromParent();
-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+            Node ternary = IR.hook(cond, thenExpr, elseExpr).srcref(n);
             var.detachFromParent();
-            name1.addChildrenToBack(hookNode);
+            name1.addChildrenToBack(ternary);
             parent.replaceChild(n, var);
             reportCodeChange();
             return var;
         }
-        // if(x)y=1;else var y=2  ->  var y=x?1:2
+    // if(x)y=1;else var y=2  ->  var y=x?1:2
     } else if (elseBranchIsVar && thenBranchIsExpressionBlock && getBlockExpression(thenBranch).getFirstChild().isAssign()) {
         Node var = getBlockVar(elseBranch);
         Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
@@ -154,9 +159,9 @@
             Node thenExpr = thenAssign.getLastChild().detachFromParent();
             Node elseExpr = name2.removeChildren();
             cond.detachFromParent();
-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+            Node ternary = IR.hook(cond, thenExpr, elseExpr).srcref(n);
             var.detachFromParent();
-            name2.addChildrenToBack(hookNode);
+            name2.addChildrenToBack(ternary);
             parent.replaceChild(n, var);
             reportCodeChange();
             return var;
