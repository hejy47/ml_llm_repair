--- com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java@tryMinimizeIf
+++ com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java@tryMinimizeIf
@@ -1,11 +1,12 @@
 private Node tryMinimizeIf(Node n) {
     Node parent = n.getParent();
     Node cond = n.getFirstChild();
-        if (NodeUtil.isLiteralValue(cond, true)) {
+    if (NodeUtil.isLiteralValue(cond, true)) {
         return n;
     }
     Node thenBranch = cond.getNext();
     Node elseBranch = thenBranch.getNext();
+
     if (elseBranch == null) {
         if (isFoldableExpressBlock(thenBranch)) {
             Node expr = getBlockExpression(thenBranch);
@@ -60,10 +61,13 @@
                     }
                 }
             }
+            return n;
         }
-        return n;
     }
-        tryRemoveRepeatedStatements(n);
+
+    // Check if there are any repeated statements in the then or else branches
+    tryRemoveRepeatedStatements(n);
+
     // if(!x)foo();else bar(); -> if(x)bar();else foo();
     // An additional set of curly braces isn't worth it.
     if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
@@ -77,13 +81,8 @@
     if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
         Node thenExpr = getBlockReturnExpression(thenBranch);
         Node elseExpr = getBlockReturnExpression(elseBranch);
-        n.removeChild(cond);
-        thenExpr.detachFromParent();
-        elseExpr.detachFromParent();
-        // note - we ignore any cases with "return;", technically this
-        // can be converted to "return undefined;" or some variant, but
-        // that does not help code size.
-        Node returnNode = IR.returnNode(IR.hook(cond, thenExpr, elseExpr).srcref(n));
+        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+        Node returnNode = IR.returnNode(hookNode).srcref(n);
         parent.replaceChild(n, returnNode);
         reportCodeChange();
         return returnNode;
@@ -97,16 +96,10 @@
             // if(x)a=1;else a=2; -> a=x?1:2;
             if (NodeUtil.isAssignmentOp(thenOp)) {
                 Node lhs = thenOp.getFirstChild();
-                if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) && // if LHS has side effects, don't proceed [since the optimization
-                // evaluates LHS before cond]
-                // NOTE - there are some circumstances where we can
-                // proceed even if there are side effects...
-                !mayEffectMutableState(lhs)) {
-                    n.removeChild(cond);
+                if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {
                     Node assignName = thenOp.removeFirstChild();
                     Node thenExpr = thenOp.removeFirstChild();
-                    Node elseExpr = elseOp.getLastChild();
-                    elseOp.removeChild(elseExpr);
+                    Node elseExpr = elseOp.getLastChild().detachFromParent();
                     Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
                     Node assign = new Node(thenOp.getType(), assignName, hookNode).srcref(thenOp);
                     Node expr = NodeUtil.newExpr(assign);
@@ -117,10 +110,10 @@
             }
         }
         // if(x)foo();else bar(); -> x?foo():bar()
-        n.removeChild(cond);
-        thenOp.detachFromParent();
-        elseOp.detachFromParent();
-        Node expr = IR.exprResult(IR.hook(cond, thenOp, elseOp).srcref(n));
+        Node thenExpr = getBlockExpression(thenBranch).removeFirstChild();
+        Node elseExpr = getBlockExpression(elseBranch).removeFirstChild();
+        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+        Node expr = NodeUtil.newExpr(hookNode);
         parent.replaceChild(n, expr);
         reportCodeChange();
         return expr;
@@ -136,7 +129,6 @@
         if (name1.hasChildren() && maybeName2.isName() && name1.getString().equals(maybeName2.getString())) {
             Node thenExpr = name1.removeChildren();
             Node elseExpr = elseAssign.getLastChild().detachFromParent();
-            cond.detachFromParent();
             Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
             var.detachFromParent();
             name1.addChildrenToBack(hookNode);
@@ -153,7 +145,6 @@
         if (name2.hasChildren() && maybeName1.isName() && maybeName1.getString().equals(name2.getString())) {
             Node thenExpr = thenAssign.getLastChild().detachFromParent();
             Node elseExpr = name2.removeChildren();
-            cond.detachFromParent();
             Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
             var.detachFromParent();
             name2.addChildrenToBack(hookNode);
