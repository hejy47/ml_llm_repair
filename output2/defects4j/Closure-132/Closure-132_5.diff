--- com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java@tryMinimizeIf
+++ com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java@tryMinimizeIf
@@ -1,7 +1,7 @@
 private Node tryMinimizeIf(Node n) {
     Node parent = n.getParent();
     Node cond = n.getFirstChild();
-        if (NodeUtil.isLiteralValue(cond, true)) {
+    if (NodeUtil.isLiteralValue(cond, true)) {
         return n;
     }
     Node thenBranch = cond.getNext();
@@ -10,15 +10,10 @@
         if (isFoldableExpressBlock(thenBranch)) {
             Node expr = getBlockExpression(thenBranch);
             if (!late && isPropertyAssignmentInExpression(expr)) {
-                // Keep opportunities for CollapseProperties such as
-                // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
-                // until CollapseProperties has been run.
                 return n;
             }
             if (cond.isNot()) {
-                // if(!x)bar(); -> x||bar();
                 if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) && isLowerPrecedenceInExpression(expr.getFirstChild(), OR_PRECEDENCE)) {
-                    // It's not okay to add two sets of parentheses.
                     return n;
                 }
                 Node or = IR.or(cond.removeFirstChild(), expr.removeFirstChild()).srcref(n);
@@ -27,12 +22,7 @@
                 reportCodeChange();
                 return newExpr;
             }
-            // if(x)foo(); -> x&&foo();
             if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) && isLowerPrecedenceInExpression(expr.getFirstChild(), AND_PRECEDENCE)) {
-                // One additional set of parentheses is worth the change even if
-                // there is no immediate code size win. However, two extra pair of
-                // {}, we would have to think twice. (unless we know for sure the
-                // we can further optimize its parent.
                 return n;
             }
             n.removeChild(cond);
@@ -42,7 +32,6 @@
             reportCodeChange();
             return newExpr;
         } else {
-            // Try to combine two IF-ELSE
             if (NodeUtil.isStatementBlock(thenBranch) && thenBranch.hasOneChild()) {
                 Node innerIf = thenBranch.getFirstChild();
                 if (innerIf.isIf()) {
@@ -54,8 +43,6 @@
                         n.addChildToBack(IR.and(cond, innerCond.detachFromParent()).srcref(cond));
                         n.addChildrenToBack(innerThenBranch.detachFromParent());
                         reportCodeChange();
-                        // Not worth trying to fold the current IF-ELSE into && because
-                        // the inner IF-ELSE wasn't able to be folded into && anyways.
                         return n;
                     }
                 }
@@ -63,9 +50,7 @@
         }
         return n;
     }
-        tryRemoveRepeatedStatements(n);
-    // if(!x)foo();else bar(); -> if(x)bar();else foo();
-    // An additional set of curly braces isn't worth it.
+    tryRemoveRepeatedStatements(n);
     if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
         n.replaceChild(cond, cond.removeFirstChild());
         n.removeChild(thenBranch);
@@ -73,17 +58,14 @@
         reportCodeChange();
         return n;
     }
-    // if(x)return 1;else return 2; -> return x?1:2;
     if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
         Node thenExpr = getBlockReturnExpression(thenBranch);
         Node elseExpr = getBlockReturnExpression(elseBranch);
         n.removeChild(cond);
         thenExpr.detachFromParent();
         elseExpr.detachFromParent();
-        // note - we ignore any cases with "return;", technically this
-        // can be converted to "return undefined;" or some variant, but
-        // that does not help code size.
-        Node returnNode = IR.returnNode(IR.hook(cond, thenExpr, elseExpr).srcref(n));
+        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
+        Node returnNode = IR.returnNode(hookNode);
         parent.replaceChild(n, returnNode);
         reportCodeChange();
         return returnNode;
@@ -94,19 +76,13 @@
         Node thenOp = getBlockExpression(thenBranch).getFirstChild();
         Node elseOp = getBlockExpression(elseBranch).getFirstChild();
         if (thenOp.getType() == elseOp.getType()) {
-            // if(x)a=1;else a=2; -> a=x?1:2;
             if (NodeUtil.isAssignmentOp(thenOp)) {
                 Node lhs = thenOp.getFirstChild();
-                if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) && // if LHS has side effects, don't proceed [since the optimization
-                // evaluates LHS before cond]
-                // NOTE - there are some circumstances where we can
-                // proceed even if there are side effects...
-                !mayEffectMutableState(lhs)) {
+                if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) && !mayEffectMutableState(lhs)) {
                     n.removeChild(cond);
                     Node assignName = thenOp.removeFirstChild();
                     Node thenExpr = thenOp.removeFirstChild();
-                    Node elseExpr = elseOp.getLastChild();
-                    elseOp.removeChild(elseExpr);
+                    Node elseExpr = elseOp.getLastChild().detachFromParent();
                     Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
                     Node assign = new Node(thenOp.getType(), assignName, hookNode).srcref(thenOp);
                     Node expr = NodeUtil.newExpr(assign);
@@ -116,18 +92,21 @@
                 }
             }
         }
-        // if(x)foo();else bar(); -> x?foo():bar()
-        n.removeChild(cond);
-        thenOp.detachFromParent();
-        elseOp.detachFromParent();
-        Node expr = IR.exprResult(IR.hook(cond, thenOp, elseOp).srcref(n));
-        parent.replaceChild(n, expr);
-        reportCodeChange();
-        return expr;
+        Node thenOpParent = thenOp.getParent();
+        Node elseOpParent = elseOp.getParent();
+        if (thenOpParent.isExprResult() && elseOpParent.isExprResult()) {
+            n.removeChild(cond);
+            thenOp.detachFromParent();
+            elseOp.detachFromParent();
+            Node hookNode = IR.hook(cond, thenOp, elseOp).srcref(n);
+            Node expr = IR.exprResult(hookNode);
+            parent.replaceChild(n, expr);
+            reportCodeChange();
+            return expr;
+        }
     }
     boolean thenBranchIsVar = isVarBlock(thenBranch);
     boolean elseBranchIsVar = isVarBlock(elseBranch);
-    // if(x)var y=1;else y=2  ->  var y=x?1:2
     if (thenBranchIsVar && elseBranchIsExpressionBlock && getBlockExpression(elseBranch).getFirstChild().isAssign()) {
         Node var = getBlockVar(thenBranch);
         Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
@@ -144,7 +123,6 @@
             reportCodeChange();
             return var;
         }
-        // if(x)y=1;else var y=2  ->  var y=x?1:2
     } else if (elseBranchIsVar && thenBranchIsExpressionBlock && getBlockExpression(thenBranch).getFirstChild().isAssign()) {
         Node var = getBlockVar(elseBranch);
         Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
