--- org/apache/commons/math/dfp/Dfp.java@Dfp
+++ org/apache/commons/math/dfp/Dfp.java@Dfp
@@ -24,7 +24,7 @@
     }
     if (exponent == 1024) {
         // infinity or NAN
-        if (x != x) {
+        if (Double.isNaN(x)) {
             sign = (byte) 1;
             nans = QNAN;
         } else if (x < 0) {
--- org/apache/commons/math/dfp/Dfp.java@toDouble
+++ org/apache/commons/math/dfp/Dfp.java@toDouble
@@ -1,10 +1,6 @@
 public double toDouble() {
     if (isInfinite()) {
-        if (lessThan(getZero())) {
-            return Double.NEGATIVE_INFINITY;
-        } else {
-            return Double.POSITIVE_INFINITY;
-        }
+        return sign < 0 ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
     }
     if (isNaN()) {
         return Double.NaN;
@@ -15,7 +11,7 @@
         y = negate();
         negate = true;
     }
-        int exponent = (int) (y.log10() * 3.32);
+    int exponent = (int) (y.log10() * 3.321928094887362);
     if (exponent < 0) {
         exponent--;
     }
@@ -25,7 +21,7 @@
         exponent++;
     }
     exponent--;
-        y = y.divide(DfpMath.pow(getTwo(), exponent));
+    y = y.divide(DfpMath.pow(getTwo(), exponent));
     if (exponent > -1023) {
         y = y.subtract(getOne());
     }
@@ -36,7 +32,7 @@
         return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
     }
     y = y.multiply(newInstance(4503599627370496l)).rint();
-    String str = y.toString();
+    String str = y.toStandardString();
     str = str.substring(0, str.length() - 1);
     long mantissa = Long.parseLong(str);
     if (mantissa == 4503599627370496L) {
@@ -44,7 +40,7 @@
         mantissa = 0;
         exponent++;
     }
-        if (exponent <= -1023) {
+    if (exponent <= -1023) {
         exponent--;
     }
     while (exponent < -1023) {
