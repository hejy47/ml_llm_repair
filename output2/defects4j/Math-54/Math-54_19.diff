--- org/apache/commons/math/dfp/Dfp.java@toDouble
+++ org/apache/commons/math/dfp/Dfp.java@toDouble
@@ -15,46 +15,18 @@
         y = negate();
         negate = true;
     }
-        int exponent = (int) (y.log10() * 3.32);
-    if (exponent < 0) {
-        exponent--;
+    int exponent = y.floor().toInt();
+    y = y.subtract(y.floor());
+    int shift = 52 - exponent;
+    if (shift > 0) {
+        y = y.multiply(DfpMath.pow(2, shift));
+    } else {
+        y = y.divide(DfpMath.pow(2, -shift));
     }
-    Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
-    while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
-        tempDfp = tempDfp.multiply(2);
-        exponent++;
+    long bits = Double.doubleToRawLongBits(y.toDouble());
+    bits |= (long) (exponent + 1023) << 52;
+    if (negate) {
+        bits |= 1L << 63;
     }
-    exponent--;
-        y = y.divide(DfpMath.pow(getTwo(), exponent));
-    if (exponent > -1023) {
-        y = y.subtract(getOne());
-    }
-    if (exponent < -1074) {
-        return 0;
-    }
-    if (exponent > 1023) {
-        return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
-    }
-    y = y.multiply(newInstance(4503599627370496l)).rint();
-    String str = y.toString();
-    str = str.substring(0, str.length() - 1);
-    long mantissa = Long.parseLong(str);
-    if (mantissa == 4503599627370496L) {
-        // Handle special case where we round up to next power of two
-        mantissa = 0;
-        exponent++;
-    }
-        if (exponent <= -1023) {
-        exponent--;
-    }
-    while (exponent < -1023) {
-        exponent++;
-        mantissa >>>= 1;
-    }
-    long bits = mantissa | ((exponent + 1023L) << 52);
-    double x = Double.longBitsToDouble(bits);
-    if (negate) {
-        x = -x;
-    }
-    return x;
+    return Double.longBitsToDouble(bits);
 }
