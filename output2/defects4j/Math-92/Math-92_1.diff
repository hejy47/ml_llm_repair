--- org/apache/commons/math/util/MathUtils.java@binomialCoefficient
+++ org/apache/commons/math/util/MathUtils.java@binomialCoefficient
@@ -10,10 +10,6 @@
     }
     if ((k == 1) || (k == n - 1)) {
         return n;
-    }
-    long result = Math.round(binomialCoefficientDouble(n, k));
-    if (result == Long.MAX_VALUE) {
-        throw new ArithmeticException("result too large to represent in a long integer");
     }
     // Use symmetry for large k
     // We use the formula
@@ -33,5 +29,20 @@
     // For n > 66, a result overflow might occur, so we check
     // the multiplication, taking care to not overflow
     // unnecessary.
+    long result = 1;
+    if (k > n - k) {
+        for (int i = n - k + 1; i <= n; i++) {
+            result *= i;
+            result /= (i - n + k);
+        }
+    } else {
+        for (int i = k + 1; i <= n; i++) {
+            result *= i;
+            result /= (i - k);
+        }
+    }
+    if (result == Long.MAX_VALUE) {
+        throw new ArithmeticException("result too large to represent in a long integer");
+    }
     return result;
 }
--- org/apache/commons/math/util/MathUtils.java@binomialCoefficientDouble
+++ org/apache/commons/math/util/MathUtils.java@binomialCoefficientDouble
@@ -1,3 +1,27 @@
 public static double binomialCoefficientDouble(final int n, final int k) {
-    return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
+    if (n < k) {
+        throw new IllegalArgumentException("must have n >= k for binomial coefficient (n,k)");
+    }
+    if (n < 0) {
+        throw new IllegalArgumentException("must have n >= 0 for binomial coefficient (n,k)");
+    }
+    if ((n == k) || (k == 0)) {
+        return 1.0;
+    }
+    if ((k == 1) || (k == n - 1)) {
+        return (double) n;
+    }
+    double result = 1.0;
+    if (k > n - k) {
+        for (int i = n - k + 1; i <= n; i++) {
+            result *= i;
+            result /= (i - n + k);
+        }
+    } else {
+        for (int i = k + 1; i <= n; i++) {
+            result *= i;
+            result /= (i - k);
+        }
+    }
+    return result;
 }
--- org/apache/commons/math/util/MathUtils.java@binomialCoefficientLog
+++ org/apache/commons/math/util/MathUtils.java@binomialCoefficientLog
@@ -11,14 +11,17 @@
     if ((k == 1) || (k == n - 1)) {
         return Math.log((double) n);
     }
-                double logSum = 0;
-    // n!/k!
-    for (int i = k + 1; i <= n; i++) {
-        logSum += Math.log((double) i);
-    }
-    // divide by (n-k)!
-    for (int i = 2; i <= n - k; i++) {
-        logSum -= Math.log((double) i);
+    double logSum = 0;
+    if (k > n - k) {
+        for (int i = n - k + 1; i <= n; i++) {
+            logSum += Math.log((double) i);
+            logSum -= Math.log((double) i - n + k);
+        }
+    } else {
+        for (int i = k + 1; i <= n; i++) {
+            logSum += Math.log((double) i);
+            logSum -= Math.log((double) i - k);
+        }
     }
     return logSum;
 }
