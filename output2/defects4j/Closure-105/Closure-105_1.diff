--- com/google/javascript/jscomp/FoldConstants.java@tryFoldStringJoin
+++ com/google/javascript/jscomp/FoldConstants.java@tryFoldStringJoin
@@ -8,7 +8,7 @@
         return;
     }
     String joinString = NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
+    List<Node> arrayFoldedChildren = new ArrayList<Node>();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
@@ -53,7 +53,7 @@
             if (foldedStringNode.getType() != Token.STRING) {
                 // If the Node is not a string literal, ensure that
                 // it is coerced to a string.
-                Node replacement = new Node(Token.ADD, Node.newString(""), foldedStringNode);
+                Node replacement = NodeUtil.newStringNode(foldedStringNode.getString());
                 foldedStringNode = replacement;
             }
             parent.replaceChild(n, foldedStringNode);
@@ -63,7 +63,7 @@
             if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
                 return;
             }
-            int kJoinOverhead = "[].join()".length();
+            int kJoinOverhead = "[]".concat(".join()").length();
             foldedSize += kJoinOverhead;
             foldedSize += InlineCostEstimator.getCost(right);
             if (foldedSize > originalSize) {
@@ -73,6 +73,7 @@
             for (Node node : arrayFoldedChildren) {
                 arrayNode.addChildToBack(node);
             }
+            parent.replaceChild(right, Node.newString(joinString));
             break;
     }
     t.getCompiler().reportCodeChange();
