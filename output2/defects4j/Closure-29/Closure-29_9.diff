--- com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
+++ com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
@@ -1,16 +1,16 @@
 private boolean isInlinableObject(List<Reference> refs) {
-    boolean ret = false;
     for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
-        //
-        if (parent.isGetProp()) {
+        
+        // Checking that parent node is not null before checking the node type
+        if (parent != null && parent.isGetProp()) {
             Preconditions.checkState(parent.getFirstChild() == name);
-            // A call target maybe using the object as a 'this' value.
-            if (gramps.isCall() && gramps.getFirstChild() == parent) {
+            // A call target may be using the object as a 'this' value.
+            if (gramps != null && gramps.isCall() && gramps.getFirstChild() == parent) {
                 return false;
             }
             // NOTE(nicksantos): This pass's object-splitting algorithm has
@@ -25,7 +25,7 @@
         }
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
-            return false;
+            continue;
         }
         Node val = ref.getAssignedValue();
         if (val == null) {
@@ -34,7 +34,7 @@
         }
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
-            return false;
+            continue;
         }
         // Make sure that the value is not self-refential. IOW,
         // disallow things like x = {b: x.a}.
@@ -55,7 +55,7 @@
             // will happen.
             for (Reference t : refs) {
                 Node refNode = t.getParent();
-                while (!NodeUtil.isStatementBlock(refNode)) {
+                while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {
                     if (refNode == childVal) {
                         // There's a self-referential assignment
                         return false;
@@ -67,7 +67,7 @@
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
-        ret = true;
+        return true;
     }
-    return ret;
+    return false;
 }
