--- com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
+++ com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
@@ -1,16 +1,15 @@
 private boolean isInlinableObject(List<Reference> refs) {
-    boolean ret = false;
     for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
-        Node gramps = ref.getGrandparent();
+        Node grandparent = ref.getGrandparent();
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
             Preconditions.checkState(parent.getFirstChild() == name);
             // A call target maybe using the object as a 'this' value.
-            if (gramps.isCall() && gramps.getFirstChild() == parent) {
+            if (grandparent.isCall() && grandparent.getFirstChild() == parent) {
                 return false;
             }
             // NOTE(nicksantos): This pass's object-splitting algorithm has
@@ -53,21 +52,17 @@
             // Check if childVal is the parent of any of the passed in
             // references, as that is how self-referential assignments
             // will happen.
-            for (Reference t : refs) {
-                Node refNode = t.getParent();
-                while (!NodeUtil.isStatementBlock(refNode)) {
-                    if (refNode == childVal) {
+            for (Reference innerRef : refs) {
+                Node innerRefNode = innerRef.getParent();
+                while (!NodeUtil.isStatementBlock(innerRefNode)) {
+                    if (innerRefNode == childVal) {
                         // There's a self-referential assignment
                         return false;
                     }
-                    refNode = refNode.getParent();
+                    innerRefNode = innerRefNode.getParent();
                 }
             }
         }
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
     }
-    return ret;
+    return true;
 }
