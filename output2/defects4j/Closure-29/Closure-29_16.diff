--- com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
+++ com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
@@ -1,5 +1,4 @@
 private boolean isInlinableObject(List<Reference> refs) {
-    boolean ret = false;
     for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
@@ -25,7 +24,7 @@
         }
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
-            return false;
+            continue;
         }
         Node val = ref.getAssignedValue();
         if (val == null) {
@@ -34,7 +33,7 @@
         }
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
-            return false;
+            continue;
         }
         // Make sure that the value is not self-refential. IOW,
         // disallow things like x = {b: x.a}.
@@ -47,7 +46,7 @@
         for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
             if (child.isGetterDef() || child.isSetterDef()) {
                 // ES5 get/set not supported.
-                return false;
+                continue;
             }
             Node childVal = child.getFirstChild();
             // Check if childVal is the parent of any of the passed in
@@ -58,16 +57,14 @@
                 while (!NodeUtil.isStatementBlock(refNode)) {
                     if (refNode == childVal) {
                         // There's a self-referential assignment
-                        return false;
+                        continue;
                     }
                     refNode = refNode.getParent();
                 }
             }
         }
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
+        // We have found an acceptable object literal assignment.
+        return true;
     }
-    return ret;
+    return false;
 }
