--- com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
+++ com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
@@ -10,7 +10,7 @@
         if (parent.isGetProp()) {
             Preconditions.checkState(parent.getFirstChild() == name);
             // A call target maybe using the object as a 'this' value.
-            if (gramps.isCall() && gramps.getFirstChild() == parent) {
+            if (gramps.isCall() && gramps.getFirstFirstChild() == parent) {
                 return false;
             }
             // NOTE(nicksantos): This pass's object-splitting algorithm has
@@ -54,8 +54,9 @@
             // references, as that is how self-referential assignments
             // will happen.
             for (Reference t : refs) {
-                Node refNode = t.getParent();
-                while (!NodeUtil.isStatementBlock(refNode)) {
+                Node refNode = t.getNode(); // using Node instead of parent
+                // Also checking that refNode is not null
+                while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {
                     if (refNode == childVal) {
                         // There's a self-referential assignment
                         return false;
