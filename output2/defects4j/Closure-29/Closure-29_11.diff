--- com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
+++ com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
@@ -1,5 +1,4 @@
 private boolean isInlinableObject(List<Reference> refs) {
-    boolean ret = false;
     for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
@@ -25,7 +24,7 @@
         }
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
-            return false;
+            continue;
         }
         Node val = ref.getAssignedValue();
         if (val == null) {
@@ -34,7 +33,7 @@
         }
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
-            return false;
+            continue;
         }
         // Make sure that the value is not self-refential. IOW,
         // disallow things like x = {b: x.a}.
@@ -54,7 +53,10 @@
             // references, as that is how self-referential assignments
             // will happen.
             for (Reference t : refs) {
-                Node refNode = t.getParent();
+                if (t == ref) {
+                    continue;
+                }
+                Node refNode = t.getNode();
                 while (!NodeUtil.isStatementBlock(refNode)) {
                     if (refNode == childVal) {
                         // There's a self-referential assignment
@@ -67,7 +69,7 @@
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
-        ret = true;
+        return true;
     }
-    return ret;
+    return false;
 }
