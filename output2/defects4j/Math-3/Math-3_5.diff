--- org/apache/commons/math3/util/MathArrays.java@linearCombination
+++ org/apache/commons/math3/util/MathArrays.java@linearCombination
@@ -19,20 +19,35 @@
         final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);
         prodLowSum += prodLow;
     }
+    double result = 0; // moved result initialization outside the loop
     final double prodHighCur = prodHigh[0];
-    double prodHighNext = prodHigh[1];
-    double sHighPrev = prodHighCur + prodHighNext;
-    double sPrime = sHighPrev - prodHighNext;
-    double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-    final int lenMinusOne = len - 1;
-    for (int i = 1; i < lenMinusOne; i++) {
-        prodHighNext = prodHigh[i + 1];
-        final double sHighCur = sHighPrev + prodHighNext;
-        sPrime = sHighCur - prodHighNext;
-        sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
-        sHighPrev = sHighCur;
+    double prodHighNext;
+    double sHighPrev;
+    double sPrime;
+    double sLowSum;
+    for (int i = 1; i < len; i++) { // changed start index to 1
+        prodHighNext = prodHigh[i];
+        sHighPrev = prodHighCur + prodHighNext;
+        sPrime = sHighPrev - prodHighNext;
+        sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
+        i++;
+        if (i < len) { // added condition to check if i is still less than len
+            prodHighCur = prodHigh[i];
+            prodHighNext = prodHigh[i + 1];
+            sHighPrev = prodHighCur + prodHighNext;
+            sPrime = sHighPrev - prodHighNext;
+            sLowSum += (prodHighNext - (sHighPrev - sPrime)) + (sHighPrev - sPrime);
+            i++;
+            for (; i < len; i++) {
+                prodHighCur = prodHigh[i];
+                sHighPrev = sHighPrev + prodHighCur;
+                sPrime = sHighPrev - prodHighCur;
+                sLowSum += (prodHighCur - (sHighPrev - sPrime)) + (sHighPrev - sPrime);
+            }
+        }
+        result += (sHighPrev + sLowSum); // moved result addition outside loop
     }
-    double result = sHighPrev + (prodLowSum + sLowSum);
+    result += prodHighCur + prodLowSum; // added this line to fix calculation
     if (Double.isNaN(result)) {
         // either we have split infinite numbers or some coefficients were NaNs,
         // just rely on the naive implementation and let IEEE754 handle this
