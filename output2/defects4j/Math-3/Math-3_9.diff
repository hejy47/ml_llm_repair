--- org/apache/commons/math3/util/MathArrays.java@linearCombination
+++ org/apache/commons/math3/util/MathArrays.java@linearCombination
@@ -4,7 +4,7 @@
         throw new DimensionMismatchException(len, b.length);
     }
     // Revert to scalar multiplication.
-    final double[] prodHigh = new double[len];
+    double prodHighSum = 0;
     double prodLowSum = 0;
     for (int i = 0; i < len; i++) {
         final double ai = a[i];
@@ -15,24 +15,12 @@
         final double cb = SPLIT_FACTOR * bi;
         final double bHigh = cb - (cb - bi);
         final double bLow = bi - bHigh;
-        prodHigh[i] = ai * bi;
-        final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);
+        double prodHigh = ai * bi;
+        final double prodLow = aLow * bLow - (((prodHigh - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);
+        prodHighSum += prodHigh;
         prodLowSum += prodLow;
     }
-    final double prodHighCur = prodHigh[0];
-    double prodHighNext = prodHigh[1];
-    double sHighPrev = prodHighCur + prodHighNext;
-    double sPrime = sHighPrev - prodHighNext;
-    double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-    final int lenMinusOne = len - 1;
-    for (int i = 1; i < lenMinusOne; i++) {
-        prodHighNext = prodHigh[i + 1];
-        final double sHighCur = sHighPrev + prodHighNext;
-        sPrime = sHighCur - prodHighNext;
-        sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
-        sHighPrev = sHighCur;
-    }
-    double result = sHighPrev + (prodLowSum + sLowSum);
+    double result = FastMath.scalb(prodHighSum, -27) + FastMath.scalb(prodLowSum, -53);
     if (Double.isNaN(result)) {
         // either we have split infinite numbers or some coefficients were NaNs,
         // just rely on the naive implementation and let IEEE754 handle this
