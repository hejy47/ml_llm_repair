--- org/apache/commons/math3/util/MathArrays.java@linearCombination
+++ org/apache/commons/math3/util/MathArrays.java@linearCombination
@@ -3,7 +3,6 @@
     if (len != b.length) {
         throw new DimensionMismatchException(len, b.length);
     }
-    // Revert to scalar multiplication.
     final double[] prodHigh = new double[len];
     double prodLowSum = 0;
     for (int i = 0; i < len; i++) {
@@ -15,27 +14,15 @@
         final double cb = SPLIT_FACTOR * bi;
         final double bHigh = cb - (cb - bi);
         final double bLow = bi - bHigh;
-        prodHigh[i] = ai * bi;
+        prodHigh[i] = aHigh * bHigh;
         final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);
         prodLowSum += prodLow;
     }
-    final double prodHighCur = prodHigh[0];
-    double prodHighNext = prodHigh[1];
-    double sHighPrev = prodHighCur + prodHighNext;
-    double sPrime = sHighPrev - prodHighNext;
-    double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-    final int lenMinusOne = len - 1;
-    for (int i = 1; i < lenMinusOne; i++) {
-        prodHighNext = prodHigh[i + 1];
-        final double sHighCur = sHighPrev + prodHighNext;
-        sPrime = sHighCur - prodHighNext;
-        sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
-        sHighPrev = sHighCur;
+    double result = prodLowSum;
+    for (int i = 0; i < len; ++i) {
+        result += prodHigh[i];
     }
-    double result = sHighPrev + (prodLowSum + sLowSum);
     if (Double.isNaN(result)) {
-        // either we have split infinite numbers or some coefficients were NaNs,
-        // just rely on the naive implementation and let IEEE754 handle this
         result = 0;
         for (int i = 0; i < len; ++i) {
             result += a[i] * b[i];
