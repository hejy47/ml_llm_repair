--- org/apache/commons/math3/util/MathArrays.java@linearCombination
+++ org/apache/commons/math3/util/MathArrays.java@linearCombination
@@ -19,22 +19,22 @@
         final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);
         prodLowSum += prodLow;
     }
-    final double prodHighCur = prodHigh[0];
-    double prodHighNext = prodHigh[1];
-    double sHighPrev = prodHighCur + prodHighNext;
-    double sPrime = sHighPrev - prodHighNext;
-    double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-    final int lenMinusOne = len - 1;
-    for (int i = 1; i < lenMinusOne; i++) {
-        prodHighNext = prodHigh[i + 1];
-        final double sHighCur = sHighPrev + prodHighNext;
-        sPrime = sHighCur - prodHighNext;
-        sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
-        sHighPrev = sHighCur;
-    }
-    double result = sHighPrev + (prodLowSum + sLowSum);
-    if (Double.isNaN(result)) {
-        // either we have split infinite numbers or some coefficients were NaNs,
+    double result;
+    try {
+        final TwoProduct tp = TwoProduct.twoProduct(prodHigh[0], prodHigh[1]);
+        result = tp.first + tp.second;
+        double sPrime = tp.second, sHighPrev = result, sLowSum = 0;
+        for (int i = 1; i < len - 1; i++) {
+            tp.times(prodHigh[i + 1]);
+            double sHighCur = sHighPrev + tp.first;
+            sLowSum += (tp.second - sPrime) + (sHighPrev - (sHighCur - tp.first));
+            sPrime = tp.second;
+            sHighPrev = sHighCur;
+        }
+        tp.times(prodLowSum);
+        result += tp.first + tp.second + sHighPrev + sLowSum;
+    } catch (ArithmeticException e) {
+        // we have split infinite numbers or some coefficients were NaNs,
         // just rely on the naive implementation and let IEEE754 handle this
         result = 0;
         for (int i = 0; i < len; ++i) {
