--- org/apache/commons/math3/util/MathArrays.java@linearCombination
+++ org/apache/commons/math3/util/MathArrays.java@linearCombination
@@ -19,18 +19,21 @@
         final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow);
         prodLowSum += prodLow;
     }
-    final double prodHighCur = prodHigh[0];
-    double prodHighNext = prodHigh[1];
-    double sHighPrev = prodHighCur + prodHighNext;
-    double sPrime = sHighPrev - prodHighNext;
-    double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
+    double sHighPrev = prodHigh[0];
+    double sLowSum = 0;
     final int lenMinusOne = len - 1;
-    for (int i = 1; i < lenMinusOne; i++) {
-        prodHighNext = prodHigh[i + 1];
-        final double sHighCur = sHighPrev + prodHighNext;
-        sPrime = sHighCur - prodHighNext;
-        sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
+    for (int i = 1; i < lenMinusOne; i+=2) {
+        final double prodHighCur = prodHigh[i];
+        final double prodHighNext = prodHigh[i + 1];
+        final double sHighCur = sHighPrev + prodHighCur + prodHighNext;
+        final double sPrime = sHighCur - prodHighNext;
+        sLowSum += (prodHighNext - (sHighCur - sPrime)) + (prodHighCur - sPrime);
         sHighPrev = sHighCur;
+    }
+    if ((len & 1) == 1) { // If the length of a is odd, reserve one last multiplication
+        final double prodHighCur = prodHigh[len - 1];
+        sHighPrev += prodHighCur;
+        prodLowSum += a[len - 1] * b[len - 1];
     }
     double result = sHighPrev + (prodLowSum + sLowSum);
     if (Double.isNaN(result)) {
