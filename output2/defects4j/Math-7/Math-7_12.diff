--- org/apache/commons/math3/ode/AbstractIntegrator.java@acceptStep
+++ org/apache/commons/math3/ode/AbstractIntegrator.java@acceptStep
@@ -12,7 +12,7 @@
     final int orderingSign = interpolator.isForward() ? +1 : -1;
     SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
-                public int compare(EventState es0, EventState es1) {
+        public int compare(EventState es0, EventState es1) {
             return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
         }
     });
@@ -40,14 +40,14 @@
         // handle the first part of the step, up to the event
         for (final StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, isLastStep);
-        }
-        if (isLastStep) {
-            // the event asked to stop integration
-            System.arraycopy(eventY, 0, y, 0, y.length);
-            for (final EventState remaining : occuringEvents) {
-                remaining.stepAccepted(eventT, eventY);
+            if (isLastStep) {
+                // the event asked to stop integration
+                System.arraycopy(eventY, 0, y, 0, y.length);
+                for (final EventState remaining : occuringEvents) {
+                    remaining.stepAccepted(eventT, eventY);
+                }
+                return eventT;
             }
-            return eventT;
         }
         boolean needReset = currentEvent.reset(eventT, eventY);
         if (needReset) {
