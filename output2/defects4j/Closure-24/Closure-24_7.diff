--- com/google/javascript/jscomp/ScopedAliases.java@findAliases
+++ com/google/javascript/jscomp/ScopedAliases.java@findAliases
@@ -8,13 +8,22 @@
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
-                aliases.put(name, aliasVar);
-                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
-                transformation.addAlias(name, qualifiedName);
-                // Bleeding functions already get a BAD_PARAMETERS error, so just
-                // do nothing.
-                // Parameters of the scope function also get a BAD_PARAMETERS
-                // error.
+                // Check if aliasVar is null
+                if (aliasVar != null) {
+                    // Check if aliasVar has an initial value
+                    if (aliasVar.getInitialValue() != null) {
+                        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
+                        // Check if qualifiedName is not null
+                        if (qualifiedName != null) {
+                            aliases.put(name, aliasVar);
+                            transformation.addAlias(name, qualifiedName);
+                            // Bleeding functions already get a BAD_PARAMETERS error, so just
+                            // do nothing.
+                            // Parameters of the scope function also get a BAD_PARAMETERS
+                            // error.
+                        }
+                    }
+                }
             } else {
                 // TODO(robbyw): Support using locals for private variables.
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
