--- org/apache/commons/math/fraction/BigFraction.java@doubleValue
+++ org/apache/commons/math/fraction/BigFraction.java@doubleValue
@@ -1,7 +1,18 @@
 @Override
 public double doubleValue() {
     double result = numerator.doubleValue() / denominator.doubleValue();
-    // Numerator and/or denominator must be out of range:
-    // Calculate how far to shift them to put them in range.
+    if (Double.isInfinite(result) || Double.isNaN(result)) {
+        // Numerator and/or denominator must be out of range:
+        // Calculate how far to shift them to put them in range.
+        if (numerator != BigDecimal.ZERO) {
+            int exponent = numerator.scale() - denominator.scale();
+            if (exponent > 0) {
+                denominator = denominator.scaleByPowerOfTen(exponent);
+            } else {
+                numerator = numerator.scaleByPowerOfTen(-exponent);
+            }
+            result = numerator.doubleValue() / denominator.doubleValue();
+        }
+    }
     return result;
 }
--- org/apache/commons/math/fraction/BigFraction.java@floatValue
+++ org/apache/commons/math/fraction/BigFraction.java@floatValue
@@ -1,7 +1,18 @@
 @Override
-public float floatValue() {
-    float result = numerator.floatValue() / denominator.floatValue();
-    // Numerator and/or denominator must be out of range:
-    // Calculate how far to shift them to put them in range.
+public double doubleValue() {
+    double result = numerator.doubleValue() / denominator.doubleValue();
+    if (Double.isInfinite(result) || Double.isNaN(result)) {
+        // Numerator and/or denominator must be out of range:
+        // Calculate how far to shift them to put them in range.
+        if (numerator != BigDecimal.ZERO) {
+            int exponent = numerator.scale() - denominator.scale();
+            if (exponent > 0) {
+                denominator = denominator.scaleByPowerOfTen(exponent);
+            } else {
+                numerator = numerator.scaleByPowerOfTen(-exponent);
+            }
+            result = numerator.doubleValue() / denominator.doubleValue();
+        }
+    }
     return result;
 }
