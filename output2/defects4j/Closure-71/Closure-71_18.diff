--- com/google/javascript/jscomp/CheckAccessControls.java@checkPropertyVisibility
+++ com/google/javascript/jscomp/CheckAccessControls.java@checkPropertyVisibility
@@ -1,5 +1,5 @@
 private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {
-    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
+    ObjectType objectType = ObjectType.cast(getprop.getFirstChild().getJSType());
     String propertyName = getprop.getLastChild().getString();
     if (objectType != null) {
         // Is this a normal property access, or are we trying to override
@@ -13,7 +13,7 @@
         JSDocInfo docInfo = null;
         for (; objectType != null; objectType = objectType.getImplicitPrototype()) {
             docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
-            if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {
+            if (docInfo != null && docInfo.getVisibility() != JSDocInfo.Visibility.INHERITED) {
                 break;
             }
         }
@@ -21,40 +21,46 @@
             // We couldn't find a visibility modifier; assume it's public.
             return;
         }
-        boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());
-        Visibility visibility = docInfo.getVisibility();
-        JSType ownerType = normalizeClassType(objectType);
+        boolean sameInput = t.getInput().getName().equals(docInfo.getName());
+        JSDocInfo.Visibility visibility = docInfo.getVisibility();
+        JSType ownerType = objectType;
+        if (ownerType.isFunctionType()) {
+            ownerType = ((FunctionType) ownerType).getInstanceType();
+        } else {
+            ownerType = normalizeClassType(ownerType);
+        }
         if (isOverride) {
             // Check an ASSIGN statement that's trying to override a property
             // on a superclass.
             JSDocInfo overridingInfo = parent.getJSDocInfo();
-            Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();
+            JSDocInfo.Visibility overridingVisibility = overridingInfo == null ? JSDocInfo.Visibility.INHERITED : overridingInfo.getVisibility();
             // Check that (a) the property *can* be overridden, and
             // (b) that the visibility of the override is the same as the
             // visibility of the original property.
-            if (visibility == Visibility.PRIVATE && !sameInput) {
+            if (visibility == JSDocInfo.Visibility.PRIVATE && !sameInput) {
                 compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));
-            } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {
+            } else if (overridingVisibility != JSDocInfo.Visibility.INHERITED && overridingVisibility != visibility) {
                 compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));
             }
         } else {
             if (sameInput) {
                 // private access is always allowed in the same file.
                 return;
-            } else if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) {
+            } else if (visibility == JSDocInfo.Visibility.PRIVATE && (currentClass == null || ownerType == null
+                || !ownerType.equals(currentClass))) {
                 if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {
                     return;
                 }
                 // private access is not allowed outside the file from a different
                 // enclosing class.
                 compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
-            } else if (visibility == Visibility.PROTECTED) {
+            } else if (visibility == JSDocInfo.Visibility.PROTECTED) {
                 // There are 3 types of legal accesses of a protected property:
                 // 1) Accesses in the same file
                 // 2) Overriding the property in a subclass
                 // 3) Accessing the property from inside a subclass
                 // The first two have already been checked for.
-                if (currentClass == null || !currentClass.isSubtype(ownerType)) {
+                if (currentClass == null || !currentClass.isSubclass(ownerType)) {
                     compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));
                 }
             }
