--- com/google/javascript/jscomp/CheckAccessControls.java@checkPropertyVisibility
+++ com/google/javascript/jscomp/CheckAccessControls.java@checkPropertyVisibility
@@ -1,5 +1,5 @@
 private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {
-    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
+    ObjectType objectType = ObjectType.cast(getprop.getFirstChild().getJSType());
     String propertyName = getprop.getLastChild().getString();
     if (objectType != null) {
         // Is this a normal property access, or are we trying to override
@@ -7,13 +7,19 @@
         boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;
         // Find the lowest property defined on a class with visibility
         // information.
+        JSDocInfo docInfo = null;
+        Visibility visibility = null;
+        JSType ownerType = null;
+        boolean sameInput = false;
         if (isOverride) {
             objectType = objectType.getImplicitPrototype();
         }
-        JSDocInfo docInfo = null;
         for (; objectType != null; objectType = objectType.getImplicitPrototype()) {
             docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
             if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {
+                visibility = docInfo.getVisibility();
+                ownerType = normalizeClassType(objectType);
+                sameInput = t.getInput().getName().equals(docInfo.getSourceName());
                 break;
             }
         }
@@ -21,9 +27,6 @@
             // We couldn't find a visibility modifier; assume it's public.
             return;
         }
-        boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());
-        Visibility visibility = docInfo.getVisibility();
-        JSType ownerType = normalizeClassType(objectType);
         if (isOverride) {
             // Check an ASSIGN statement that's trying to override a property
             // on a superclass.
@@ -33,9 +36,9 @@
             // (b) that the visibility of the override is the same as the
             // visibility of the original property.
             if (visibility == Visibility.PRIVATE && !sameInput) {
-                compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));
+                compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, ownerType.toString()));
             } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {
-                compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));
+                compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), ownerType.toString(), overridingVisibility.name()));
             }
         } else {
             if (sameInput) {
