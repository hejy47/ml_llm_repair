--- com/google/javascript/jscomp/TypedScopeCreator.java@getDeclaredType
+++ com/google/javascript/jscomp/TypedScopeCreator.java@getDeclaredType
@@ -1,42 +1,32 @@
 private JSType getDeclaredType(String sourceName, JSDocInfo info, Node lValue, @Nullable Node rValue) {
     if (info != null && info.hasType()) {
+        // Return declared type from JSDoc annotation
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     } else if (rValue != null && rValue.isFunction() && shouldUseFunctionLiteralType(JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
-        return rValue.getJSType();
+        // Return declared type from function literal
+        JSType functionType = JSType.toMaybeFunctionType(rValue.getJSType());
+        if (functionType != null && functionType.isFunctionType()) {
+            return functionType;
+        }
     } else if (info != null) {
         if (info.hasEnumParameterType()) {
             if (rValue != null && rValue.isObjectLit()) {
+                // Return JSType from object literal
                 return rValue.getJSType();
             } else {
+                // Create enum JSType from declaration nodes
                 return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);
             }
         } else if (info.isConstructor() || info.isInterface()) {
+            // Create constructor or interface JSType from declaration nodes
             return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);
         } else {
-            // Check if this is constant, and if it has a known type.
-            if (info.isConstant()) {
-                JSType knownType = null;
-                if (rValue != null) {
-                    if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                        // If rValue has a type-cast, we use the type in the type-cast.
-                        // If rValue's type was already computed during scope creation,
-                        // then we can safely use that.
-                        return rValue.getJSType();
-                    } else if (rValue.isOr()) {
-                        // Check for a very specific JS idiom:
-                        // var x = x || TYPE;
-                        // This is used by Closure's base namespace for esoteric
-                        // reasons.
-                        Node firstClause = rValue.getFirstChild();
-                        Node secondClause = firstClause.getNext();
-                        boolean namesMatch = firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString());
-                        if (namesMatch && secondClause.getJSType() != null && !secondClause.getJSType().isUnknownType()) {
-                            return secondClause.getJSType();
-                        }
-                    }
-                }
+            // Check if this is a constant with a known type
+            if (info.isConstant() && rValue != null && rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
+                return rValue.getJSType();
             }
         }
     }
+    // If no type found, return declared type from JSDoc annotation
     return getDeclaredTypeInAnnotation(sourceName, lValue, info);
 }
