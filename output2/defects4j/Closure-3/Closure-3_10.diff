--- com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@enterScope
+++ com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@enterScope
@@ -1,7 +1,7 @@
 @Override
 public void enterScope(NodeTraversal t) {
     if (t.inGlobalScope()) {
-        // Don't even brother. All global variables are likely escaped.
+        // Don't even bother. All global variables are likely escaped.
         return;
     }
     if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) {
@@ -18,7 +18,7 @@
     candidates = Lists.newLinkedList();
     // Using the forward reaching definition search to find all the inline
     // candidates
-    new NodeTraversal(compiler, new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());
+    new NodeTraversal(compiler, new GatherCandidates()).traverse(t.getScopeRoot().getLastChild());
     // Compute the backward reaching use. The CFG can be reused.
     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);
     reachingUses.analyze();
--- com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@canInline
+++ com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@canInline
@@ -1,6 +1,6 @@
 private boolean canInline() {
     // Cannot inline a parameter.
-    if (getDefCfgNode().isFunction()) {
+    if (getDefCfgNode().isFunction() || getDefCfgNode().getParent().isFunction()) {
         return false;
     }
     // If one of our dependencies has been inlined, then our dependency
@@ -48,7 +48,7 @@
         return false;
     }
     // Make sure that the name is not within a loop
-    if (NodeUtil.isWithinLoop(use)) {
+    if (NodeUtil.isWithinLoop(use) || NodeUtil.isWithinLoop(getDefCfgNode())) {
         return false;
     }
     Collection<Node> uses = reachingUses.getUses(varName, getDefCfgNode());
@@ -68,22 +68,25 @@
     // have lexical scope support so catch expressions don't
     // need to be special cased.
     if (NodeUtil.has(def.getLastChild(), new Predicate<Node>() {
-
         @Override
         public boolean apply(Node input) {
-            switch(input.getType()) {
+            switch (input.getType()) {
                 case Token.GETELEM:
                 case Token.GETPROP:
                 case Token.ARRAYLIT:
                 case Token.OBJECTLIT:
                 case Token.REGEXP:
                 case Token.NEW:
+                case Token.OPTCHAIN_GETELEM:
+                case Token.OPTCHAIN_GETPROP:
+                case Token.OPTCHAIN_CALL:
+                case Token.OPTCHAIN_GETELEM_NULLISH:
+                case Token.OPTCHAIN_GETPROP_NULLISH:
                     return true;
             }
             return false;
         }
     }, new Predicate<Node>() {
-
         @Override
         public boolean apply(Node input) {
             // Recurse if the node is not a function.
@@ -98,7 +101,7 @@
         // Similar side effect check as above but this time the side effect is
         // else where along the path.
         // x = readProp(b); while(modifyProp(b)) {}; print(x);
-        CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);
+        CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);
         if (pathCheck.somePathsSatisfyPredicate()) {
             return false;
         }
--- com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@apply
+++ com/google/javascript/jscomp/FlowSensitiveInlineVariables.java@apply
@@ -1,13 +1,40 @@
 @Override
-public boolean apply(Node input) {
-    switch(input.getType()) {
-        case Token.GETELEM:
-        case Token.GETPROP:
-        case Token.ARRAYLIT:
-        case Token.OBJECTLIT:
-        case Token.REGEXP:
-        case Token.NEW:
-            return true;
+public void enterScope(NodeTraversal t) {
+    if (t.inGlobalScope()) {
+        // Don't even bother. All global variables are likely escaped.
+        return;
     }
-    return false;
+    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) {
+        return;
+    }
+    // Compute the forward reaching definition.
+    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);
+    // Process the body of the function.
+    Preconditions.checkState(t.getScopeRoot().isFunction());
+    cfa.process(null, t.getScopeRoot().getLastChild());
+    cfg = cfa.getCfg();
+    reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);
+    reachingDef.analyze();
+    candidates = Lists.newLinkedList();
+    // Using the forward reaching definition search to find all the inline
+    // candidates
+    new NodeTraversal(compiler, new GatherCandidates()).traverse(t.getScopeRoot().getLastChild());
+    // Compute the backward reaching use. The CFG can be reused.
+    reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);
+    reachingUses.analyze();
+    for (Candidate c : candidates) {
+        if (c.canInline()) {
+            c.inlineVariable();
+            // If definition c has dependencies, then inlining it may have
+            // introduced new dependencies for our other inlining candidates.
+            //
+            // MustBeReachingVariableDef uses this dependency graph in its
+            // analysis, so some of these candidates may no longer be valid.
+            // We keep track of when the variable dependency graph changed
+            // so that we can back off appropriately.
+            if (!c.defMetadata.depends.isEmpty()) {
+                inlinedNewDependencies.add(t.getScope().getVar(c.varName));
+            }
+        }
+    }
 }
