--- com/google/javascript/jscomp/TypedScopeCreator.java@maybeDeclareQualifiedName
+++ com/google/javascript/jscomp/TypedScopeCreator.java@maybeDeclareQualifiedName
@@ -5,7 +5,7 @@
     String propName = n.getLastChild().getString();
     Preconditions.checkArgument(qName != null && ownerName != null);
     // Precedence of type information on GETPROPs:
-    // 1) @type annnotation / @enum annotation
+    // 1) @type annotation / @enum annotation
     // 2) ASSIGN to FUNCTION literal
     // 3) @param/@return annotation (with no function literal)
     // 4) ASSIGN to something marked @const
@@ -63,12 +63,14 @@
     // The problem is that there are two (equally valid) coding styles:
     //
     // (function() {
-    //       //   goog.bar = function() {};
+    //   /* The authoritative definition of goog.bar. */
+    //   goog.bar = function() {};
     // })();
     //
     // function f() {
     //   goog.bar();
-    //       //   goog.bar = function() {};
+    //   /* Reset goog.bar to a no-op. */
+    //   goog.bar = function() {};
     // }
     //
     // In a dynamic language with first-class functions, it's very difficult
@@ -91,12 +93,17 @@
     if (!inferred) {
         ObjectType ownerType = getObjectSlot(ownerName);
         if (ownerType != null) {
-            // Only declare this as an official property if it has not been
-            // declared yet.
-            boolean isExtern = t.getInput() != null && t.getInput().isExtern();
-            if ((!ownerType.hasOwnProperty(propName) || ownerType.isPropertyTypeInferred(propName)) && ((isExtern && !ownerType.isNativeObjectType()) || !ownerType.isInstanceType())) {
-                // If the property is undeclared or inferred, declare it now.
-                ownerType.defineDeclaredProperty(propName, valueType, n);
+            if (ownerType.hasOwnProperty(propName) && !ownerType.isPropertyTypeInferred(propName)) {
+                if(!ownerType.getPropertyType(propName).toString().equals(valueType.toString())) {
+                    t.report(n, DECLARATION_MISMATCH, propName);
+                }
+            }
+            else {
+                boolean isExtern = t.getInput() != null && t.getInput().isExtern();
+                if ((isExtern && !ownerType.isNativeObjectType()) || !ownerType.isInstanceType()) {
+                    // If the property is undeclared or inferred, declare it now.
+                    ownerType.defineDeclaredProperty(propName, valueType, n);
+                }
             }
         }
         // If the property is already declared, the error will be
