--- com/google/javascript/jscomp/TypedScopeCreator.java@maybeDeclareQualifiedName
+++ com/google/javascript/jscomp/TypedScopeCreator.java@maybeDeclareQualifiedName
@@ -3,7 +3,7 @@
     String ownerName = ownerNode.getQualifiedName();
     String qName = n.getQualifiedName();
     String propName = n.getLastChild().getString();
-    Preconditions.checkArgument(qName != null && ownerName != null);
+    Preconditions.checkNotNull(qName);
     // Precedence of type information on GETPROPs:
     // 1) @type annnotation / @enum annotation
     // 2) ASSIGN to FUNCTION literal
@@ -63,12 +63,14 @@
     // The problem is that there are two (equally valid) coding styles:
     //
     // (function() {
-    //       //   goog.bar = function() {};
+    //   /* The authoritative definition of goog.bar. */
+    //   goog.bar = function() {};
     // })();
     //
     // function f() {
     //   goog.bar();
-    //       //   goog.bar = function() {};
+    //   /* Reset goog.bar to a no-op. */
+    //   goog.bar = function() {};
     // }
     //
     // In a dynamic language with first-class functions, it's very difficult
@@ -86,7 +88,7 @@
     }
     if (inferred) {
         // Determining declaration for #2
-        inferred = !(rhsValue != null && rhsValue.isFunction() && (info != null || !scope.isDeclared(qName, false)));
+        inferred = !(rhsValue != null && rhsValue.isFunction() && (info != null || !scope.hasSlot(qName)));
     }
     if (!inferred) {
         ObjectType ownerType = getObjectSlot(ownerName);
