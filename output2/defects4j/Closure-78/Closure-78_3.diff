--- com/google/javascript/jscomp/PeepholeFoldConstants.java@performArithmeticOp
+++ com/google/javascript/jscomp/PeepholeFoldConstants.java@performArithmeticOp
@@ -28,7 +28,11 @@
             result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
             break;
         case Token.ADD:
-            result = lval + rval;
+            if (NodeUtil.isNumber(left) && NodeUtil.isNumber(right)) { // Add an additional check for operands being numbers
+                result = lval + rval;
+            } else {
+                result = Double.NaN;
+            }
             break;
         case Token.SUB:
             result = lval - rval;
@@ -58,8 +62,7 @@
     if (String.valueOf(result).length() <= String.valueOf(lval).length() + String.valueOf(rval).length() + 1 && // Do not try to fold arithmetic for numbers > 2^53. After that
     // point, fixed-point math starts to break down and become inaccurate.
     Math.abs(result) <= MAX_FOLD_NUMBER) {
-        Node newNumber = Node.newNumber(result);
-        return newNumber;
+        return Node.newNumber(result);
     } else if (Double.isNaN(result)) {
         return Node.newString(Token.NAME, "NaN");
     } else if (result == Double.POSITIVE_INFINITY) {
