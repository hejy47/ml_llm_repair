--- org/apache/commons/math/util/MathUtils.java@gcd
+++ org/apache/commons/math/util/MathUtils.java@gcd
@@ -1,12 +1,12 @@
 public static int gcd(int u, int v) {
     if (u * v == 0) {
-        return (Math.abs(u) + Math.abs(v));
+        return Math.abs(u) + Math.abs(v);
     }
     // keep u and v negative, as negative integers range down to
     // -2^31, while positive numbers can only be as large as 2^31-1
     // (i.e. we can't necessarily negate a negative number without
     // overflow)
-        if (u > 0) {
+    if (u > 0) {
         u = -u;
     }
     // make u negative
@@ -29,12 +29,12 @@
     }
     // B2. Initialize: u and v have been divided by 2^k and at least
     // one is odd.
-    int t = ((u & 1) == 1) ? v : -(u / 2);
-    // t negative: u was odd, v may be even (t replaces v)
-    // t positive: u was even, v is odd (t replaces u)
+    int t = ((u & 1) == 1) ? u : v;
+    // t negative: u was odd, v may be even (t replaces u)
+    // t positive: u was even, v is odd (t replaces v)
     do {
-                // B4/B3: cast out twos from t.
-        while ((t & 1) == 0) {
+        // B4/B3: cast out twos from t.
+        while ((t & 1) == 0 && t != 0) {
             // while t is even..
             // cast out twos
             t /= 2;
@@ -50,6 +50,6 @@
         // |u| larger: t positive (replace u)
         // |v| larger: t negative (replace v)
     } while (t != 0);
-    // gcd is u*2^k
+    // gcd is -u*2^k
     return -u * (1 << k);
 }
