--- org/apache/commons/math/util/MathUtils.java@gcd
+++ org/apache/commons/math/util/MathUtils.java@gcd
@@ -2,54 +2,41 @@
     if (u * v == 0) {
         return (Math.abs(u) + Math.abs(v));
     }
-    // keep u and v negative, as negative integers range down to
-    // -2^31, while positive numbers can only be as large as 2^31-1
-    // (i.e. we can't necessarily negate a negative number without
-    // overflow)
-        if (u > 0) {
-        u = -u;
+    int signU = u > 0 ? 1 : -1; // save the sign of u
+    int signV = v > 0 ? 1 : -1; // save the sign of v
+    u = Math.abs(u);
+    v = Math.abs(v);
+
+    if (u < v) {
+        int temp = u; // swap u and v
+        u = v;
+        v = temp;
     }
-    // make u negative
-    if (v > 0) {
-        v = -v;
+    if (v == 0) {
+        return u * signU; // gcd(u, 0) = u
     }
-    // make v negative
+
     // B1. [Find power of 2]
     int k = 0;
-    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
-        // while u and v are
-        // both even...
+    while ((u & 1) == 0 && k < 31) {
+        // while u is even...
         u /= 2;
-        v /= 2;
-        // cast out twos.
         k++;
     }
-    if (k == 31) {
-        throw new ArithmeticException("overflow: gcd is 2^31");
+
+    // B2. Initialize: v is odd and u is now odd too (gcd(u, v) = gcd(u', v), u' = u/2^k)
+    while (v != 0) {
+        while ((v & 1) == 0) {
+            // while v is even...
+            v /= 2;
+        }
+        int difference = Math.abs(u - v) / 2;
+        if (u >= v) {
+            u = v + difference; // u is even
+        } else {
+            v = u + difference; // v is even
+        }
     }
-    // B2. Initialize: u and v have been divided by 2^k and at least
-    // one is odd.
-    int t = ((u & 1) == 1) ? v : -(u / 2);
-    // t negative: u was odd, v may be even (t replaces v)
-    // t positive: u was even, v is odd (t replaces u)
-    do {
-                // B4/B3: cast out twos from t.
-        while ((t & 1) == 0) {
-            // while t is even..
-            // cast out twos
-            t /= 2;
-        }
-        // B5 [reset max(u,v)]
-        if (t > 0) {
-            u = -t;
-        } else {
-            v = t;
-        }
-        // B6/B3. at this point both u and v should be odd.
-        t = (v - u) / 2;
-        // |u| larger: t positive (replace u)
-        // |v| larger: t negative (replace v)
-    } while (t != 0);
-    // gcd is u*2^k
-    return -u * (1 << k);
+
+    return u * (1 << k) * signU;
 }
