--- org/apache/commons/math/util/MathUtils.java@gcd
+++ org/apache/commons/math/util/MathUtils.java@gcd
@@ -29,9 +29,9 @@
     }
     // B2. Initialize: u and v have been divided by 2^k and at least
     // one is odd.
-    int t = ((u & 1) == 1) ? v : -(u / 2);
-    // t negative: u was odd, v may be even (t replaces v)
-    // t positive: u was even, v is odd (t replaces u)
+    int t = ((u & 1) == 1) ? u : -v;
+    // t negative: u was odd, v may be even (t replaces u)
+    // t positive: u was even, v is odd (t replaces v)
     do {
                 // B4/B3: cast out twos from t.
         while ((t & 1) == 0) {
@@ -46,10 +46,10 @@
             v = t;
         }
         // B6/B3. at this point both u and v should be odd.
-        t = (v - u) / 2;
+        t = (v - u);
         // |u| larger: t positive (replace u)
         // |v| larger: t negative (replace v)
     } while (t != 0);
-    // gcd is u*2^k
+    // gcd is -u*2^k
     return -u * (1 << k);
 }
