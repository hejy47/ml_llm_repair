--- com/google/javascript/jscomp/RemoveUnusedVars.java@Assign
+++ com/google/javascript/jscomp/RemoveUnusedVars.java@Assign
@@ -1,8 +1,9 @@
 Assign(Node assignNode, Node nameNode, boolean isPropertyAssign) {
-    Preconditions.checkState(NodeUtil.isAssignmentOp(assignNode));
+    Preconditions.checkState(assignNode.isAssign() || assignNode.isExprResult());
     this.assignNode = assignNode;
     this.nameNode = nameNode;
     this.isPropertyAssign = isPropertyAssign;
     this.maybeAliased = !assignNode.getParent().isExprResult();
-    this.mayHaveSecondarySideEffects = maybeAliased || NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) || NodeUtil.mayHaveSideEffects(assignNode.getLastChild());
+    this.mayHaveSecondarySideEffects = maybeAliased || NodeUtil.mayHaveSideEffects(assignNode.getFirstChild())
+            || NodeUtil.mayHaveSideEffecst(assignNode.getLastChild());
 }
--- com/google/javascript/jscomp/RemoveUnusedVars.java@interpretAssigns
+++ com/google/javascript/jscomp/RemoveUnusedVars.java@interpretAssigns
@@ -2,14 +2,11 @@
     boolean changes = false;
     do {
         changes = false;
-        // We can't use traditional iterators and iterables for this list,
-        // because our lazily-evaluated continuations will modify it while
-        // we traverse it.
-        for (int current = 0; current < maybeUnreferenced.size(); current++) {
-            Var var = maybeUnreferenced.get(current);
+        // Iterate over a copy of the list to avoid ConcurrentModificationException
+        List<Var> maybeUnreferencedCopy = new ArrayList<>(maybeUnreferenced);
+        for (Var var : maybeUnreferencedCopy) {
             if (referenced.contains(var)) {
-                maybeUnreferenced.remove(current);
-                current--;
+                maybeUnreferenced.remove(var);
             } else {
                 boolean assignedToUnknownValue = false;
                 boolean hasPropertyAssign = false;
@@ -30,8 +27,7 @@
                 }
                 if (assignedToUnknownValue && hasPropertyAssign) {
                     changes = markReferencedVar(var) || changes;
-                    maybeUnreferenced.remove(current);
-                    current--;
+                    maybeUnreferenced.remove(var);
                 }
             }
         }
