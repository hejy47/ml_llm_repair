--- com/google/javascript/jscomp/RemoveUnusedVars.java@Assign
+++ com/google/javascript/jscomp/RemoveUnusedVars.java@Assign
@@ -1,8 +1,8 @@
 Assign(Node assignNode, Node nameNode, boolean isPropertyAssign) {
-    Preconditions.checkState(NodeUtil.isAssignmentOp(assignNode));
+    Preconditions.checkState(assignNode.isAssign());
     this.assignNode = assignNode;
     this.nameNode = nameNode;
     this.isPropertyAssign = isPropertyAssign;
-    this.maybeAliased = !assignNode.getParent().isExprResult();
+    this.maybeAliased = !NodeUtil.isExpressionResult(assignNode.getParent());
     this.mayHaveSecondarySideEffects = maybeAliased || NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) || NodeUtil.mayHaveSideEffects(assignNode.getLastChild());
 }
--- com/google/javascript/jscomp/RemoveUnusedVars.java@interpretAssigns
+++ com/google/javascript/jscomp/RemoveUnusedVars.java@interpretAssigns
@@ -5,11 +5,11 @@
         // We can't use traditional iterators and iterables for this list,
         // because our lazily-evaluated continuations will modify it while
         // we traverse it.
-        for (int current = 0; current < maybeUnreferenced.size(); current++) {
-            Var var = maybeUnreferenced.get(current);
+        ListIterator<Var> iterator = maybeUnreferenced.listIterator();
+        while (iterator.hasNext()) {
+            Var var = iterator.next();
             if (referenced.contains(var)) {
-                maybeUnreferenced.remove(current);
-                current--;
+                iterator.remove();
             } else {
                 boolean assignedToUnknownValue = false;
                 boolean hasPropertyAssign = false;
@@ -30,8 +30,7 @@
                 }
                 if (assignedToUnknownValue && hasPropertyAssign) {
                     changes = markReferencedVar(var) || changes;
-                    maybeUnreferenced.remove(current);
-                    current--;
+                    iterator.remove();
                 }
             }
         }
