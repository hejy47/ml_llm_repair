--- com/google/javascript/jscomp/RemoveUnusedVars.java@Assign
+++ com/google/javascript/jscomp/RemoveUnusedVars.java@Assign
@@ -1,8 +1,10 @@
 Assign(Node assignNode, Node nameNode, boolean isPropertyAssign) {
-    Preconditions.checkState(NodeUtil.isAssignmentOp(assignNode));
+    Preconditions.checkState(assignNode.isAssign() || assignNode.isVanillaFor());
     this.assignNode = assignNode;
     this.nameNode = nameNode;
     this.isPropertyAssign = isPropertyAssign;
-    this.maybeAliased = !assignNode.getParent().isExprResult();
-    this.mayHaveSecondarySideEffects = maybeAliased || NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) || NodeUtil.mayHaveSideEffects(assignNode.getLastChild());
+    this.maybeAliased = !assignNode.getParent().isExprResult()
+            || (assignNode.isVanillaFor() && assignNode.getFirstChild().matchesQualifiedName(nameNode));
+    this.mayHaveSecondarySideEffects = maybeAliased || NodeUtil.mayHaveSideEffects(assignNode.getFirstChild())
+            || NodeUtil.mayHaveSideEffects(assignNode.getLastChild());
 }
--- com/google/javascript/jscomp/RemoveUnusedVars.java@interpretAssigns
+++ com/google/javascript/jscomp/RemoveUnusedVars.java@interpretAssigns
@@ -1,39 +1,32 @@
 private void interpretAssigns() {
     boolean changes = false;
-    do {
-        changes = false;
-        // We can't use traditional iterators and iterables for this list,
-        // because our lazily-evaluated continuations will modify it while
-        // we traverse it.
-        for (int current = 0; current < maybeUnreferenced.size(); current++) {
-            Var var = maybeUnreferenced.get(current);
-            if (referenced.contains(var)) {
-                maybeUnreferenced.remove(current);
-                current--;
+    Iterator<Var> iter = maybeUnreferenced.iterator(); // Use iterator to avoid concurrent modification
+    while (iter.hasNext()) {
+        Var var = iter.next();
+        if (referenced.contains(var)) {
+            iter.remove();
+        } else {
+            boolean assignedToUnknownValue = false;
+            boolean hasPropertyAssign = false;
+            if (var.getParentNode().isVar() && !NodeUtil.isForIn(var.getParentNode().getParent())) {
+                Node value = var.getInitialValue();
+                assignedToUnknownValue = value != null && !NodeUtil.isLiteralValue(value, true);
             } else {
-                boolean assignedToUnknownValue = false;
-                boolean hasPropertyAssign = false;
-                if (var.getParentNode().isVar() && !NodeUtil.isForIn(var.getParentNode().getParent())) {
-                    Node value = var.getInitialValue();
-                    assignedToUnknownValue = value != null && !NodeUtil.isLiteralValue(value, true);
-                } else {
-                    // This was initialized to a function arg or a catch param
-                    // or a for...in variable.
+                // This was initialized to a function arg or a catch param
+                // or a for...in variable.
+                assignedToUnknownValue = true;
+            }
+            for (Assign assign : new ArrayList<>(assignsByVar.get(var))) { // Copy the list to avoid concurrent modification
+                if (assign.isPropertyAssign) {
+                    hasPropertyAssign = true;
+                } else if (!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(), true)) {
                     assignedToUnknownValue = true;
                 }
-                for (Assign assign : assignsByVar.get(var)) {
-                    if (assign.isPropertyAssign) {
-                        hasPropertyAssign = true;
-                    } else if (!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(), true)) {
-                        assignedToUnknownValue = true;
-                    }
-                }
-                if (assignedToUnknownValue && hasPropertyAssign) {
-                    changes = markReferencedVar(var) || changes;
-                    maybeUnreferenced.remove(current);
-                    current--;
-                }
+            }
+            if (assignedToUnknownValue && hasPropertyAssign) {
+                changes = markReferencedVar(var) || changes;
+                iter.remove();
             }
         }
-    } while (changes);
+    }
 }
