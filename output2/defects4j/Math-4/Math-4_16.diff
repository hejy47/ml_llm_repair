--- org/apache/commons/math3/geometry/euclidean/threed/SubLine.java@intersection
+++ org/apache/commons/math3/geometry/euclidean/threed/SubLine.java@intersection
@@ -1,6 +1,9 @@
 public Vector3D intersection(final SubLine subLine, final boolean includeEndPoints) {
     // compute the intersection on infinite line
     Vector3D v1D = line.intersection(subLine.line);
+    if(v1D == null){
+        return null;
+    }
     // check location of point with respect to first sub-line
     Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
     // check location of point with respect to second sub-line
--- org/apache/commons/math3/geometry/euclidean/twod/SubLine.java@intersection
+++ org/apache/commons/math3/geometry/euclidean/twod/SubLine.java@intersection
@@ -4,6 +4,9 @@
     Line line2 = (Line) subLine.getHyperplane();
     // compute the intersection on infinite line
     Vector2D v2D = line1.intersection(line2);
+    if(v2D == null){
+        return null;
+    }
     // check location of point with respect to first sub-line
     Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
     // check location of point with respect to second sub-line
