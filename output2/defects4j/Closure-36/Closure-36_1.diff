--- com/google/javascript/jscomp/InlineVariables.java@canInline
+++ com/google/javascript/jscomp/InlineVariables.java@canInline
@@ -8,7 +8,7 @@
     if (declaration != initialization && !initialization.getGrandparent().isExprResult()) {
         return false;
     }
-    // Be very conservative and do no cross control structures or
+    // Be very conservative and do not cross control structures or
     // scope boundaries
     if (declaration.getBasicBlock() != initialization.getBasicBlock() || declaration.getBasicBlock() != reference.getBasicBlock()) {
         return false;
@@ -23,17 +23,18 @@
     //   f(a)
     // is ok.
     Node value = initialization.getAssignedValue();
-    Preconditions.checkState(value != null);
+    if (value == null) {
+        return false;
+    }
     if (value.isGetProp() && reference.getParent().isCall() && reference.getParent().getFirstChild() == reference.getNode()) {
         return false;
     }
     if (value.isFunction()) {
-        Node callNode = reference.getParent();
         if (reference.getParent().isCall()) {
             CodingConvention convention = compiler.getCodingConvention();
             // Bug 2388531: Don't inline subclass definitions into class defining
             // calls as this confused class removing logic.
-            SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);
+            SubclassRelationship relationship = convention.getClassesDefinedByCall(reference.getParent());
             if (relationship != null) {
                 return false;
             }
