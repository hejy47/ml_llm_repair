--- com/google/javascript/jscomp/ProcessCommonJSModules.java@normalizeSourceName
+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@normalizeSourceName
@@ -1,8 +1,8 @@
 private String normalizeSourceName(String filename) {
     // The DOS command shell will normalize "/" to "\", so we have to
     // wrestle it back.
-    if (filename.indexOf(filenamePrefix) == 0) {
+    if (filename.startsWith(filenamePrefix)) {
         filename = filename.substring(filenamePrefix.length());
     }
-    return filename;
+    return filename.replace("\\", "/");
 }
--- com/google/javascript/jscomp/ProcessCommonJSModules.java@visitScript
+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@visitScript
@@ -3,13 +3,13 @@
     String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));
     script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()).copyInformationFromForTree(script));
     if (reportDependencies) {
-        CompilerInput ci = t.getInput();
-        ci.addProvide(moduleName);
+        compiler.getInput(moduleName).addProvide(moduleName); // update the CompilerInput object directly
         JSModule m = new JSModule(moduleName);
-        m.addAndOverrideModule(ci);
+        m.addAndOverrideModule(compiler.getInput(moduleName));
         module = m;
     }
-    script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name("goog"), IR.string("provide")), IR.string(moduleName))).copyInformationFromForTree(script));
+    Node provide = IR.exprResult(IR.call(IR.getprop(IR.name("goog"), IR.string("provide")), IR.string(moduleName))).copyInformationFromForTree(script);
+    script.addChildToFront(provide);
     emitOptionalModuleExportsOverride(script, moduleName);
     // Rename vars to not conflict in global scope.
     NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName));
