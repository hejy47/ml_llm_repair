--- com/google/javascript/jscomp/ProcessCommonJSModules.java@normalizeSourceName
+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@normalizeSourceName
@@ -1,8 +1,9 @@
 private String normalizeSourceName(String filename) {
     // The DOS command shell will normalize "/" to "\", so we have to
     // wrestle it back.
-    if (filename.indexOf(filenamePrefix) == 0) {
+    if (filename.startsWith(filenamePrefix)) { // Use startsWith() instead of indexOf() == 0
         filename = filename.substring(filenamePrefix.length());
     }
+    filename = filename.replace("\\", "/"); // Add this line to replace backslashes with forward slashes
     return filename;
 }
--- com/google/javascript/jscomp/ProcessCommonJSModules.java@visitScript
+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@visitScript
@@ -1,5 +1,5 @@
 private void visitScript(NodeTraversal t, Node script) {
-    Preconditions.checkArgument(scriptNodeCount == 1, "ProcessCommonJSModules supports only one invocation per " + "CompilerInput / script node");
+    Preconditions.checkState(scriptNodeCount == 1, "ProcessCommonJSModules supports only one invocation per " + "CompilerInput / script node"); // Use checkState() instead of checkArgument()
     String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));
     script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()).copyInformationFromForTree(script));
     if (reportDependencies) {
@@ -13,5 +13,5 @@
     emitOptionalModuleExportsOverride(script, moduleName);
     // Rename vars to not conflict in global scope.
     NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName));
-    compiler.reportCodeChange();
+    compiler.reportChangeToEnclosingScope(script); // Use reportChangeToEnclosingScope() instead of reportCodeChange()
 }
