--- com/google/javascript/jscomp/FunctionToBlockMutator.java@makeLocalNamesUnique
+++ com/google/javascript/jscomp/FunctionToBlockMutator.java@makeLocalNamesUnique
@@ -3,4 +3,5 @@
     // Make variable names unique to this instance.
     NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "inline_", isCallInLoop)));
     // Make label names unique to this instance.
+    NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new LabelRenamer(idSupplier)));
 }
--- com/google/javascript/jscomp/RenameLabels.java@visitLabel
+++ com/google/javascript/jscomp/RenameLabels.java@visitLabel
@@ -10,6 +10,7 @@
             // ... and it is used, give it the short name.
             nameNode.setString(newName);
             compiler.reportCodeChange();
+            li.renamed = true; // Flag the label as renamed
         }
     } else {
         // ... and it is not referenced, just remove it.
@@ -20,7 +21,10 @@
             NodeUtil.tryMergeBlock(newChild);
         }
         compiler.reportCodeChange();
+        removeFromLabels(name); // Remove the label from the list of labels
     }
-    // Remove the label from the current stack of labels.
-    namespaceStack.peek().renameMap.remove(name);
+    // Remove the label from the current stack of labels, unless it was renamed
+    if (!li.renamed) {
+      namespaceStack.peek().renameMap.remove(name);
+    }
 }
