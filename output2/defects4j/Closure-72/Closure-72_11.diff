--- com/google/javascript/jscomp/FunctionToBlockMutator.java@makeLocalNamesUnique
+++ com/google/javascript/jscomp/FunctionToBlockMutator.java@makeLocalNamesUnique
@@ -1,6 +1,7 @@
 private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {
     Supplier<String> idSupplier = compiler.getUniqueNameIdSupplier();
     // Make variable names unique to this instance.
-    NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "inline_", isCallInLoop)));
+    MakeDeclaredNamesUnique makeDeclaredNamesUnique = new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "inline_", isCallInLoop));
+    makeDeclaredNamesUnique.process(null, fnNode);
     // Make label names unique to this instance.
 }
--- com/google/javascript/jscomp/RenameLabels.java@visitLabel
+++ com/google/javascript/jscomp/RenameLabels.java@visitLabel
@@ -9,17 +9,16 @@
         if (!name.equals(newName)) {
             // ... and it is used, give it the short name.
             nameNode.setString(newName);
-            compiler.reportCodeChange();
+            compiler.reportChangeToEnclosingScope(node);
         }
     } else {
         // ... and it is not referenced, just remove it.
         Node newChild = node.getLastChild();
-        node.removeChild(newChild);
-        parent.replaceChild(node, newChild);
+        NodeUtil.removeChild(parent, node);
         if (newChild.getType() == Token.BLOCK) {
             NodeUtil.tryMergeBlock(newChild);
         }
-        compiler.reportCodeChange();
+        compiler.reportChangeToEnclosingScope(parent);
     }
     // Remove the label from the current stack of labels.
     namespaceStack.peek().renameMap.remove(name);
