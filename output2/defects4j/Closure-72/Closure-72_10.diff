--- com/google/javascript/jscomp/FunctionToBlockMutator.java@makeLocalNamesUnique
+++ com/google/javascript/jscomp/FunctionToBlockMutator.java@makeLocalNamesUnique
@@ -1,6 +1,6 @@
 private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {
-    Supplier<String> idSupplier = compiler.getUniqueNameIdSupplier();
+    IdGenerator idGenerator = new UniqueNameGenerator();
     // Make variable names unique to this instance.
-    NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "inline_", isCallInLoop)));
+    NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idGenerator, "inline_", isCallInLoop)));
     // Make label names unique to this instance.
 }
--- com/google/javascript/jscomp/RenameLabels.java@visitLabel
+++ com/google/javascript/jscomp/RenameLabels.java@visitLabel
@@ -8,7 +8,12 @@
         String newName = getNameForId(li.id);
         if (!name.equals(newName)) {
             // ... and it is used, give it the short name.
-            nameNode.setString(newName);
+            Node newLabelNode = IR.label().setName(newName);
+            while (node.hasChildren()) {
+                newLabelNode.addChildToFront(node.removeFirstChild());
+            }
+            parent.replaceChild(node, newLabelNode);
+            node = newLabelNode;
             compiler.reportCodeChange();
         }
     } else {
