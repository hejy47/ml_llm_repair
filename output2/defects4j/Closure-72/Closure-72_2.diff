--- com/google/javascript/jscomp/FunctionToBlockMutator.java@makeLocalNamesUnique
+++ com/google/javascript/jscomp/FunctionToBlockMutator.java@makeLocalNamesUnique
@@ -3,4 +3,11 @@
     // Make variable names unique to this instance.
     NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "inline_", isCallInLoop)));
     // Make label names unique to this instance.
+    if (fnNode.isFunction()) {
+        Node body = fnNode.getLastChild();
+        LabelNameFinder labelFinder = new LabelNameFinder();
+        NodeTraversal.traverseEs6(compiler, body, labelFinder);
+        Map<String, String> labelMappings = getNewNameMappings(labelFinder.getLabelNames(), idSupplier);
+        NodeTraversal.traverseEs6(compiler, body, new RenameLabels(labelMappings));
+    }
 }
--- com/google/javascript/jscomp/RenameLabels.java@visitLabel
+++ com/google/javascript/jscomp/RenameLabels.java@visitLabel
@@ -13,8 +13,7 @@
         }
     } else {
         // ... and it is not referenced, just remove it.
-        Node newChild = node.getLastChild();
-        node.removeChild(newChild);
+        Node newChild = node.getLastChild().detachFromParent();
         parent.replaceChild(node, newChild);
         if (newChild.getType() == Token.BLOCK) {
             NodeUtil.tryMergeBlock(newChild);
@@ -22,5 +21,7 @@
         compiler.reportCodeChange();
     }
     // Remove the label from the current stack of labels.
-    namespaceStack.peek().renameMap.remove(name);
+    if (!li.referenced) {
+        namespaceStack.peek().renameMap.remove(name);
+    }
 }
