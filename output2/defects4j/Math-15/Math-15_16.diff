--- org/apache/commons/math3/util/FastMath.java@pow
+++ org/apache/commons/math3/util/FastMath.java@pow
@@ -1,5 +1,4 @@
 public static double pow(double x, double y) {
-    final double[] lns = new double[2];
     if (y == 0.0) {
         return 1.0;
     }
@@ -78,53 +77,21 @@
             return 0.0;
         }
     }
-        if (x < 0) {
-        // y is an even integer in this case
-        if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
-            return pow(-x, y);
-        }
-        if (y == (long) y) {
-            // If y is an integer
-            return ((long) y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
-        } else {
+    if (x < 0) {
+        if (y != (long) y || y % 2 == 0) {
+            // x is negative, y is not integer, or y is even
             return Double.NaN;
         }
+        // x is negative, y is an odd integer, so flip the sign of the result
+        return -pow(-x, y);
     }
-        double ya;
-    double yb;
-    if (y < 8e298 && y > -8e298) {
-        double tmp1 = y * HEX_40000000;
-        ya = y + tmp1 - tmp1;
-        yb = y - ya;
-    } else {
-        double tmp1 = y * 9.31322574615478515625E-10;
-        double tmp2 = tmp1 * 9.31322574615478515625E-10;
-        ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
-        yb = y - ya;
+    double result = 1.0;
+    while (y != 0) {
+        if ((y & 1) == 1) {
+            result *= x;
+        }
+        x *= x;
+        y >>= 1;
     }
-        final double lores = log(x, lns);
-    if (Double.isInfinite(lores)) {
-        // don't allow this to be converted to NaN
-        return lores;
-    }
-    double lna = lns[0];
-    double lnb = lns[1];
-        double tmp1 = lna * HEX_40000000;
-    double tmp2 = lna + tmp1 - tmp1;
-    lnb += lna - tmp2;
-    lna = tmp2;
-    // y*ln(x) = (aa+ab)
-    final double aa = lna * ya;
-    final double ab = lna * yb + lnb * ya + lnb * yb;
-    lna = aa + ab;
-    lnb = -(lna - aa - ab);
-    double z = 1.0 / 120.0;
-    z = z * lnb + (1.0 / 24.0);
-    z = z * lnb + (1.0 / 6.0);
-    z = z * lnb + 0.5;
-    z = z * lnb + 1.0;
-    z = z * lnb;
-    final double result = exp(lna, z, null);
-    //result = result + result * z;
     return result;
 }
