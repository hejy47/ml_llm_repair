--- com/google/javascript/jscomp/ScopedAliases.java@AliasedTypeNode
+++ com/google/javascript/jscomp/ScopedAliases.java@AliasedTypeNode
@@ -1,4 +1,4 @@
 AliasedTypeNode(Node typeReference, String aliasName) {
-    this.typeReference = typeReference;
+    this.typeReference = typeReference.cloneTree();
     this.aliasName = aliasName;
 }
--- com/google/javascript/jscomp/ScopedAliases.java@applyAlias
+++ com/google/javascript/jscomp/ScopedAliases.java@applyAlias
@@ -1,4 +1,5 @@
 @Override
 public void applyAlias() {
     typeReference.setString(aliasName);
+    typeReference.removeChildren(); // remove children of the type reference node to prevent memory leaks
 }
--- com/google/javascript/jscomp/ScopedAliases.java@fixTypeNode
+++ com/google/javascript/jscomp/ScopedAliases.java@fixTypeNode
@@ -9,6 +9,8 @@
         Var aliasVar = aliases.get(baseName);
         if (aliasVar != null) {
             Node aliasedNode = aliasVar.getInitialValue();
+            Node clonedTypeNode = typeNode.cloneTree(); // clone the type node to prevent modifying the original tree
+            aliasedNode.replaceWith(clonedTypeNode); // replace the alias node with the cloned type node
             aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));
         }
     }
