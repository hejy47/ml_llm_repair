--- com/google/javascript/jscomp/ScopedAliases.java@AliasedTypeNode
+++ com/google/javascript/jscomp/ScopedAliases.java@AliasedTypeNode
@@ -1,4 +1,4 @@
 AliasedTypeNode(Node typeReference, String aliasName) {
-    this.typeReference = typeReference;
+    this.typeReference = typeReference.clone(); // Use .clone() to avoid mutating original object
     this.aliasName = aliasName;
 }
--- com/google/javascript/jscomp/ScopedAliases.java@applyAlias
+++ com/google/javascript/jscomp/ScopedAliases.java@applyAlias
@@ -1,4 +1,5 @@
 @Override
 public void applyAlias() {
     typeReference.setString(aliasName);
+    typeReference.setType(Type.ALIAS); // Set type as alias
 }
--- com/google/javascript/jscomp/ScopedAliases.java@fixTypeNode
+++ com/google/javascript/jscomp/ScopedAliases.java@fixTypeNode
@@ -1,5 +1,5 @@
 private void fixTypeNode(Node typeNode) {
-    if (typeNode.isString()) {
+    if (typeNode.getType() == Type.STRING) { // Use type checking instead of isString()
         String name = typeNode.getString();
         int endIndex = name.indexOf('.');
         if (endIndex == -1) {
@@ -9,7 +9,8 @@
         Var aliasVar = aliases.get(baseName);
         if (aliasVar != null) {
             Node aliasedNode = aliasVar.getInitialValue();
-            aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));
+            Node aliasedTypeNode = new AliasedTypeNode(aliasedNode, name.substring(endIndex)); // Create new AliasedTypeNode
+            aliasUsages.add(aliasedTypeNode);
         }
     }
     for (Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) {
