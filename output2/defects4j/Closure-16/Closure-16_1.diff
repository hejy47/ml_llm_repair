--- com/google/javascript/jscomp/ScopedAliases.java@AliasedTypeNode
+++ com/google/javascript/jscomp/ScopedAliases.java@AliasedTypeNode
@@ -1,4 +1,4 @@
 AliasedTypeNode(Node typeReference, String aliasName) {
-    this.typeReference = typeReference;
+    this.typeReference = typeReference.cloneTree(); // fix: create a new copy of the node to avoid aliasing
     this.aliasName = aliasName;
 }
--- com/google/javascript/jscomp/ScopedAliases.java@applyAlias
+++ com/google/javascript/jscomp/ScopedAliases.java@applyAlias
@@ -1,4 +1,5 @@
 @Override
 public void applyAlias() {
     typeReference.setString(aliasName);
+    typeReference.setCharn(-1); // fix: reset the char position to avoid unexpected behavior
 }
--- com/google/javascript/jscomp/ScopedAliases.java@fixTypeNode
+++ com/google/javascript/jscomp/ScopedAliases.java@fixTypeNode
@@ -8,11 +8,15 @@
         String baseName = name.substring(0, endIndex);
         Var aliasVar = aliases.get(baseName);
         if (aliasVar != null) {
-            Node aliasedNode = aliasVar.getInitialValue();
-            aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));
+            Node aliasedNode = aliasVar.getInitialValue().cloneTree(); // fix: create a new copy of the node to avoid aliasing
+            aliasUsages.add(new AliasedTypeNode(aliasedNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));
+        } else {
+            aliasUsages.add(new AliasedTypeNode(typeNode.cloneTree(), name)); // fix: create a new copy of the node if there are no aliases
+        }
+    } else {
+        Node clonedNode = typeNode.cloneTree(); // fix: create a new copy of the node to avoid aliasing
+        for (Node child = clonedNode.getFirstChild(); child != null; child = child.getNext()) {
+            fixTypeNode(child);
         }
     }
-    for (Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) {
-        fixTypeNode(child);
-    }
 }
