--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,6 +1,6 @@
 public int compareTo(DurationField durationField) {
-    if (durationField.isSupported()) {
-        return 1;
+    if (durationField == null || !durationField.isSupported()) {
+        return -1;
     }
     return 0;
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -2,54 +2,28 @@
     super();
     chronology = DateTimeUtils.getChronology(chronology).withUTC();
     iChronology = chronology;
-    if (types == null) {
-        throw new IllegalArgumentException("Types array must not be null");
-    }
-    if (values == null) {
-        throw new IllegalArgumentException("Values array must not be null");
-    }
-    if (values.length != types.length) {
-        throw new IllegalArgumentException("Values array must be the same length as the types array");
-    }
-    if (types.length == 0) {
-        iTypes = types;
-        iValues = values;
-        return;
+    if (types == null || values == null || values.length != types.length || types.length == 0) {
+        throw new IllegalArgumentException("Invalid input arguments");
     }
     for (int i = 0; i < types.length; i++) {
         if (types[i] == null) {
             throw new IllegalArgumentException("Types array must not contain null: index " + i);
         }
-    }
-    DurationField lastUnitField = null;
-    for (int i = 0; i < types.length; i++) {
-        DateTimeFieldType loopType = types[i];
-        DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
         if (i > 0) {
-            int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0) {
-                throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-            } else if (compare == 0) {
-                if (types[i - 1].getRangeDurationType() == null) {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
-                    }
-                } else {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
-                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                    if (lastRangeField.compareTo(loopRangeField) < 0) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    if (lastRangeField.compareTo(loopRangeField) == 0) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
-                    }
+            DurationFieldType prevType = types[i - 1];
+            DurationFieldType currType = types[i];
+            if (prevType.compareTo(currType) < 0 || (prevType == currType && prevType.getRangeDurationType() == null)) {
+                throw new IllegalArgumentException("Types array must be in order largest-smallest: " + prevType.getName() + " < " + currType.getName());
+            } else if (prevType == currType) {
+                DurationField prevRangeField = prevType.getRangeDurationType().getField(iChronology);
+                DurationField currRangeField = currType.getRangeDurationType().getField(iChronology);
+                if (prevRangeField.compareTo(currRangeField) < 0) {
+                    throw new IllegalArgumentException("Types array must be in order largest-smallest: " + prevType.getName() + " < " + currType.getName());
+                } else if (prevRangeField.compareTo(currRangeField) == 0) {
+                    throw new IllegalArgumentException("Types array must not contain duplicate: " + prevType.getName() + " and " + currType.getName());
                 }
             }
         }
-        lastUnitField = loopUnitField;
     }
     iTypes = (DateTimeFieldType[]) types.clone();
     chronology.validate(this, values);
