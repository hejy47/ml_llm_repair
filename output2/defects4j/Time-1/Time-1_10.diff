--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,6 +1,10 @@
 public int compareTo(DurationField durationField) {
-    if (durationField.isSupported()) {
-        return 1;
+    if (this == durationField) {
+        return 0;
+    } else if (durationField.isSupported()) {
+        return -1;
+    } else {
+        throw new IllegalArgumentException("The field " + durationField.getName()
+                + " is not supported by this duration");
     }
-    return 0;
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -21,35 +21,49 @@
             throw new IllegalArgumentException("Types array must not contain null: index " + i);
         }
     }
-    DurationField lastUnitField = null;
+    DurationFieldType lastType = null;
     for (int i = 0; i < types.length; i++) {
         DateTimeFieldType loopType = types[i];
-        DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+        DurationFieldType loopFieldType = loopType.getDurationType();
         if (i > 0) {
-            int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0) {
-                throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-            } else if (compare == 0) {
-                if (types[i - 1].getRangeDurationType() == null) {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
+            if (lastType.isPrecise() && loopFieldType.isPrecise()) {
+                if (lastType.compareTo(loopFieldType) < 0) {
+                    throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
+                } else if (lastType == loopFieldType) {
+                    throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
+                }
+            } else {
+                int cmp = lastType.compareTo(loopFieldType);
+                if (cmp < 0) {
+                    if (lastType.getRangeDurationType().compareTo(loopFieldType) < 0) {
+                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
+                    }
+                } else if (cmp == 0) {
+                    if (types[i - 1].getRangeDurationType() == null) {
+                        if (loopType.getRangeDurationType() == null) {
+                            throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
+                        }
+                    } else {
+                        if (loopType.getRangeDurationType() == null) {
+                            throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
+                        }
+                        DurationFieldType lastRangeField = types[i - 1].getRangeDurationType();
+                        DurationFieldType loopRangeField = loopType.getRangeDurationType();
+                        if (lastRangeField.compareTo(loopRangeField) < 0) {
+                            throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
+                        }
+                        if (lastRangeField == loopRangeField) {
+                            throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
+                        }
                     }
                 } else {
-                    if (loopType.getRangeDurationType() == null) {
+                    if (lastFieldType.compareTo(loopType.getRangeDurationType()) > 0) {
                         throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
-                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                    if (lastRangeField.compareTo(loopRangeField) < 0) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    if (lastRangeField.compareTo(loopRangeField) == 0) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
                     }
                 }
             }
         }
-        lastUnitField = loopUnitField;
+        lastType = loopFieldType;
     }
     iTypes = (DateTimeFieldType[]) types.clone();
     chronology.validate(this, values);
