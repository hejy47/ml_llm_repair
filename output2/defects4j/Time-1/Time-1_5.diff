--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,6 +1,7 @@
 public int compareTo(DurationField durationField) {
-    if (durationField.isSupported()) {
-        return 1;
+    if (durationField == null || !durationField.isSupported()) {
+        return -1; // return -1 as this field is smaller than the given durationField
+    } else {
+        return 0; // return 0 as both fields are of the same type
     }
-    return 0;
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -16,39 +16,21 @@
         iValues = values;
         return;
     }
+    DateTimeFieldType lastType = null;
+    DurationField lastUnitField = null;
     for (int i = 0; i < types.length; i++) {
         if (types[i] == null) {
             throw new IllegalArgumentException("Types array must not contain null: index " + i);
         }
-    }
-    DurationField lastUnitField = null;
-    for (int i = 0; i < types.length; i++) {
         DateTimeFieldType loopType = types[i];
         DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
-        if (i > 0) {
+        if (lastType != null) {
             int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0) {
-                throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-            } else if (compare == 0) {
-                if (types[i - 1].getRangeDurationType() == null) {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
-                    }
-                } else {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
-                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                    if (lastRangeField.compareTo(loopRangeField) < 0) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    if (lastRangeField.compareTo(loopRangeField) == 0) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
-                    }
-                }
+            if (compare > 0 || (compare == 0 && lastType.compareTo(loopType) > 0)) {
+                throw new IllegalArgumentException("Types array must be in order largest-smallest: " + lastType.getName() + " < " + loopType.getName());
             }
         }
+        lastType = loopType;
         lastUnitField = loopUnitField;
     }
     iTypes = (DateTimeFieldType[]) types.clone();
