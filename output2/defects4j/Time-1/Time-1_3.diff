--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,6 +1,6 @@
 public int compareTo(DurationField durationField) {
-    if (durationField.isSupported()) {
-        return 1;
+    if (durationField == null || !durationField.isSupported()) {
+        return -1;
     }
     return 0;
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -21,35 +21,37 @@
             throw new IllegalArgumentException("Types array must not contain null: index " + i);
         }
     }
+    DurationFieldType lastFieldType = null;
     DurationField lastUnitField = null;
     for (int i = 0; i < types.length; i++) {
         DateTimeFieldType loopType = types[i];
-        DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
-        if (i > 0) {
-            int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0) {
-                throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-            } else if (compare == 0) {
-                if (types[i - 1].getRangeDurationType() == null) {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
-                    }
-                } else {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
-                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                    if (lastRangeField.compareTo(loopRangeField) < 0) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    if (lastRangeField.compareTo(loopRangeField) == 0) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
-                    }
+        DurationFieldType loopFieldType = loopType.getDurationType();
+        if (lastFieldType != null) {
+            if (lastFieldType.isPrecise() && !loopFieldType.isPrecise()) {
+                throw new IllegalArgumentException("Types array must be precise until largest imprecise type: " + lastFieldType);
+            }
+            if (lastUnitField.compareTo(loopType.getDurationField()) < 0) {
+                throw new IllegalArgumentException("Types array must be in order largest-smallest: " + lastFieldType.getName() + " < " + loopFieldType.getName());
+            }
+            if (lastUnitField.compareTo(loopType.getDurationField()) == 0) {
+                if (lastFieldType.equals(loopFieldType)) {
+                    throw new IllegalArgumentException("Types array must not contain duplicate: " + lastFieldType.getName() + " and " + loopFieldType.getName());
+                }
+                if (lastFieldType.getRangeDurationType() == null) {
+                    throw new IllegalArgumentException("Types array must not contain duplicate: " + lastFieldType.getName() + " and " + loopFieldType.getName());
+                }
+                DurationField lastRangeField = lastFieldType.getRangeDurationType().getField(iChronology);
+                DurationField loopRangeField = loopFieldType.getRangeDurationType().getField(iChronology);
+                if (lastRangeField.compareTo(loopRangeField) < 0) {
+                    throw new IllegalArgumentException("Types array must be in order largest-smallest: " + lastFieldType.getName() + " < " + loopFieldType.getName());
+                }
+                if (lastRangeField.compareTo(loopRangeField) == 0) {
+                    throw new IllegalArgumentException("Types array must not contain duplicate: " + lastFieldType.getName() + " and " + loopFieldType.getName());
                 }
             }
         }
-        lastUnitField = loopUnitField;
+        lastFieldType = loopFieldType;
+        lastUnitField = loopType.getDurationField();
     }
     iTypes = (DateTimeFieldType[]) types.clone();
     chronology.validate(this, values);
