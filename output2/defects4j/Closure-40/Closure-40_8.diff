--- com/google/javascript/jscomp/NameAnalyzer.java@visit
+++ com/google/javascript/jscomp/NameAnalyzer.java@visit
@@ -11,7 +11,7 @@
             NameInformation ns = createNameInformation(t, nameNode, n);
             if (ns != null) {
                 JsName nameInfo = getName(nameNode.getString(), true);
-                recordSet(nameInfo.name, nameNode);
+                recordSet(nameInfo.name, n);
             }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
             NameInformation ns = createNameInformation(t, n, parent);
@@ -21,23 +21,23 @@
         }
     }
     // Record assignments and call sites
-    if (n.isAssign()) {
-        Node nameNode = n.getFirstChild();
-        NameInformation ns = createNameInformation(t, nameNode, n);
+    if (n.isAssign() && n.getFirstChild().isName()) { // Ensure first child of assignment is a name node
+        String name = n.getFirstChild().getString();
+        NameInformation ns = createNameInformation(t, n.getFirstChild(), n);
         if (ns != null) {
             if (ns.isPrototype) {
                 recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
             } else {
-                recordSet(ns.name, nameNode);
+                recordSet(ns.name, n);
             }
         }
-    } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
-        NameInformation ns = createNameInformation(t, nameNode, n);
+    } else if (n.isCall() && n.getFirstChild().isName()) { // Ensure first child of call is a name node
+        String name = n.getFirstChild().getString();
+        NameInformation ns = createNameInformation(t, n.getFirstChild(), n);
         if (ns != null && ns.onlyAffectsClassDef) {
-            JsName name = getName(ns.name, false);
-            if (name != null) {
-                refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));
+            JsName jsName = getName(name, false); // Use the string name, not the name node, to retrieve name information
+            if (jsName != null) {
+                refNodes.add(new ClassDefiningFunctionNode(jsName, n, parent, parent.getParent()));
             }
         }
     }
