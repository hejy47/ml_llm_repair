--- com/google/javascript/jscomp/NodeTraversal.java@traverseFunction
+++ com/google/javascript/jscomp/NodeTraversal.java@traverseFunction
@@ -1,15 +1,14 @@
 private void traverseFunction(Node n, Node parent) {
     Preconditions.checkState(n.getChildCount() == 3);
-    Preconditions.checkState(n.isFunction());
+    Preconditions.checkState(NodeUtil.isFunctionDeclaration(n) || NodeUtil.isFunctionExpression(n));
     final Node fnName = n.getFirstChild();
-    boolean isFunctionExpression = (parent != null) && NodeUtil.isFunctionExpression(n);
-    if (!isFunctionExpression) {
+    if (NodeUtil.isFunctionDeclaration(n)) {
         // Functions declarations are in the scope containing the declaration.
         traverseBranch(fnName, n);
     }
     curNode = n;
     pushScope(n);
-    if (isFunctionExpression) {
+    if (NodeUtil.isFunctionExpression(n)) {
         // Function expression names are only accessible within the function
         // scope.
         traverseBranch(fnName, n);
--- com/google/javascript/jscomp/parsing/IRFactory.java@processFunctionNode
+++ com/google/javascript/jscomp/parsing/IRFactory.java@processFunctionNode
@@ -16,41 +16,29 @@
     Node node = newNode(Token.FUNCTION);
     Node newName = transform(name);
     if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
         newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
+        // Get the character position of the left parenthesis instead of the identifier
+        int lpColumn = functionNode.fn.getToken().getCharPosition() + functionNode.fn.getLength();
+        newName.setCharno(lpColumn);
         maybeSetLengthFrom(newName, name);
     }
     node.addChildToBack(newName);
     Node lp = newNode(Token.PARAM_LIST);
-    // The left paren's complicated because it's not represented by an
-    // AstNode, so there's nothing that has the actual line number that it
-    // appeared on.  We know the paren has to appear on the same line as the
-    // function name (or else a semicolon will be inserted.)  If there's no
-    // function name, assume the paren was on the same line as the function.
-    // TODO(bowdidge): Mark line number of paren correctly.
-    Name fnName = functionNode.getFunctionName();
-    if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
-    } else {
-        lp.setLineno(functionNode.getLineno());
-    }
-    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
-    lp.setCharno(position2charno(lparenCharno));
+    lp.setLineno(functionNode.getLineno());
+    int lparenCharno = -1;
     for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
+        if (lparenCharno == -1) {
+            lparenCharno = param.getPosition() + param.getLength();
+        }
     }
+    lp.setCharno(lparenCharno);
     node.addChildToBack(lp);
     Node bodyNode = transform(functionNode.getBody());
     // When in ideMode Rhino tries to parse some constructs the compiler
     // doesn't support, repair it here. see Rhino's
     // Parser#parseFunctionBodyExpr.
-    parseDirectives(bodyNode);
+    parseDirectives(bodyNode, functionNode.getFunctionType());
     node.addChildToBack(bodyNode);
     return node;
 }
