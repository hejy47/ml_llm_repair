--- com/google/javascript/jscomp/NodeTraversal.java@traverseFunction
+++ com/google/javascript/jscomp/NodeTraversal.java@traverseFunction
@@ -12,7 +12,7 @@
     if (isFunctionExpression) {
         // Function expression names are only accessible within the function
         // scope.
-        traverseBranch(fnName, n);
+        pushScope(fnName);
     }
     final Node args = fnName.getNext();
     final Node body = args.getNext();
--- com/google/javascript/jscomp/parsing/IRFactory.java@processFunctionNode
+++ com/google/javascript/jscomp/parsing/IRFactory.java@processFunctionNode
@@ -1,19 +1,19 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
     Name name = functionNode.getFunctionName();
-    Boolean isUnnamedFunction = false;
+    boolean isUnnamedFunction = false;
     if (name == null) {
         int functionType = functionNode.getFunctionType();
         if (functionType != FunctionNode.FUNCTION_EXPRESSION) {
             errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
             // Return the bare minimum to put the AST in a valid state.
-            return newNode(Token.EXPR_RESULT, Node.newNumber(0));
+            return newNumber(0);
         }
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
     }
-    Node node = newNode(Token.FUNCTION);
+    Node node = new Node(Token.FUNCTION);
     Node newName = transform(name);
     if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
@@ -23,11 +23,11 @@
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
+        newName.setCharno(position2Charno(lpColumn));
         maybeSetLengthFrom(newName, name);
     }
     node.addChildToBack(newName);
-    Node lp = newNode(Token.PARAM_LIST);
+    Node lp = new Node(Token.PARAM_LIST);
     // The left paren's complicated because it's not represented by an
     // AstNode, so there's nothing that has the actual line number that it
     // appeared on.  We know the paren has to appear on the same line as the
@@ -37,11 +37,11 @@
     Name fnName = functionNode.getFunctionName();
     if (fnName != null) {
         lp.setLineno(fnName.getLineno());
+        lp.setCharno(fnName.getCharno() + fnName.getLength());
     } else {
         lp.setLineno(functionNode.getLineno());
+        lp.setCharno(newName.getCharno() + newName.getLength());
     }
-    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
-    lp.setCharno(position2charno(lparenCharno));
     for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
     }
