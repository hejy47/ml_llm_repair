--- org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java@translate
+++ org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java@translate
@@ -1,30 +1,33 @@
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-    // TODO: Protect from ArrayIndexOutOfBounds
-    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
-        int start = index + 2;
-        boolean isHex = false;
-        char firstChar = input.charAt(start);
-        if (firstChar == 'x' || firstChar == 'X') {
-            start++;
-            isHex = true;
+    // Protect from ArrayIndexOutOfBounds
+    if (index >= input.length() - 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+    int start = index + 2;
+    boolean isHex = false;
+    char firstChar = input.charAt(start);
+    if (firstChar == 'x' || firstChar == 'X') {
+        start++;
+        isHex = true;
+    }
+    int end = start;
+    while (end < input.length() && input.charAt(end) != ';') {
+        end++;
+    }
+    if (end == input.length()) {
+        return 0;
+    }
+    int entityValue;
+    try {
+        if (isHex) {
+            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+        } else {
+            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
-        int end = start;
-        while (input.charAt(end) != ';') {
-            end++;
-        }
-        int entityValue;
-        try {
-            if (isHex) {
-                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-            } else {
-                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-            }
-        } catch (NumberFormatException nfe) {
-            return 0;
-        }
-        out.write(entityValue);
-        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+    } catch (NumberFormatException nfe) {
+        return 0;
     }
-    return 0;
+    out.write(entityValue);
+    return end - index + 1;
 }
