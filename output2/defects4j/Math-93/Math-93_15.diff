--- org/apache/commons/math/util/MathUtils.java@factorial
+++ org/apache/commons/math/util/MathUtils.java@factorial
@@ -1,7 +1,16 @@
 public static long factorial(final int n) {
-    long result = Math.round(factorialDouble(n));
+    if(n < 0){
+        throw new IllegalArgumentException("must have n >= 0 for n!");
+    }
+    if (n <= 1){
+        return 1;
+    }
+    long result = 1;
+    for (int i = 2; i <= n; i++) {
+        result *= i;
+    }
     if (result == Long.MAX_VALUE) {
         throw new ArithmeticException("factorial value is too large to fit in a long");
     }
-    return factorials[n];
+    return result;
 }
--- org/apache/commons/math/util/MathUtils.java@factorialDouble
+++ org/apache/commons/math/util/MathUtils.java@factorialDouble
@@ -1,6 +1,13 @@
 public static double factorialDouble(final int n) {
-    if (n < 0) {
+    if(n < 0){
         throw new IllegalArgumentException("must have n >= 0 for n!");
     }
-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);
+    if (n <= 1){
+        return 1;
+    }
+    double result = 1.0;
+    for (int i = 2; i <= n; i++) {
+        result *= i;
+    }
+    return result;
 }
--- org/apache/commons/math/util/MathUtils.java@factorialLog
+++ org/apache/commons/math/util/MathUtils.java@factorialLog
@@ -1,6 +1,9 @@
 public static double factorialLog(final int n) {
-    if (n < 0) {
-        throw new IllegalArgumentException("must have n > 0 for n!");
+    if(n < 0){
+        throw new IllegalArgumentException("must have n >= 0 for n!");
+    }
+    if (n <= 1){
+        return 0;
     }
     double logSum = 0;
     for (int i = 2; i <= n; i++) {
