--- com/google/javascript/jscomp/CheckGlobalThis.java@shouldTraverse
+++ com/google/javascript/jscomp/CheckGlobalThis.java@shouldTraverse
@@ -7,39 +7,22 @@
             return false;
         }
         // Don't traverse functions unless they would normally
-        // be able to have a @this annotation associated with them. e.g.,
-        // var a = function() { }; // or
-        // function a() {} // or
-        // a.x = function() {}; // or
-        // var a = {x: function() {}};
+        // be able to have a @this annotation associated with them.
         int pType = parent.getType();
-        if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN || // object literal keys
-        pType == Token.STRING || pType == Token.NUMBER)) {
+        if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN ||
+                pType == Token.STRING || pType == Token.NUMBER ||
+                pType == Token.MEMBER_FUNCTION_DEF || pType == Token.MEMBER_VAR_DEF)) {
             return false;
         }
         // Don't traverse functions that are getting lent to a prototype.
-    }
-    if (parent != null && parent.getType() == Token.ASSIGN) {
-        Node lhs = parent.getFirstChild();
-        Node rhs = lhs.getNext();
-        if (n == lhs) {
-            // Always traverse the left side of the assignment. To handle
-            // nested assignments properly (e.g., (a = this).property = c;),
-            // assignLhsChild should not be overridden.
-            if (assignLhsChild == null) {
-                assignLhsChild = lhs;
+        if (pType == Token.ASSIGN) {
+            Node lhs = parent.getFirstChild();
+            Node rhs = lhs.getNext();
+            if (rhs == null || NodeUtil.isFunctionExpression(rhs)) {
+                return false;
             }
-        } else {
-            // Only traverse the right side if it's not an assignment to a prototype
-            // property or subproperty.
-            if (NodeUtil.isGet(lhs)) {
-                if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals("prototype")) {
-                    return false;
-                }
-                Node llhs = lhs.getFirstChild();
-                if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals("prototype")) {
-                    return false;
-                }
+            if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals("prototype")) {
+                return false;
             }
         }
     }
