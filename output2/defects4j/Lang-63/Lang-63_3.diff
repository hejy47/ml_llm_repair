--- org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
+++ org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
@@ -36,13 +36,12 @@
         days -= 1;
     }
     while (days < 0) {
-        days += 31;
-        //days += 31; // TODO: Need tests to show this is bad and the new code is good.
-        // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
-        // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
-        // Also it's contextual - if asked for no M in the format then I should probably
-        // be doing no calculating here.
-        months -= 1;
+        // Fixing the calculation of days difference between two dates.
+        // While adding the end date, add the time of day as well, 
+        // so that if the end time is before the start time, that time is not counted as a day difference
+        end.add(Calendar.DAY_OF_MONTH, -1);
+        days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);
+        months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);
     }
     while (months < 0) {
         months += 12;
