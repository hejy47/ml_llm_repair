--- org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
+++ org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
@@ -36,13 +36,10 @@
         days -= 1;
     }
     while (days < 0) {
-        days += 31;
-        //days += 31; // TODO: Need tests to show this is bad and the new code is good.
-        // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
-        // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
-        // Also it's contextual - if asked for no M in the format then I should probably
-        // be doing no calculating here.
+        int daysInMonth = end.getActualMaximum(Calendar.DAY_OF_MONTH);
+        days += daysInMonth;
         months -= 1;
+        end.add(Calendar.MONTH, -1);
     }
     while (months < 0) {
         months += 12;
--- org/apache/commons/lang/time/DurationFormatUtils.java@reduceAndCorrect
+++ org/apache/commons/lang/time/DurationFormatUtils.java@reduceAndCorrect
@@ -3,8 +3,9 @@
     int endValue = end.get(field);
     int startValue = start.get(field);
     if (endValue < startValue) {
-        int newdiff = startValue - endValue;
-        end.add(field, newdiff);
+        int max = end.getActualMaximum(field);
+        int newdiff = max - startValue + endValue + 1;
+        end.add(field, -newdiff);
         return newdiff;
     } else {
         return 0;
