--- org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
+++ org/apache/commons/lang/time/DurationFormatUtils.java@formatPeriod
@@ -7,9 +7,9 @@
     // timezones get funky around 0, so normalizing everything to GMT
     // stops the hours being off
     Calendar start = Calendar.getInstance(timezone);
-    start.setTime(new Date(startMillis));
+    start.setTimeInMillis(startMillis);
     Calendar end = Calendar.getInstance(timezone);
-    end.setTime(new Date(endMillis));
+    end.setTimeInMillis(endMillis);
     // initial estimates
     int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);
     int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);
@@ -36,13 +36,10 @@
         days -= 1;
     }
     while (days < 0) {
-        days += 31;
-        //days += 31; // TODO: Need tests to show this is bad and the new code is good.
-        // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
-        // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
-        // Also it's contextual - if asked for no M in the format then I should probably
-        // be doing no calculating here.
+        int maxDays = end.getActualMaximum(Calendar.DAY_OF_MONTH);
+        days += maxDays - start.get(Calendar.DAY_OF_MONTH) + 1;
         months -= 1;
+        start.add(Calendar.MONTH, 1);
     }
     while (months < 0) {
         months += 12;
@@ -64,7 +61,7 @@
             years = 0;
         } else {
             // TODO: this is a bit weak, needs work to know about leap years
-            days += 365 * years;
+            days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);
             years = 0;
         }
     }
