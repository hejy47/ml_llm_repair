--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,3 +1,8 @@
 public int compareTo(DurationField durationField) {
-    return 0;
+    if (durationField instanceof ZeroDurationField) {
+        return 0;
+    }
+    long thisDuration = getUnitMillis();
+    long otherDuration = durationField.getUnitMillis();
+    return Long.compare(thisDuration, otherDuration);
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -27,25 +27,21 @@
         DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
         if (i > 0) {
             int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
+            if (compare < 0 || (compare != 0 && !loopUnitField.isSupported())) {
                 throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
             } else if (compare == 0) {
-                if (types[i - 1].getRangeDurationType() == null) {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
-                    }
-                } else {
-                    if (loopType.getRangeDurationType() == null) {
-                        throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
+                if (types[i - 1].getRangeDurationType() == null && loopType.getRangeDurationType() == null) {
+                    throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
+                } else if (types[i - 1].getRangeDurationType() != null && loopType.getRangeDurationType() != null) {
                     DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
                     DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                     if (lastRangeField.compareTo(loopRangeField) < 0) {
                         throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
-                    }
-                    if (lastRangeField.compareTo(loopRangeField) == 0) {
+                    } else if (lastRangeField.compareTo(loopRangeField) == 0) {
                         throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName());
                     }
+                } else {
+                    throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
                 }
             }
         }
--- org/joda/time/Partial.java@with
+++ org/joda/time/Partial.java@with
@@ -8,23 +8,18 @@
         DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
         int[] newValues = new int[newTypes.length];
         // find correct insertion point to keep largest-smallest order
-        int i = 0;
+        int i;
         DurationField unitField = fieldType.getDurationType().getField(iChronology);
-        if (unitField.isSupported()) {
-            for (; i < iTypes.length; i++) {
-                DateTimeFieldType loopType = iTypes[i];
-                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
-                if (loopUnitField.isSupported()) {
-                    int compare = unitField.compareTo(loopUnitField);
-                    if (compare > 0) {
-                        break;
-                    } else if (compare == 0) {
-                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                        if (rangeField.compareTo(loopRangeField) > 0) {
-                            break;
-                        }
-                    }
+        for (i = 0; i < iTypes.length; i++) {
+            DateTimeFieldType loopType = iTypes[i];
+            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+            if (!loopUnitField.isSupported() || unitField.compareTo(loopUnitField) > 0) {
+                break;
+            } else if (unitField.compareTo(loopUnitField) == 0) {
+                DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
+                DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
+                if (loopRangeField == null || rangeField.compareTo(loopRangeField) > 0) {
+                    break;
                 }
             }
         }
