--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,3 +1,15 @@
 public int compareTo(DurationField durationField) {
-    return 0;
+    if (durationField instanceof PreciseDurationField) {
+        PreciseDurationField other = (PreciseDurationField) durationField;
+        long otherUnitMillis = other.getUnitMillis();
+        long thisUnitMillis = getUnitMillis();
+        if (thisUnitMillis == otherUnitMillis) {
+            return 0;
+        } else if (thisUnitMillis < otherUnitMillis) {
+            return -1;
+        } else {
+            return 1;
+        }
+    }
+    return (int) (getUnitMillis() - durationField.getUnitMillis());
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -27,7 +27,7 @@
         DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
         if (i > 0) {
             int compare = lastUnitField.compareTo(loopUnitField);
-            if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
+            if (compare < 0 || (compare == 0 && !loopUnitField.isSupported())) {
                 throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName());
             } else if (compare == 0) {
                 if (types[i - 1].getRangeDurationType() == null) {
@@ -51,7 +51,7 @@
         }
         lastUnitField = loopUnitField;
     }
-    iTypes = (DateTimeFieldType[]) types.clone();
+    iTypes = types.clone();
     chronology.validate(this, values);
-    iValues = (int[]) values.clone();
+    iValues = values.clone();
 }
