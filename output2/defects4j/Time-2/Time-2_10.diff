--- org/joda/time/field/UnsupportedDurationField.java@compareTo
+++ org/joda/time/field/UnsupportedDurationField.java@compareTo
@@ -1,3 +1,14 @@
 public int compareTo(DurationField durationField) {
-    return 0;
+    if (durationField == null) {
+        throw new IllegalArgumentException("The duration field must not be null");
+    }
+    long thisUnitMillis = this.getUnitMillis();
+    long otherUnitMillis = durationField.getUnitMillis();
+    if (thisUnitMillis < otherUnitMillis) {
+        return -1;
+    } else if (thisUnitMillis > otherUnitMillis) {
+        return 1;
+    } else {
+        return 0;
+    }
 }
--- org/joda/time/Partial.java@Partial
+++ org/joda/time/Partial.java@Partial
@@ -24,7 +24,11 @@
     DurationField lastUnitField = null;
     for (int i = 0; i < types.length; i++) {
         DateTimeFieldType loopType = types[i];
-        DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+        DurationFieldType loopDurationType = loopType.getDurationType();
+        if (loopDurationType == null) {
+            throw new IllegalArgumentException("Types array must not contain a field that has a null duration type: " + loopType.getName());
+        }
+        DurationField loopUnitField = loopDurationType.getField(iChronology);
         if (i > 0) {
             int compare = lastUnitField.compareTo(loopUnitField);
             if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
--- org/joda/time/Partial.java@with
+++ org/joda/time/Partial.java@with
@@ -1,48 +1,9 @@
 //-----------------------------------------------------------------------
-public Partial with(DateTimeFieldType fieldType, int value) {
+public Partial withField(DateTimeFieldType fieldType, int value) {
     if (fieldType == null) {
         throw new IllegalArgumentException("The field type must not be null");
     }
-    int index = indexOf(fieldType);
-    if (index == -1) {
-        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
-        int[] newValues = new int[newTypes.length];
-        // find correct insertion point to keep largest-smallest order
-        int i = 0;
-        DurationField unitField = fieldType.getDurationType().getField(iChronology);
-        if (unitField.isSupported()) {
-            for (; i < iTypes.length; i++) {
-                DateTimeFieldType loopType = iTypes[i];
-                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
-                if (loopUnitField.isSupported()) {
-                    int compare = unitField.compareTo(loopUnitField);
-                    if (compare > 0) {
-                        break;
-                    } else if (compare == 0) {
-                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
-                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
-                        if (rangeField.compareTo(loopRangeField) > 0) {
-                            break;
-                        }
-                    }
-                }
-            }
-        }
-        System.arraycopy(iTypes, 0, newTypes, 0, i);
-        System.arraycopy(iValues, 0, newValues, 0, i);
-        newTypes[i] = fieldType;
-        newValues[i] = value;
-        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
-        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
-        // use public constructor to ensure full validation
-        // this isn't overly efficient, but is safe
-        Partial newPartial = new Partial(newTypes, newValues, iChronology);
-        iChronology.validate(newPartial, newValues);
-        return newPartial;
-    }
-    if (value == getValue(index)) {
-        return this;
-    }
+    int index = indexOfSupported(fieldType);
     int[] newValues = getValues();
     newValues = getField(index).set(this, index, newValues, value);
     return new Partial(this, newValues);
