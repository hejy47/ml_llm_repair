--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow
+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow
@@ -1,20 +1,18 @@
 private Integer getPivotRow(SimplexTableau tableau, final int col) {
     // create a list of all the rows that tie for the lowest score in the minimum ratio test
     List<Integer> minRatioPositions = new ArrayList<Integer>();
-    double minRatio = Double.MAX_VALUE;
+    double minRatio = Double.POSITIVE_INFINITY;
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
         final double entry = tableau.getEntry(i, col);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             final double ratio = rhs / entry;
             // check if the entry is strictly equal to the current min ratio
-            // do not use a ulp/epsilon check
-            final int cmp = Double.compare(ratio, minRatio);
-            if (cmp == 0) {
+            if (ratio < minRatio) {
+                minRatio = ratio;
+                minRatioPositions = new ArrayList<>();
                 minRatioPositions.add(i);
-            } else if (cmp < 0) {
-                minRatio = ratio;
-                minRatioPositions = new ArrayList<Integer>();
+            } else if (Precision.equals(ratio, minRatio, maxUlps)) {
                 minRatioPositions.add(i);
             }
         }
