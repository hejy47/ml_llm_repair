--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow
+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow
@@ -5,7 +5,7 @@
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
         final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
         final double entry = tableau.getEntry(i, col);
-        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+        if (Precision.compareTo(entry, 0d, tableau.getMaxUlps()) > 0) {
             final double ratio = rhs / entry;
             // check if the entry is strictly equal to the current min ratio
             // do not use a ulp/epsilon check
@@ -28,7 +28,7 @@
             for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                 int column = i + tableau.getArtificialVariableOffset();
                 final double entry = tableau.getEntry(row, column);
-                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
+                if (Precision.equals(entry, 1d, tableau.getMaxUlps()) && row.equals(tableau.getBasicRow(column))) {
                     return row;
                 }
             }
@@ -47,7 +47,7 @@
         for (Integer row : minRatioPositions) {
             int i = tableau.getNumObjectiveFunctions();
             for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                if (row == tableau.getBasicRow(i)) {
+                if (row.equals(tableau.getBasicRow(i))) {
                     if (i < minIndex) {
                         minIndex = i;
                         minRow = row;
