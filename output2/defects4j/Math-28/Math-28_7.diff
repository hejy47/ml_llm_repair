--- org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow
+++ org/apache/commons/math3/optimization/linear/SimplexSolver.java@getPivotRow
@@ -3,31 +3,33 @@
     List<Integer> minRatioPositions = new ArrayList<Integer>();
     double minRatio = Double.MAX_VALUE;
     for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-        final double entry = tableau.getEntry(i, col);
+        double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+        double entry = tableau.getEntry(i, col);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-            final double ratio = rhs / entry;
+            double ratio = rhs / entry;
             // check if the entry is strictly equal to the current min ratio
             // do not use a ulp/epsilon check
-            final int cmp = Double.compare(ratio, minRatio);
+            int cmp = Double.compare(ratio, minRatio);
             if (cmp == 0) {
                 minRatioPositions.add(i);
             } else if (cmp < 0) {
                 minRatio = ratio;
-                minRatioPositions = new ArrayList<Integer>();
+                minRatioPositions.clear();
                 minRatioPositions.add(i);
             }
         }
     }
-    if (minRatioPositions.size() == 0) {
+    if (minRatioPositions.isEmpty()) {
         return null;
     } else if (minRatioPositions.size() > 1) {
         // there's a degeneracy as indicated by a tie in the minimum ratio test
         // 1. check if there's an artificial variable that can be forced out of the basis
         for (Integer row : minRatioPositions) {
-            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                int column = i + tableau.getArtificialVariableOffset();
-                final double entry = tableau.getEntry(row, column);
+            int offset = tableau.getArtificialVariableOffset();
+            int numArtificial = tableau.getNumArtificialVariables();
+            for (int i = 0; i < numArtificial; i++) {
+                int column = i + offset;
+                double entry = tableau.getEntry(row, column);
                 if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
                     return row;
                 }
@@ -45,12 +47,23 @@
         Integer minRow = null;
         int minIndex = tableau.getWidth();
         for (Integer row : minRatioPositions) {
-            int i = tableau.getNumObjectiveFunctions();
-            for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                if (row == tableau.getBasicRow(i)) {
-                    if (i < minIndex) {
-                        minIndex = i;
+            int start = tableau.getNumObjectiveFunctions();
+            int end = tableau.getWidth() - 1;
+            if (minRow != null) {
+                int cmp = Double.compare(tableau.getEntry(row, start + minIndex),
+                        tableau.getEntry(minRow, start + minIndex));
+                if (cmp < 0) {
+                    minIndex = tableau.getBasicColumn(row);
+                    minRow = row;
+                } else if (cmp > 0) {
+                    continue;
+                }
+            } else {
+                for (int i = start; i < end; i++) {
+                    if (tableau.getEntry(row, i) != 0) {
+                        minIndex = i - start;
                         minRow = row;
+                        break;
                     }
                 }
             }
