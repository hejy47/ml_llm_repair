--- com/google/javascript/jscomp/PeepholeOptimizationsPass.java@traverse
+++ com/google/javascript/jscomp/PeepholeOptimizationsPass.java@traverse
@@ -3,11 +3,11 @@
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
-    if (!shouldVisit(node)) {
-        return;
-    }
-    int visits = 0;
+    int visits = 0; // move visits variable outside the loop
     do {
+        if (!shouldVisit(node)) {
+            return;
+        }
         Node c = node.getFirstChild();
         while (c != null) {
             traverse(c);
@@ -16,7 +16,7 @@
         }
         visit(node);
         visits++;
-        Preconditions.checkState(visits < 10000, "too many interations");
+        Preconditions.checkState(visits < 10000, "too many iterations");
     } while (shouldRetraverse(node));
     exitNode(node);
 }
