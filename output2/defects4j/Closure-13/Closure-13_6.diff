--- com/google/javascript/jscomp/PeepholeOptimizationsPass.java@traverse
+++ com/google/javascript/jscomp/PeepholeOptimizationsPass.java@traverse
@@ -1,22 +1,22 @@
 private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
     if (!shouldVisit(node)) {
         return;
     }
     int visits = 0;
+    Set<Node> visitedNodes = new HashSet<>(); // introduce a set to keep track of visited nodes
     do {
         Node c = node.getFirstChild();
         while (c != null) {
-            traverse(c);
+            if (!visitedNodes.contains(c)) { // check if the child node has already been visited
+                traverse(c);
+                visitedNodes.add(c); // mark the child node as visited
+            }
             Node next = c.getNext();
             c = next;
         }
         visit(node);
         visits++;
-        Preconditions.checkState(visits < 10000, "too many interations");
+        Preconditions.checkState(visits < 10000, "too many iterations");
     } while (shouldRetraverse(node));
     exitNode(node);
 }
