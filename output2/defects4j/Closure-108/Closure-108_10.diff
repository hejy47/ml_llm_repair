--- com/google/javascript/jscomp/ScopedAliases.java@exitScope
+++ com/google/javascript/jscomp/ScopedAliases.java@exitScope
@@ -10,4 +10,7 @@
         transformation = null;
         hasNamespaceShadows = false;
     }
+    // Clear aliasDefinitionsInOrder to avoid referencing undefined nodes
+    // in the next scope that gets visited.
+    aliasDefinitionsInOrder.clear();
 }
--- com/google/javascript/jscomp/ScopedAliases.java@findAliases
+++ com/google/javascript/jscomp/ScopedAliases.java@findAliases
@@ -1,22 +1,20 @@
 private void findAliases(NodeTraversal t) {
+    ScopedAliasNames scopedAliasNames = new ScopedAliasNames();
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         Node parent = n.getParent();
-        boolean isVar = parent.isVar();
+        boolean isVar = NodeUtil.isNameDeclaration(parent);
         boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
             recordAlias(v);
-        } else if (v.isBleedingFunction()) {
-            // Bleeding functions already get a BAD_PARAMETERS error, so just
-            // do nothing.
-        } else if (parent.getType() == Token.LP) {
-            // Parameters of the scope function also get a BAD_PARAMETERS
-            // error.
+        } else if (v.isBleedingFunction() || parent.getType() == Token.LP) {
+            // Bleeding functions and parameters of the scope function already
+            // get a BAD_PARAMETERS error, so just do nothing.
         } else if (isVar || isFunctionDecl) {
             boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
             Node grandparent = parent.getParent();
-            Node value = v.getInitialValue() != null ? v.getInitialValue() : null;
+            Node value = v.getInitialValue() != null ? v.getInitialValue().detachFromParent() : null;
             Node varNode = null;
             String name = n.getString();
             int nameCount = scopedAliasNames.count(name);
@@ -40,17 +38,15 @@
                 varNode = IR.var(existingName).useSourceInfoFrom(existingName);
                 grandparent.replaceChild(parent, varNode);
             } else {
-                if (value != null) {
-                    // If this is a VAR, we can just detach the expression and
-                    // the tree will still be valid.
-                    value.detachFromParent();
-                }
                 varNode = parent;
             }
             // Add $jscomp.scope.name = EXPR;
             // Make sure we copy over all the jsdoc and debug info.
-            if (value != null || v.getJSDocInfo() != null) {
-                Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(compiler.getCodingConvention(), globalName, value, v.getJSDocInfo()).useSourceInfoIfMissingFromForTree(n);
+            if (value != null) {
+                Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
+                        compiler.getCodingConvention(), globalName, value,
+                        v.getJSDocInfo());
+                newDecl.useSourceInfoIfMissingFromForTree(n);
                 NodeUtil.setDebugInformation(newDecl.getFirstChild().getFirstChild(), n, name);
                 if (isHoisted) {
                     grandparent.addChildToFront(newDecl);
@@ -59,7 +55,9 @@
                 }
             }
             // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
-            v.getNameNode().addChildToFront(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), globalName, n, name));
+            Node newQualifiedNameNode = NodeUtil.newQualifiedNameNode(
+                    compiler.getCodingConvention(), globalName, n, name);
+            n.getParent().replaceChild(n, newQualifiedNameNode);
             recordAlias(v);
         } else {
             // Do not other kinds of local symbols, like catch params.
--- com/google/javascript/jscomp/ScopedAliases.java@visit
+++ com/google/javascript/jscomp/ScopedAliases.java@visit
@@ -1,60 +1,16 @@
 @Override
-public void visit(NodeTraversal t, Node n, Node parent) {
-    if (isCallToScopeMethod(n)) {
-        validateScopeCall(t, n, n.getParent());
+public void exitScope(NodeTraversal t) {
+    if (t.getScopeDepth() > 2) {
+        findNamespaceShadows(t);
     }
-    if (t.getScopeDepth() < 2) {
-        return;
+    if (t.getScopeDepth() == 2) {
+        renameNamespaceShadows(t);
+        aliases.clear();
+        forbiddenLocals.clear();
+        transformation = null;
+        hasNamespaceShadows = false;
     }
-    int type = n.getType();
-    Var aliasVar = null;
-    if (type == Token.NAME) {
-        String name = n.getString();
-        Var lexicalVar = t.getScope().getVar(n.getString());
-        if (lexicalVar != null && lexicalVar == aliases.get(name)) {
-            aliasVar = lexicalVar;
-        }
-    }
-    // Validate the top-level of the goog.scope block.
-    if (t.getScopeDepth() == 2) {
-        if (aliasVar != null && NodeUtil.isLValue(n)) {
-            if (aliasVar.getNode() == n) {
-                aliasDefinitionsInOrder.add(n);
-                // Return early, to ensure that we don't record a definition
-                // twice.
-                return;
-            } else {
-                report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());
-            }
-        }
-        if (type == Token.RETURN) {
-            report(t, n, GOOG_SCOPE_USES_RETURN);
-        } else if (type == Token.THIS) {
-            report(t, n, GOOG_SCOPE_REFERENCES_THIS);
-        } else if (type == Token.THROW) {
-            report(t, n, GOOG_SCOPE_USES_THROW);
-        }
-    }
-    // Validate all descendent scopes of the goog.scope block.
-    if (t.getScopeDepth() >= 2) {
-        // Check if this name points to an alias.
-        if (aliasVar != null) {
-            // Note, to support the transitive case, it's important we don't
-            // clone aliasedNode here.  For example,
-            // var g = goog; var d = g.dom; d.createElement('DIV');
-            // The node in aliasedNode (which is "g") will be replaced in the
-            // changes pass above with "goog".  If we cloned here, we'd end up
-            // with <code>g.dom.createElement('DIV')</code>.
-            aliasUsages.add(new AliasedNode(aliasVar, n));
-        }
-        // When we inject declarations, we duplicate jsdoc. Make sure
-        // we only process that jsdoc once.
-        JSDocInfo info = n.getJSDocInfo();
-        if (info != null) {
-            for (Node node : info.getTypeNodes()) {
-                fixTypeNode(node);
-            }
-        }
-        // TODO(robbyw): Error for goog.scope not at root.
-    }
+    // Clear aliasDefinitionsInOrder to avoid referencing undefined nodes
+    // in the next scope that gets visited.
+    aliasDefinitionsInOrder.clear();
 }
