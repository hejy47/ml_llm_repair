--- org/apache/commons/math/optimization/linear/SimplexTableau.java@getBasicRow
+++ org/apache/commons/math/optimization/linear/SimplexTableau.java@getBasicRow
@@ -1,8 +1,8 @@
 private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {
     Integer row = null;
-    int start = getNumObjectiveFunctions();
+    int start = ignoreObjectiveRows ? 1 : 0;
     for (int i = start; i < getHeight(); i++) {
-        if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {
+        if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && row == null) {
             row = i;
         } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
             return null;
--- org/apache/commons/math/optimization/linear/SimplexTableau.java@getSolution
+++ org/apache/commons/math/optimization/linear/SimplexTableau.java@getSolution
@@ -1,17 +1,17 @@
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-    Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());
+    Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset(), false);
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
-    Set<Integer> basicRows = new HashSet<Integer>();
+    Set<Integer> basicRows = new HashSet<>();
     for (int i = 0; i < coefficients.length; i++) {
-        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-        if (basicRows.contains(basicRow)) {
-            // if multiple variables can take a given value
-            // then we choose the first and set the rest equal to 0
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i, true);
+        if (basicRow == null) {
+            coefficients[i] = 0;
+        } else if (basicRows.contains(basicRow)) {
             coefficients[i] = 0;
         } else {
             basicRows.add(basicRow);
-            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
+            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
