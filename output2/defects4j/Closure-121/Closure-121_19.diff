--- com/google/javascript/jscomp/InlineVariables.java@inlineNonConstants
+++ com/google/javascript/jscomp/InlineVariables.java@inlineNonConstants
@@ -17,6 +17,7 @@
         Preconditions.checkNotNull(value);
         inlineWellDefinedVariable(v, value, referenceInfo.references);
         staleVars.add(v);
+
     } else if (refCount == firstRefAfterInit) {
         // The variable likely only read once, try some more
         // complex inlining heuristics.
@@ -25,6 +26,7 @@
             inline(v, declaration, init, reference);
             staleVars.add(v);
         }
+
     } else if (declaration != init && refCount == 2) {
         if (isValidDeclaration(declaration) && isValidInitialization(init)) {
             // The only reference is the initialization, remove the assignment and
@@ -34,24 +36,25 @@
             inlineWellDefinedVariable(v, value, referenceInfo.references);
             staleVars.add(v);
         }
-    }
-    // If this variable was not inlined normally, check if we can
-    // inline an alias of it. (If the variable was inlined, then the
-    // reference data is out of sync. We're better off just waiting for
-    // the next pass.)
-    if (!maybeModifiedArguments && !staleVars.contains(v) && referenceInfo.isWellDefined() && referenceInfo.isAssignedOnceInLifetime()) {
+
+    } else if (!maybeModifiedArguments && !staleVars.contains(v) && referenceInfo.isWellDefined() && referenceInfo.isAssignedOnceInLifetime()) {
+        // If this variable was not inlined normally, check if we can
+        // inline an alias of it. (If the variable was inlined, then the
+        // reference data is out of sync. We're better off just waiting for
+        // the next pass.)
         // Inlining the variable based solely on well-defined and assigned
         // once is *NOT* correct. We relax the correctness requirement if
         // the variable is declared constant.
         List<Reference> refs = referenceInfo.references;
-        for (int i = 1;         i < refs.size(); i++) {
-            Node nameNode = refs.get(i).getNode();
+        for (int i = 1; i < refs.size(); i++) {
+            Reference aliasReference = refs.get(i);
+            Node nameNode = aliasReference.getNode();
             if (aliasCandidates.containsKey(nameNode)) {
                 AliasCandidate candidate = aliasCandidates.get(nameNode);
-                if (!staleVars.contains(candidate.alias) && !isVarInlineForbidden(candidate.alias)) {
-                    Reference aliasInit;
-                    aliasInit = candidate.refInfo.getInitializingReference();
-                    Node value = aliasInit.getAssignedValue();
+                Reference aliasInit = candidate.refInfo.getInitializingReference();
+                if (aliasInit == null || !aliasInit.isDeleted()) {
+                    // Only inline if alias reference is not deleted and doesn't have a null initialization.
+                    Node value = aliasReference.getAssignedValue();
                     Preconditions.checkNotNull(value);
                     inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);
                     staleVars.add(candidate.alias);
