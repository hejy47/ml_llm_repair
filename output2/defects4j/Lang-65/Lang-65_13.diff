--- org/apache/commons/lang/time/DateUtils.java@modify
+++ org/apache/commons/lang/time/DateUtils.java@modify
@@ -8,80 +8,59 @@
     //
     // Manually truncate milliseconds, seconds and minutes, rather than using
     // Calendar methods.
-    // truncate milliseconds
-    // truncate seconds
-    // truncate minutes
-    // reset time
+    long time = val.getTimeInMillis();
+    boolean roundUp = false;
+    switch (field) {
+        case Calendar.MILLISECOND:
+            time = time / 1000 * 1000;
+            break;
+        case Calendar.SECOND:
+            time = time / 60000 * 60000;
+            break;
+        case Calendar.MINUTE:
+            time = time / 3600000 * 3600000;
+            break;
+        case DateUtils.SEMI_MONTH:
+            time = time / DateUtils.MILLIS_PER_DAY * DateUtils.MILLIS_PER_DAY;
+            val.setTimeInMillis(time);
+            if (val.get(Calendar.DATE) > 15) {
+                val.add(Calendar.DATE, -(val.get(Calendar.DATE) - 15));
+            } else {
+                val.add(Calendar.DATE, -val.get(Calendar.DATE));
+            }
+            return;
+    }
+    val.setTimeInMillis(time);
     // ----------------- Fix for LANG-59 ----------------------- END ----------------
-    boolean roundUp = false;
-    for (int i = 0; i < fields.length; i++) {
-        for (int j = 0; j < fields[i].length; j++) {
-            if (fields[i][j] == field) {
-                //This is our field... we stop looping
-                if (round && roundUp) {
-                    if (field == DateUtils.SEMI_MONTH) {
-                        //This is a special case that's hard to generalize
-                        //If the date is 1, we round up to 16, otherwise
-                        //  we subtract 15 days and add 1 month
-                        if (val.get(Calendar.DATE) == 1) {
-                            val.add(Calendar.DATE, 15);
-                        } else {
-                            val.add(Calendar.DATE, -15);
-                            val.add(Calendar.MONTH, 1);
-                        }
-                    } else {
-                        //We need at add one to this field since the
-                        //  last number causes us to round up
-                        val.add(fields[i][0], 1);
+    for (int[] fields : fields) {
+        for (int f : fields) {
+            if (f == field) {
+                int offset = 0;
+                if (round && (f == Calendar.HOUR_OF_DAY || f == Calendar.HOUR)) {
+                    offset = val.get(f);
+                    if (offset >= 12) {
+                        roundUp = true;
                     }
+                    if (offset >= 13) {
+                        offset -= 12;
+                    }
+                    if (offset == 0) {
+                        offset = 12;
+                    }
+                } else {
+                    offset = val.get(f);
+                    roundUp = offset > val.getActualMaximum(f) / 2;
+                }
+                if (offset == 0) { // i.e. DST pushed us from 12 to 1
+                    offset = 1;
+                }
+                val.set(f, offset);
+                if (roundUp) {
+                    val.add(fields[0], 1);
                 }
                 return;
             }
         }
-        //We have various fields that are not easy roundings
-        int offset = 0;
-        boolean offsetSet = false;
-        //These are special types of fields that require different rounding rules
-        switch(field) {
-            case DateUtils.SEMI_MONTH:
-                if (fields[i][0] == Calendar.DATE) {
-                    //If we're going to drop the DATE field's value,
-                    //  we want to do this our own way.
-                    //We need to subtrace 1 since the date has a minimum of 1
-                    offset = val.get(Calendar.DATE) - 1;
-                    //If we're above 15 days adjustment, that means we're in the
-                    //  bottom half of the month and should stay accordingly.
-                    if (offset >= 15) {
-                        offset -= 15;
-                    }
-                    //Record whether we're in the top or bottom half of that range
-                    roundUp = offset > 7;
-                    offsetSet = true;
-                }
-                break;
-            case Calendar.AM_PM:
-                if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                    //If we're going to drop the HOUR field's value,
-                    //  we want to do this our own way.
-                    offset = val.get(Calendar.HOUR_OF_DAY);
-                    if (offset >= 12) {
-                        offset -= 12;
-                    }
-                    roundUp = offset > 6;
-                    offsetSet = true;
-                }
-                break;
-        }
-        if (!offsetSet) {
-            int min = val.getActualMinimum(fields[i][0]);
-            int max = val.getActualMaximum(fields[i][0]);
-            //Calculate the offset from the minimum allowed value
-            offset = val.get(fields[i][0]) - min;
-            //Set roundUp if this is more than half way between the minimum and maximum
-            roundUp = offset > ((max - min) / 2);
-        }
-        //We need to remove this field
-        val.set(fields[i][0], val.get(fields[i][0]) - offset);
     }
     throw new IllegalArgumentException("The field " + field + " is not supported");
 }
