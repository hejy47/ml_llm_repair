--- org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java@doOptimize
+++ org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java@doOptimize
@@ -16,12 +16,11 @@
     double[] work1 = new double[cols];
     double[] work2 = new double[cols];
     double[] work3 = new double[cols];
+    boolean firstIteration = true;
     // evaluate the function at the starting point and calculate its norm
     updateResidualsAndCost();
+    VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
     // outer loop
-    lmPar = 0;
-    boolean firstIteration = true;
-    VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
     while (true) {
         incrementIterationsCounter();
         // compute the Q.R. decomposition of the jacobian matrix
@@ -35,23 +34,6 @@
         for (int k = 0; k < solvedCols; ++k) {
             int pk = permutation[k];
             jacobian[k][pk] = diagR[pk];
-        }
-        if (firstIteration) {
-            // scale the point according to the norms of the columns
-            // of the initial jacobian
-            xNorm = 0;
-            for (int k = 0; k < cols; ++k) {
-                double dk = jacNorm[k];
-                if (dk == 0) {
-                    dk = 1.0;
-                }
-                double xk = dk * point[k];
-                xNorm += xk * xk;
-                diag[k] = dk;
-            }
-            xNorm = Math.sqrt(xNorm);
-            // initialize the step bound delta
-            delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
         }
         // check orthogonality between function vector and jacobian columns
         double maxCosine = 0;
@@ -74,12 +56,13 @@
         }
         // rescale if necessary
         for (int j = 0; j < cols; ++j) {
-            diag[j] = Math.max(diag[j], jacNorm[j]);
+            diag[j] = Math.max(diagR[j], jacNorm[j]);
         }
         // inner loop
-        for (double ratio = 0; ratio < 1.0e-4; ) {
+        for (int iteration = 0; iteration < solvedCols; iteration++) {
+            incrementIterationsCounter();
             // save the state
-            for (int j = 0; j < solvedCols; ++j) {
+            for (int j = iteration; j < solvedCols; ++j) {
                 int pj = permutation[j];
                 oldX[pj] = point[pj];
             }
@@ -91,7 +74,7 @@
             determineLMParameter(oldRes, delta, diag, work1, work2, work3);
             // compute the new point and the norm of the evolution direction
             double lmNorm = 0;
-            for (int j = 0; j < solvedCols; ++j) {
+            for (int j = iteration; j < solvedCols; ++j) {
                 int pj = permutation[j];
                 lmDir[pj] = -lmDir[pj];
                 point[pj] = oldX[pj] + lmDir[pj];
@@ -99,93 +82,86 @@
                 lmNorm += s * s;
             }
             lmNorm = Math.sqrt(lmNorm);
-            // on the first iteration, adjust the initial step bound.
+            // compute the Q.R. decomposition of the jacobian matrix
+            updateJacobian();
+            qrDecomposition();
+            // compute Qt.res
+            qTy(residuals);
+            // now we don't need Q anymore,
+            // so let jacobian contain the R matrix with its diagonal elements
+            for (int k = iteration; k < solvedCols; ++k) {
+                int pk = permutation[k];
+                jacobian[k][pk] = diagR[pk];
+            }
+            // on the first iteration:
             if (firstIteration) {
-                delta = Math.min(delta, lmNorm);
+                // scale the point according to the norms of the columns
+                // of the initial jacobian
+                xNorm = 0;
+                for (int j = 0; j < cols; ++j) {
+                    double wj = jacNorm[j];
+                    if (wj != 0) {
+                        double pj = point[j];
+                        double xj = wj * pj;
+                        xNorm += xj * xj;
+                    }
+                    diag[j] = wj;
+                }
+                xNorm = Math.sqrt(xNorm);
+                // initialize the step bound delta
+                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
             }
             // evaluate the function at x + p and calculate its norm
             updateResidualsAndCost();
             current = new VectorialPointValuePair(point, objective);
+            // evaluate whether the points are converging (machine precision)
+            double maxDiff = 0;
+            for (int j = iteration; j < solvedCols; ++j) {
+                int pj = permutation[j];
+                maxDiff = Math.max(maxDiff, Math.abs(oldX[pj] - point[pj]));
+            }
+            if (maxDiff <= qrRankingThreshold) {
+                return current;
+            }
             // compute the scaled actual reduction
-            double actRed = -1.0;
-            if (0.1 * cost < previousCost) {
-                double r = cost / previousCost;
-                actRed = 1.0 - r * r;
+            double actualReduction = 0;
+            if (previousCost > cost) {
+                actualReduction = previousCost - cost;
+            } else {
+                actualReduction = previousCost - cost;
             }
             // compute the scaled predicted reduction
-            // and the scaled directional derivative
-            for (int j = 0; j < solvedCols; ++j) {
+            for (int j = iteration; j < solvedCols; j++) {
                 int pj = permutation[j];
-                double dirJ = lmDir[pj];
-                work1[j] = 0;
-                for (int i = 0; i <= j; ++i) {
-                    work1[i] += jacobian[i][pj] * dirJ;
+                work1[pj] = diag[pj] * lmDir[pj];
+            }
+            double dirDeriv = 0;
+            for (int j = iteration; j < solvedCols; j++) {
+                int pj = permutation[j];
+                double tmp = work1[pj];
+                for (int i = 0; i <= j; i++) {
+                    tmp += jacobian[i][pj] * residuals[i];
                 }
+                work2[pj] = tmp;
+                dirDeriv += tmp * lmDir[pj];
             }
-            double coeff1 = 0;
-            for (int j = 0; j < solvedCols; ++j) {
-                coeff1 += work1[j] * work1[j];
-            }
-            double pc2 = previousCost * previousCost;
-            coeff1 = coeff1 / pc2;
-            double coeff2 = lmPar * lmNorm * lmNorm / pc2;
-            double preRed = coeff1 + 2 * coeff2;
-            double dirDer = -(coeff1 + coeff2);
-            // ratio of the actual to the predicted reduction
-            ratio = (preRed == 0) ? 0 : (actRed / preRed);
+            double ratio = actualReduction / (lmPar * lmNorm * dirDeriv);
             // update the step bound
-            if (ratio <= 0.25) {
-                double tmp = (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;
-                if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
+            if (ratio < 0.25) {
+                double tmp = (actualReduction < 0) ? 0.5 : (0.5 * (dirDeriv / (actualReduction))));
+                if ((tmp < 0.1) || (actualReduction < 0)) {
                     tmp = 0.1;
                 }
-                delta = tmp * Math.min(delta, 10.0 * lmNorm);
-                lmPar /= tmp;
-            } else if ((lmPar == 0) || (ratio >= 0.75)) {
+                delta = tmp * Math.min(delta, lmNorm);
+                lmPar *= 2.0;
+            } else if ((ratio > 0.75) || (Double.isNaN(ratio))) {
                 delta = 2 * lmNorm;
                 lmPar *= 0.5;
-            }
-            // test for successful iteration.
-            if (ratio >= 1.0e-4) {
-                // successful iteration, update the norm
-                firstIteration = false;
-                xNorm = 0;
-                for (int k = 0; k < cols; ++k) {
-                    double xK = diag[k] * point[k];
-                    xNorm += xK * xK;
-                }
-                xNorm = Math.sqrt(xNorm);
-                // tests for convergence.
-                // we use the vectorial convergence checker
-            } else {
-                // failed iteration, reset the previous values
-                cost = previousCost;
-                for (int j = 0; j < solvedCols; ++j) {
-                    int pj = permutation[j];
-                    point[pj] = oldX[pj];
-                }
-                tmpVec = residuals;
-                residuals = oldRes;
-                oldRes = tmpVec;
-            }
-            if (checker == null) {
-                if (((Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance) && (ratio <= 2.0)) || (delta <= parRelativeTolerance * xNorm)) {
-                    return current;
-                }
-            } else {
-                if (checker.converged(getIterations(), previous, current)) {
-                    return current;
-                }
-            }
-            // tests for termination and stringent tolerances
-            // (2.2204e-16 is the machine epsilon for IEEE754)
-            if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
-                throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);
-            } else if (delta <= 2.2204e-16 * xNorm) {
-                throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);
-            } else if (maxCosine <= 2.2204e-16) {
-                throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);
+            } else if (ratio <= 0.25) {
+                lmPar *= 0.5;
+                delta = 0.5 * lmNorm;
             }
         }
+        firstIteration = false;
     }
 }
