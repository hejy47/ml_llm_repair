--- org/joda/time/LocalDate.java@fromCalendarFields
+++ org/joda/time/LocalDate.java@fromCalendarFields
@@ -4,5 +4,7 @@
         throw new IllegalArgumentException("The calendar must not be null");
     }
     int yearOfEra = calendar.get(Calendar.YEAR);
-    return new LocalDate(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));
+    int month = calendar.get(Calendar.MONTH) + 1;
+    int day = calendar.get(Calendar.DAY_OF_MONTH);
+    return LocalDate.of(yearOfEra, month, day);
 }
--- org/joda/time/LocalDate.java@fromDateFields
+++ org/joda/time/LocalDate.java@fromDateFields
@@ -4,5 +4,8 @@
         throw new IllegalArgumentException("The date must not be null");
     }
     // handle years in era BC
-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());
+    int year = date.getYear() + 1900;
+    int month = date.getMonth() + 1;
+    int day = date.getDate();
+    return LocalDate.of(year, month, day);
 }
--- org/joda/time/LocalDateTime.java@fromCalendarFields
+++ org/joda/time/LocalDateTime.java@fromCalendarFields
@@ -1,8 +1,10 @@
 //-----------------------------------------------------------------------
-public static LocalDateTime fromCalendarFields(Calendar calendar) {
+public static LocalDate fromCalendarFields(Calendar calendar) {
     if (calendar == null) {
         throw new IllegalArgumentException("The calendar must not be null");
     }
     int yearOfEra = calendar.get(Calendar.YEAR);
-    return new LocalDateTime(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND), calendar.get(Calendar.MILLISECOND));
+    int month = calendar.get(Calendar.MONTH) + 1;
+    int day = calendar.get(Calendar.DAY_OF_MONTH);
+    return LocalDate.of(yearOfEra, month, day);
 }
--- org/joda/time/LocalDateTime.java@fromDateFields
+++ org/joda/time/LocalDateTime.java@fromDateFields
@@ -1,8 +1,11 @@
 @SuppressWarnings("deprecation")
-public static LocalDateTime fromDateFields(Date date) {
+public static LocalDate fromDateFields(Date date) {
     if (date == null) {
         throw new IllegalArgumentException("The date must not be null");
     }
     // handle years in era BC
-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);
+    int year = date.getYear() + 1900;
+    int month = date.getMonth() + 1;
+    int day = date.getDate();
+    return LocalDate.of(year, month, day);
 }
