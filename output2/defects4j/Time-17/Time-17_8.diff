--- org/joda/time/DateTimeZone.java@adjustOffset
+++ org/joda/time/DateTimeZone.java@adjustOffset
@@ -1,16 +1,14 @@
 public long adjustOffset(long instant, boolean earlierOrLater) {
-    // a bit messy, but will work in all non-pathological cases
-    // evaluate 3 hours before and after to work out if anything is happening
-    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-    if (instantBefore == instantAfter) {
-        // not an overlap (less than is a gap, equal is normal case)
+    long offsetBefore = getOffset(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    long offsetAfter = getOffset(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+    if (offsetBefore == offsetAfter) {
+        // no transition
         return instant;
     }
-    // work out range of instants that have duplicate local times
-    long local = convertUTCToLocal(instant);
-    return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-    // calculate result
-    // currently in later offset
-    // currently in earlier offset
+    // Calculate local time from input instant
+    long localTime = instant + offsetBefore;
+    // Calculate local time after the transition
+    long transitionTime = convertLocalToUTC(localTime, false, earlierOrLater ? offsetAfter : offsetBefore);
+    // return the corresponding UTC time
+    return transitionTime - (earlierOrLater ? offsetAfter : offsetBefore);
 }
