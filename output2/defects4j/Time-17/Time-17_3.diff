--- org/joda/time/DateTimeZone.java@adjustOffset
+++ org/joda/time/DateTimeZone.java@adjustOffset
@@ -1,5 +1,5 @@
 public long adjustOffset(long instant, boolean earlierOrLater) {
-    // a bit messy, but will work in all non-pathological cases
+    // a bit messy but will work correctly in all non-pathological cases
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
@@ -9,8 +9,9 @@
     }
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-    return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-    // calculate result
-    // currently in later offset
-    // currently in earlier offset
+    if (earlierOrLater) {
+        return convertLocalToUTC(local, false, instantAfter);
+    } else {
+        return convertLocalToUTC(local, true, instantBefore);
+    }
 }
