--- org/apache/commons/math/linear/CholeskyDecompositionImpl.java@CholeskyDecompositionImpl
+++ org/apache/commons/math/linear/CholeskyDecompositionImpl.java@CholeskyDecompositionImpl
@@ -3,7 +3,17 @@
         throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());
     }
     final int order = matrix.getRowDimension();
-    lTData = matrix.getData();
+    lTData = new double[order][order];
+    matrix.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
+        /** Check if the matrix is symmetric and extract the lower-triangular part. */
+        @Override public void visit(int row, int column, double value) {
+            if (column > row) {
+                lTData[column][row] = value;
+            } else {
+                lTData[row][column] = value;
+            }
+        }
+    });
     cachedL = null;
     cachedLT = null;
     // check the matrix before transformation
@@ -12,7 +22,7 @@
         if (lTData[i][i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-        // check off-diagonal elements (and reset them to 0)
+        // check off-diagonal elements
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
@@ -21,21 +31,30 @@
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
-            lJ[i] = 0;
         }
     }
     // transform the matrix
     for (int i = 0; i < order; ++i) {
         final double[] ltI = lTData[i];
         // check diagonal element
-        ltI[i] = Math.sqrt(ltI[i]);
+        double min = ltI[i];
+        for (int j = 0; j < i; ++j) {
+            final double[] ltJ = lTData[j];
+            final double lJI = ltJ[i];
+            min -= lJI * lJI * ltJ[j];
+        }
+        if (min <= 0) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
+        ltI[i] = Math.sqrt(min);
         final double inverse = 1.0 / ltI[i];
-        for (int q = order - 1; q > i; --q) {
-            ltI[q] *= inverse;
-            final double[] ltQ = lTData[q];
-            for (int p = q; p < order; ++p) {
-                ltQ[p] -= ltI[q] * ltI[p];
+        for (int j = i + 1; j < order; ++j) {
+            final double[] ltJ = lTData[j];
+            double sum = ltJ[i];
+            for (int k = 0; k < i; ++k) {
+                sum -= ltI[k] * ltJ[k] * lTData[k][i];
             }
+            ltJ[i] = sum * inverse;
         }
     }
 }
