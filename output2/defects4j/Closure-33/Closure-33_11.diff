--- com/google/javascript/rhino/jstype/PrototypeObjectType.java@matchConstraint
+++ com/google/javascript/rhino/jstype/PrototypeObjectType.java@matchConstraint
@@ -1,6 +1,6 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
@@ -8,7 +8,7 @@
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
@@ -16,6 +16,8 @@
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
+                    // If the property is not yet defined, infer its type to be the least
+                    // supertype of its constraint type and void.
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
