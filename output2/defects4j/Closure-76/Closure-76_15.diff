--- com/google/javascript/jscomp/DeadAssignmentsElimination.java@isVariableStillLiveWithinExpression
+++ com/google/javascript/jscomp/DeadAssignmentsElimination.java@isVariableStillLiveWithinExpression
@@ -4,15 +4,20 @@
         switch(n.getParent().getType()) {
             case Token.OR:
             case Token.AND:
-            // If the currently node is the first child of
-            // AND/OR, be conservative only consider the READs
-            // of the second operand.
             case Token.HOOK:
-            // If current node is the condition, check each following
-            // branch, otherwise it is a conditional branch and the
-            // other branch can be ignored.
-            default:
-                for (Node sibling = n.getNext(); sibling != null; sibling = sibling.getNext()) {
+                boolean considerNext = false;
+                // If the currently node is the first child of
+                // AND/OR/HOOK, be conservative only consider the READs
+                // of the second operand/branch.
+                if (n.getNext() == null && n.getPrevious() != null) {
+                    considerNext = true;
+                    n = n.getPrevious();
+                } else if (n.getNext() != null) {
+                    n = n.getNext();
+                } else {
+                    n = n.getParent();
+                }
+                for (Node sibling = n; sibling != null; sibling = considerNext ? sibling.getPrevious() : sibling.getNext()) {
                     if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {
                         state = isVariableReadBeforeKill(sibling, variable);
                         // If we see a READ or KILL there is no need to continue.
@@ -23,8 +28,9 @@
                         }
                     }
                 }
+            default:
+                n = n.getParent();
         }
-        n = n.getParent();
     }
     return false;
 }
--- com/google/javascript/jscomp/DeadAssignmentsElimination.java@isVariableReadBeforeKill
+++ com/google/javascript/jscomp/DeadAssignmentsElimination.java@isVariableReadBeforeKill
@@ -19,10 +19,8 @@
         // Conditionals
         case Token.OR:
         case Token.AND:
-        // With a AND/OR the first branch always runs, but the second is
-        // may not.
         case Token.HOOK:
-            return checkHookBranchReadBeforeKill(n.getFirstChild().getNext(), n.getLastChild(), variable);
+            return checkHookBranchReadBeforeKill(n.getFirstChild(), n.getLastChild(), variable);
         default:
             // Expressions are evaluated left-right, depth first.
             for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
