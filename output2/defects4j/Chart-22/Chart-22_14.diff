--- org/jfree/data/KeyedObjects2D.java@getObject
+++ org/jfree/data/KeyedObjects2D.java@getObject
@@ -13,7 +13,7 @@
     if (column < 0) {
         throw new UnknownKeyException("Column key (" + columnKey + ") not recognised.");
     }
-    if (row >= 0) {
+    if (row >= 0 && column >= 0 && row < this.rows.size()) { // added additional check for column index
         KeyedObjects rowData = (KeyedObjects) this.rows.get(row);
         return rowData.getObject(columnKey);
     } else {
--- org/jfree/data/KeyedObjects2D.java@removeObject
+++ org/jfree/data/KeyedObjects2D.java@removeObject
@@ -13,6 +13,17 @@
     if (allNull) {
         this.rowKeys.remove(rowIndex);
         this.rows.remove(rowIndex);
+    } else { // added else condition to check whether column is empty
+        boolean allNullColumn = true;
+        for (int i = 0; i < this.rowKeys.size(); i++) {
+            KeyedObjects rowData = (KeyedObjects) this.rows.get(i);
+            if (rowData.getObject(columnKey) != null) {
+                allNullColumn = false;
+                break;
+            }
+        }
+        if (allNullColumn) {
+            removeColumn(columnKey);
+        }
     }
-    // 2. check whether the column is now empty.
 }
--- org/jfree/data/KeyedObjects2D.java@removeRow
+++ org/jfree/data/KeyedObjects2D.java@removeRow
@@ -1,4 +1,7 @@
 public void removeRow(Comparable rowKey) {
     int index = getRowIndex(rowKey);
-    removeRow(index);
+    if (index >= 0 && index < this.rows.size()) { // added additional check for row index
+        this.rowKeys.remove(index);
+        this.rows.remove(index);
+    }
 }
--- org/jfree/data/KeyedObjects2D.java@removeColumn
+++ org/jfree/data/KeyedObjects2D.java@removeColumn
@@ -8,5 +8,5 @@
         KeyedObjects rowData = (KeyedObjects) iterator.next();
         rowData.removeValue(columnKey);
     }
-    this.columnKeys.remove(columnKey);
+    this.columnKeys.remove(index); // removed columnKey and passed index instead
 }
