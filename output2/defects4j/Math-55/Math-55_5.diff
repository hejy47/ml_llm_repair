--- org/apache/commons/math/geometry/Vector3D.java@crossProduct
+++ org/apache/commons/math/geometry/Vector3D.java@crossProduct
@@ -1,12 +1,9 @@
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
-    // we reduce cancellation errors by preconditioning,
-    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-    // v3 without loss of precision. See Kahan lecture
-    // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-    // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-    // compute cross product from v3 and v2 instead of v1 and v2
-    return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    double norm1 = v1.getNorm();
+    double norm2 = v2.getNorm();
+    double rescaleFactor = FastMath.sqrt(norm1 * norm2);
+    Vector3D v3 = v1.cross(v2).scalarMultiply(1.0 / rescaleFactor);
+    return v3;
 }
