--- org/apache/commons/math/geometry/Vector3D.java@crossProduct
+++ org/apache/commons/math/geometry/Vector3D.java@crossProduct
@@ -6,7 +6,9 @@
     // v3 without loss of precision. See Kahan lecture
     // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
     // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-    // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    // compute rho as an 16 bits approximation of v1.v2 / v2.v2
     // compute cross product from v3 and v2 instead of v1 and v2
-    return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    double rho = ((double) ((float) (v1.dotProduct(v2) / v2.getNormSq()))) * (1 << 16);
+    Vector3D v3 = new Vector3D(1.0, v1, -rho, v2);
+    return new Vector3D(1.0, v3, v2);
 }
