--- com/google/javascript/jscomp/CollapseProperties.java@inlineAliases
+++ com/google/javascript/jscomp/CollapseProperties.java@inlineAliases
@@ -8,23 +8,22 @@
             continue;
         }
         if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {
-            // {@code name} meets condition (b). Find all of its local aliases
-            // and try to inline them.
+            // {@code name} meets condition (b) if it has only one global set, no local set and at least one aliasing get.
+            // Find all of its local aliases and try to inline them.
             List<Ref> refs = Lists.newArrayList(name.getRefs());
             for (Ref ref : refs) {
                 if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-                    // {@code name} meets condition (c). Try to inline it.
+                    // {@code name} meets condition (c) if the ref meets Type A's constraints.
+                    // Try to inline it.
                     if (inlineAliasIfPossible(ref, namespace)) {
                         name.removeRef(ref);
                     }
                 }
             }
         }
-        // Check if {@code name} has any aliases left after the
-        // local-alias-inlining above.
+        // Check if {@code name} has any children left after the local-alias-inlining above.
         if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) {
-            // All of {@code name}'s children meet condition (a), so they can be
-            // added to the worklist.
+            // All of {@code name}'s children meet condition (a), so they can be added to the worklist.
             workList.addAll(name.props);
         }
     }
