--- org/apache/commons/math3/analysis/differentiation/DSCompiler.java@atan2
+++ org/apache/commons/math3/analysis/differentiation/DSCompiler.java@atan2
@@ -22,6 +22,10 @@
             // 2 * atan(y / (r + x))
             result[resultOffset + i] = 2 * tmp2[i];
         }
+        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+        if (Double.isNaN(result[resultOffset])) {
+            result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+        }
     } else {
         // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
         // r - x
@@ -30,12 +34,16 @@
         divide(y, yOffset, tmp2, 0, tmp1, 0);
         // atan(y / (r - x))
         atan(tmp1, 0, tmp2, 0);
-        result[resultOffset] = // +/-pi - 2 * atan(y / (r - x))
-        ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];
+        double atanRes = -2 * tmp2[0];
+        if (Double.isNaN(atanRes)) {
+            atanRes = FastMath.atan2(y[yOffset], x[xOffset]);
+            result[resultOffset] = (Double.isNaN(atanRes) ? atanRes : ((atanRes > 0) ? (atanRes - FastMath.PI) : (atanRes + FastMath.PI)));
+        } else {
+            result[resultOffset] = ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - atanRes;
+        }
         for (int i = 1; i < tmp2.length; ++i) {
             // +/-pi - 2 * atan(y / (r - x))
             result[resultOffset + i] = -2 * tmp2[i];
         }
     }
-    // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
 }
