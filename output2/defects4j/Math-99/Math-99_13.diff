--- org/apache/commons/math/util/MathUtils.java@gcd
+++ org/apache/commons/math/util/MathUtils.java@gcd
@@ -4,11 +4,11 @@
     if ((u == 0) || (v == 0)) {
         return (Math.abs(u) + Math.abs(v));
     }
-    // keep u and v negative, as negative integers range down to
+    // make u and v negative, as negative integers range down to
     // -2^31, while positive numbers can only be as large as 2^31-1
     // (i.e. we can't necessarily negate a negative number without
     // overflow)
-        if (u > 0) {
+    if (u > 0) {
         u = -u;
     }
     // make u negative
@@ -18,7 +18,7 @@
     // make v negative
     // B1. [Find power of 2]
     int k = 0;
-    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
+    while (((u & 1) == 0 || (v & 1) == 0) && k < 31) {
         // while u and v are
         // both even...
         u /= 2;
@@ -35,7 +35,7 @@
     // t negative: u was odd, v may be even (t replaces v)
     // t positive: u was even, v is odd (t replaces u)
     do {
-                // B4/B3: cast out twos from t.
+        // B4/B3: cast out twos from t.
         while ((t & 1) == 0) {
             // while t is even..
             // cast out twos
--- org/apache/commons/math/util/MathUtils.java@lcm
+++ org/apache/commons/math/util/MathUtils.java@lcm
@@ -2,6 +2,6 @@
     if (a == 0 || b == 0) {
         return 0;
     }
-    int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
+    int lcm = Math.abs(divAndCheck(mulAndCheck(a / gcd(a, b), b), a));
     return lcm;
 }
