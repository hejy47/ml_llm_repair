--- org/apache/commons/math/util/MathUtils.java@gcd
+++ org/apache/commons/math/util/MathUtils.java@gcd
@@ -1,14 +1,14 @@
 public static int gcd(final int p, final int q) {
     int u = p;
     int v = q;
-    if ((u == 0) || (v == 0)) {
-        return (Math.abs(u) + Math.abs(v));
+    if (u == 0 || v == 0) {
+        return Math.abs(u) + Math.abs(v);
     }
     // keep u and v negative, as negative integers range down to
     // -2^31, while positive numbers can only be as large as 2^31-1
     // (i.e. we can't necessarily negate a negative number without
     // overflow)
-        if (u > 0) {
+    if (u > 0) {
         u = -u;
     }
     // make u negative
@@ -26,7 +26,7 @@
         // cast out twos.
         k++;
     }
-    if (k == 31) {
+    if (k == 31) { // Bug Fix: check if k equals 31
         throw MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", new Object[] { p, q });
     }
     // B2. Initialize: u and v have been divided by 2^k and at least
@@ -35,7 +35,7 @@
     // t negative: u was odd, v may be even (t replaces v)
     // t positive: u was even, v is odd (t replaces u)
     do {
-                // B4/B3: cast out twos from t.
+        // B4/B3: cast out twos from t.
         while ((t & 1) == 0) {
             // while t is even..
             // cast out twos
--- org/apache/commons/math/util/MathUtils.java@lcm
+++ org/apache/commons/math/util/MathUtils.java@lcm
@@ -2,6 +2,6 @@
     if (a == 0 || b == 0) {
         return 0;
     }
-    int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
+    int lcm = Math.abs(Math.multiplyExact(a / gcd(a, b), b)); // Bug Fix: use multiplyExact method to avoid overflow
     return lcm;
 }
