--- com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
+++ com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
@@ -1,5 +1,4 @@
 private boolean isInlinableObject(List<Reference> refs) {
-    boolean ret = false;
     Set<String> validProperties = Sets.newHashSet();
     for (Reference ref : refs) {
         Node name = ref.getNode();
@@ -11,7 +10,7 @@
         if (parent.isGetProp()) {
             Preconditions.checkState(parent.getFirstChild() == name);
             // A call target may be using the object as a 'this' value.
-            if (gramps.isCall() && gramps.getFirstChild() == parent) {
+            if (gramps.isCall() && gramps.getFirstFirstChild() == parent) {
                 return false;
             }
             // Deleting a property has different semantics from deleting
@@ -66,20 +65,22 @@
             // references, as that is how self-referential assignments
             // will happen.
             for (Reference t : refs) {
-                Node refNode = t.getParent();
-                while (!NodeUtil.isStatementBlock(refNode)) {
-                    if (refNode == childVal) {
-                        // There's a self-referential assignment
-                        return false;
+                if (t != ref) {
+                    Node refNode = t.getParent();
+                    while (!NodeUtil.isStatementBlock(refNode)) {
+                        if (refNode == childVal) {
+                            // There's a self-referential assignment
+                            return false;
+                        }
+                        refNode = refNode.getParent();
                     }
-                    refNode = refNode.getParent();
                 }
             }
         }
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
-        ret = true;
+        return true;
     }
-    return ret;
+    return false;
 }
