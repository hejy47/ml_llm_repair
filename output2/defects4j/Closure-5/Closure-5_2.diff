--- com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
+++ com/google/javascript/jscomp/InlineObjectLiterals.java@isInlinableObject
@@ -1,5 +1,4 @@
 private boolean isInlinableObject(List<Reference> refs) {
-    boolean ret = false;
     Set<String> validProperties = Sets.newHashSet();
     for (Reference ref : refs) {
         Node name = ref.getNode();
@@ -8,8 +7,7 @@
         // Ignore most indirect references, like x.y (but not x.y(),
         // since the function referenced by y might reference 'this').
         //
-        if (parent.isGetProp()) {
-            Preconditions.checkState(parent.getFirstChild() == name);
+        if (parent.isGetProp() && parent.getFirstChild() == name) {
             // A call target may be using the object as a 'this' value.
             if (gramps.isCall() && gramps.getFirstChild() == parent) {
                 return false;
@@ -22,8 +20,7 @@
             // Object.prototype can have arbitrary properties on it.
             //
             // We short-circuit this problem by bailing out if we see a reference
-            // to a property that isn't defined on the object literal. This
-            // isn't a perfect algorithm, but it should catch most cases.
+            // to a property that isn't defined on the object literal.
             String propName = parent.getLastChild().getString();
             if (!validProperties.contains(propName)) {
                 if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
@@ -35,7 +32,7 @@
             continue;
         }
         // Only rewrite VAR declarations or simple assignment statements
-        if (!isVarOrAssignExprLhs(name)) {
+        if (!NodeUtil.isNameDeclaration(name) && !parent.isAssign() && !NodeUtil.isIncDecOp(parent)) {
             return false;
         }
         Node val = ref.getAssignedValue();
@@ -49,10 +46,6 @@
         }
         // Make sure that the value is not self-referential. IOW,
         // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
         //
         // Also, ES5 getters/setters aren't handled by this pass.
         for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
@@ -76,10 +69,6 @@
                 }
             }
         }
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
     }
-    return ret;
+    return true;
 }
