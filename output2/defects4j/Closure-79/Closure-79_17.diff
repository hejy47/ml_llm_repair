--- com/google/javascript/jscomp/Normalize.java@process
+++ com/google/javascript/jscomp/Normalize.java@process
@@ -1,27 +1,22 @@
 @Override
 public void process(Node externs, Node root) {
-    new NodeTraversal(compiler, new NormalizeStatements(compiler, assertOnChange)).traverse(root);
+    // Update NormalizeStatements to return the modified AST so that it can be re-used
+    // by later passes that may depend on it.
+    NormalizeStatements norm = new NormalizeStatements(compiler, assertOnChange);
+    NodeTraversal.traverse(compiler, root, norm);
+    Node transformedRoot = norm.getResult();
+
     if (MAKE_LOCAL_NAMES_UNIQUE) {
         MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
         NodeTraversal t = new NodeTraversal(compiler, renamer);
-        t.traverseRoots(externs, root);
+        t.traverseWithScope(transformedRoot, Scope.createGlobalScope(transformedRoot));
     }
-    // It is important that removeDuplicateDeclarations runs after
-    // MakeDeclaredNamesUnique in order for catch block exception names to be
-    // handled properly. Specifically, catch block exception names are
-    // only valid within the catch block, but our currect Scope logic
-    // has no concept of this and includes it in the containing function
-    // (or global scope). MakeDeclaredNamesUnique makes the catch exception
-    // names unique so that removeDuplicateDeclarations() will properly handle
-    // cases where a function scope variable conflict with a exception name:
-    //   function f() {
-    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
-    //      var e = 1; // f scope 'e'
-    //   }
-    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
-    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
-    removeDuplicateDeclarations(externs, root);
-    new PropagateConstantAnnotationsOverVars(compiler, assertOnChange).process(externs, root);
+
+    // Update removeDuplicateDeclarations to use the transformed root instead of root
+    removeDuplicateDeclarations(externs, transformedRoot);
+
+    new PropagateConstantAnnotationsOverVars(compiler, assertOnChange).process(externs, transformedRoot);
+
     if (!compiler.getLifeCycleStage().isNormalized()) {
         compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
     }
--- com/google/javascript/jscomp/VarCheck.java@createSynthesizedExternVar
+++ com/google/javascript/jscomp/VarCheck.java@createSynthesizedExternVar
@@ -1,5 +1,5 @@
 private void createSynthesizedExternVar(String varName) {
-    Node nameNode = Node.newString(Token.NAME, varName);
+    Node nameNode = IR.name(varName);
     // Mark the variable as constant if it matches the coding convention
     // for constant vars.
     // NOTE(nicksantos): honestly, i'm not sure how much this matters.
@@ -9,6 +9,7 @@
     if (compiler.getCodingConvention().isConstant(varName)) {
         nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
     }
-    getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));
+    Node varNode = IR.var(nameNode);
+    getSynthesizedExternsRoot().addChildToBack(varNode);
     varsToDeclareInExterns.remove(varName);
 }
