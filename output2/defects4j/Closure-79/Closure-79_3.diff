--- com/google/javascript/jscomp/Normalize.java@process
+++ com/google/javascript/jscomp/Normalize.java@process
@@ -9,7 +9,7 @@
     // It is important that removeDuplicateDeclarations runs after
     // MakeDeclaredNamesUnique in order for catch block exception names to be
     // handled properly. Specifically, catch block exception names are
-    // only valid within the catch block, but our currect Scope logic
+    // only valid within the catch block, but our current Scope logic
     // has no concept of this and includes it in the containing function
     // (or global scope). MakeDeclaredNamesUnique makes the catch exception
     // names unique so that removeDuplicateDeclarations() will properly handle
@@ -19,7 +19,8 @@
     //      var e = 1; // f scope 'e'
     //   }
     // otherwise 'var e = 1' would be rewritten as 'e = 1'.
-    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
+    // TODO(johnlenz): Introduce a separate scope for catch nodes.
+    new NodeTraversal(compiler, new MoveCodeFromFinallyBlocks(compiler)).traverse(root);
     removeDuplicateDeclarations(externs, root);
     new PropagateConstantAnnotationsOverVars(compiler, assertOnChange).process(externs, root);
     if (!compiler.getLifeCycleStage().isNormalized()) {
--- com/google/javascript/jscomp/VarCheck.java@createSynthesizedExternVar
+++ com/google/javascript/jscomp/VarCheck.java@createSynthesizedExternVar
@@ -1,5 +1,5 @@
 private void createSynthesizedExternVar(String varName) {
-    Node nameNode = Node.newString(Token.NAME, varName);
+    Node nameNode = IR.name(varName);
     // Mark the variable as constant if it matches the coding convention
     // for constant vars.
     // NOTE(nicksantos): honestly, i'm not sure how much this matters.
@@ -9,6 +9,6 @@
     if (compiler.getCodingConvention().isConstant(varName)) {
         nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
     }
-    getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));
+    getSynthesizedExternsRoot().addChildToBack(IR.var(nameNode));
     varsToDeclareInExterns.remove(varName);
 }
