--- com/google/javascript/jscomp/Normalize.java@process
+++ com/google/javascript/jscomp/Normalize.java@process
@@ -9,17 +9,19 @@
     // It is important that removeDuplicateDeclarations runs after
     // MakeDeclaredNamesUnique in order for catch block exception names to be
     // handled properly. Specifically, catch block exception names are
-    // only valid within the catch block, but our currect Scope logic
+    // only valid within the catch block, but our current Scope logic
     // has no concept of this and includes it in the containing function
     // (or global scope). MakeDeclaredNamesUnique makes the catch exception
     // names unique so that removeDuplicateDeclarations() will properly handle
-    // cases where a function scope variable conflict with a exception name:
+    // cases where a function scope variable conflict with an exception name:
     //   function f() {
     //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
     //      var e = 1; // f scope 'e'
+    //      e++;
     //   }
-    // otherwise 'var e = 1' would be rewritten as 'e = 1'.
-    // TODO(johnlenz): Introduce a seperate scope for catch nodes.
+    // otherwise 'var e = 1' would be rewritten as 'e = 1' and
+    // 'e++' would become a reference error.
+    // TODO(johnlenz): Introduce a separate scope for catch nodes.
     removeDuplicateDeclarations(externs, root);
     new PropagateConstantAnnotationsOverVars(compiler, assertOnChange).process(externs, root);
     if (!compiler.getLifeCycleStage().isNormalized()) {
--- com/google/javascript/jscomp/VarCheck.java@createSynthesizedExternVar
+++ com/google/javascript/jscomp/VarCheck.java@createSynthesizedExternVar
@@ -1,14 +1,15 @@
 private void createSynthesizedExternVar(String varName) {
-    Node nameNode = Node.newString(Token.NAME, varName);
+    Node nameNode = IR.name(varName);
     // Mark the variable as constant if it matches the coding convention
     // for constant vars.
-    // NOTE(nicksantos): honestly, i'm not sure how much this matters.
+    // NOTE(nicksantos): honestly, I'm not sure how much this matters.
     // AFAIK, all people who use the CONST coding convention also
     // compile with undeclaredVars as errors. We have some test
     // cases for this configuration though, and it makes them happier.
     if (compiler.getCodingConvention().isConstant(varName)) {
         nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
     }
-    getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));
+    Node varNode = IR.var(nameNode);
+    getSynthesizedExternsRoot().addChildToBack(varNode);
     varsToDeclareInExterns.remove(varName);
 }
