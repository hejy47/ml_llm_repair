--- com/google/javascript/jscomp/Normalize.java@process
+++ com/google/javascript/jscomp/Normalize.java@process
@@ -5,6 +5,7 @@
         MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
         NodeTraversal t = new NodeTraversal(compiler, renamer);
         t.traverseRoots(externs, root);
+        removeDuplicateDeclarations(externs, root); // moved from end of original function
     }
     // It is important that removeDuplicateDeclarations runs after
     // MakeDeclaredNamesUnique in order for catch block exception names to be
@@ -20,7 +21,6 @@
     //   }
     // otherwise 'var e = 1' would be rewritten as 'e = 1'.
     // TODO(johnlenz): Introduce a seperate scope for catch nodes.
-    removeDuplicateDeclarations(externs, root);
     new PropagateConstantAnnotationsOverVars(compiler, assertOnChange).process(externs, root);
     if (!compiler.getLifeCycleStage().isNormalized()) {
         compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
--- com/google/javascript/jscomp/VarCheck.java@createSynthesizedExternVar
+++ com/google/javascript/jscomp/VarCheck.java@createSynthesizedExternVar
@@ -1,5 +1,5 @@
 private void createSynthesizedExternVar(String varName) {
-    Node nameNode = Node.newString(Token.NAME, varName);
+    Node nameNode = IR.name(varName);  // Use IR builder to create new name node
     // Mark the variable as constant if it matches the coding convention
     // for constant vars.
     // NOTE(nicksantos): honestly, i'm not sure how much this matters.
@@ -9,6 +9,6 @@
     if (compiler.getCodingConvention().isConstant(varName)) {
         nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
     }
-    getSynthesizedExternsRoot().addChildToBack(new Node(Token.VAR, nameNode));
+    getSynthesizedExternsRoot().addChildToBack(IR.var(nameNode));  // Use IR builder to create new var node
     varsToDeclareInExterns.remove(varName);
 }
