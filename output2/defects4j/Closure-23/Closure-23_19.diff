--- com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldArrayAccess
+++ com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldArrayAccess
@@ -6,38 +6,44 @@
     if (isAssignmentTarget(n)) {
         return n;
     }
-    if (!right.isNumber()) {
+    if (!right.isNumber() && !right.isString()) { // or use NodeUtil.isImmutableValue(right)
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
-    double index = right.getDouble();
-    int intIndex = (int) index;
-    if (intIndex != index) {
-        error(INVALID_GETELEM_INDEX_ERROR, right);
+    double index;
+    if (right.isNumber()) {
+        index = right.getDouble();
+        int intIndex = (int) index;
+        if (intIndex != index) {
+            error(INVALID_GETELEM_INDEX_ERROR, right);
+            return n;
+        }
+        if (intIndex < 0) {
+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+            return n;
+        }
+        Node current = left.getFirstChild();
+        Node elem = null;
+        for (int i = 0; current != null && i < intIndex; i++) {
+            elem = current;
+            current = current.getNext();
+        }
+        if (elem == null) {
+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+            return n;
+        }
+        if (elem.isEmpty()) {
+            elem = NodeUtil.newUndefinedNode(elem);
+        } else {
+            left.removeChild(elem);
+        }
+        // Replace the entire GETELEM with the value
+        parent.replaceChild(n, elem);
+        reportCodeChange();
+        return elem;
+    } else { // right.isString()
+        // Not folding string literals to avoid performance regressions.
         return n;
     }
-    if (intIndex < 0) {
-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-        return n;
-    }
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-        current = current.getNext();
-    }
-    if (elem == null) {
-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-        return n;
-    }
-    if (elem.isEmpty()) {
-        elem = NodeUtil.newUndefinedNode(elem);
-    } else {
-        left.removeChild(elem);
-    }
-    // Replace the entire GETELEM with the value
-    n.getParent().replaceChild(n, elem);
-    reportCodeChange();
-    return elem;
 }
