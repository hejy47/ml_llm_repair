--- com/google/javascript/jscomp/GlobalNamespace.java@collect
+++ com/google/javascript/jscomp/GlobalNamespace.java@collect
@@ -4,10 +4,10 @@
     boolean isSet = false;
     Name.Type type = Name.Type.OTHER;
     boolean isPropAssign = false;
-    switch(n.getType()) {
-        case Token.GETTER_DEF:
-        case Token.SETTER_DEF:
-        case Token.STRING_KEY:
+    switch(n.getToken()) { // Changed from n.getType() to n.getToken()
+        case GETTER_DEF: // Removed Token prefix from case statements
+        case SETTER_DEF:
+        case STRING_KEY:
             // This may be a key in an object literal declaration.
             name = null;
             if (parent != null && parent.isObjectLit()) {
@@ -17,38 +17,38 @@
                 return;
             }
             isSet = true;
-            switch(n.getType()) {
-                case Token.STRING_KEY:
+            switch(n.getToken()) { // Changed from n.getType() to n.getToken()
+                case STRING_KEY:
                     type = getValueType(n.getFirstChild());
                     break;
-                case Token.GETTER_DEF:
+                case GETTER_DEF: // Removed Token prefix from case statements
                     type = Name.Type.GET;
                     break;
-                case Token.SETTER_DEF:
+                case SETTER_DEF:
                     type = Name.Type.SET;
                     break;
                 default:
                     throw new IllegalStateException("unexpected:" + n);
             }
             break;
-        case Token.NAME:
+        case NAME:
             // This may be a variable get or set.
             if (parent != null) {
-                switch(parent.getType()) {
-                    case Token.VAR:
+                switch(parent.getToken()) { // Changed from parent.getType() to parent.getToken()
+                    case VAR:
                         isSet = true;
                         Node rvalue = n.getFirstChild();
                         type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
                         break;
-                    case Token.ASSIGN:
+                    case ASSIGN:
                         if (parent.getFirstChild() == n) {
                             isSet = true;
                             type = getValueType(n.getNext());
                         }
                         break;
-                    case Token.GETPROP:
+                    case GETPROP:
                         return;
-                    case Token.FUNCTION:
+                    case FUNCTION:
                         Node gramps = parent.getParent();
                         if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
                             return;
@@ -56,8 +56,8 @@
                         isSet = true;
                         type = Name.Type.FUNCTION;
                         break;
-                    case Token.INC:
-                    case Token.DEC:
+                    case INC:
+                    case DEC:
                         isSet = true;
                         type = Name.Type.OTHER;
                         break;
@@ -70,23 +70,23 @@
             }
             name = n.getString();
             break;
-        case Token.GETPROP:
+        case GETPROP:
             // This may be a namespaced name get or set.
             if (parent != null) {
-                switch(parent.getType()) {
-                    case Token.ASSIGN:
+                switch(parent.getToken()) { // Changed from parent.getType() to parent.getToken()
+                    case ASSIGN:
                         if (parent.getFirstChild() == n) {
                             isSet = true;
                             type = getValueType(n.getNext());
                             isPropAssign = true;
                         }
                         break;
-                    case Token.INC:
-                    case Token.DEC:
+                    case INC:
+                    case DEC:
                         isSet = true;
                         type = Name.Type.OTHER;
                         break;
-                    case Token.GETPROP:
+                    case GETPROP:
                         return;
                     default:
                         if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {
