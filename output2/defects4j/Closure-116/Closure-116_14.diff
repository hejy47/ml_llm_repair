--- com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
+++ com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
@@ -22,23 +22,23 @@
     }
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+    // We need to check whether there are less arguments than parameters.
+    // Otherwise, it will result in an infinite loop.
     while (cArg != null || fnParam != null) {
         // For each named parameter check if a mutable argument use more than one.
-        if (fnParam != null) {
-            if (cArg != null) {
-                // Check for arguments that are evaluated more than once.
-                // Note: Unlike block inlining, there it is not possible that a
-                // parameter reference will be in a loop.
-                if (NodeUtil.mayEffectMutableState(cArg, compiler) && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
-                    return CanInlineResult.NO;
-                }
+        if (fnParam != null && cArg != null) {
+            // Check for arguments that are evaluated more than once.
+            // Note: Unlike block inlining, there it is not possible that a
+            // parameter reference will be in a loop.
+            if (NodeUtil.mayEffectMutableState(cArg, compiler) && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+                return CanInlineResult.NO;
             }
-            // Move to the next name.
+            // Move to the next name and argument in the list.
             fnParam = fnParam.getNext();
-        }
-        // For every call argument check for side-effects, even if there
-        // isn't a named parameter to match.
-        if (cArg != null) {
+            cArg = cArg.getNext();
+        } else if (fnParam != null) { // There are more parameters than arguments.
+            return CanInlineResult.NO;
+        } else { // There are more arguments than parameters.
             if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
                 return CanInlineResult.NO;
             }
