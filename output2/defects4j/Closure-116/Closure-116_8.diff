--- com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
+++ com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
@@ -22,16 +22,14 @@
     }
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
+    while (cArg != null && fnParam != null) {
         // For each named parameter check if a mutable argument use more than one.
         if (fnParam != null) {
-            if (cArg != null) {
-                // Check for arguments that are evaluated more than once.
-                // Note: Unlike block inlining, there it is not possible that a
-                // parameter reference will be in a loop.
-                if (NodeUtil.mayEffectMutableState(cArg, compiler) && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
-                    return CanInlineResult.NO;
-                }
+            // Check for arguments that are evaluated more than once.
+            // Note: Unlike block inlining, there it is not possible that a
+            // parameter reference will be in a loop.
+            if (NodeUtil.mayEffectMutableState(cArg, compiler) && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+                return CanInlineResult.NO;
             }
             // Move to the next name.
             fnParam = fnParam.getNext();
@@ -45,5 +43,9 @@
             cArg = cArg.getNext();
         }
     }
+    // if one have more arguments or parameters
+    if (cArg != null || fnParam != null) {
+        return CanInlineResult.NO;
+    }
     return CanInlineResult.YES;
 }
