--- com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
+++ com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
@@ -8,17 +8,13 @@
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
-    if (!callNode.getFirstChild().isName()) {
-        if (NodeUtil.isFunctionObjectCall(callNode)) {
-            // TODO(johnlenz): Support replace this with a value.
-            if (cArg == null || !cArg.isThis()) {
-                return CanInlineResult.NO;
-            }
-            cArg = cArg.getNext();
-        } else {
-            // ".apply" call should be filtered before this.
-            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
+    if (callNode.getFirstChild().getNext() != null) {
+        // If there are any arguments in the call node,
+        // make sure the first argument is `this`.
+        if (!callNode.getFirstChild().getNext().isThis()) {
+            return CanInlineResult.NO;
         }
+        cArg = cArg.getNext();
     }
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
@@ -32,6 +28,8 @@
                 if (NodeUtil.mayEffectMutableState(cArg, compiler) && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
                     return CanInlineResult.NO;
                 }
+            } else if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 0) {
+                return CanInlineResult.NO;
             }
             // Move to the next name.
             fnParam = fnParam.getNext();
