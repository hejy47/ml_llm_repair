--- com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
+++ com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
@@ -4,22 +4,15 @@
     }
     Node block = fnNode.getLastChild();
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+    
+    // Check if the call node is a direct call to a function,
+    // since indirect calls cannot be inlined directly.
+    if (!callNode.getFirstChild().isName()) {
+        return CanInlineResult.NO;
+    }
+
     Node cArg = callNode.getFirstChild().getNext();
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
-    if (!callNode.getFirstChild().isName()) {
-        if (NodeUtil.isFunctionObjectCall(callNode)) {
-            // TODO(johnlenz): Support replace this with a value.
-            if (cArg == null || !cArg.isThis()) {
-                return CanInlineResult.NO;
-            }
-            cArg = cArg.getNext();
-        } else {
-            // ".apply" call should be filtered before this.
-            Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
-        }
-    }
+    
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
