--- com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
+++ com/google/javascript/jscomp/FunctionInjector.java@canInlineReferenceDirectly
@@ -25,16 +25,19 @@
     while (cArg != null || fnParam != null) {
         // For each named parameter check if a mutable argument use more than one.
         if (fnParam != null) {
-            if (cArg != null) {
-                // Check for arguments that are evaluated more than once.
-                // Note: Unlike block inlining, there it is not possible that a
-                // parameter reference will be in a loop.
-                if (NodeUtil.mayEffectMutableState(cArg, compiler) && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
-                    return CanInlineResult.NO;
-                }
+            if (cArg == null) {
+                // Return CanInlineResult.NO if the number of named parameters is larger than the call arguments.
+                return CanInlineResult.NO;
             }
-            // Move to the next name.
+            // Check for arguments that are evaluated more than once.
+            // Note: Unlike block inlining, there it is not possible that a
+            // parameter reference will be in a loop.
+            if (NodeUtil.mayEffectMutableState(cArg, compiler) && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
+                return CanInlineResult.NO;
+            }
+            // Move to the next name and argument.
             fnParam = fnParam.getNext();
+            cArg = cArg.getNext();
         }
         // For every call argument check for side-effects, even if there
         // isn't a named parameter to match.
