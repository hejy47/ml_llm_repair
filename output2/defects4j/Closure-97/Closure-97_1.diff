--- com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldShift
+++ com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldShift
@@ -3,46 +3,37 @@
         double result;
         double lval = left.getDouble();
         double rval = right.getDouble();
-        // check ranges.  We do not do anything that would clip the double to
-        // a 32-bit range, since the user likely does not intend that.
+        // check ranges
         if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
             error(BITWISE_OPERAND_OUT_OF_RANGE, left);
             return n;
         }
-        // only the lower 5 bits are used when shifting, so don't do anything
-        // if the shift amount is outside [0,32)
+        // Check if the shift amount is outside [0,32)
         if (!(rval >= 0 && rval < 32)) {
             error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
             return n;
         }
-        // Convert the numbers to ints
-        int lvalInt = (int) lval;
-        if (lvalInt != lval) {
-            error(FRACTIONAL_BITWISE_OPERAND, left);
-            return n;
-        }
-        int rvalInt = (int) rval;
-        if (rvalInt != rval) {
+        // Convert the numbers to longs since Java requires this for unsigned shift right
+        long lvalLong = (long) lval;
+        long rvalLong = (long) rval;
+        if (rvalLong != rval) {
             error(FRACTIONAL_BITWISE_OPERAND, right);
             return n;
         }
         switch(n.getType()) {
             case Token.LSH:
-                result = lvalInt << rvalInt;
+                result = lvalLong << rvalLong;
                 break;
             case Token.RSH:
-                result = lvalInt >> rvalInt;
+                result = lvalLong >> rvalLong;
                 break;
             case Token.URSH:
-                // JavaScript handles zero shifts on signed numbers differently than
-                // Java as an Java int can not represent the unsigned 32-bit number
-                // where JavaScript can so use a long here.
-                result = lvalInt >>> rvalInt;
+                result = lvalLong >>> rvalLong;
                 break;
             default:
                 throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
         }
-        Node newNumber = Node.newNumber(result);
+        Node newNumber = Node.newNumber((double)result);
         n.getParent().replaceChild(n, newNumber);
         reportCodeChange();
         return newNumber;
