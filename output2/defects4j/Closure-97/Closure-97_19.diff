--- com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldShift
+++ com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldShift
@@ -5,7 +5,7 @@
         double rval = right.getDouble();
         // check ranges.  We do not do anything that would clip the double to
         // a 32-bit range, since the user likely does not intend that.
-        if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+        if (!(lval >= (double) Integer.MIN_VALUE && lval <= (double) Integer.MAX_VALUE)) { // cast to double to prevent overflow
             error(BITWISE_OPERAND_OUT_OF_RANGE, left);
             return n;
         }
@@ -17,27 +17,27 @@
         }
         // Convert the numbers to ints
         int lvalInt = (int) lval;
-        if (lvalInt != lval) {
+        if ((double) lvalInt != lval) { // cast to double to prevent loss of precision in fractional numbers
             error(FRACTIONAL_BITWISE_OPERAND, left);
             return n;
         }
         int rvalInt = (int) rval;
-        if (rvalInt != rval) {
+        if ((double) rvalInt != rval) { // cast to double to prevent loss of precision in fractional numbers
             error(FRACTIONAL_BITWISE_OPERAND, right);
             return n;
         }
         switch(n.getType()) {
             case Token.LSH:
-                result = lvalInt << rvalInt;
+                result = (double) lvalInt << rvalInt; // cast to double to prevent overflow
                 break;
             case Token.RSH:
-                result = lvalInt >> rvalInt;
+                result = (double) lvalInt >> rvalInt; // cast to double to prevent overflow
                 break;
             case Token.URSH:
                 // JavaScript handles zero shifts on signed numbers differently than
                 // Java as an Java int can not represent the unsigned 32-bit number
                 // where JavaScript can so use a long here.
-                result = lvalInt >>> rvalInt;
+                result = (double) (lvalInt >>> rvalInt); // cast to double to prevent loss of information
                 break;
             default:
                 throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
