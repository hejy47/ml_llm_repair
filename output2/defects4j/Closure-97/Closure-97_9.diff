--- com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldShift
+++ com/google/javascript/jscomp/PeepholeFoldConstants.java@tryFoldShift
@@ -17,12 +17,12 @@
         }
         // Convert the numbers to ints
         int lvalInt = (int) lval;
-        if (lvalInt != lval) {
+        if (lval != (double) lvalInt) {
             error(FRACTIONAL_BITWISE_OPERAND, left);
             return n;
         }
         int rvalInt = (int) rval;
-        if (rvalInt != rval) {
+        if (rval != (double) rvalInt) {
             error(FRACTIONAL_BITWISE_OPERAND, right);
             return n;
         }
@@ -37,7 +37,7 @@
                 // JavaScript handles zero shifts on signed numbers differently than
                 // Java as an Java int can not represent the unsigned 32-bit number
                 // where JavaScript can so use a long here.
-                result = lvalInt >>> rvalInt;
+                result = (long) lvalInt >>> rvalInt;
                 break;
             default:
                 throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
