--- com/google/javascript/jscomp/NodeUtil.java@isBooleanResultHelper
+++ com/google/javascript/jscomp/NodeUtil.java@isBooleanResultHelper
@@ -12,13 +12,16 @@
         case Token.GT:
         case Token.LE:
         case Token.GE:
-        // Queryies
+        // Queries
         case Token.IN:
         case Token.INSTANCEOF:
         // Inversion
         case Token.NOT:
             // delete operator returns a boolean.
             return true;
+        // added case for Token.TYPEOF
+        case Token.TYPEOF:
+            return true;
         default:
             return false;
     }
--- com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
+++ com/google/javascript/jscomp/NodeUtil.java@evaluatesToLocalValue
@@ -4,7 +4,7 @@
             // A result that is aliased by a non-local name, is the effectively the
             // same as returning a non-local name, but this doesn't matter if the
             // value is immutable.
-            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
+            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
@@ -22,11 +22,11 @@
         case Token.THIS:
             return locals.apply(value);
         case Token.NAME:
-            return isImmutableValue(value) || locals.apply(value);
+            return NodeUtil.isImmutableValue(value) || locals.apply(value);
         case Token.GETELEM:
         case Token.GETPROP:
             // There is no information about the locality of object properties.
-            return locals.apply(value);
+            return locals.apply(value.getFirstChild());
         case Token.CALL:
             return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
         case Token.NEW:
@@ -41,12 +41,12 @@
             // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
             return true;
         default:
-            // Other op force a local value:
-            //  x = '' + g (x is now an local string)
-            //  x -= g (x is now an local number)
-            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
+            // Other ops force a local value:
+            //  x = '' + g (x is now a local string)
+            //  x -= g (x is now a local number)
+            if (NodeUtil.isAssignmentOp(value) || NodeUtil.isSimpleOperator(value) || NodeUtil.isImmutableValue(value)) {
                 return true;
             }
-            throw new IllegalStateException("Unexpected expression node" + value + "\n parent:" + value.getParent());
+            throw new IllegalStateException("Unexpected expression node" + value);
     }
 }
