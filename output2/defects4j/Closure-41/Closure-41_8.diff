--- com/google/javascript/jscomp/FunctionTypeBuilder.java@inferFromOverriddenFunction
+++ com/google/javascript/jscomp/FunctionTypeBuilder.java@inferFromOverriddenFunction
@@ -28,11 +28,17 @@
                     newParam.setVarArgs(false);
                     newParam.setOptionalArg(true);
                 }
+                parametersNode.addChildToBack(newParam);
             } else {
                 warnedAboutArgList |= addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));
             }
         }
         // Clone any remaining params that aren't in the function literal.
+        while (oldParams.hasNext()) {
+            Node oldParam = oldParams.next();
+            Node newParam = paramBuilder.newParameterFromNode(oldParam);
+            parametersNode.addChildToBack(newParam);
+        }
         parametersNode = paramBuilder.build();
     }
     return this;
--- com/google/javascript/jscomp/FunctionTypeBuilder.java@inferParameterTypes
+++ com/google/javascript/jscomp/FunctionTypeBuilder.java@inferParameterTypes
@@ -44,6 +44,11 @@
         }
     }
     // Copy over any old parameters that aren't in the param list.
+    while (oldParameterType != null) {
+        Node newParam = (Node) oldParameterType.cloneTree();
+        builder.addParameter(newParam);
+        oldParameterType = oldParameterType.getNext();
+    }
     if (templateTypeName != null && !foundTemplateType) {
         reportError(TEMPLATE_TYPE_EXPECTED, fnName);
     }
