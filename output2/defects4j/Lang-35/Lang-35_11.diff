--- org/apache/commons/lang3/ArrayUtils.java@add
+++ org/apache/commons/lang3/ArrayUtils.java@add
@@ -1,15 +1,17 @@
 public static <T> T[] add(T[] array, T element) {
     Class<?> type;
-    if (array != null) {
-        type = array.getClass();
+    if (array != null && array.length > 0) {
+        type = array.getClass().getComponentType();
     } else if (element != null) {
         type = element.getClass();
     } else {
         type = Object.class;
     }
-    // type must be T
     @SuppressWarnings("unchecked")
-    T[] newArray = (T[]) copyArrayGrow1(array, type);
+    T[] newArray = (T[]) Array.newInstance(type, array != null ? array.length + 1 : 1);
+    if (array != null) {
+        System.arraycopy(array, 0, newArray, 0, array.length);
+    }
     newArray[newArray.length - 1] = element;
     return newArray;
 }
--- org/apache/commons/lang3/ArrayUtils.java@add1
+++ org/apache/commons/lang3/ArrayUtils.java@add1
@@ -1,14 +1,21 @@
 public static <T> T[] add(T[] array, int index, T element) {
     Class<?> clss = null;
-    if (array != null) {
+    if (array != null && array.length > 0) {
         clss = array.getClass().getComponentType();
     } else if (element != null) {
         clss = element.getClass();
     } else {
         return (T[]) new Object[] { null };
     }
-    // the add method creates an array of type clss, which is type T
     @SuppressWarnings("unchecked")
-    final T[] newArray = (T[]) add(array, index, element, clss);
+    final T[] newArray = (T[]) Array.newInstance(clss, array != null ? array.length + 1 : 1);
+    if (index > array.length) {
+        index = array.length;
+    } else if (index < 0) {
+        index = 0;
+    }
+    System.arraycopy(array, 0, newArray, 0, index);
+    newArray[index] = element;
+    System.arraycopy(array, index, newArray, index + 1, array.length - index);
     return newArray;
 }
