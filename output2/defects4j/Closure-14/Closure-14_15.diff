--- com/google/javascript/jscomp/ControlFlowAnalysis.java@computeFollowNode
+++ com/google/javascript/jscomp/ControlFlowAnalysis.java@computeFollowNode
@@ -1,5 +1,23 @@
 private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {
-        Node parent = node.getParent();
+    /*
+     * This is the case where:
+     *
+     * 1. Parent is null implies that we are transferring control to the end of
+     * the script.
+     *
+     * 2. Parent is a function implies that we are transferring control back to
+     * the caller of the function.
+     *
+     * 3. If the node is a return statement, we should also transfer control
+     * back to the caller of the function.
+     *
+     * 4. If the node is root then we have reached the end of what we have been
+     * asked to traverse.
+     *
+     * In all cases we should transfer control to a "symbolic return" node.
+     * This will make life easier for DFAs.
+     */
+    Node parent = node.getParent();
     if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) {
         return null;
     }
@@ -18,17 +36,18 @@
                 } else if (parent.getNext().isDefaultCase()) {
                     return parent.getNext().getFirstChild();
                 } else {
-                    Preconditions.checkState(false, "Not reachable");
+                    throw new IllegalStateException("Not reachable");
                 }
             } else {
                 return computeFollowNode(fromNode, parent, cfa);
             }
-            break;
         case Token.FOR:
             if (NodeUtil.isForIn(parent)) {
                 return parent;
+            } else if (NodeUtil.getConditionExpression(parent) != null) { // add check for condition expression
+                return NodeUtil.getConditionExpression(parent); // return condition expression instead of "parent.getFirstChild().getNext().getNext()"
             } else {
-                return parent.getFirstChild().getNext().getNext();
+                return computeFollowNode(fromNode, parent, cfa);
             }
         case Token.WHILE:
         case Token.DO:
