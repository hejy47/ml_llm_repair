--- com/google/javascript/jscomp/ControlFlowAnalysis.java@computeFollowNode
+++ com/google/javascript/jscomp/ControlFlowAnalysis.java@computeFollowNode
@@ -1,6 +1,24 @@
 private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {
-        Node parent = node.getParent();
-    if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) {
+    /*
+     * This is the case where:
+     *
+     * 1. Parent is null implies that we are transferring control to the end of
+     * the script.
+     *
+     * 2. Parent is a function implies that we are transferring control back to
+     * the caller of the function.
+     *
+     * 3. If the node is a return statement, we should also transfer control
+     * back to the caller of the function.
+     *
+     * 4. If the node is root then we have reached the end of what we have been
+     * asked to traverse.
+     *
+     * In all cases we should transfer control to a "symbolic return" node.
+     * This will make life easier for DFAs.
+     */
+    Node parent = node.getParent();
+    if (parent == null || parent.isFunction() || (cfa != null && node == cfa.getRoot())) {
         return null;
     }
     // If we are just before a IF/WHILE/DO/FOR:
@@ -54,7 +72,7 @@
                 // If we are coming out of the FINALLY block...
             } else if (parent.getLastChild() == node) {
                 if (cfa != null) {
-                    for (Node finallyNode : cfa.finallyMap.get(parent)) {
+                    for (Node finallyNode : cfa.getFinallyMap().get(parent)) {
                         cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
                     }
                 }
