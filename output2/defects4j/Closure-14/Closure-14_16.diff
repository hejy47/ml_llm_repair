--- com/google/javascript/jscomp/ControlFlowAnalysis.java@computeFollowNode
+++ com/google/javascript/jscomp/ControlFlowAnalysis.java@computeFollowNode
@@ -1,5 +1,23 @@
 private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {
-        Node parent = node.getParent();
+    /*
+     * This is the case where:
+     *
+     * 1. Parent is null implies that we are transferring control to the end of
+     * the script.
+     *
+     * 2. Parent is a function implies that we are transferring control back to
+     * the caller of the function.
+     *
+     * 3. If the node is a return statement, we should also transfer control
+     * back to the caller of the function.
+     *
+     * 4. If the node is root then we have reached the end of what we have been
+     * asked to traverse.
+     *
+     * In all cases we should transfer control to a "symbolic return" node.
+     * This will make life easier for DFAs.
+     */
+    Node parent = node.getParent();
     if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) {
         return null;
     }
@@ -14,11 +32,22 @@
             // case, without having to go to the case condition.
             if (parent.getNext() != null) {
                 if (parent.getNext().isCase()) {
-                    return parent.getNext().getFirstChild().getNext();
+                    Node caseChild = parent.getNext().getFirstChild();
+                    if (caseChild != null) {
+                        return caseChild.getNext();
+                    } else {
+                        return null;
+                    }
                 } else if (parent.getNext().isDefaultCase()) {
-                    return parent.getNext().getFirstChild();
+                    Node defaultChild = parent.getNext().getFirstChild();
+                    if (defaultChild != null) {
+                        return defaultChild.getNext();
+                    } else {
+                        return null;
+                    }
                 } else {
                     Preconditions.checkState(false, "Not reachable");
+                    return null; // fix error: add return statement
                 }
             } else {
                 return computeFollowNode(fromNode, parent, cfa);
@@ -28,7 +57,12 @@
             if (NodeUtil.isForIn(parent)) {
                 return parent;
             } else {
-                return parent.getFirstChild().getNext().getNext();
+                Node firstChild = parent.getFirstChild();
+                if (firstChild != null && firstChild.getNext() != null) {
+                    return firstChild.getNext();
+                } else {
+                    return null;
+                }
             }
         case Token.WHILE:
         case Token.DO:
@@ -47,7 +81,12 @@
             } else if (NodeUtil.getCatchBlock(parent) == node) {
                 if (NodeUtil.hasFinally(parent)) {
                     // and have FINALLY block.
-                    return computeFallThrough(node.getNext());
+                    Node nextNode = node.getNext();
+                    if (nextNode != null) {
+                        return nextNode;
+                    } else {
+                        return computeFollowNode(fromNode, parent, cfa);
+                    }
                 } else {
                     return computeFollowNode(fromNode, parent, cfa);
                 }
