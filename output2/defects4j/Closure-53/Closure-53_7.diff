--- com/google/javascript/jscomp/InlineObjectLiterals.java@replaceAssignmentExpression
+++ com/google/javascript/jscomp/InlineObjectLiterals.java@replaceAssignmentExpression
@@ -21,17 +21,16 @@
     // expr statement evaluates to true in case it matters.
     nodes.add(new Node(Token.TRUE));
     // Join these using COMMA.  A COMMA node must have 2 children, so we
-    // create a tree. In the tree the first child be the COMMA to match
+    // create a tree. In the tree the first child should be NULL to match
     // the parser, otherwise tree equality tests fail.
     nodes = Lists.reverse(nodes);
-    replacement = new Node(Token.COMMA);
+    replacement = new Node(Token.COMMA, NodeUtil.newExpr(NodeUtil.newEmpty()));
     Node cur = replacement;
     int i;
     for (i = 0; i < nodes.size() - 2; i++) {
         cur.addChildToFront(nodes.get(i));
-        Node t = new Node(Token.COMMA);
-        cur.addChildToFront(t);
-        cur = t;
+        cur = new Node(Token.COMMA, NodeUtil.newExpr(NodeUtil.newEmpty()));
+        cur.addChildToFront(cur);
     }
     cur.addChildToFront(nodes.get(i));
     cur.addChildToFront(nodes.get(i + 1));
