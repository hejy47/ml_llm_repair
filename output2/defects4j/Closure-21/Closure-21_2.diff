--- com/google/javascript/jscomp/CheckSideEffects.java@visit
+++ com/google/javascript/jscomp/CheckSideEffects.java@visit
@@ -4,7 +4,7 @@
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
-    if (n.isEmpty() || n.isComma()) {
+    if (n.isEmpty() || n.isComma() || n.isBlock()) {
         return;
     }
     if (parent == null) {
@@ -13,7 +13,7 @@
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
-    if (n.isExprResult()) {
+    if (n.isExprResult() || NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
         return;
     }
     // This no-op statement was there so that JSDoc information could
@@ -43,18 +43,16 @@
             return;
         }
     }
-    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
-        String msg = "This code lacks side-effects. Is there a bug?";
-        if (n.isString()) {
-            msg = "Is there a missing '+' on the previous line?";
-        } else if (isSimpleOp) {
-            msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used.";
-        }
-        t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));
-        // TODO(johnlenz): determine if it is necessary to
-        // try to protect side-effect free statements as well.
-        if (!NodeUtil.isStatement(n)) {
-            problemNodes.add(n);
-        }
+    String msg = "This code lacks side-effects. Is there a bug?";
+    if (n.isString()) {
+        msg = "Is there a missing '+' on the previous line?";
+    } else if (isSimpleOp) {
+        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used.";
+    }
+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));
+    // TODO(johnlenz): determine if it is necessary to
+    // try to protect side-effect free statements as well.
+    if (!NodeUtil.isStatement(n)) {
+        problemNodes.add(n);
     }
 }
