--- com/google/javascript/jscomp/TypeCheck.java@visitCall
+++ com/google/javascript/jscomp/TypeCheck.java@visitCall
@@ -1,21 +1,21 @@
 private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
-    if (!childType.canBeCalled()) {
+    if (!childType.isUnknownType() && !childType.canBeCalled()) {
         report(t, n, NOT_CALLABLE, childType.toString());
         ensureTyped(t, n);
         return;
     }
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
-    if (childType instanceof FunctionType) {
+    if (childType.isUnknownType() || childType instanceof FunctionType) { // Fixed this line to include unknown type
         FunctionType functionType = (FunctionType) childType;
         boolean isExtern = false;
         JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
         if (functionJSDocInfo != null) {
             String sourceName = functionJSDocInfo.getSourceName();
             CompilerInput functionSource = compiler.getInput(sourceName);
-            isExtern = functionSource.isExtern();
+            isExtern = functionSource != null && functionSource.isExtern(); // Added null check
         }
         // Non-native constructors should not be called directly
         // unless they specify a return type and are defined
@@ -23,7 +23,7 @@
         if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {
             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
         }
-        // Functions with explcit 'this' types must be called in a GETPROP
+        // Functions with explicit 'this' types must be called in a GETPROP
         // or GETELEM.
         visitParameterList(t, n, functionType);
         ensureTyped(t, n, functionType.getReturnType());
