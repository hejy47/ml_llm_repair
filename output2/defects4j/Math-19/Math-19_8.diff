--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@checkParameters
+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@checkParameters
@@ -5,7 +5,7 @@
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
-        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {
+        if (!Double.isInfinite(lB[i]) && !Double.isInfinite(uB[i])) {
             hasFiniteBounds = true;
             break;
         }
@@ -20,7 +20,7 @@
             }
         }
         if (hasInfiniteBounds) {
-            // If there is at least one finite bound, none can be infinite,
+            // If there is at least one infinite bound, none can be finite,
             // because mixed cases are not supported by the current code.
             throw new MathUnsupportedOperationException();
         } else {
@@ -29,6 +29,9 @@
             boundaries[0] = lB;
             boundaries[1] = uB;
             // Abort early if the normalization will overflow (cf. "encode" method).
+            if (Double.isInfinite(ProblemTransform.this.scale)) {
+                throw new MathUnsupportedOperationException();
+            }
         }
     } else {
         // Convert API to internal handling of boundaries.
