--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@checkParameters
+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@checkParameters
@@ -5,7 +5,7 @@
     // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
-        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {
+        if (!Double.isInfinite(lB[i]) && !Double.isInfinite(uB[i])) { // Fixed the OR operator to AND
             hasFiniteBounds = true;
             break;
         }
@@ -29,6 +29,11 @@
             boundaries[0] = lB;
             boundaries[1] = uB;
             // Abort early if the normalization will overflow (cf. "encode" method).
+            for (int i = 0; i < init.length; i++) {
+                if (init[i] < lB[i] || init[i] > uB[i]) {
+                    throw new OutOfRangeException(init[i], lB[i], uB[i]);
+                }
+            }
         }
     } else {
         // Convert API to internal handling of boundaries.
