[{"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i <= len - wantLen; i++) { // changed loop limit\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // white space ends a class name, compare it with the requested one, ignore case\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    // check the last entry\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}\n\n## Fixed Function 2 (alternate solution with fewer iterations)\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    int start = classAttr.indexOf(className); // first check for exact match\n    if (start != -1 && (start == 0 || Character.isWhitespace(classAttr.charAt(start - 1))) && (start + wantLen == len || Character.isWhitespace(classAttr.charAt(start + wantLen)))) {\n        return true;\n    }\n    // no exact match, so iterate over whitespace-separated class names\n    start = 0;\n    while (start != -1 && start < len - wantLen) {\n        int end = classAttr.indexOf(\" \", start + 1);\n        if (end == -1) {\n            end = len;\n        }\n        if (classAttr.regionMatches(true, start, className, 0, wantLen) && (start == 0 || Character.isWhitespace(classAttr.charAt(start - 1))) && (end == len || Character.isWhitespace(classAttr.charAt(end)))) {\n            return true;\n        }\n        start = classAttr.indexOf(\" \", end + 1);\n    }\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -12,7 +12,7 @@\n     // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n     boolean inClass = false;\n     int start = 0;\n-    for (int i = 0; i < len; i++) {\n+    for (int i = 0; i <= len - wantLen; i++) { // changed loop limit\n         if (Character.isWhitespace(classAttr.charAt(i))) {\n             if (inClass) {\n                 // white space ends a class name, compare it with the requested one, ignore case\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    final int len = classAttr == null ? 0 : classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // white space ends a class name, compare it with the requested one, ignore case\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    // check the last entry\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -1,6 +1,6 @@\n public boolean hasClass(String className) {\n     final String classAttr = attributes.get(\"class\");\n-    final int len = classAttr.length();\n+    final int len = classAttr == null ? 0 : classAttr.length();\n     final int wantLen = className.length();\n     if (len == 0 || len < wantLen) {\n         return false;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    if (classAttr == null || classAttr.isEmpty()) {\n        return false;\n    }\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // white space ends a class name, compare it with the requested one, ignore case\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    // check the last entry\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -1,8 +1,11 @@\n public boolean hasClass(String className) {\n     final String classAttr = attributes.get(\"class\");\n+    if (classAttr == null || classAttr.isEmpty()) {\n+        return false;\n+    }\n     final int len = classAttr.length();\n     final int wantLen = className.length();\n-    if (len == 0 || len < wantLen) {\n+    if (len < wantLen) {\n         return false;\n     }\n     // if both lengths are equal, only need compare the className with the attribute\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    if (classAttr == null || classAttr.isEmpty()) {\n        return false;\n    }\n    List<String> classes = Arrays.asList(classAttr.split(\"\\\\s+\"));\n    return classes.contains(className);\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -1,37 +1,8 @@\n public boolean hasClass(String className) {\n     final String classAttr = attributes.get(\"class\");\n-    final int len = classAttr.length();\n-    final int wantLen = className.length();\n-    if (len == 0 || len < wantLen) {\n+    if (classAttr == null || classAttr.isEmpty()) {\n         return false;\n     }\n-    // if both lengths are equal, only need compare the className with the attribute\n-    if (len == wantLen) {\n-        return className.equalsIgnoreCase(classAttr);\n-    }\n-    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n-    boolean inClass = false;\n-    int start = 0;\n-    for (int i = 0; i < len; i++) {\n-        if (Character.isWhitespace(classAttr.charAt(i))) {\n-            if (inClass) {\n-                // white space ends a class name, compare it with the requested one, ignore case\n-                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n-                    return true;\n-                }\n-                inClass = false;\n-            }\n-        } else {\n-            if (!inClass) {\n-                // we're in a class name : keep the start of the substring\n-                inClass = true;\n-                start = i;\n-            }\n-        }\n-    }\n-    // check the last entry\n-    if (inClass && len - start == wantLen) {\n-        return classAttr.regionMatches(true, start, className, 0, wantLen);\n-    }\n-    return false;\n+    List<String> classes = Arrays.asList(classAttr.split(\"\\\\s+\"));\n+    return classes.contains(className);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    if (classAttr == null) {\n        return false;\n    }\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // white space ends a class name, compare it with the requested one, ignore case\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    // check the last entry\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -1,5 +1,8 @@\n public boolean hasClass(String className) {\n     final String classAttr = attributes.get(\"class\");\n+    if (classAttr == null) {\n+        return false;\n+    }\n     final int len = classAttr.length();\n     final int wantLen = className.length();\n     if (len == 0 || len < wantLen) {\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    if(classAttr == null){\n        return false;\n    }\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need to compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i <= len; i++) {\n        if (i == len || Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // white space ends a class name, compare it with the requested one, ignore case\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -1,19 +1,22 @@\n public boolean hasClass(String className) {\n     final String classAttr = attributes.get(\"class\");\n+    if(classAttr == null){\n+        return false;\n+    }\n     final int len = classAttr.length();\n     final int wantLen = className.length();\n     if (len == 0 || len < wantLen) {\n         return false;\n     }\n-    // if both lengths are equal, only need compare the className with the attribute\n+    // if both lengths are equal, only need to compare the className with the attribute\n     if (len == wantLen) {\n         return className.equalsIgnoreCase(classAttr);\n     }\n     // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n     boolean inClass = false;\n     int start = 0;\n-    for (int i = 0; i < len; i++) {\n-        if (Character.isWhitespace(classAttr.charAt(i))) {\n+    for (int i = 0; i <= len; i++) {\n+        if (i == len || Character.isWhitespace(classAttr.charAt(i))) {\n             if (inClass) {\n                 // white space ends a class name, compare it with the requested one, ignore case\n                 if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n@@ -29,9 +32,5 @@\n             }\n         }\n     }\n-    // check the last entry\n-    if (inClass && len - start == wantLen) {\n-        return classAttr.regionMatches(true, start, className, 0, wantLen);\n-    }\n     return false;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    if (classAttr == null) {\n        return false;\n    }\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                return true;\n            }\n            start = i + 1;\n        }\n    }\n    if (len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -1,36 +1,20 @@\n public boolean hasClass(String className) {\n     final String classAttr = attributes.get(\"class\");\n+    if (classAttr == null) {\n+        return false;\n+    }\n     final int len = classAttr.length();\n     final int wantLen = className.length();\n-    if (len == 0 || len < wantLen) {\n-        return false;\n-    }\n-    // if both lengths are equal, only need compare the className with the attribute\n-    if (len == wantLen) {\n-        return className.equalsIgnoreCase(classAttr);\n-    }\n-    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n-    boolean inClass = false;\n     int start = 0;\n     for (int i = 0; i < len; i++) {\n         if (Character.isWhitespace(classAttr.charAt(i))) {\n-            if (inClass) {\n-                // white space ends a class name, compare it with the requested one, ignore case\n-                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n-                    return true;\n-                }\n-                inClass = false;\n+            if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n+                return true;\n             }\n-        } else {\n-            if (!inClass) {\n-                // we're in a class name : keep the start of the substring\n-                inClass = true;\n-                start = i;\n-            }\n+            start = i + 1;\n         }\n     }\n-    // check the last entry\n-    if (inClass && len - start == wantLen) {\n+    if (len - start == wantLen) {\n         return classAttr.regionMatches(true, start, className, 0, wantLen);\n     }\n     return false;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // white space ends a class name, compare it with the requested one, ignore case\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    // check the last entry\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    // add a check to return false if the className was not found\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -33,5 +33,6 @@\n     if (inClass && len - start == wantLen) {\n         return classAttr.regionMatches(true, start, className, 0, wantLen);\n     }\n+    // add a check to return false if the className was not found\n     return false;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    if (classAttr == null || classAttr.isEmpty()) {\n        return false;\n    }\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // whitespace ends a class name, compare it with the requested one, ignore case\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    // check the last entry\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -1,8 +1,11 @@\n public boolean hasClass(String className) {\n     final String classAttr = attributes.get(\"class\");\n+    if (classAttr == null || classAttr.isEmpty()) {\n+        return false;\n+    }\n     final int len = classAttr.length();\n     final int wantLen = className.length();\n-    if (len == 0 || len < wantLen) {\n+    if (len < wantLen) {\n         return false;\n     }\n     // if both lengths are equal, only need compare the className with the attribute\n@@ -15,7 +18,7 @@\n     for (int i = 0; i < len; i++) {\n         if (Character.isWhitespace(classAttr.charAt(i))) {\n             if (inClass) {\n-                // white space ends a class name, compare it with the requested one, ignore case\n+                // whitespace ends a class name, compare it with the requested one, ignore case\n                 if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                     return true;\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i <= len - wantLen; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // white space ends a class name, compare it with the requested one, ignore case\n                if (classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    // check the last entry\n    if (inClass && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n        return true;\n    }\n    return false;\n}\n\n## Fixed Function 2\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (!(o instanceof Element)) {\n        return false;\n    }\n    Element element = (Element) o;\n    if (tag.getName().equals(element.tag.getName())) { // added null check for getName()\n        if (attributes != null ? !attributes.equals(element.attributes) : element.attributes != null) {\n            return false;\n        }\n        if (childNodes != null ? !childNodes.equals(element.childNodes) : element.childNodes != null) {\n            return false;\n        }\n        if (baseUri != null ? !baseUri.equals(element.baseUri) : element.baseUri() != null) {\n            return false;\n        }\n        if (namespace != null ? !namespace.equals(element.namespace) : element.namespace != null) {\n            return false;\n        }\n        if (parentNode != null ? !parentNode.equals(element.parentNode) : element.parentNode != null) {\n            return false;\n        }\n    } else {\n        return false;\n    }\n\n    return true;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -12,11 +12,11 @@\n     // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n     boolean inClass = false;\n     int start = 0;\n-    for (int i = 0; i < len; i++) {\n+    for (int i = 0; i <= len - wantLen; i++) {\n         if (Character.isWhitespace(classAttr.charAt(i))) {\n             if (inClass) {\n                 // white space ends a class name, compare it with the requested one, ignore case\n-                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n+                if (classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                     return true;\n                 }\n                 inClass = false;\n@@ -30,8 +30,8 @@\n         }\n     }\n     // check the last entry\n-    if (inClass && len - start == wantLen) {\n-        return classAttr.regionMatches(true, start, className, 0, wantLen);\n+    if (inClass && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n+        return true;\n     }\n     return false;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    if (attributes.hasKey(\"class\")) {\n        final String classAttr = attributes.get(\"class\");\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n        int start = 0;\n        int end = 0;\n        while (end < len) {\n            while (end < len && !Character.isWhitespace(classAttr.charAt(end))) {\n                end++;\n            }\n            if (classAttr.substring(start, end).equalsIgnoreCase(className)) {\n                return true;\n            }\n            while (end < len && Character.isWhitespace(classAttr.charAt(end))) {\n                end++;\n            }\n            start = end;\n        }\n    }\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -1,37 +1,25 @@\n public boolean hasClass(String className) {\n-    final String classAttr = attributes.get(\"class\");\n-    final int len = classAttr.length();\n-    final int wantLen = className.length();\n-    if (len == 0 || len < wantLen) {\n-        return false;\n-    }\n-    // if both lengths are equal, only need compare the className with the attribute\n-    if (len == wantLen) {\n-        return className.equalsIgnoreCase(classAttr);\n-    }\n-    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n-    boolean inClass = false;\n-    int start = 0;\n-    for (int i = 0; i < len; i++) {\n-        if (Character.isWhitespace(classAttr.charAt(i))) {\n-            if (inClass) {\n-                // white space ends a class name, compare it with the requested one, ignore case\n-                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n-                    return true;\n-                }\n-                inClass = false;\n+    if (attributes.hasKey(\"class\")) {\n+        final String classAttr = attributes.get(\"class\");\n+        final int len = classAttr.length();\n+        final int wantLen = className.length();\n+        if (len == wantLen) {\n+            return className.equalsIgnoreCase(classAttr);\n+        }\n+        int start = 0;\n+        int end = 0;\n+        while (end < len) {\n+            while (end < len && !Character.isWhitespace(classAttr.charAt(end))) {\n+                end++;\n             }\n-        } else {\n-            if (!inClass) {\n-                // we're in a class name : keep the start of the substring\n-                inClass = true;\n-                start = i;\n+            if (classAttr.substring(start, end).equalsIgnoreCase(className)) {\n+                return true;\n             }\n+            while (end < len && Character.isWhitespace(classAttr.charAt(end))) {\n+                end++;\n+            }\n+            start = end;\n         }\n-    }\n-    // check the last entry\n-    if (inClass && len - start == wantLen) {\n-        return classAttr.regionMatches(true, start, className, 0, wantLen);\n     }\n     return false;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    if (classAttr == null || classAttr.isEmpty()) {\n        return false;\n    }\n    String[] classes = classAttr.split(\"\\\\s+\");\n    for(String clazz : classes) {\n        if (clazz.equalsIgnoreCase(className)) {\n            return true;\n        }\n    }\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -1,37 +1,13 @@\n public boolean hasClass(String className) {\n     final String classAttr = attributes.get(\"class\");\n-    final int len = classAttr.length();\n-    final int wantLen = className.length();\n-    if (len == 0 || len < wantLen) {\n+    if (classAttr == null || classAttr.isEmpty()) {\n         return false;\n     }\n-    // if both lengths are equal, only need compare the className with the attribute\n-    if (len == wantLen) {\n-        return className.equalsIgnoreCase(classAttr);\n-    }\n-    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n-    boolean inClass = false;\n-    int start = 0;\n-    for (int i = 0; i < len; i++) {\n-        if (Character.isWhitespace(classAttr.charAt(i))) {\n-            if (inClass) {\n-                // white space ends a class name, compare it with the requested one, ignore case\n-                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n-                    return true;\n-                }\n-                inClass = false;\n-            }\n-        } else {\n-            if (!inClass) {\n-                // we're in a class name : keep the start of the substring\n-                inClass = true;\n-                start = i;\n-            }\n+    String[] classes = classAttr.split(\"\\\\s+\");\n+    for(String clazz : classes) {\n+        if (clazz.equalsIgnoreCase(className)) {\n+            return true;\n         }\n-    }\n-    // check the last entry\n-    if (inClass && len - start == wantLen) {\n-        return classAttr.regionMatches(true, start, className, 0, wantLen);\n     }\n     return false;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i <= len - wantLen; i++) { // fixed loop condition to prevent out of bound error\n        if (Character.isWhitespace(classAttr.charAt(i)) || i == len - wantLen) { // fixed checking the end of string\n            if (inClass) {\n                // white space or end of string ends a class name, compare it with the requested one, ignore case\n                if ((i - start == wantLen || i == len - wantLen) && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    return false;\n} \n\n## Fixed Function 2\npublic boolean hasAttr(String key) {\n    Validate.notNull(key);\n\n    if (attributes == null) {\n        return false;\n    }\n    return attributes.hasKey(key.toLowerCase()); // changed to lowercase for more accurate comparison\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -12,11 +12,11 @@\n     // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n     boolean inClass = false;\n     int start = 0;\n-    for (int i = 0; i < len; i++) {\n-        if (Character.isWhitespace(classAttr.charAt(i))) {\n+    for (int i = 0; i <= len - wantLen; i++) { // fixed loop condition to prevent out of bound error\n+        if (Character.isWhitespace(classAttr.charAt(i)) || i == len - wantLen) { // fixed checking the end of string\n             if (inClass) {\n-                // white space ends a class name, compare it with the requested one, ignore case\n-                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n+                // white space or end of string ends a class name, compare it with the requested one, ignore case\n+                if ((i - start == wantLen || i == len - wantLen) && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                     return true;\n                 }\n                 inClass = false;\n@@ -29,9 +29,5 @@\n             }\n         }\n     }\n-    // check the last entry\n-    if (inClass && len - start == wantLen) {\n-        return classAttr.regionMatches(true, start, className, 0, wantLen);\n-    }\n     return false;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    if(classAttr == null) {\n        return false;\n    }\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // white space ends a class name, compare it with the requested one, ignore case\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    // check the last entry\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -1,5 +1,8 @@\n public boolean hasClass(String className) {\n     final String classAttr = attributes.get(\"class\");\n+    if(classAttr == null) {\n+        return false;\n+    }\n     final int len = classAttr.length();\n     final int wantLen = className.length();\n     if (len == 0 || len < wantLen) {\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\npublic boolean hasClass(String className) {\n    final String classAttr = attributes.get(\"class\");\n    if(classAttr == null) { // handle the case where there is no class attribute\n        return false;\n    }\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // white space ends a class name, compare it with the requested one, ignore case\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // we're in a class name : keep the start of the substring\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    // check the last entry\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}", "diff": "--- org/jsoup/nodes/Element.java@hasClass\n+++ org/jsoup/nodes/Element.java@hasClass\n@@ -1,5 +1,8 @@\n public boolean hasClass(String className) {\n     final String classAttr = attributes.get(\"class\");\n+    if(classAttr == null) { // handle the case where there is no class attribute\n+        return false;\n+    }\n     final int len = classAttr.length();\n     final int wantLen = className.length();\n     if (len == 0 || len < wantLen) {\n", "finish_reason": "stop", "valid": false, "num": 1}]