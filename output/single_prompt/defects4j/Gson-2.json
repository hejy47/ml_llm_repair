[{"output": "## Fixed Function 1\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n            final Class<? super T2> requestedType = typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            // check for exact match of class types (issue #1089)\n            if (clazz != requestedType && !(clazz.isInterface() && requestedType.isAssignableFrom(clazz))) {\n                return null;\n            }\n            return (TypeAdapter<T2>) typeAdapter;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n}", "diff": "--- com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n+++ com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n@@ -5,6 +5,10 @@\n         public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n             final Class<? super T2> requestedType = typeToken.getRawType();\n             if (!clazz.isAssignableFrom(requestedType)) {\n+                return null;\n+            }\n+            // check for exact match of class types (issue #1089)\n+            if (clazz != requestedType && !(clazz.isInterface() && requestedType.isAssignableFrom(clazz))) {\n                 return null;\n             }\n             return (TypeAdapter<T2>) typeAdapter;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n            final Class<? super T2> requestedType = typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            return typeAdapter.nullSafe();\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n} \n\n## Explanation\nThe previous implementation of the `create` method was returning null if the `requestedType` is not assignable from the `clazz`. However, this caused a `NullPointerException` when the returned `TypeAdapter` is used because it wasn't null-safe. The fixed implementation makes the `TypeAdapter` null-safe using the `TypeAdapter.nullSafe()` method.", "diff": "--- com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n+++ com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n@@ -7,7 +7,7 @@\n             if (!clazz.isAssignableFrom(requestedType)) {\n                 return null;\n             }\n-            return (TypeAdapter<T2>) typeAdapter;\n+            return typeAdapter.nullSafe();\n         }\n \n         @Override\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n            final Class<? super T2> requestedType = typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            return typeAdapter.cast(gson.getDelegateAdapter(this, typeToken));\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n} \n\n## Fixed Function 2\npublic static <T> TypeAdapterFactory newFactory(final Class<T> type, final TypeAdapter<T> typeAdapter) {\n    return new TypeAdapterFactory() {\n        @SuppressWarnings(\"unchecked\")\n        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n            return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;\n        }\n    };\n}", "diff": "--- com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n+++ com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n@@ -1,13 +1,12 @@\n public static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n     return new TypeAdapterFactory() {\n \n-        @SuppressWarnings(\"unchecked\")\n         public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n             final Class<? super T2> requestedType = typeToken.getRawType();\n             if (!clazz.isAssignableFrom(requestedType)) {\n                 return null;\n             }\n-            return (TypeAdapter<T2>) typeAdapter;\n+            return typeAdapter.cast(gson.getDelegateAdapter(this, typeToken));\n         }\n \n         @Override\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n            final Class<? super T2> requestedType = typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            if (clazz == requestedType) {\n                return (TypeAdapter<T2>) typeAdapter;\n            } else {\n                return null;\n            }\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n}", "diff": "--- com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n+++ com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n@@ -7,7 +7,11 @@\n             if (!clazz.isAssignableFrom(requestedType)) {\n                 return null;\n             }\n-            return (TypeAdapter<T2>) typeAdapter;\n+            if (clazz == requestedType) {\n+                return (TypeAdapter<T2>) typeAdapter;\n+            } else {\n+                return null;\n+            }\n         }\n \n         @Override\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n            if (!clazz.isAssignableFrom(typeToken.getRawType())) {\n                return null;\n            }\n            return (TypeAdapter<T2>) typeAdapter;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n}", "diff": "--- com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n+++ com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n@@ -3,8 +3,7 @@\n \n         @SuppressWarnings(\"unchecked\")\n         public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n-            final Class<? super T2> requestedType = typeToken.getRawType();\n-            if (!clazz.isAssignableFrom(requestedType)) {\n+            if (!clazz.isAssignableFrom(typeToken.getRawType())) {\n                 return null;\n             }\n             return (TypeAdapter<T2>) typeAdapter;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n            final Class<? super T2> requestedType = typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            if (clazz == requestedType) {\n                return (TypeAdapter<T2>) typeAdapter;\n            }\n            return null;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n}", "diff": "--- com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n+++ com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n@@ -7,7 +7,10 @@\n             if (!clazz.isAssignableFrom(requestedType)) {\n                 return null;\n             }\n-            return (TypeAdapter<T2>) typeAdapter;\n+            if (clazz == requestedType) {\n+                return (TypeAdapter<T2>) typeAdapter;\n+            }\n+            return null;\n         }\n \n         @Override\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n            final Class<? super T2> requestedType = typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            return (TypeAdapter<T2>) typeAdapter;\n        }\n\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n}\n\n## Explanation\nIn the Buggy Function 1, the '@Override' annotation is added to the toString() method, which results in a compilation error, as the toString() method is not being overridden from the superclass. To fix it, the '@Override' annotation is removed from the toString() method.", "diff": "--- com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n+++ com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n@@ -10,7 +10,6 @@\n             return (TypeAdapter<T2>) typeAdapter;\n         }\n \n-        @Override\n         public String toString() {\n             return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static <T1, T2 extends T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T2> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public <T3> TypeAdapter<T3> create(Gson gson, TypeToken<T3> typeToken) {\n            final Class<? super T3> requestedType = typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            return (TypeAdapter<T3>) typeAdapter;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n}\n\nExplanation:\nThe issue with the original function is that it returns a different TypeAdapter than the one provided, if the requested type is not directly assignable to clazz. The fix involves using a bounded type parameter T2 that extends from T1, and changing all instances of T2 to T3, with appropriate changes to corresponding method parameters and return types. This ensures that the returned TypeAdapter is always compatible with the requested type, while still adhering to the original intended functionality.", "diff": "", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "## Fixed Function 1\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n            final Class<? super T2> requestedType = typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            // use TypeAdapter of T1 instead of T2\n            return (TypeAdapter<T2>) typeAdapter;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n}", "diff": "--- com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n+++ com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n@@ -7,6 +7,7 @@\n             if (!clazz.isAssignableFrom(requestedType)) {\n                 return null;\n             }\n+            // use TypeAdapter of T1 instead of T2\n             return (TypeAdapter<T2>) typeAdapter;\n         }\n \n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n            final Class<? super T2> requestedType = typeToken.getRawType();\n            if (clazz.isAssignableFrom(requestedType)) {\n                return (TypeAdapter<T2>) typeAdapter;\n            }\n            return null;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n} \n\nIn the original code, the if statement in the create method checks if `!clazz.isAssignableFrom(requestedType)`. This condition is inverted, and as a result, the method attempts to return null when it should be returning the `typeAdapter`. The fix is to change the if statement to `clazz.isAssignableFrom(requestedType)`.", "diff": "--- com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n+++ com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n@@ -4,10 +4,10 @@\n         @SuppressWarnings(\"unchecked\")\n         public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n             final Class<? super T2> requestedType = typeToken.getRawType();\n-            if (!clazz.isAssignableFrom(requestedType)) {\n-                return null;\n+            if (clazz.isAssignableFrom(requestedType)) {\n+                return (TypeAdapter<T2>) typeAdapter;\n             }\n-            return (TypeAdapter<T2>) typeAdapter;\n+            return null;\n         }\n \n         @Override\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "## Fixed Function 1\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n            final Class<? super T2> requestedType = typeToken.getRawType();\n            if (requestedType != clazz && !clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            return (TypeAdapter<T2>) typeAdapter;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n}", "diff": "--- com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n+++ com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n@@ -4,7 +4,7 @@\n         @SuppressWarnings(\"unchecked\")\n         public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n             final Class<? super T2> requestedType = typeToken.getRawType();\n-            if (!clazz.isAssignableFrom(requestedType)) {\n+            if (requestedType != clazz && !clazz.isAssignableFrom(requestedType)) {\n                 return null;\n             }\n             return (TypeAdapter<T2>) typeAdapter;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n            final Class<? super T2> requestedType = typeToken.getRawType();\n            if (!requestedType.isAssignableFrom(clazz)) {\n                return null;\n            }\n            return (TypeAdapter<T2>) typeAdapter;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n        }\n    };\n}", "diff": "--- com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n+++ com/google/gson/internal/bind/TypeAdapters.java@newTypeHierarchyFactory\n@@ -4,7 +4,7 @@\n         @SuppressWarnings(\"unchecked\")\n         public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n             final Class<? super T2> requestedType = typeToken.getRawType();\n-            if (!clazz.isAssignableFrom(requestedType)) {\n+            if (!requestedType.isAssignableFrom(clazz)) {\n                 return null;\n             }\n             return (TypeAdapter<T2>) typeAdapter;\n", "finish_reason": "stop", "valid": false, "num": 3}]