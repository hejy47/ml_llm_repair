[{"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(Connection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(Connection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(Connection.KeyVal.create(name, val));\n            }\n        } else {\n            data.add(Connection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -16,22 +16,22 @@\n             Elements options = el.select(\"option[selected]\");\n             boolean set = false;\n             for (Element option : options) {\n-                data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                data.add(Connection.KeyVal.create(name, option.val()));\n                 set = true;\n             }\n             if (!set) {\n                 Element option = el.select(\"option\").first();\n                 if (option != null)\n-                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                    data.add(Connection.KeyVal.create(name, option.val()));\n             }\n         } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n             // only add checkbox or radio if they have the checked attribute\n             if (el.hasAttr(\"checked\")) {\n                 final String val = el.val().length() > 0 ? el.val() : \"on\";\n-                data.add(HttpConnection.KeyVal.create(name, val));\n+                data.add(Connection.KeyVal.create(name, val));\n             }\n         } else {\n-            data.add(HttpConnection.KeyVal.create(name, el.val()));\n+            data.add(Connection.KeyVal.create(name, el.val()));\n         }\n     }\n     return data;\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmitable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            }\n        } else {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -3,7 +3,7 @@\n     // iterate the form control elements and accumulate their values\n     for (Element el : elements) {\n         // contents are form listable, superset of submitable\n-        if (!el.tag().isFormSubmittable())\n+        if (!el.tag().isFormSubmitable())\n             continue;\n         // skip disabled form inputs\n         if (el.hasAttr(\"disabled\"))\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equalsIgnoreCase(el.normalName())) { // Changed to ignore case\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) { // Changed to ignore case\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            }\n        } else {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -12,7 +12,7 @@\n         if (name.length() == 0)\n             continue;\n         String type = el.attr(\"type\");\n-        if (\"select\".equals(el.normalName())) {\n+        if (\"select\".equalsIgnoreCase(el.normalName())) { // Changed to ignore case\n             Elements options = el.select(\"option[selected]\");\n             boolean set = false;\n             for (Element option : options) {\n@@ -24,7 +24,7 @@\n                 if (option != null)\n                     data.add(HttpConnection.KeyVal.create(name, option.val()));\n             }\n-        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n+        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) { // Changed to ignore case\n             // only add checkbox or radio if they have the checked attribute\n             if (el.hasAttr(\"checked\")) {\n                 final String val = el.val().length() > 0 ? el.val() : \"on\";\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(Connection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(Connection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(Connection.KeyVal.create(name, val));\n            } else {\n                // if the checkbox is not selected, we still need to add the data with an empty value to ensure it is sent\n                data.add(Connection.KeyVal.create(name, \"\"));\n            }\n        } else {\n            data.add(Connection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -16,22 +16,25 @@\n             Elements options = el.select(\"option[selected]\");\n             boolean set = false;\n             for (Element option : options) {\n-                data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                data.add(Connection.KeyVal.create(name, option.val()));\n                 set = true;\n             }\n             if (!set) {\n                 Element option = el.select(\"option\").first();\n                 if (option != null)\n-                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                    data.add(Connection.KeyVal.create(name, option.val()));\n             }\n         } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n             // only add checkbox or radio if they have the checked attribute\n             if (el.hasAttr(\"checked\")) {\n                 final String val = el.val().length() > 0 ? el.val() : \"on\";\n-                data.add(HttpConnection.KeyVal.create(name, val));\n+                data.add(Connection.KeyVal.create(name, val));\n+            } else {\n+                // if the checkbox is not selected, we still need to add the data with an empty value to ensure it is sent\n+                data.add(Connection.KeyVal.create(name, \"\"));\n             }\n         } else {\n-            data.add(HttpConnection.KeyVal.create(name, el.val()));\n+            data.add(Connection.KeyVal.create(name, el.val()));\n         }\n     }\n     return data;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equalsIgnoreCase(el.normalName())) {\n            Elements options = el.select(\"option[selected],option[value]\");\n            for (Element option : options) {\n                String valueToSend = option.hasAttr(\"value\") ? option.attr(\"value\") : option.text();\n                data.add(HttpConnection.KeyVal.create(name, valueToSend));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            } else {\n                // add empty value for unchecked checkboxes\n                data.add(HttpConnection.KeyVal.create(name, \"\"));\n            }\n        } else if (\"textarea\".equalsIgnoreCase(el.normalName())) {\n            data.add(HttpConnection.KeyVal.create(name, el.text()));\n        } else if (\"password\".equalsIgnoreCase(type)) {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        } else if (\"file\".equalsIgnoreCase(type)) {\n            // NO-OP, implemented at Request level\n        } else { // default to standard form element processing\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -12,25 +12,28 @@\n         if (name.length() == 0)\n             continue;\n         String type = el.attr(\"type\");\n-        if (\"select\".equals(el.normalName())) {\n-            Elements options = el.select(\"option[selected]\");\n-            boolean set = false;\n+        if (\"select\".equalsIgnoreCase(el.normalName())) {\n+            Elements options = el.select(\"option[selected],option[value]\");\n             for (Element option : options) {\n-                data.add(HttpConnection.KeyVal.create(name, option.val()));\n-                set = true;\n-            }\n-            if (!set) {\n-                Element option = el.select(\"option\").first();\n-                if (option != null)\n-                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                String valueToSend = option.hasAttr(\"value\") ? option.attr(\"value\") : option.text();\n+                data.add(HttpConnection.KeyVal.create(name, valueToSend));\n             }\n         } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n             // only add checkbox or radio if they have the checked attribute\n             if (el.hasAttr(\"checked\")) {\n                 final String val = el.val().length() > 0 ? el.val() : \"on\";\n                 data.add(HttpConnection.KeyVal.create(name, val));\n+            } else {\n+                // add empty value for unchecked checkboxes\n+                data.add(HttpConnection.KeyVal.create(name, \"\"));\n             }\n-        } else {\n+        } else if (\"textarea\".equalsIgnoreCase(el.normalName())) {\n+            data.add(HttpConnection.KeyVal.create(name, el.text()));\n+        } else if (\"password\".equalsIgnoreCase(type)) {\n+            data.add(HttpConnection.KeyVal.create(name, el.val()));\n+        } else if (\"file\".equalsIgnoreCase(type)) {\n+            // NO-OP, implemented at Request level\n+        } else { // default to standard form element processing\n             data.add(HttpConnection.KeyVal.create(name, el.val()));\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submittable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name == null || name.isEmpty())\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(Connection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(Connection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(Connection.KeyVal.create(name, val));\n            }\n        } else {\n            data.add(Connection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -2,36 +2,36 @@\n     ArrayList<Connection.KeyVal> data = new ArrayList<>();\n     // iterate the form control elements and accumulate their values\n     for (Element el : elements) {\n-        // contents are form listable, superset of submitable\n+        // contents are form listable, superset of submittable\n         if (!el.tag().isFormSubmittable())\n             continue;\n         // skip disabled form inputs\n         if (el.hasAttr(\"disabled\"))\n             continue;\n         String name = el.attr(\"name\");\n-        if (name.length() == 0)\n+        if (name == null || name.isEmpty())\n             continue;\n         String type = el.attr(\"type\");\n         if (\"select\".equals(el.normalName())) {\n             Elements options = el.select(\"option[selected]\");\n             boolean set = false;\n             for (Element option : options) {\n-                data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                data.add(Connection.KeyVal.create(name, option.val()));\n                 set = true;\n             }\n             if (!set) {\n                 Element option = el.select(\"option\").first();\n                 if (option != null)\n-                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                    data.add(Connection.KeyVal.create(name, option.val()));\n             }\n         } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n             // only add checkbox or radio if they have the checked attribute\n             if (el.hasAttr(\"checked\")) {\n                 final String val = el.val().length() > 0 ? el.val() : \"on\";\n-                data.add(HttpConnection.KeyVal.create(name, val));\n+                data.add(Connection.KeyVal.create(name, val));\n             }\n         } else {\n-            data.add(HttpConnection.KeyVal.create(name, el.val()));\n+            data.add(Connection.KeyVal.create(name, el.val()));\n         }\n     }\n     return data;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(Connection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(Connection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(Connection.KeyVal.create(name, val));\n            } else {\n                // Fix: Add empty value for unchecked checkboxes or radios\n                final String val = \"\";\n                data.add(Connection.KeyVal.create(name, val));\n            }\n        } else {\n            data.add(Connection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -16,22 +16,26 @@\n             Elements options = el.select(\"option[selected]\");\n             boolean set = false;\n             for (Element option : options) {\n-                data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                data.add(Connection.KeyVal.create(name, option.val()));\n                 set = true;\n             }\n             if (!set) {\n                 Element option = el.select(\"option\").first();\n                 if (option != null)\n-                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                    data.add(Connection.KeyVal.create(name, option.val()));\n             }\n         } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n             // only add checkbox or radio if they have the checked attribute\n             if (el.hasAttr(\"checked\")) {\n                 final String val = el.val().length() > 0 ? el.val() : \"on\";\n-                data.add(HttpConnection.KeyVal.create(name, val));\n+                data.add(Connection.KeyVal.create(name, val));\n+            } else {\n+                // Fix: Add empty value for unchecked checkboxes or radios\n+                final String val = \"\";\n+                data.add(Connection.KeyVal.create(name, val));\n             }\n         } else {\n-            data.add(HttpConnection.KeyVal.create(name, el.val()));\n+            data.add(Connection.KeyVal.create(name, el.val()));\n         }\n     }\n     return data;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                String val = option.val();\n                if (val.length() == 0) {\n                    val = option.text();\n                }\n                data.add(HttpConnection.KeyVal.create(name, val));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null) {\n                    String val = option.val();\n                    if (val.length() == 0) {\n                        val = option.text();\n                    }\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            }\n        } else {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -16,13 +16,22 @@\n             Elements options = el.select(\"option[selected]\");\n             boolean set = false;\n             for (Element option : options) {\n-                data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                String val = option.val();\n+                if (val.length() == 0) {\n+                    val = option.text();\n+                }\n+                data.add(HttpConnection.KeyVal.create(name, val));\n                 set = true;\n             }\n             if (!set) {\n                 Element option = el.select(\"option\").first();\n-                if (option != null)\n-                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                if (option != null) {\n+                    String val = option.val();\n+                    if (val.length() == 0) {\n+                        val = option.text();\n+                    }\n+                    data.add(HttpConnection.KeyVal.create(name, val));\n+                }\n             }\n         } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n             // only add checkbox or radio if they have the checked attribute\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equalsIgnoreCase(el.tagName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            } else {\n                if (\"checkbox\".equalsIgnoreCase(type)) {\n                    data.add(HttpConnection.KeyVal.create(name, \"\"));\n                }\n            }\n        } else {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -12,7 +12,7 @@\n         if (name.length() == 0)\n             continue;\n         String type = el.attr(\"type\");\n-        if (\"select\".equals(el.normalName())) {\n+        if (\"select\".equalsIgnoreCase(el.tagName())) {\n             Elements options = el.select(\"option[selected]\");\n             boolean set = false;\n             for (Element option : options) {\n@@ -29,6 +29,10 @@\n             if (el.hasAttr(\"checked\")) {\n                 final String val = el.val().length() > 0 ? el.val() : \"on\";\n                 data.add(HttpConnection.KeyVal.create(name, val));\n+            } else {\n+                if (\"checkbox\".equalsIgnoreCase(type)) {\n+                    data.add(HttpConnection.KeyVal.create(name, \"\"));\n+                }\n             }\n         } else {\n             data.add(HttpConnection.KeyVal.create(name, el.val()));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(Connection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(Connection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(Connection.KeyVal.create(name, val));\n            } else {\n                // explicitly add un-checked checkbox as another key-val pair with a value of \"off\"\n                data.add(Connection.KeyVal.create(name, \"off\"));\n            }\n        } else {\n            data.add(Connection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -16,22 +16,25 @@\n             Elements options = el.select(\"option[selected]\");\n             boolean set = false;\n             for (Element option : options) {\n-                data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                data.add(Connection.KeyVal.create(name, option.val()));\n                 set = true;\n             }\n             if (!set) {\n                 Element option = el.select(\"option\").first();\n                 if (option != null)\n-                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                    data.add(Connection.KeyVal.create(name, option.val()));\n             }\n         } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n             // only add checkbox or radio if they have the checked attribute\n             if (el.hasAttr(\"checked\")) {\n                 final String val = el.val().length() > 0 ? el.val() : \"on\";\n-                data.add(HttpConnection.KeyVal.create(name, val));\n+                data.add(Connection.KeyVal.create(name, val));\n+            } else {\n+                // explicitly add un-checked checkbox as another key-val pair with a value of \"off\"\n+                data.add(Connection.KeyVal.create(name, \"off\"));\n             }\n         } else {\n-            data.add(HttpConnection.KeyVal.create(name, el.val()));\n+            data.add(Connection.KeyVal.create(name, el.val()));\n         }\n     }\n     return data;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equalsIgnoreCase(el.tag().getName())) { // fix: normalize tag name for select element\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            }\n        } else {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -12,7 +12,7 @@\n         if (name.length() == 0)\n             continue;\n         String type = el.attr(\"type\");\n-        if (\"select\".equals(el.normalName())) {\n+        if (\"select\".equalsIgnoreCase(el.tag().getName())) { // fix: normalize tag name for select element\n             Elements options = el.select(\"option[selected]\");\n             boolean set = false;\n             for (Element option : options) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(Connection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(Connection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(Connection.KeyVal.create(name, val));\n            } else {\n                data.add(Connection.KeyVal.create(name, \"\"));\n            }\n        } else {\n            data.add(Connection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}\n\n## Fixed Function 2\npublic Response execute() throws IOException {\n    // ensure we can do the redirect as a GET no matter what the original request was\n    if (method != Method.GET && method != Method.HEAD) {\n        throw new IllegalArgumentException(\"Invalid redirect method: \" + method);\n    }\n    int redirects = 0;\n    Connection.Response previousResponse = null;\n    while (true) {\n        if (redirects++ >= maxRedirects)\n            throw new IOException(String.format(\"Too many redirects occurred trying to load URL %s\", url));\n        if (previousResponse != null) {\n            url(previousResponse.url().toString());\n            String method = previousResponse.method();\n            if (method.equalsIgnoreCase(\"GET\") ||\n                    method.equalsIgnoreCase(\"HEAD\")) {\n                this.method(Method.valueOf(method));\n                data.clear();\n                headers.remove(CONTENT_TYPE);\n            }\n            for (Map.Entry<String, String> cookie : previousResponse.cookies().entrySet()) {\n                cookie(cookie.getKey(), cookie.getValue());\n            }\n        }\n        Response res = executeFetch(url, cookies, headers, data, method.isOutput(), validateTLSCertificates);\n        int status = res.statusCode();\n        if (status < 300 || status >= 400)\n            return res;\n        String newLocation = res.header(\"Location\");\n        if (newLocation == null)\n            throw new IOException(\n                    String.format(\"Received redirect with no location: %s\", res.statusMessage()));\n        URL resolvedUrl = resolve(httpUrl(), newLocation);\n        previousResponse = res;\n        this.url(resolvedUrl.toExternalForm());\n        this.method(Method.GET); // always redirect with a get. any data param from original req are dropped.\n        this.data.clear();\n    }\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -16,22 +16,24 @@\n             Elements options = el.select(\"option[selected]\");\n             boolean set = false;\n             for (Element option : options) {\n-                data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                data.add(Connection.KeyVal.create(name, option.val()));\n                 set = true;\n             }\n             if (!set) {\n                 Element option = el.select(\"option\").first();\n                 if (option != null)\n-                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                    data.add(Connection.KeyVal.create(name, option.val()));\n             }\n         } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n             // only add checkbox or radio if they have the checked attribute\n             if (el.hasAttr(\"checked\")) {\n                 final String val = el.val().length() > 0 ? el.val() : \"on\";\n-                data.add(HttpConnection.KeyVal.create(name, val));\n+                data.add(Connection.KeyVal.create(name, val));\n+            } else {\n+                data.add(Connection.KeyVal.create(name, \"\"));\n             }\n         } else {\n-            data.add(HttpConnection.KeyVal.create(name, el.val()));\n+            data.add(Connection.KeyVal.create(name, el.val()));\n         }\n     }\n     return data;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, \"\"));\n            }\n        } else {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -29,6 +29,8 @@\n             if (el.hasAttr(\"checked\")) {\n                 final String val = el.val().length() > 0 ? el.val() : \"on\";\n                 data.add(HttpConnection.KeyVal.create(name, val));\n+            } else {\n+                data.add(HttpConnection.KeyVal.create(name, \"\"));\n             }\n         } else {\n             data.add(HttpConnection.KeyVal.create(name, el.val()));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submittable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected],option[value]:not([value=''])\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            }\n        } else {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -2,7 +2,7 @@\n     ArrayList<Connection.KeyVal> data = new ArrayList<>();\n     // iterate the form control elements and accumulate their values\n     for (Element el : elements) {\n-        // contents are form listable, superset of submitable\n+        // contents are form listable, superset of submittable\n         if (!el.tag().isFormSubmittable())\n             continue;\n         // skip disabled form inputs\n@@ -13,7 +13,7 @@\n             continue;\n         String type = el.attr(\"type\");\n         if (\"select\".equals(el.normalName())) {\n-            Elements options = el.select(\"option[selected]\");\n+            Elements options = el.select(\"option[selected],option[value]:not([value=''])\");\n             boolean set = false;\n             for (Element option : options) {\n                 data.add(HttpConnection.KeyVal.create(name, option.val()));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected],option:checked\");\n            for (Element option : options) {\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            }\n        } else {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n} \n\n## Fixed Function 2 (additional fix)\nprivate static String mimeBoundary() {\n    String base = \"WebKitFormBoundary\";\n    StringBuilder mime = new StringBuilder();\n    Random rand = new Random();\n    for (int i = 0; i < 16; i++) {\n        mime.append(base.charAt(rand.nextInt(base.length())));\n    }\n    return mime.toString();\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -11,18 +11,12 @@\n         String name = el.attr(\"name\");\n         if (name.length() == 0)\n             continue;\n+\n         String type = el.attr(\"type\");\n         if (\"select\".equals(el.normalName())) {\n-            Elements options = el.select(\"option[selected]\");\n-            boolean set = false;\n+            Elements options = el.select(\"option[selected],option:checked\");\n             for (Element option : options) {\n                 data.add(HttpConnection.KeyVal.create(name, option.val()));\n-                set = true;\n-            }\n-            if (!set) {\n-                Element option = el.select(\"option\").first();\n-                if (option != null)\n-                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n             }\n         } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n             // only add checkbox or radio if they have the checked attribute\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            } else {\n                // Fix: For unchecked checkboxes/radios, add a KeyVal with a blank value\n                data.add(HttpConnection.KeyVal.create(name, \"\"));\n            }\n        } else {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -29,6 +29,9 @@\n             if (el.hasAttr(\"checked\")) {\n                 final String val = el.val().length() > 0 ? el.val() : \"on\";\n                 data.add(HttpConnection.KeyVal.create(name, val));\n+            } else {\n+                // Fix: For unchecked checkboxes/radios, add a KeyVal with a blank value\n+                data.add(HttpConnection.KeyVal.create(name, \"\"));\n             }\n         } else {\n             data.add(HttpConnection.KeyVal.create(name, el.val()));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n    // iterate the form control elements and accumulate their values\n    for (Element el : elements) {\n        // contents are form listable, superset of submitable\n        if (!el.tag().isFormSubmittable())\n            continue;\n        // skip disabled form inputs\n        if (el.hasAttr(\"disabled\"))\n            continue;\n        String name = el.attr(\"name\");\n        if (name == null || name.length() == 0)\n            continue;\n        String type = el.attr(\"type\");\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option : options) {\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() > 0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            }\n        } else {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}", "diff": "--- org/jsoup/nodes/FormElement.java@formData\n+++ org/jsoup/nodes/FormElement.java@formData\n@@ -9,7 +9,7 @@\n         if (el.hasAttr(\"disabled\"))\n             continue;\n         String name = el.attr(\"name\");\n-        if (name.length() == 0)\n+        if (name == null || name.length() == 0)\n             continue;\n         String type = el.attr(\"type\");\n         if (\"select\".equals(el.normalName())) {\n", "finish_reason": "stop", "valid": false, "num": 1}]