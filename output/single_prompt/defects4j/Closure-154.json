[{"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.isSubtype(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.isSubtype(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    } else {\n        JSType instancePropType = instance.getPropertyType(prop);\n        JSType interfacePropType = implementedInterface.getPropertyType(prop);\n        if (!instancePropType.isSubtype(interfacePropType)) {\n            compiler.report(JSError.make((String) n.getProp(Node.SOURCENAME_PROP), n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -24,7 +24,7 @@\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n-                if (!propertyType.canAssignTo(interfacePropType)) {\n+                if (!propertyType.isSubtype(interfacePropType)) {\n                     compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n@@ -48,7 +48,7 @@\n     if (superClassHasProperty) {\n         // there is a superclass implementation\n         JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n-        if (!propertyType.canAssignTo(superClassPropType)) {\n+        if (!propertyType.isSubtype(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -8,5 +8,11 @@\n         }\n         registerMismatch(instance, implementedInterface);\n         // Implemented, but not correctly typed\n+    } else {\n+        JSType instancePropType = instance.getPropertyType(prop);\n+        JSType interfacePropType = implementedInterface.getPropertyType(prop);\n+        if (!instancePropType.isSubtype(interfacePropType)) {\n+            compiler.report(JSError.make((String) n.getProp(Node.SOURCENAME_PROP), n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.isSubtypeOf(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.isSubtypeOf(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getSourceFile().getName();\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -5,7 +5,7 @@\n         return;\n     }\n     FunctionType superClass = ctorType.getSuperClassConstructor();\n-    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n+    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n     boolean declaredOverride = info != null && info.isOverride();\n     boolean foundInterfaceProperty = false;\n     if (ctorType.isConstructor()) {\n@@ -15,7 +15,7 @@\n             }\n             FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n-            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n+            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n             foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                 // @override not present, but the property does override an interface\n@@ -24,7 +24,7 @@\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n-                if (!propertyType.canAssignTo(interfacePropType)) {\n+                if (!propertyType.isSubtypeOf(interfacePropType)) {\n                     compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n@@ -48,7 +48,7 @@\n     if (superClassHasProperty) {\n         // there is a superclass implementation\n         JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n-        if (!propertyType.canAssignTo(superClassPropType)) {\n+        if (!propertyType.isSubtypeOf(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,7 +1,7 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n     if (!instance.hasProperty(prop)) {\n         // Not implemented\n-        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n+        String sourceName = (String) n.getSourceFile().getName();\n         sourceName = sourceName == null ? \"\" : sourceName;\n         if (shouldReport) {\n             compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.isSubtypeOf(interfacePropType)) { // changed from \"canAssignTo\" to \"isSubtypeOf\"\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.isSubtypeOf(superClassPropType)) { // changed from \"canAssignTo\" to \"isSubtypeOf\"\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!implementedInterface.hasProperty(prop)) { // changed from \"instance.hasProperty\" to \"implementedInterface.hasProperty\"\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -24,7 +24,7 @@\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n-                if (!propertyType.canAssignTo(interfacePropType)) {\n+                if (!propertyType.isSubtypeOf(interfacePropType)) { // changed from \"canAssignTo\" to \"isSubtypeOf\"\n                     compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n@@ -48,7 +48,7 @@\n     if (superClassHasProperty) {\n         // there is a superclass implementation\n         JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n-        if (!propertyType.canAssignTo(superClassPropType)) {\n+        if (!propertyType.isSubtypeOf(superClassPropType)) { // changed from \"canAssignTo\" to \"isSubtypeOf\"\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!implementedInterface.hasProperty(prop)) { // changed from \"instance.hasProperty\" to \"implementedInterface.hasProperty\"\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasOwnProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -5,7 +5,7 @@\n         return;\n     }\n     FunctionType superClass = ctorType.getSuperClassConstructor();\n-    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n+    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n     boolean declaredOverride = info != null && info.isOverride();\n     boolean foundInterfaceProperty = false;\n     if (ctorType.isConstructor()) {\n@@ -15,7 +15,7 @@\n             }\n             FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n-            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n+            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n             foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                 // @override not present, but the property does override an interface\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.hasOwnProperty(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop) && !instance.hasDirectProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -5,7 +5,7 @@\n         return;\n     }\n     FunctionType superClass = ctorType.getSuperClassConstructor();\n-    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n+    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n     boolean declaredOverride = info != null && info.isOverride();\n     boolean foundInterfaceProperty = false;\n     if (ctorType.isConstructor()) {\n@@ -15,7 +15,7 @@\n             }\n             FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n-            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n+            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n             foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                 // @override not present, but the property does override an interface\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.hasProperty(prop) && !instance.hasDirectProperty(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();    \n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, implementedInterface.toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, implementedInterface.toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasOwnProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -1,11 +1,9 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n-    // If the supertype doesn't resolve correctly, we've warned about this\n-    // already.\n     if (hasUnknownOrEmptySupertype(ctorType)) {\n         return;\n     }\n-    FunctionType superClass = ctorType.getSuperClassConstructor();\n-    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n+    FunctionType superClass = ctorType.getSuperClassConstructor();    \n+    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n     boolean declaredOverride = info != null && info.isOverride();\n     boolean foundInterfaceProperty = false;\n     if (ctorType.isConstructor()) {\n@@ -15,17 +13,17 @@\n             }\n             FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n-            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n+            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n             foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                 // @override not present, but the property does override an interface\n                 // property\n-                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n+                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, implementedInterface.toString()));\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                 if (!propertyType.canAssignTo(interfacePropType)) {\n-                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n+                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, implementedInterface.toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n         }\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.hasOwnProperty(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasOwnProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -1,11 +1,10 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n-    // If the supertype doesn't resolve correctly, we've warned about this\n-    // already.\n+    // If the supertype doesn't resolve correctly, we've warned about this already.\n     if (hasUnknownOrEmptySupertype(ctorType)) {\n         return;\n     }\n     FunctionType superClass = ctorType.getSuperClassConstructor();\n-    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n+    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n     boolean declaredOverride = info != null && info.isOverride();\n     boolean foundInterfaceProperty = false;\n     if (ctorType.isConstructor()) {\n@@ -15,11 +14,10 @@\n             }\n             FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n-            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n+            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n             foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n-                // @override not present, but the property does override an interface\n-                // property\n+                // @override not present, but the property does override an interface property\n                 compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n             }\n             if (interfaceHasProperty) {\n@@ -36,8 +34,7 @@\n     }\n     JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n-        // @override not present, but the property does override a superclass\n-        // property\n+        // @override not present, but the property does override a superclass property\n         compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.hasOwnProperty(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toMaybeFunctionType();\n            if (interfaceType == null) {\n                continue;\n            }\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canTypeRestrictTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canTypeRestrictTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasOwnProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -5,7 +5,7 @@\n         return;\n     }\n     FunctionType superClass = ctorType.getSuperClassConstructor();\n-    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n+    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n     boolean declaredOverride = info != null && info.isOverride();\n     boolean foundInterfaceProperty = false;\n     if (ctorType.isConstructor()) {\n@@ -13,9 +13,11 @@\n             if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                 continue;\n             }\n-            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n-            Preconditions.checkNotNull(interfaceType);\n-            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n+            FunctionType interfaceType = implementedInterface.toMaybeFunctionType();\n+            if (interfaceType == null) {\n+                continue;\n+            }\n+            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n             foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                 // @override not present, but the property does override an interface\n@@ -24,7 +26,7 @@\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n-                if (!propertyType.canAssignTo(interfacePropType)) {\n+                if (!propertyType.canTypeRestrictTo(interfacePropType)) {\n                     compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n@@ -48,7 +50,7 @@\n     if (superClassHasProperty) {\n         // there is a superclass implementation\n         JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n-        if (!propertyType.canAssignTo(superClassPropType)) {\n+        if (!propertyType.canTypeRestrictTo(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.hasOwnProperty(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.getOwnPropertyNames().contains(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -5,7 +5,7 @@\n         return;\n     }\n     FunctionType superClass = ctorType.getSuperClassConstructor();\n-    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n+    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n     boolean declaredOverride = info != null && info.isOverride();\n     boolean foundInterfaceProperty = false;\n     if (ctorType.isConstructor()) {\n@@ -15,7 +15,7 @@\n             }\n             FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n-            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n+            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n             foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                 // @override not present, but the property does override an interface\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.getOwnPropertyNames().contains(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isInterface()) {\n        for (JSType extendedInterface : ctorType.getExtendedInterfaces()) {\n            if (extendedInterface.isUnknownType() || extendedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = extendedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && !ctorType.isInterface() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!implementedInterface.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -8,12 +8,12 @@\n     boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n     boolean declaredOverride = info != null && info.isOverride();\n     boolean foundInterfaceProperty = false;\n-    if (ctorType.isConstructor()) {\n-        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n-            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n+    if (ctorType.isInterface()) {\n+        for (JSType extendedInterface : ctorType.getExtendedInterfaces()) {\n+            if (extendedInterface.isUnknownType() || extendedInterface.isEmptyType()) {\n                 continue;\n             }\n-            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n+            FunctionType interfaceType = extendedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n             boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n             foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n@@ -35,7 +35,7 @@\n         return;\n     }\n     JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n-    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n+    if (reportMissingOverride.isOn() && !ctorType.isInterface() && !declaredOverride && superClassHasProperty) {\n         // @override not present, but the property does override a superclass\n         // property\n         compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n@@ -53,6 +53,6 @@\n         }\n     } else if (!foundInterfaceProperty) {\n         // there is no superclass nor interface implementation\n-        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n+        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.toString()));\n     }\n }\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!implementedInterface.hasProperty(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(\n                    JSError.make(\n                        n,\n                        reportMissingOverride,\n                        HIDDEN_INTERFACE_PROPERTY,\n                        propertyName,\n                        interfaceType.getTopMostDefiningType(propertyName).toString()\n                    )\n                );\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.isSubtypeOf(interfacePropType)) {\n                    compiler.report(\n                        JSError.make(\n                            n,\n                            HIDDEN_INTERFACE_PROPERTY_MISMATCH,\n                            propertyName,\n                            interfaceType.getTopMostDefiningType(propertyName).toString(),\n                            interfacePropType.toString(),\n                            propertyType.toString()\n                        )\n                    );\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(\n            JSError.make(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString())\n        );\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.isSubtypeOf(superClassPropType)) {\n            compiler.report(\n                JSError.make(\n                    n,\n                    HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName,\n                    topInstanceType.toString(),\n                    superClassPropType.toString(),\n                    propertyType.toString()\n                )\n            );\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(\n            JSError.make(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString())\n        );\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(\n                JSError.make(\n                    n,\n                    INTERFACE_METHOD_NOT_IMPLEMENTED,\n                    prop,\n                    implementedInterface.toString(),\n                    instance.toString()\n                )\n            );\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    } else if (!instance.getPropertyType(prop).isSubtypeOf(implementedInterface.getPropertyType(prop))) {\n        // Implemented, but not correctly typed\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(\n                JSError.make(\n                    n,\n                    INTERFACE_METHOD_NOT_IMPLEMENTED,\n                    prop,\n                    implementedInterface.toString(),\n                    instance.toString()\n                )\n            );\n        }\n        registerMismatch(instance, implementedInterface);\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -20,12 +20,29 @@\n             if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                 // @override not present, but the property does override an interface\n                 // property\n-                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n+                compiler.report(\n+                    JSError.make(\n+                        n,\n+                        reportMissingOverride,\n+                        HIDDEN_INTERFACE_PROPERTY,\n+                        propertyName,\n+                        interfaceType.getTopMostDefiningType(propertyName).toString()\n+                    )\n+                );\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n-                if (!propertyType.canAssignTo(interfacePropType)) {\n-                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n+                if (!propertyType.isSubtypeOf(interfacePropType)) {\n+                    compiler.report(\n+                        JSError.make(\n+                            n,\n+                            HIDDEN_INTERFACE_PROPERTY_MISMATCH,\n+                            propertyName,\n+                            interfaceType.getTopMostDefiningType(propertyName).toString(),\n+                            interfacePropType.toString(),\n+                            propertyType.toString()\n+                        )\n+                    );\n                 }\n             }\n         }\n@@ -38,7 +55,9 @@\n     if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n         // @override not present, but the property does override a superclass\n         // property\n-        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n+        compiler.report(\n+            JSError.make(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString())\n+        );\n     }\n     if (!declaredOverride) {\n         // there's no @override to check\n@@ -48,11 +67,22 @@\n     if (superClassHasProperty) {\n         // there is a superclass implementation\n         JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n-        if (!propertyType.canAssignTo(superClassPropType)) {\n-            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n+        if (!propertyType.isSubtypeOf(superClassPropType)) {\n+            compiler.report(\n+                JSError.make(\n+                    n,\n+                    HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n+                    propertyName,\n+                    topInstanceType.toString(),\n+                    superClassPropType.toString(),\n+                    propertyType.toString()\n+                )\n+            );\n         }\n     } else if (!foundInterfaceProperty) {\n         // there is no superclass nor interface implementation\n-        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n+        compiler.report(\n+            JSError.make(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString())\n+        );\n     }\n }\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -4,9 +4,33 @@\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n         if (shouldReport) {\n-            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n+            compiler.report(\n+                JSError.make(\n+                    n,\n+                    INTERFACE_METHOD_NOT_IMPLEMENTED,\n+                    prop,\n+                    implementedInterface.toString(),\n+                    instance.toString()\n+                )\n+            );\n         }\n         registerMismatch(instance, implementedInterface);\n         // Implemented, but not correctly typed\n+    } else if (!instance.getPropertyType(prop).isSubtypeOf(implementedInterface.getPropertyType(prop))) {\n+        // Implemented, but not correctly typed\n+        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n+        sourceName = sourceName == null ? \"\" : sourceName;\n+        if (shouldReport) {\n+            compiler.report(\n+                JSError.make(\n+                    n,\n+                    INTERFACE_METHOD_NOT_IMPLEMENTED,\n+                    prop,\n+                    implementedInterface.toString(),\n+                    instance.toString()\n+                )\n+            );\n+        }\n+        registerMismatch(instance, implementedInterface);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.isSubtypeOf(interfacePropType)) {\n                    // Use isSubtypeOf instead of canAssignTo\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.isSubtypeOf(superClassPropType)) {\n            // Use isSubtypeOf instead of canAssignTo\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(implementedInterface, instance); // Swap order of parameters\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -24,7 +24,8 @@\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n-                if (!propertyType.canAssignTo(interfacePropType)) {\n+                if (!propertyType.isSubtypeOf(interfacePropType)) {\n+                    // Use isSubtypeOf instead of canAssignTo\n                     compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n@@ -48,7 +49,8 @@\n     if (superClassHasProperty) {\n         // there is a superclass implementation\n         JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n-        if (!propertyType.canAssignTo(superClassPropType)) {\n+        if (!propertyType.isSubtypeOf(superClassPropType)) {\n+            // Use isSubtypeOf instead of canAssignTo\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -6,7 +6,7 @@\n         if (shouldReport) {\n             compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n         }\n-        registerMismatch(instance, implementedInterface);\n+        registerMismatch(implementedInterface, instance); // Swap order of parameters\n         // Implemented, but not correctly typed\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            ObjectType interfaceType = implementedInterface.toObjectType();\n            FunctionType interfaceConstructor = interfaceType.getConstructor();\n            Preconditions.checkNotNull(interfaceConstructor);\n            boolean interfaceHasProperty = interfaceType.hasOwnProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceConstructor.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceConstructor.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasOwnProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -5,7 +5,7 @@\n         return;\n     }\n     FunctionType superClass = ctorType.getSuperClassConstructor();\n-    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n+    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n     boolean declaredOverride = info != null && info.isOverride();\n     boolean foundInterfaceProperty = false;\n     if (ctorType.isConstructor()) {\n@@ -13,19 +13,20 @@\n             if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                 continue;\n             }\n-            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n-            Preconditions.checkNotNull(interfaceType);\n-            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n+            ObjectType interfaceType = implementedInterface.toObjectType();\n+            FunctionType interfaceConstructor = interfaceType.getConstructor();\n+            Preconditions.checkNotNull(interfaceConstructor);\n+            boolean interfaceHasProperty = interfaceType.hasOwnProperty(propertyName);\n             foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                 // @override not present, but the property does override an interface\n                 // property\n-                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n+                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceConstructor.getTopMostDefiningType(propertyName).toString()));\n             }\n             if (interfaceHasProperty) {\n-                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n+                JSType interfacePropType = interfaceType.getPropertyType(propertyName);\n                 if (!propertyType.canAssignTo(interfacePropType)) {\n-                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n+                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceConstructor.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n         }\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.hasOwnProperty(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isInterface()) {\n        return;\n    }\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toMaybeFunctionType();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, implementedInterface.toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canStrictEqual(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, implementedInterface.toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        return;\n    }\n    if (superClassHasProperty) {\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canStrictEqual(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n    } else {\n        // Implemented, but not correctly typed\n        JSType instancePropType = instance.getPropertyType(prop);\n        JSType interfacePropType = implementedInterface.getPropertyType(prop);\n        if (!instancePropType.canAssignTo(interfacePropType)) {\n            String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n            sourceName = sourceName == null ? \"\" : sourceName;\n            if (shouldReport) {\n                compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_TYPE_MISMATCH, prop, implementedInterface.toString(), instancePropType.toString(), interfacePropType.toString()));\n            }\n            registerMismatch(instance, implementedInterface);\n        }\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -1,58 +1,50 @@\n private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n-    // If the supertype doesn't resolve correctly, we've warned about this\n-    // already.\n     if (hasUnknownOrEmptySupertype(ctorType)) {\n         return;\n     }\n     FunctionType superClass = ctorType.getSuperClassConstructor();\n-    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n+    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n     boolean declaredOverride = info != null && info.isOverride();\n     boolean foundInterfaceProperty = false;\n+    if (ctorType.isInterface()) {\n+        return;\n+    }\n     if (ctorType.isConstructor()) {\n         for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n             if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                 continue;\n             }\n-            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n+            FunctionType interfaceType = implementedInterface.toMaybeFunctionType();\n             Preconditions.checkNotNull(interfaceType);\n-            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n+            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n             foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n-                // @override not present, but the property does override an interface\n-                // property\n-                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n+                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, implementedInterface.toString()));\n             }\n             if (interfaceHasProperty) {\n                 JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n-                if (!propertyType.canAssignTo(interfacePropType)) {\n-                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n+                if (!propertyType.canStrictEqual(interfacePropType)) {\n+                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, implementedInterface.toString(), interfacePropType.toString(), propertyType.toString()));\n                 }\n             }\n         }\n     }\n     if (!declaredOverride && !superClassHasProperty) {\n-        // nothing to do here, it's just a plain new property\n         return;\n     }\n     JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n     if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n-        // @override not present, but the property does override a superclass\n-        // property\n         compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n     }\n     if (!declaredOverride) {\n-        // there's no @override to check\n         return;\n     }\n-    // @override is present and we have to check that it is ok\n     if (superClassHasProperty) {\n-        // there is a superclass implementation\n         JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n-        if (!propertyType.canAssignTo(superClassPropType)) {\n+        if (!propertyType.canStrictEqual(superClassPropType)) {\n             compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n         }\n     } else if (!foundInterfaceProperty) {\n-        // there is no superclass nor interface implementation\n         compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n     }\n }\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -7,6 +7,17 @@\n             compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n         }\n         registerMismatch(instance, implementedInterface);\n+    } else {\n         // Implemented, but not correctly typed\n+        JSType instancePropType = instance.getPropertyType(prop);\n+        JSType interfacePropType = implementedInterface.getPropertyType(prop);\n+        if (!instancePropType.canAssignTo(interfacePropType)) {\n+            String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n+            sourceName = sourceName == null ? \"\" : sourceName;\n+            if (shouldReport) {\n+                compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_TYPE_MISMATCH, prop, implementedInterface.toString(), instancePropType.toString(), interfacePropType.toString()));\n+            }\n+            registerMismatch(instance, implementedInterface);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop) && !implementedInterface.getPrototype().hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.hasProperty(prop) && !implementedInterface.getPrototype().hasProperty(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isInterface()) {\n        return; // Do not check properties in an interface.\n    } else if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}\n\n\n## Fixed Function 2\nprivate void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasOwnProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n+++ com/google/javascript/jscomp/TypeCheck.java@checkDeclaredPropertyInheritance\n@@ -5,17 +5,19 @@\n         return;\n     }\n     FunctionType superClass = ctorType.getSuperClassConstructor();\n-    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n+    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasOwnProperty(propertyName);\n     boolean declaredOverride = info != null && info.isOverride();\n     boolean foundInterfaceProperty = false;\n-    if (ctorType.isConstructor()) {\n+    if (ctorType.isInterface()) {\n+        return; // Do not check properties in an interface.\n+    } else if (ctorType.isConstructor()) {\n         for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n             if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                 continue;\n             }\n             FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n             Preconditions.checkNotNull(interfaceType);\n-            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n+            boolean interfaceHasProperty = interfaceType.getPrototype().hasOwnProperty(propertyName);\n             foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n             if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                 // @override not present, but the property does override an interface\n--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.hasOwnProperty(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}]