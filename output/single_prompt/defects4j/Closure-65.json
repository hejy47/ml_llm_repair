[{"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\/\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\!\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,8 +25,7 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n+            case '>':\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n@@ -34,38 +33,27 @@\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\/\");\n                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\!\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c < 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 6}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '\\u0026':\n                sb.append(\"\\\\u0026\");\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,8 +25,10 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n+            case '\\u0026':\n+                sb.append(\"\\\\u0026\");\n+                break;\n+            case '>':\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,8 +25,7 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n+            case '>':\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n@@ -34,9 +33,7 @@\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n@@ -47,25 +44,16 @@\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c < 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i -1 ) == ']' && s.charAt(i - 2) == ']' && s.charAt(i-3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,18 +25,15 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i -1 ) == ']' && s.charAt(i - 2) == ']' && s.charAt(i-3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n@@ -47,25 +44,16 @@\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c < 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\/\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\!\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else if (c > 0x1f && c < 0x7f) {\n                    sb.append(c);\n                } else {\n                    appendHexJavaScriptRepresentation(sb, c);\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,8 +25,7 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n+            case '>':\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n@@ -34,40 +33,27 @@\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\/\");\n                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\!\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n+                } else if (c > 0x1f && c < 0x7f) {\n+                    sb.append(c);\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n-                    if (c > 0x1f && c < 0x7f) {\n-                        sb.append(c);\n-                    } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n-                        appendHexJavaScriptRepresentation(sb, c);\n-                    }\n+                    appendHexJavaScriptRepresentation(sb, c);\n                 }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                // Escape > into \\>\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Escape < into <\\\\\n                final String END_SCRIPT = \"/script\";\n                // Escape <!-- into <\\\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,8 +25,8 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n+            case '>':\n+                // Escape > into \\>\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n@@ -34,14 +34,14 @@\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n+                // Escape < into <\\\\\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n+                // Escape <!-- into <\\\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\\\\\\");\n                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\\\\\\");\n                 } else {\n                     sb.append(c);\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                 // Fixed bug: escape > character properly\n                 final String GT = \">\";\n                 sb.append(GT);\n                 break;\n            case // Break --> into --\\> or ]]> into ]]\\>\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,8 +25,12 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n+            case '>':\n+                 // Fixed bug: escape > character properly\n+                 final String GT = \">\";\n+                 sb.append(GT);\n+                 break;\n             case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,8 +25,7 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n+            case '>':\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.length() - i >= END_SCRIPT.length() && s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.length() - i >= START_COMMENT.length() && s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,8 +25,7 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n+            case '>':\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n@@ -34,38 +33,27 @@\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n-                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n+                if (s.length() - i >= END_SCRIPT.length() && s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n-                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n+                } else if (s.length() - i >= START_COMMENT.length() && s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                     sb.append(\"<\\\\\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c < 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                // Change --> into --\\> and ]]> into ]]\\>\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,9 +25,9 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                // Change --> into --\\> and ]]> into ]]\\>\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\/\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\!--\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,8 +25,7 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n+            case '>':\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n@@ -34,38 +33,27 @@\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\/\");\n                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\!--\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c < 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                // Fix: Replace '>' with '\\>'\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                // Fix: Escape < with \\ and check if followed by /script or !--\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\\\\\");\n                } else {\n                    sb.append(\"<\");\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,8 +25,8 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n+            case '>':\n+                // Fix: Replace '>' with '\\>'\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n@@ -34,38 +34,28 @@\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n+                // Fix: Escape < with \\ and check if followed by /script or !--\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\\\\\\");\n                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\\\\\\");\n                 } else {\n-                    sb.append(c);\n+                    sb.append(\"<\");\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c < 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == '>' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\/\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\!\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -3,7 +3,7 @@\n     sb.append(quote);\n     for (int i = 0; i < s.length(); i++) {\n         char c = s.charAt(i);\n-        switch(c) {\n+        switch (c) {\n             case '\\0':\n                 sb.append(\"\\\\0\");\n                 break;\n@@ -25,47 +25,35 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == '>' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\/\");\n                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\!\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c < 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -25,18 +25,15 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n@@ -47,25 +44,16 @@\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c < 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}]