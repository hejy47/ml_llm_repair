[{"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.getPattern() != null ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.getLocale() != null ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -8,10 +8,10 @@\n             if (shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n+            if (shape == JsonFormat.Shape.STRING) {\n                 TimeZone tz = format.getTimeZone();\n-                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n-                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n+                final String pattern = format.getPattern() != null ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n+                final Locale loc = format.getLocale() != null ? format.getLocale() : serializers.getLocale();\n                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                 if (tz == null) {\n                     tz = serializers.getTimeZone();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape != null && shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (format.getShape() == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -5,7 +5,7 @@\n         if (format != null) {\n             // Simple case first: serialize as numeric timestamp?\n             JsonFormat.Shape shape = format.getShape();\n-            if (shape.isNumeric()) {\n+            if (shape != null && shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n             if (format.getShape() == JsonFormat.Shape.STRING) {\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) { // Fixed comparison operator\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -8,7 +8,7 @@\n             if (shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n+            if (shape == JsonFormat.Shape.STRING) { // Fixed comparison operator\n                 TimeZone tz = format.getTimeZone();\n                 final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                 final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = property.getAnnotation(JsonFormat.Value.class);\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (format.getShape() == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.getPattern().isEmpty() ? StdDateFormat.DATE_FORMAT_STR_ISO8601 : format.getPattern();\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -1,7 +1,7 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n     if (property != null) {\n-        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n+        JsonFormat.Value format = property.getAnnotation(JsonFormat.Value.class);\n         if (format != null) {\n             // Simple case first: serialize as numeric timestamp?\n             JsonFormat.Shape shape = format.getShape();\n@@ -10,7 +10,7 @@\n             }\n             if (format.getShape() == JsonFormat.Shape.STRING) {\n                 TimeZone tz = format.getTimeZone();\n-                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n+                final String pattern = format.getPattern().isEmpty() ? StdDateFormat.DATE_FORMAT_STR_ISO8601 : format.getPattern();\n                 final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                 if (tz == null) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) { // fixed: use `shape` variable instead of calling `getShape()` again\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -8,7 +8,7 @@\n             if (shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n+            if (shape == JsonFormat.Shape.STRING) { // fixed: use `shape` variable instead of calling `getShape()` again\n                 TimeZone tz = format.getTimeZone();\n                 final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                 final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n// Add null check for property\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (format.getShape() == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 2\n// Use property.getMember() instead of property.getMember()\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (format.getShape() == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) { // fixed comparison\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.getPattern() != \"\" ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; // fixed pattern check\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -8,9 +8,9 @@\n             if (shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n+            if (shape == JsonFormat.Shape.STRING) { // fixed comparison\n                 TimeZone tz = format.getTimeZone();\n-                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n+                final String pattern = format.getPattern() != \"\" ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; // fixed pattern check\n                 final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                 if (tz == null) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat(property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.getPattern() != null ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.getLocale() != null ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -1,17 +1,17 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n     if (property != null) {\n-        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n+        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat(property.getMember());\n         if (format != null) {\n             // Simple case first: serialize as numeric timestamp?\n             JsonFormat.Shape shape = format.getShape();\n             if (shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n+            if (shape == JsonFormat.Shape.STRING) {\n                 TimeZone tz = format.getTimeZone();\n-                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n-                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n+                final String pattern = format.getPattern() != null ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n+                final Locale loc = format.getLocale() != null ? format.getLocale() : serializers.getLocale();\n                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                 if (tz == null) {\n                     tz = serializers.getTimeZone();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = property.getAnnotation(JsonFormat.class);\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (format.getShape() == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.getPattern().isEmpty() ? StdDateFormat.DATE_FORMAT_STR_ISO8601 : format.getPattern();\n                final Locale loc = format.locale().isEmpty() ? serializers.getLocale() : new Locale(format.locale());\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -1,7 +1,7 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n     if (property != null) {\n-        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n+        JsonFormat.Value format = property.getAnnotation(JsonFormat.class);\n         if (format != null) {\n             // Simple case first: serialize as numeric timestamp?\n             JsonFormat.Shape shape = format.getShape();\n@@ -10,8 +10,8 @@\n             }\n             if (format.getShape() == JsonFormat.Shape.STRING) {\n                 TimeZone tz = format.getTimeZone();\n-                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n-                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n+                final String pattern = format.getPattern().isEmpty() ? StdDateFormat.DATE_FORMAT_STR_ISO8601 : format.getPattern();\n+                final Locale loc = format.locale().isEmpty() ? serializers.getLocale() : new Locale(format.locale());\n                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                 if (tz == null) {\n                     tz = serializers.getTimeZone();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) { // Fixed: use 'shape' variable instead of calling 'format.getShape()' again\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -8,7 +8,7 @@\n             if (shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n+            if (shape == JsonFormat.Shape.STRING) { // Fixed: use 'shape' variable instead of calling 'format.getShape()' again\n                 TimeZone tz = format.getTimeZone();\n                 final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                 final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = property.getAnnotation(JsonFormat.class);\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (format.getShape() == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.getPattern();\n                final Locale loc = format.locale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -1,7 +1,7 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n     if (property != null) {\n-        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n+        JsonFormat.Value format = property.getAnnotation(JsonFormat.class);\n         if (format != null) {\n             // Simple case first: serialize as numeric timestamp?\n             JsonFormat.Shape shape = format.getShape();\n@@ -10,8 +10,8 @@\n             }\n             if (format.getShape() == JsonFormat.Shape.STRING) {\n                 TimeZone tz = format.getTimeZone();\n-                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n-                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n+                final String pattern = format.getPattern();\n+                final Locale loc = format.locale();\n                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                 if (tz == null) {\n                     tz = serializers.getTimeZone();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat(property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) { //Changed format.getShape() to shape\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -1,14 +1,14 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n     if (property != null) {\n-        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n+        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat(property.getMember());\n         if (format != null) {\n             // Simple case first: serialize as numeric timestamp?\n             JsonFormat.Shape shape = format.getShape();\n             if (shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n+            if (shape == JsonFormat.Shape.STRING) { //Changed format.getShape() to shape\n                 TimeZone tz = format.getTimeZone();\n                 final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                 final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat(property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) { // Fixed: comparing shape directly instead of calling getShape()\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -1,14 +1,14 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n     if (property != null) {\n-        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n+        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat(property.getMember());\n         if (format != null) {\n             // Simple case first: serialize as numeric timestamp?\n             JsonFormat.Shape shape = format.getShape();\n             if (shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n+            if (shape == JsonFormat.Shape.STRING) { // Fixed: comparing shape directly instead of calling getShape()\n                 TimeZone tz = format.getTimeZone();\n                 final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                 final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) { // fixed: compare shape directly instead of calling getShape() method again\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -8,7 +8,7 @@\n             if (shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n+            if (shape == JsonFormat.Shape.STRING) { // fixed: compare shape directly instead of calling getShape() method again\n                 TimeZone tz = format.getTimeZone();\n                 final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                 final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat(property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) {\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.getPattern() == null ? StdDateFormat.DATE_FORMAT_STR_ISO8601 : format.getPattern();\n                final Locale loc = format.getLocale() == null ? serializers.getLocale() : format.getLocale();                    \n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -1,17 +1,17 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n     if (property != null) {\n-        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n+        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat(property.getMember());\n         if (format != null) {\n             // Simple case first: serialize as numeric timestamp?\n             JsonFormat.Shape shape = format.getShape();\n             if (shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n+            if (shape == JsonFormat.Shape.STRING) {\n                 TimeZone tz = format.getTimeZone();\n-                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n-                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n+                final String pattern = format.getPattern() == null ? StdDateFormat.DATE_FORMAT_STR_ISO8601 : format.getPattern();\n+                final Locale loc = format.getLocale() == null ? serializers.getLocale() : format.getLocale();                    \n                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                 if (tz == null) {\n                     tz = serializers.getTimeZone();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n        if (format != null) {\n            // Simple case first: serialize as numeric timestamp?\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n            if (shape == JsonFormat.Shape.STRING) { // changed from \"format.getShape()\" to \"shape\"\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -8,7 +8,7 @@\n             if (shape.isNumeric()) {\n                 return withFormat(Boolean.TRUE, null);\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n+            if (shape == JsonFormat.Shape.STRING) { // changed from \"format.getShape()\" to \"shape\"\n                 TimeZone tz = format.getTimeZone();\n                 final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                 final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = null;\n    if (property != null) {\n        format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n    }\n\n    if (format == null) {\n        format = serializers.getDefaultPropertyFormat(property.getType().getRawClass());\n    }\n\n    if (format != null) {\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n        if (shape == JsonFormat.Shape.STRING) {\n            TimeZone tz = format.getTimeZone();\n            final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n            final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java@createContextual\n@@ -1,24 +1,29 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n+    JsonFormat.Value format = null;\n     if (property != null) {\n-        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n-        if (format != null) {\n-            // Simple case first: serialize as numeric timestamp?\n-            JsonFormat.Shape shape = format.getShape();\n-            if (shape.isNumeric()) {\n-                return withFormat(Boolean.TRUE, null);\n+        format = serializers.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n+    }\n+\n+    if (format == null) {\n+        format = serializers.getDefaultPropertyFormat(property.getType().getRawClass());\n+    }\n+\n+    if (format != null) {\n+        JsonFormat.Shape shape = format.getShape();\n+        if (shape.isNumeric()) {\n+            return withFormat(Boolean.TRUE, null);\n+        }\n+        if (shape == JsonFormat.Shape.STRING) {\n+            TimeZone tz = format.getTimeZone();\n+            final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n+            final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n+            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n+            if (tz == null) {\n+                tz = serializers.getTimeZone();\n             }\n-            if (format.getShape() == JsonFormat.Shape.STRING) {\n-                TimeZone tz = format.getTimeZone();\n-                final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n-                final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n-                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n-                if (tz == null) {\n-                    tz = serializers.getTimeZone();\n-                }\n-                df.setTimeZone(tz);\n-                return withFormat(Boolean.FALSE, df);\n-            }\n+            df.setTimeZone(tz);\n+            return withFormat(Boolean.FALSE, df);\n         }\n     }\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}]