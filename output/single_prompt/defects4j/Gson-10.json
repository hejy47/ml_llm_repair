[{"output": "## Fixed Function 1\nprivate ReflectiveTypeAdapterFactory.BoundField createBoundField(final Gson context, final Field field, final String name, final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n    // special casing primitives here saves ~5% on Android...\n    JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n    TypeAdapter<?> mapped = null;\n    if (annotation != null) {\n        mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n    }\n    final boolean jsonAdapterPresent = mapped != null;\n    if (mapped == null)\n        mapped = context.getAdapter(fieldType);\n    final TypeAdapter<?> typeAdapter = mapped;\n    return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n\n        // the type adapter and field type always agree\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        @Override\n        void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException {\n            if (field != null) {\n                Object fieldValue = field.get(value);\n                TypeAdapter t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n                t.write(writer, fieldValue);\n            }\n        }\n\n        @Override\n        void read(JsonReader reader, Object value) throws IOException, IllegalAccessException {\n            if (field != null) {\n                Object fieldValue = typeAdapter.read(reader);\n                if (fieldValue != null || !isPrimitive) {\n                    field.set(value, fieldValue);\n                }\n            }\n        }\n\n        @Override\n        public boolean writeField(Object value) throws IOException, IllegalAccessException {\n            if (!serialized || field == null)\n                return false;\n            Object fieldValue = field.get(value);\n            // avoid recursion for example for Throwable.cause\n            return fieldValue != value;\n        }\n    };\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 20}]