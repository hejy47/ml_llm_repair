[{"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec defined\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec defined\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(node));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec defined\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec defined\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // codec is required for tree write\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for TokenBuffer, cannot write TreeNode\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(node));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n    if (_objectCodec != null) {\n        _objectCodec.writeValue(this, value);\n        return;\n    }\n    throw new IllegalStateException(\"No ObjectCodec defined for the generator, can not serialize \" + value.getClass().getName());\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec defined for the generator, can not serialize JsonNode-based trees\");\n    }\n    _objectCodec.writeTree(this, node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,9 @@\n @Override\n public void writeObject(Object value) throws IOException {\n     _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec != null) {\n+        _objectCodec.writeValue(this, value);\n+        return;\n+    }\n+    throw new IllegalStateException(\"No ObjectCodec defined for the generator, can not serialize \" + value.getClass().getName());\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,9 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+    if (_objectCodec != null) {\n+        _objectCodec.writeValue(this, value);\n+        return;\n+    }\n+    throw new IllegalStateException(\"No ObjectCodec defined for the generator, can not serialize \" + value.getClass().getName());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(node));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsBytes(value));\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsBytes(node));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsBytes(value));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsBytes(value));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n+    }\n     _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new JsonGenerationException(\"No ObjectCodec configured for JsonGenerator, can not serialize \" + value.getClass());\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new JsonGenerationException(\"No ObjectCodec configured for JsonGenerator, can not serialize TreeNode\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new JsonGenerationException(\"No ObjectCodec configured for JsonGenerator, can not serialize \" + value.getClass());\n+    }\n     _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new JsonGenerationException(\"No ObjectCodec configured for JsonGenerator, can not serialize \" + value.getClass());\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n         throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n         throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeTree() called\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(node));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+         throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+         throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    _verifyValueWrite(\"write embedded object\");\n    if (value == null) {\n        _writeNull();\n        return;\n    }\n    if (value.getClass() == byte[].class) {\n        writeBinary((byte[]) value);\n        return;\n    }\n    if (value instanceof RawValue) {\n        _appendRaw((RawValue) value);\n        return;\n    }\n    if (_objectCodec == null) {\n        throw new JsonGenerationException(\"No ObjectCodec configured for TokenBuffer, can't write object\");\n    }\n    _objectCodec.writeValue(this, value);\n}\n\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    _writeValueAndClose(node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,20 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    _verifyValueWrite(\"write embedded object\");\n+    if (value == null) {\n+        _writeNull();\n+        return;\n+    }\n+    if (value.getClass() == byte[].class) {\n+        writeBinary((byte[]) value);\n+        return;\n+    }\n+    if (value instanceof RawValue) {\n+        _appendRaw((RawValue) value);\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        throw new JsonGenerationException(\"No ObjectCodec configured for TokenBuffer, can't write object\");\n+    }\n+    _objectCodec.writeValue(this, value);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,20 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    _verifyValueWrite(\"write embedded object\");\n+    if (value == null) {\n+        _writeNull();\n+        return;\n+    }\n+    if (value.getClass() == byte[].class) {\n+        writeBinary((byte[]) value);\n+        return;\n+    }\n+    if (value instanceof RawValue) {\n+        _appendRaw((RawValue) value);\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        throw new JsonGenerationException(\"No ObjectCodec configured for TokenBuffer, can't write object\");\n+    }\n+    _objectCodec.writeValue(this, value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new JsonGenerationException(\"No ObjectCodec configured for TokenBuffer, can't serialize regular Java objects\");\n    }\n    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new JsonGenerationException(\"No ObjectCodec configured for TokenBuffer, can't write Tree nodes\");\n    }\n    String json = _objectCodec.writeValueAsString(node);\n    JsonParser parser = _objectCodec.getFactory().createParser(new StringReader(json));\n    JsonToken token = parser.nextToken();\n    while (token != null) {\n        _appendToken(token, parser);\n        token = parser.nextToken();\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new JsonGenerationException(\"No ObjectCodec configured for TokenBuffer, can't serialize regular Java objects\");\n+    }\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new JsonGenerationException(\"No ObjectCodec configured for TokenBuffer, can't serialize regular Java objects\");\n+    }\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) { // check if codec is configured\n        throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value)); // use codec to write value as JSON string\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) { // check if codec is configured\n        throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeTree() called\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(node)); // use codec to write node as JSON string\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) { // check if codec is configured\n+        throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value)); // use codec to write value as JSON string\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) { // check if codec is configured\n+        throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value)); // use codec to write value as JSON string\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for TokenBuffer, cannot serialize\");\n    }\n    _writeValueAndClose(_objectCodec, value);\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for TokenBuffer, cannot serialize\");\n    }\n    _writeValueAndClose(_objectCodec, node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for TokenBuffer, cannot serialize\");\n+    }\n+    _writeValueAndClose(_objectCodec, value);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for TokenBuffer, cannot serialize\");\n+    }\n+    _writeValueAndClose(_objectCodec, value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"Cannot write Embedded Object without ObjectCodec\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"Cannot write Tree Node without ObjectCodec\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(node));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"Cannot write Embedded Object without ObjectCodec\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"Cannot write Embedded Object without ObjectCodec\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsBytes(value));\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsBytes(node));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsBytes(value));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper\");\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsBytes(value));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec defined\");\n    }\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    JsonGenerator jg = _jsonFactory.createJsonGenerator(baos, JsonEncoding.UTF8);\n    jg.writeObject(value);\n    jg.close();\n\n    // deserialized as generic Object; but that should be safe, right?\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, baos.toByteArray());\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec defined\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsBytes(node));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,13 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec defined\");\n+    }\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    JsonGenerator jg = _jsonFactory.createJsonGenerator(baos, JsonEncoding.UTF8);\n+    jg.writeObject(value);\n+    jg.close();\n+\n+    // deserialized as generic Object; but that should be safe, right?\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, baos.toByteArray());\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,13 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec defined\");\n+    }\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    JsonGenerator jg = _jsonFactory.createJsonGenerator(baos, JsonEncoding.UTF8);\n+    jg.writeObject(value);\n+    jg.close();\n+\n+    // deserialized as generic Object; but that should be safe, right?\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, baos.toByteArray());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec defined for the parser, can not serialize \" + value.getClass());\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec defined for the parser\");\n    }\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(node));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec defined for the parser, can not serialize \" + value.getClass());\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec defined for the parser, can not serialize \" + value.getClass());\n+    }\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, _objectCodec.writeValueAsString(value));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new JsonGenerationException(\"No ObjectCodec configured for JsonGenerator\");\n    }\n    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new JsonGenerationException(\"No ObjectCodec configured for JsonGenerator\");\n    }\n    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new JsonGenerationException(\"No ObjectCodec configured for JsonGenerator\");\n+    }\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new JsonGenerationException(\"No ObjectCodec configured for JsonGenerator\");\n+    }\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void writeObject(Object value) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper, can not serialize \" + value.getClass());\n    }\n    _objectCodec.writeValue(this, value);\n}\n\n## Fixed Function 2\n@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_objectCodec == null) {\n        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper, can not serialize \" +node.getClass());\n    }\n    _objectCodec.writeTree(this, node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper, can not serialize \" + value.getClass());\n+    }\n+    _objectCodec.writeValue(this, value);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+public void writeObject(Object value) throws IOException {\n+    if (_objectCodec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec configured for ObjectMapper, can not serialize \" + value.getClass());\n+    }\n+    _objectCodec.writeValue(this, value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]