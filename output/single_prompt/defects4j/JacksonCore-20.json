[{"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof JsonSerializable) {\n        ((JsonSerializable) object).serialize(this, _generator);\n        return;\n    }\n    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,8 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n+    if (object instanceof JsonSerializable) {\n+        ((JsonSerializable) object).serialize(this, _generator);\n+        return;\n+    }\n     throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof byte[]) {\n        writeBinary((byte[]) object);\n    } else if (object instanceof Number) {\n        Number n = (Number) object;\n        if (n instanceof BigDecimal) {\n            writeNumber((BigDecimal) n);\n        } else if (n instanceof BigInteger) {\n            writeNumber((BigInteger) n);\n        } else if (n instanceof Integer) {\n            writeNumber(n.intValue());\n        } else if (n instanceof Long) {\n            writeNumber(n.longValue());\n        } else if (n instanceof Double) {\n            writeNumber(n.doubleValue());\n        } else if (n instanceof Float) {\n            writeNumber(n.floatValue());\n        } else {\n            writeNumber(n.toString());\n        }\n    } else if (object instanceof String) {\n        writeString((String) object);\n    } else if (object instanceof Boolean) {\n        writeBoolean((Boolean) object);\n    } else if (object == null) {\n        writeNull();\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects of type \"\n                + object.getClass().getName(), this);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,32 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof byte[]) {\n+        writeBinary((byte[]) object);\n+    } else if (object instanceof Number) {\n+        Number n = (Number) object;\n+        if (n instanceof BigDecimal) {\n+            writeNumber((BigDecimal) n);\n+        } else if (n instanceof BigInteger) {\n+            writeNumber((BigInteger) n);\n+        } else if (n instanceof Integer) {\n+            writeNumber(n.intValue());\n+        } else if (n instanceof Long) {\n+            writeNumber(n.longValue());\n+        } else if (n instanceof Double) {\n+            writeNumber(n.doubleValue());\n+        } else if (n instanceof Float) {\n+            writeNumber(n.floatValue());\n+        } else {\n+            writeNumber(n.toString());\n+        }\n+    } else if (object instanceof String) {\n+        writeString((String) object);\n+    } else if (object instanceof Boolean) {\n+        writeBoolean((Boolean) object);\n+    } else if (object == null) {\n+        writeNull();\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects of type \"\n+                + object.getClass().getName(), this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof JsonSerializable) {\n        ((JsonSerializable)object).serialize(this, this._serializerProvider);\n        return;\n    }\n    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,8 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n+    if (object instanceof JsonSerializable) {\n+        ((JsonSerializable)object).serialize(this, this._serializerProvider);\n+        return;\n+    }\n     throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof String) {\n        writeString((String) object);\n    } else if (object instanceof Number) {\n        writeNumber((Number) object);\n    } else if (object instanceof Boolean) {\n        writeBoolean((Boolean) object);\n    } else if (object instanceof Character) {\n        writeString(String.valueOf((Character) object));\n    } else if (object instanceof JsonSerializable) {\n        ((JsonSerializable) object).serialize(this, null);\n    } else if (object instanceof Map) {\n        writeStartObject();\n        Map<?, ?> map = (Map<?, ?>) object;\n        for (Map.Entry<?, ?> entry : map.entrySet()) {\n            String fieldName = String.valueOf(entry.getKey());\n            writeFieldName(fieldName);\n            writeEmbeddedObject(entry.getValue());\n        }\n        writeEndObject();\n    } else if (object instanceof Collection) {\n        writeStartArray();\n        for (Object value : (Collection<?>) object) {\n            writeEmbeddedObject(value);\n        }\n        writeEndArray();\n    } else if (object != null && object.getClass().isArray()) {\n        writeStartArray();\n        int len = Array.getLength(object);\n        for (int i = 0; i < len; ++i) {\n            writeEmbeddedObject(Array.get(object, i));\n        }\n        writeEndArray();\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName(), this);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,38 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof String) {\n+        writeString((String) object);\n+    } else if (object instanceof Number) {\n+        writeNumber((Number) object);\n+    } else if (object instanceof Boolean) {\n+        writeBoolean((Boolean) object);\n+    } else if (object instanceof Character) {\n+        writeString(String.valueOf((Character) object));\n+    } else if (object instanceof JsonSerializable) {\n+        ((JsonSerializable) object).serialize(this, null);\n+    } else if (object instanceof Map) {\n+        writeStartObject();\n+        Map<?, ?> map = (Map<?, ?>) object;\n+        for (Map.Entry<?, ?> entry : map.entrySet()) {\n+            String fieldName = String.valueOf(entry.getKey());\n+            writeFieldName(fieldName);\n+            writeEmbeddedObject(entry.getValue());\n+        }\n+        writeEndObject();\n+    } else if (object instanceof Collection) {\n+        writeStartArray();\n+        for (Object value : (Collection<?>) object) {\n+            writeEmbeddedObject(value);\n+        }\n+        writeEndArray();\n+    } else if (object != null && object.getClass().isArray()) {\n+        writeStartArray();\n+        int len = Array.getLength(object);\n+        for (int i = 0; i < len; ++i) {\n+            writeEmbeddedObject(Array.get(object, i));\n+        }\n+        writeEndArray();\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName(), this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // Handle small number of cases\n    if (object instanceof JsonSerializable) {\n        ((JsonSerializable) object).serialize(jsonGenerator, serializerProvider);\n        return;\n    }\n    if (object instanceof JsonNode) {\n        jsonGenerator.writeTree((JsonNode) object);\n        return;\n    }\n    if (object instanceof byte[]) {\n        jsonGenerator.writeBinary((byte[]) object);\n        return;\n    }\n    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,16 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n-    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n+    // Handle small number of cases\n+    if (object instanceof JsonSerializable) {\n+        ((JsonSerializable) object).serialize(jsonGenerator, serializerProvider);\n+        return;\n+    }\n+    if (object instanceof JsonNode) {\n+        jsonGenerator.writeTree((JsonNode) object);\n+        return;\n+    }\n+    if (object instanceof byte[]) {\n+        jsonGenerator.writeBinary((byte[]) object);\n+        return;\n+    }\n     throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof JsonSerializable) {\n        ((JsonSerializable)object).serialize(this, null);\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n    }\n}\n\n## Explanation\nThe fixed function checks if the object is an instance of JsonSerializable and if so, it calls its serialize method passing the JsonGenerator instance and a null SerializerProvider. If the object is not an instance of JsonSerializable, it throws a JsonGenerationException with the message \"No native support for writing embedded objects\". This allows writing of embedded objects that implement the JsonSerializable interface.", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,8 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof JsonSerializable) {\n+        ((JsonSerializable)object).serialize(this, null);\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof Serializable) {\n        ObjectOutputStream out = new ObjectOutputStream(_generator.getWriter());\n        out.writeObject(object);\n        out.close();\n        return;\n    }\n    throw new JsonGenerationException(\"No native support for writing embedded objects of type \"\n            + object.getClass().getName(), this);\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,11 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof Serializable) {\n+        ObjectOutputStream out = new ObjectOutputStream(_generator.getWriter());\n+        out.writeObject(object);\n+        out.close();\n+        return;\n+    }\n+    throw new JsonGenerationException(\"No native support for writing embedded objects of type \"\n+            + object.getClass().getName(), this);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof Serializable) {\n        writeObject(object);\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects of type: \" + object.getClass().getName(), this);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,8 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof Serializable) {\n+        writeObject(object);\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects of type: \" + object.getClass().getName(), this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    if(object == null) {\n        writeNull();\n        return;\n    }\n    \n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if(object instanceof byte[]) {\n        writeBinary((byte[]) object);\n        return;\n    }\n    \n    throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName(), this);\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,14 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n+    if(object == null) {\n+        writeNull();\n+        return;\n+    }\n+    \n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if(object instanceof byte[]) {\n+        writeBinary((byte[]) object);\n+        return;\n+    }\n+    \n+    throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName(), this);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof Collection) {\n        writeStartArray();\n        for (Object elem : (Collection<?>) object) {\n            writeEmbeddedObject(elem);\n        }\n        writeEndArray();\n    } else if (object instanceof Map) {\n        writeStartObject();\n        for (Map.Entry<?, ?> entry : ((Map<?, ?>) object).entrySet()) {\n            writeFieldName(String.valueOf(entry.getKey()));\n            writeEmbeddedObject(entry.getValue());\n        }\n        writeEndObject();\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects of type \" \n            + object.getClass().getName(), this);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,20 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof Collection) {\n+        writeStartArray();\n+        for (Object elem : (Collection<?>) object) {\n+            writeEmbeddedObject(elem);\n+        }\n+        writeEndArray();\n+    } else if (object instanceof Map) {\n+        writeStartObject();\n+        for (Map.Entry<?, ?> entry : ((Map<?, ?>) object).entrySet()) {\n+            writeFieldName(String.valueOf(entry.getKey()));\n+            writeEmbeddedObject(entry.getValue());\n+        }\n+        writeEndObject();\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects of type \" \n+            + object.getClass().getName(), this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object == null) {\n        writeNull();\n        return;\n    }\n    Class<?> cls = object.getClass();\n    if (cls.isArray()) {\n        writeArray(object);\n        return;\n    }\n    if (object instanceof Collection<?>) {\n        writeArray(((Collection<?>) object).toArray());\n        return;\n    }\n    if (object instanceof Map<?, ?>) {\n        writeObject((Map<?,?>) object);\n        return;\n    }\n    // Unable to serialize object\n    throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + cls.getName(), this);\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,22 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object == null) {\n+        writeNull();\n+        return;\n+    }\n+    Class<?> cls = object.getClass();\n+    if (cls.isArray()) {\n+        writeArray(object);\n+        return;\n+    }\n+    if (object instanceof Collection<?>) {\n+        writeArray(((Collection<?>) object).toArray());\n+        return;\n+    }\n+    if (object instanceof Map<?, ?>) {\n+        writeObject((Map<?,?>) object);\n+        return;\n+    }\n+    // Unable to serialize object\n+    throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + cls.getName(), this);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    if (object == null) {\n        writeNull();\n        return;\n    }\n    if (object instanceof JsonNode) {\n        writeTree((JsonNode) object);\n        return;\n    }\n    if (object instanceof byte[]) {\n        writeBinary((byte[]) object);\n        return;\n    }\n    throw new JsonGenerationException(\"No native support for writing embedded objects of type \"\n            + object.getClass().getName(), this);\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,16 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n-    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (object instanceof JsonNode) {\n+        writeTree((JsonNode) object);\n+        return;\n+    }\n+    if (object instanceof byte[]) {\n+        writeBinary((byte[]) object);\n+        return;\n+    }\n+    throw new JsonGenerationException(\"No native support for writing embedded objects of type \"\n+            + object.getClass().getName(), this);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof JsonSerializable) {\n        ((JsonSerializable)object).serialize(this, null);\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects, except for implementations of JsonSerializable: \" + object.getClass().getName(), this);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,8 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof JsonSerializable) {\n+        ((JsonSerializable)object).serialize(this, null);\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects, except for implementations of JsonSerializable: \" + object.getClass().getName(), this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    if (object instanceof Collection) {\n        writeStartArray();\n        for (Object elem : (Collection<?>) object) {\n            writeEmbeddedObject(elem);\n        }\n        writeEndArray();\n    } else if (object instanceof Map) {\n        writeStartObject();\n        for (Map.Entry<?, ?> entry : ((Map<?, ?>)object).entrySet()) {\n            writeFieldName(String.valueOf(entry.getKey()));\n            writeEmbeddedObject(entry.getValue());\n        }\n        writeEndObject();\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName(), this);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,18 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n-    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof Collection) {\n+        writeStartArray();\n+        for (Object elem : (Collection<?>) object) {\n+            writeEmbeddedObject(elem);\n+        }\n+        writeEndArray();\n+    } else if (object instanceof Map) {\n+        writeStartObject();\n+        for (Map.Entry<?, ?> entry : ((Map<?, ?>)object).entrySet()) {\n+            writeFieldName(String.valueOf(entry.getKey()));\n+            writeEmbeddedObject(entry.getValue());\n+        }\n+        writeEndObject();\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName(), this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    if (object instanceof Serializable) {\n        ObjectOutputStream oos = new ObjectOutputStream(_generator);\n        oos.writeObject(object);\n        oos.flush();\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects of type: \" + object.getClass().getName(), this);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,9 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n-    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof Serializable) {\n+        ObjectOutputStream oos = new ObjectOutputStream(_generator);\n+        oos.writeObject(object);\n+        oos.flush();\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects of type: \" + object.getClass().getName(), this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof JsonSerializable) {\n        ((JsonSerializable) object).serialize(jsonGenerator, serializerProvider);\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,8 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof JsonSerializable) {\n+        ((JsonSerializable) object).serialize(jsonGenerator, serializerProvider);\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    if(object instanceof JsonSerializable){\n        ((JsonSerializable)object).serialize(jsonGenerator, serializerProvider);\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,7 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n-    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if(object instanceof JsonSerializable){\n+        ((JsonSerializable)object).serialize(jsonGenerator, serializerProvider);\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof byte[]) {\n        writeBinary((byte[]) object);\n    } else if (object instanceof JsonSerializable) {\n        writeObject((JsonSerializable) object);\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName(), this);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,10 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof byte[]) {\n+        writeBinary((byte[]) object);\n+    } else if (object instanceof JsonSerializable) {\n+        writeObject((JsonSerializable) object);\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName(), this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof JsonSerializable) {\n        ((JsonSerializable) object).serialize(jg, this);\n    } else {\n        throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,8 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n-    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    if (object instanceof JsonSerializable) {\n+        ((JsonSerializable) object).serialize(jg, this);\n+    } else {\n+        throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void writeEmbeddedObject(Object object) throws IOException {\n    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n    if (object instanceof JsonSerializable) {\n        ((JsonSerializable) object).serialize(this, null);\n        return;\n    }\n    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n}", "diff": "--- com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n+++ com/fasterxml/jackson/core/JsonGenerator.java@writeEmbeddedObject\n@@ -1,4 +1,8 @@\n public void writeEmbeddedObject(Object object) throws IOException {\n     // 01-Sep-2016, tatu: As per [core#318], handle small number of cases\n+    if (object instanceof JsonSerializable) {\n+        ((JsonSerializable) object).serialize(this, null);\n+        return;\n+    }\n     throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]