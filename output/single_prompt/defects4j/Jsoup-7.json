[{"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(body()); // fixed: should normalize text nodes in body instead of this\n    return this;\n}\n\n## Fixed Function 2\npublic Element first() {\n    return size() > 0 ? get(0) : null; // fixed: should return null when size is 0\n}\n\n## Fixed Function 3\npublic boolean isBlock() {\n    String name = tagName();\n    return StringUtil.in(name, \"blockquote\", \"body\", \"dd\", \"div\", \"fieldset\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n                         \"hr\", \"noscript\", \"ol\", \"p\", \"pre\", \"table\", \"ul\") ||\n           tagName().startsWith(\"h\") ||\n           tagName().equals(\"li\") && parent() != null && parent().tagName().equals(\"ol\");\n           // fixed: added condition for list item with parent element as \"ol\"\n}\n\n## Fixed Function 4\nprivate void processOutputSettings() {\n    if (outputSettings().prettyPrint() && !preserveWhitespace) {\n        preserveWhitespace = tag.getName().equals(\"pre\"); // fixed: should check tag name instead of element name\n    }\n    if (preserveWhitespace && (tag.formatAsBlock() || tag.formatAsInlineBlock())) {\n        output.attr(\"preserve-whitespace\", \"\");\n    }\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -10,6 +10,6 @@\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n     normaliseTextNodes(htmlEl);\n-    normaliseTextNodes(this);\n+    normaliseTextNodes(body()); // fixed: should normalize text nodes in body instead of this\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(htmlEl.select(\"head\"));\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(this);\n    return this;\n}\n\n## Fixed Function 2\nprivate void normaliseTextNodes(Element element) {\n    List<Node> toMove = new ArrayList<>();\n    for (Node node : element.childNodes()) {\n        if (TextUtil.isWhitespace(node)) {\n            toMove.add(node);\n        }\n        if (node instanceof Element) {\n            Element el = (Element) node;\n            normaliseTextNodes(el);\n        }\n    }\n    for (Node node : toMove) {\n        element.removeChild(node);\n        body().appendChild(new TextNode(\" \", \"\"));\n    }\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -8,7 +8,7 @@\n         htmlEl.appendElement(\"body\");\n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n     // of. do in inverse order to maintain text order.\n-    normaliseTextNodes(head());\n+    normaliseTextNodes(htmlEl.select(\"head\"));\n     normaliseTextNodes(htmlEl);\n     normaliseTextNodes(this);\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(htmlEl.select(\"head\").first());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(this);\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -8,7 +8,7 @@\n         htmlEl.appendElement(\"body\");\n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n     // of. do in inverse order to maintain text order.\n-    normaliseTextNodes(head());\n+    normaliseTextNodes(htmlEl.select(\"head\").first());\n     normaliseTextNodes(htmlEl);\n     normaliseTextNodes(this);\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null) {\n        htmlEl = appendElement(\"html\");\n        htmlEl.appendElement(\"head\");\n        htmlEl.appendElement(\"body\");\n    }\n    else {\n        if (head() == null)\n            htmlEl.prependElement(\"head\");\n        if (body() == null)\n            htmlEl.appendElement(\"body\");\n    }\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(this);\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -1,11 +1,16 @@\n public Document normalise() {\n     Element htmlEl = findFirstElementByTagName(\"html\", this);\n-    if (htmlEl == null)\n+    if (htmlEl == null) {\n         htmlEl = appendElement(\"html\");\n-    if (head() == null)\n-        htmlEl.prependElement(\"head\");\n-    if (body() == null)\n+        htmlEl.appendElement(\"head\");\n         htmlEl.appendElement(\"body\");\n+    }\n+    else {\n+        if (head() == null)\n+            htmlEl.prependElement(\"head\");\n+        if (body() == null)\n+            htmlEl.appendElement(\"body\");\n+    }\n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(body());  // changed 'this' to 'body()'\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -10,6 +10,6 @@\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n     normaliseTextNodes(htmlEl);\n-    normaliseTextNodes(this);\n+    normaliseTextNodes(body());  // changed 'this' to 'body()'\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodesRecursive(head());\n    normaliseTextNodesRecursive(htmlEl);\n    normaliseTextNodesRecursive(this);\n    return this;\n}\n\n## Fixed Function 2\nprivate void normaliseTextNodesRecursive(Element el) {\n    List<Node> childNodes = el.childNodesCopy();\n    for (Node child : childNodes) {\n        if (child instanceof TextNode && !child.isBlank()) {\n            Element p = el.parent();\n            List<Node> siblings = p.childNodesCopy();\n            boolean insertAfter = false;\n            for (Node sibling : siblings) {\n                if (sibling == el) {\n                    insertAfter = true;\n                    continue;\n                }\n                if (sibling instanceof TextNode || sibling instanceof Element)\n                    break;\n            }\n            Node insert = child.clone();\n            if (insertAfter) {\n                el.after(insert);\n            } else {\n                el.before(insert);\n            }\n            child.remove();\n        } else if (child instanceof Element) {\n            normaliseTextNodesRecursive((Element) child);\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -8,8 +8,8 @@\n         htmlEl.appendElement(\"body\");\n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n     // of. do in inverse order to maintain text order.\n-    normaliseTextNodes(head());\n-    normaliseTextNodes(htmlEl);\n-    normaliseTextNodes(this);\n+    normaliseTextNodesRecursive(head());\n+    normaliseTextNodesRecursive(htmlEl);\n+    normaliseTextNodesRecursive(this);\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null) {\n        htmlEl = appendElement(\"html\");\n        htmlEl.appendElement(\"head\");\n        htmlEl.appendElement(\"body\");\n    } else {\n        if (head() == null)\n            htmlEl.prependElement(\"head\");\n\n        if (body() == null)\n            htmlEl.appendElement(\"body\");\n    }   \n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(this);\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -1,11 +1,16 @@\n public Document normalise() {\n     Element htmlEl = findFirstElementByTagName(\"html\", this);\n-    if (htmlEl == null)\n+    if (htmlEl == null) {\n         htmlEl = appendElement(\"html\");\n-    if (head() == null)\n-        htmlEl.prependElement(\"head\");\n-    if (body() == null)\n+        htmlEl.appendElement(\"head\");\n         htmlEl.appendElement(\"body\");\n+    } else {\n+        if (head() == null)\n+            htmlEl.prependElement(\"head\");\n+\n+        if (body() == null)\n+            htmlEl.appendElement(\"body\");\n+    }   \n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null) {\n        htmlEl = appendElement(\"html\");\n        htmlEl.appendElement(\"head\");\n        htmlEl.appendElement(\"body\");\n    } else {\n        if (head() == null)\n            htmlEl.prependElement(\"head\");\n        if (body() == null)\n            htmlEl.appendElement(\"body\");\n    }\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(this);\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -1,11 +1,15 @@\n public Document normalise() {\n     Element htmlEl = findFirstElementByTagName(\"html\", this);\n-    if (htmlEl == null)\n+    if (htmlEl == null) {\n         htmlEl = appendElement(\"html\");\n-    if (head() == null)\n-        htmlEl.prependElement(\"head\");\n-    if (body() == null)\n+        htmlEl.appendElement(\"head\");\n         htmlEl.appendElement(\"body\");\n+    } else {\n+        if (head() == null)\n+            htmlEl.prependElement(\"head\");\n+        if (body() == null)\n+            htmlEl.appendElement(\"body\");\n+    }\n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(body()); // fixed line\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -10,6 +10,6 @@\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n     normaliseTextNodes(htmlEl);\n-    normaliseTextNodes(this);\n+    normaliseTextNodes(body()); // fixed line\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null) {\n        htmlEl = appendElement(\"html\");\n        htmlEl.appendChild(createElement(\"head\"));\n        htmlEl.appendChild(createElement(\"body\"));\n    } else {\n        if (head() == null) {\n            htmlEl.insertBefore(createElement(\"head\"), htmlEl.firstElementSibling());\n        }\n        if (body() == null) {\n            htmlEl.appendChild(createElement(\"body\"));\n        }\n    }\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(this);\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -1,11 +1,17 @@\n public Document normalise() {\n     Element htmlEl = findFirstElementByTagName(\"html\", this);\n-    if (htmlEl == null)\n+    if (htmlEl == null) {\n         htmlEl = appendElement(\"html\");\n-    if (head() == null)\n-        htmlEl.prependElement(\"head\");\n-    if (body() == null)\n-        htmlEl.appendElement(\"body\");\n+        htmlEl.appendChild(createElement(\"head\"));\n+        htmlEl.appendChild(createElement(\"body\"));\n+    } else {\n+        if (head() == null) {\n+            htmlEl.insertBefore(createElement(\"head\"), htmlEl.firstElementSibling());\n+        }\n+        if (body() == null) {\n+            htmlEl.appendChild(createElement(\"body\"));\n+        }\n+    }\n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(body()); // Fixed: normaliseTextNodes(this) -> normaliseTextNodes(body())\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -10,6 +10,6 @@\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n     normaliseTextNodes(htmlEl);\n-    normaliseTextNodes(this);\n+    normaliseTextNodes(body()); // Fixed: normaliseTextNodes(this) -> normaliseTextNodes(body())\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(htmlEl.selectFirst(\"head\"));\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(this);\n\n    return this;\n} \n\n## Fixed Function 2\nprivate void normaliseTextNodes(Element el) {\n    List<Node> toMove = new ArrayList<>();\n    for (Node node : el.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank()) {\n                toMove.add(tn);\n            }\n        }\n    }\n\n    for (Node node : toMove) {\n        node.remove();\n        el.ownerDocument().body().appendChild(node);\n    }\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -6,10 +6,12 @@\n         htmlEl.prependElement(\"head\");\n     if (body() == null)\n         htmlEl.appendElement(\"body\");\n+\n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n     // of. do in inverse order to maintain text order.\n-    normaliseTextNodes(head());\n+    normaliseTextNodes(htmlEl.selectFirst(\"head\"));\n     normaliseTextNodes(htmlEl);\n     normaliseTextNodes(this);\n+\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(htmlEl.body()); // Fix: Only normalise text nodes in body element\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -10,6 +10,6 @@\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n     normaliseTextNodes(htmlEl);\n-    normaliseTextNodes(this);\n+    normaliseTextNodes(htmlEl.body()); // Fix: Only normalise text nodes in body element\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in reverse order to maintain text order. // fixed typo: \"inverse\" to \"reverse\"\n    normaliseTextNodes(this);\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(head());\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -7,9 +7,9 @@\n     if (body() == null)\n         htmlEl.appendElement(\"body\");\n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n-    // of. do in inverse order to maintain text order.\n+    // of. do in reverse order to maintain text order. // fixed typo: \"inverse\" to \"reverse\"\n+    normaliseTextNodes(this);\n+    normaliseTextNodes(htmlEl);\n     normaliseTextNodes(head());\n-    normaliseTextNodes(htmlEl);\n-    normaliseTextNodes(this);\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(body());\n    return this;\n} \n\n## Fixed Function 2\nprivate static void normaliseTextNodes(Element element) {\n    List<Node> nodes = element.childNodes();\n    for (int i = nodes.size() - 1; i >= 0; i--) {\n        Node node = nodes.get(i);\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank()) {\n                tn.text(tn.getWholeText().replaceAll(\"\\\\s+\", \" \"));\n                if (i == nodes.size() - 1) {\n                    continue;\n                }\n                Node next = nodes.get(i + 1);\n                if (next instanceof TextNode) {\n                    ((TextNode) next).text(tn.getWholeText() + ((TextNode) next).getWholeText());\n                    element.removeChild(tn);\n                    continue;\n                }\n            }\n            element.replaceChild(new TextNode(tn.getWholeText().trim(), tn.baseUri()), tn);\n        } else if (node instanceof Element) {\n            Element el = (Element) node;\n            if (isWhitespaceOnly(el) && el.parent() != null && !(el instanceof Document)) {\n                element.removeChild(el);\n            } else {\n                normaliseTextNodes(el);\n            }\n        }\n    }\n}\n\n## Fixed Function 3\nprivate static boolean isWhitespaceOnly(Element element) {\n    for (Node node : element.childNodes()) {\n        if (!(node instanceof Comment || node instanceof Space)) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -10,6 +10,6 @@\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n     normaliseTextNodes(htmlEl);\n-    normaliseTextNodes(this);\n+    normaliseTextNodes(body());\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null) {\n        htmlEl = appendElement(\"html\");\n        appendChild(htmlEl); // append htmlEl to the document\n    }\n    if (head() == null) {\n        Element headEl = htmlEl.appendElement(\"head\");\n        prependChild(headEl); // prepend headEl to the document\n    }\n    if (body() == null) {\n        Element bodyEl = htmlEl.appendElement(\"body\");\n        appendChild(bodyEl); // append bodyEl to the document\n    }\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(this);\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -1,11 +1,17 @@\n public Document normalise() {\n     Element htmlEl = findFirstElementByTagName(\"html\", this);\n-    if (htmlEl == null)\n+    if (htmlEl == null) {\n         htmlEl = appendElement(\"html\");\n-    if (head() == null)\n-        htmlEl.prependElement(\"head\");\n-    if (body() == null)\n-        htmlEl.appendElement(\"body\");\n+        appendChild(htmlEl); // append htmlEl to the document\n+    }\n+    if (head() == null) {\n+        Element headEl = htmlEl.appendElement(\"head\");\n+        prependChild(headEl); // prepend headEl to the document\n+    }\n+    if (body() == null) {\n+        Element bodyEl = htmlEl.appendElement(\"body\");\n+        appendChild(bodyEl); // append bodyEl to the document\n+    }\n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(body()); // fix: pass body instead of this\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -10,6 +10,6 @@\n     // of. do in inverse order to maintain text order.\n     normaliseTextNodes(head());\n     normaliseTextNodes(htmlEl);\n-    normaliseTextNodes(this);\n+    normaliseTextNodes(body()); // fix: pass body instead of this\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null) {\n        htmlEl = appendElement(\"html\");\n    }\n    if (head() == null) {\n        htmlEl.prependElement(\"head\");\n    }\n    if (body() == null) {\n        htmlEl.appendElement(\"body\");\n    }\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    normaliseTextNodes(htmlEl.select(\"head\"));\n    normaliseTextNodes(htmlEl.select(\"html\"));\n    normaliseTextNodes(this);\n    return this;\n} \n\n## Fixed Function 2\nprivate static void normaliseTextNodes(Element element) {\n    List<Node> toMove = new ArrayList<>();\n    for (Node child : element.childNodes) {\n        if (child instanceof TextNode) {\n            toMove.add(child);\n        } else if (child instanceof Element) {\n            normaliseTextNodes((Element) child);\n        }\n    }\n    for (Node textNode : toMove) {\n        if (textNode instanceof TextNode) {\n            TextNode tn = (TextNode) textNode;\n            if (!isWhitespace(tn)) {\n                Element p = element.ownerDocument().createElement(\"p\");\n                tn.wrap(p);\n                p.before(\"\\n\");\n            }\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -1,15 +1,18 @@\n public Document normalise() {\n     Element htmlEl = findFirstElementByTagName(\"html\", this);\n-    if (htmlEl == null)\n+    if (htmlEl == null) {\n         htmlEl = appendElement(\"html\");\n-    if (head() == null)\n+    }\n+    if (head() == null) {\n         htmlEl.prependElement(\"head\");\n-    if (body() == null)\n+    }\n+    if (body() == null) {\n         htmlEl.appendElement(\"body\");\n+    }\n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n     // of. do in inverse order to maintain text order.\n-    normaliseTextNodes(head());\n-    normaliseTextNodes(htmlEl);\n+    normaliseTextNodes(htmlEl.select(\"head\"));\n+    normaliseTextNodes(htmlEl.select(\"html\"));\n     normaliseTextNodes(this);\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    head().normalise();\n    htmlEl.normalise();\n    super.normalise();\n    return this;\n} \n\n## Fixed Function 2\npublic Document normalise() {\n    Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null)\n        htmlEl = appendElement(\"html\");\n    if (head() == null)\n        htmlEl.prependElement(\"head\");\n    if (body() == null)\n        htmlEl.appendElement(\"body\");\n    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n    // of. do in inverse order to maintain text order.\n    List<Node> nodes = new ArrayList<Node>();\n    nodes.addAll(head().childNodes());\n    nodes.addAll(htmlEl.childNodes());\n    nodes.addAll(super.childNodes());\n    for (Node node : nodes) {\n        if (node instanceof TextNode) {\n            Element body = body(); // ensures we don't get a brand new body node\n            if (body != null)\n                body.appendChild(new Element(Tag.valueOf(\"p\"), \"\"));\n            node.moveTo(body);\n        }\n    }\n    return this;\n}", "diff": "--- org/jsoup/nodes/Document.java@normalise\n+++ org/jsoup/nodes/Document.java@normalise\n@@ -8,8 +8,8 @@\n         htmlEl.appendElement(\"body\");\n     // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n     // of. do in inverse order to maintain text order.\n-    normaliseTextNodes(head());\n-    normaliseTextNodes(htmlEl);\n-    normaliseTextNodes(this);\n+    head().normalise();\n+    htmlEl.normalise();\n+    super.normalise();\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]