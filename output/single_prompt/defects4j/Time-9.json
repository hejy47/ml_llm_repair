[{"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n        if (hoursInMinutes < 0) {\n            hoursInMinutes = -hoursInMinutes;\n            minutesOffset = -minutesOffset;\n        }\n        minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -9,10 +9,10 @@\n     try {\n         int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n         if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n+            hoursInMinutes = -hoursInMinutes;\n+            minutesOffset = -minutesOffset;\n         }\n+        minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n         offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n        if (hoursInMinutes < 0) {\n            minutesOffset = FieldUtils.safeSubtract(-hoursInMinutes, minutesOffset); // Line changed \n        } else {\n            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset); // Line changed\n        }\n        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -9,9 +9,9 @@\n     try {\n         int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n         if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n+            minutesOffset = FieldUtils.safeSubtract(-hoursInMinutes, minutesOffset); // Line changed \n         } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n+            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset); // Line changed\n         }\n         offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n     } catch (ArithmeticException ex) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n        if (hoursInMinutes < 0) {\n            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n        } else {\n            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n        }\n        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\", ex);\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -15,7 +15,7 @@\n         }\n         offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n     } catch (ArithmeticException ex) {\n-        throw new IllegalArgumentException(\"Offset is too large\");\n+        throw new IllegalArgumentException(\"Offset is too large\", ex);\n     }\n     return forOffsetMillis(offset);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n        offset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset) * DateTimeConstants.MILLIS_PER_MINUTE;\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -8,12 +8,7 @@\n     int offset = 0;\n     try {\n         int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n-        if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n-        }\n-        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        offset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset) * DateTimeConstants.MILLIS_PER_MINUTE;\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int totalMinutesOffset = hoursOffset * 60 + minutesOffset;\n        offset = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -7,13 +7,8 @@\n     }\n     int offset = 0;\n     try {\n-        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n-        if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n-        }\n-        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        int totalMinutesOffset = hoursOffset * 60 + minutesOffset;\n+        offset = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int totalMinutesOffset = hoursOffset * 60 + minutesOffset;\n        offset = totalMinutesOffset * DateTimeConstants.MILLIS_PER_MINUTE;\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -7,13 +7,8 @@\n     }\n     int offset = 0;\n     try {\n-        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n-        if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n-        }\n-        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        int totalMinutesOffset = hoursOffset * 60 + minutesOffset;\n+        offset = totalMinutesOffset * DateTimeConstants.MILLIS_PER_MINUTE;\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int totalMinutesOffset = FieldUtils.safeMultiply(hoursOffset, 60) + minutesOffset;\n        offset = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -7,13 +7,8 @@\n     }\n     int offset = 0;\n     try {\n-        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n-        if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n-        }\n-        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        int totalMinutesOffset = FieldUtils.safeMultiply(hoursOffset, 60) + minutesOffset;\n+        offset = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int totalMinutes = FieldUtils.safeMultiply(hoursOffset, 60) + minutesOffset;\n        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -7,13 +7,8 @@\n     }\n     int offset = 0;\n     try {\n-        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n-        if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n-        }\n-        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        int totalMinutes = FieldUtils.safeMultiply(hoursOffset, 60) + minutesOffset;\n+        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int totalMinutesOffset = FieldUtils.safeAdd(FieldUtils.safeMultiply(hoursOffset, 60), minutesOffset);\n        offset = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -7,13 +7,8 @@\n     }\n     int offset = 0;\n     try {\n-        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n-        if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n-        }\n-        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        int totalMinutesOffset = FieldUtils.safeAdd(FieldUtils.safeMultiply(hoursOffset, 60), minutesOffset);\n+        offset = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int totalMinutes = (hoursOffset * 60) + minutesOffset;\n        offset = totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -7,13 +7,8 @@\n     }\n     int offset = 0;\n     try {\n-        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n-        if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n-        }\n-        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        int totalMinutes = (hoursOffset * 60) + minutesOffset;\n+        offset = totalMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n        if (hoursInMinutes < 0) {\n            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n        } else {\n            minutesOffset = FieldUtils.safeAdd(minutesOffset, hoursInMinutes); //fix\n        }\n        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -11,7 +11,7 @@\n         if (hoursInMinutes < 0) {\n             minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n         } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n+            minutesOffset = FieldUtils.safeAdd(minutesOffset, hoursInMinutes); //fix\n         }\n         offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n     } catch (ArithmeticException ex) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n        if (hoursInMinutes < 0) {\n            minutesOffset = -minutesOffset;\n        }\n        offset = FieldUtils.safeAdd(FieldUtils.safeMultiply(hoursInMinutes, DateTimeConstants.MILLIS_PER_MINUTE), \n                                    FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE));\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -9,11 +9,10 @@\n     try {\n         int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n         if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n+            minutesOffset = -minutesOffset;\n         }\n-        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        offset = FieldUtils.safeAdd(FieldUtils.safeMultiply(hoursInMinutes, DateTimeConstants.MILLIS_PER_MINUTE), \n+                                    FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE));\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int totalMinutes = FieldUtils.safeAdd(FieldUtils.safeMultiply(hoursOffset, 60), minutesOffset);\n        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -7,13 +7,8 @@\n     }\n     int offset = 0;\n     try {\n-        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n-        if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n-        }\n-        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        int totalMinutes = FieldUtils.safeAdd(FieldUtils.safeMultiply(hoursOffset, 60), minutesOffset);\n+        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int hoursInMinutes = hoursOffset * 60;\n        if (hoursOffset < 0) {\n            minutesOffset = -minutesOffset;\n        }\n        offset = (hoursInMinutes + minutesOffset) * DateTimeConstants.MILLIS_PER_MINUTE;\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -7,13 +7,11 @@\n     }\n     int offset = 0;\n     try {\n-        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n-        if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n+        int hoursInMinutes = hoursOffset * 60;\n+        if (hoursOffset < 0) {\n+            minutesOffset = -minutesOffset;\n         }\n-        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        offset = (hoursInMinutes + minutesOffset) * DateTimeConstants.MILLIS_PER_MINUTE;\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (minutesOffset < 0 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n        if (hoursInMinutes < 0) {\n            minutesOffset = -minutesOffset; // negate minutesOffset instead of subtracting it\n        }\n        minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}", "diff": "--- org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n+++ org/joda/time/DateTimeZone.java@forOffsetHoursMinutes\n@@ -9,10 +9,9 @@\n     try {\n         int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n         if (hoursInMinutes < 0) {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n-        } else {\n-            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n+            minutesOffset = -minutesOffset; // negate minutesOffset instead of subtracting it\n         }\n+        minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n         offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n     } catch (ArithmeticException ex) {\n         throw new IllegalArgumentException(\"Offset is too large\");\n", "finish_reason": "stop", "valid": false, "num": 1}]