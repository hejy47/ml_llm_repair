[{"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if(n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n < factorials.length) {\n        return factorials[n];\n    }\n    long result = 1;\n    for (int i = factorials.length; i <= n; i++) {\n        result *= i;\n    }\n    if (result == Long.MAX_VALUE) {\n        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if(n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1.0;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if(n <= 0) {\n        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,16 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n+    if(n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    if (n < factorials.length) {\n+        return factorials[n];\n+    }\n+    long result = 1;\n+    for (int i = factorials.length; i <= n; i++) {\n+        result *= i;\n+    }\n     if (result == Long.MAX_VALUE) {\n         throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n     }\n-    return factorials[n];\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -1,6 +1,10 @@\n public static double factorialDouble(final int n) {\n-    if (n < 0) {\n+    if(n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1.0;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,5 +1,5 @@\n public static double factorialLog(final int n) {\n-    if (n < 0) {\n+    if(n <= 0) {\n         throw new IllegalArgumentException(\"must have n > 0 for n!\");\n     }\n     double logSum = 0;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n <= 20) {\n        return factorials[n];\n    }\n    long result = Math.round(factorialDouble(n));\n    if (result == Long.MAX_VALUE) {\n        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n <= 20) {\n        return factorials[n];\n    }\n    return Math.exp(factorialLog(n));\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,13 @@\n public static long factorial(final int n) {\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    if (n <= 20) {\n+        return factorials[n];\n+    }\n     long result = Math.round(factorialDouble(n));\n     if (result == Long.MAX_VALUE) {\n         throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n     }\n-    return factorials[n];\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,8 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    if (n <= 20) {\n+        return factorials[n];\n+    }\n+    return Math.exp(factorialLog(n));\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,6 @@\n public static double factorialLog(final int n) {\n     if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,10 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return factorials[n];\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,6 @@\n public static double factorialLog(final int n) {\n     if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n <= 1) {\n        return 1;\n    }\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        if (result < 0) {\n            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n        }\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n == 0) {\n        return 1.0;\n    }\n    double result = 1.0;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        if (result == Double.POSITIVE_INFINITY || result == Double.NEGATIVE_INFINITY) {\n            throw new ArithmeticException(\"factorial value is too large to fit in a double\");\n        }\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log(i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,16 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return factorials[n];\n+    if (n <= 1) {\n+        return 1;\n+    }\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+        if (result < 0) {\n+            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+        }\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,15 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    if (n == 0) {\n+        return 1.0;\n+    }\n+    double result = 1.0;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+        if (result == Double.POSITIVE_INFINITY || result == Double.NEGATIVE_INFINITY) {\n+            throw new ArithmeticException(\"factorial value is too large to fit in a double\");\n+        }\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,10 +1,10 @@\n public static double factorialLog(final int n) {\n-    if (n < 0) {\n+    if (n <= 0) {\n         throw new IllegalArgumentException(\"must have n > 0 for n!\");\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n-        logSum += Math.log((double) i);\n+        logSum += Math.log(i);\n     }\n     return logSum;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if(n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if(n > 20) {\n        throw new IllegalArgumentException(\"must have n <= 20 since 21! > Long.MAX_VALUE\");\n    }\n    long result = 1;\n    for(int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if(n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for(int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if(n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if(n == 0) {\n        return 0;\n    }\n    double logSum = 0;\n    for(int i = 1; i <= n; i++) {\n        logSum += Math.log(i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,13 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if(n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return factorials[n];\n+    if(n > 20) {\n+        throw new IllegalArgumentException(\"must have n <= 20 since 21! > Long.MAX_VALUE\");\n+    }\n+    long result = 1;\n+    for(int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -1,6 +1,10 @@\n public static double factorialDouble(final int n) {\n-    if (n < 0) {\n+    if(n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for(int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,10 +1,13 @@\n public static double factorialLog(final int n) {\n-    if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+    if(n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    if(n == 0) {\n+        return 0;\n     }\n     double logSum = 0;\n-    for (int i = 2; i <= n; i++) {\n-        logSum += Math.log((double) i);\n+    for(int i = 1; i <= n; i++) {\n+        logSum += Math.log(i);\n     }\n     return logSum;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n > 20) {\n        throw new IllegalArgumentException(\"n is too large for factorial\");\n    }\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,10 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if (n > 20) {\n+        throw new IllegalArgumentException(\"n is too large for factorial\");\n     }\n-    return factorials[n];\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,6 @@\n public static double factorialLog(final int n) {\n     if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    if (result > Long.MAX_VALUE) {\n        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1.0;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"must have n >= 1 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,13 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    if (result > Long.MAX_VALUE) {\n         throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n     }\n-    return factorials[n];\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1.0;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,6 @@\n public static double factorialLog(final int n) {\n-    if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+    if (n <= 0) {\n+        throw new IllegalArgumentException(\"must have n >= 1 for n!\");\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    long result = 1;\n    for(int i=1; i<=n; i++){\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for(int i=1; i<=n; i++){\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n == 0) {\n        return 0;\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,10 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return factorials[n];\n+    long result = 1;\n+    for(int i=1; i<=n; i++){\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for(int i=1; i<=n; i++){\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,9 @@\n public static double factorialLog(final int n) {\n     if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    if (n == 0) {\n+        return 0;\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n < factorials.length && factorials[n] != 0) {\n        return factorials[n];\n    }\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        if (i < factorials.length) {\n            factorials[i] = result;\n        }\n    }\n    if (result == Long.MAX_VALUE) {\n        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    return Math.exp(factorialLog(n));\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,19 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    if (n < factorials.length && factorials[n] != 0) {\n+        return factorials[n];\n+    }\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+        if (i < factorials.length) {\n+            factorials[i] = result;\n+        }\n+    }\n     if (result == Long.MAX_VALUE) {\n         throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n     }\n-    return factorials[n];\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,5 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    return Math.exp(factorialLog(n));\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,6 @@\n public static double factorialLog(final int n) {\n-    if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+    if (n <= 1) {\n+        return 0;\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n        if (result < 0) {\n            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n        }\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n <= 0) { // changed condition to n <= 0 to handle cases when n = 0\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 1; i <= n; i++) { // changed loop start condition to i = 1 to handle cases when n = 1\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,10 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    long result = 1;\n+    for (int i = 1; i <= n; i++) {\n+        result *= i;\n+        if (result < 0) {\n+            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+        }\n     }\n-    return factorials[n];\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for (int i = 1; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,9 +1,9 @@\n public static double factorialLog(final int n) {\n-    if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+    if (n <= 0) { // changed condition to n <= 0 to handle cases when n = 0\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n     double logSum = 0;\n-    for (int i = 2; i <= n; i++) {\n+    for (int i = 1; i <= n; i++) { // changed loop start condition to i = 1 to handle cases when n = 1\n         logSum += Math.log((double) i);\n     }\n     return logSum;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        if (result < 0) {\n            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n        }\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1.0;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,13 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return factorials[n];\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+        if (result < 0) {\n+            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+        }\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1.0;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,5 +1,5 @@\n public static double factorialLog(final int n) {\n-    if (n < 0) {\n+    if (n <= 0) {\n         throw new IllegalArgumentException(\"must have n > 0 for n!\");\n     }\n     double logSum = 0;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        if (result > Long.MAX_VALUE) {\n            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n        }\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        if (result == Double.POSITIVE_INFINITY) {\n            throw new ArithmeticException(\"factorial value is too large to fit in a double\");\n        }\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,13 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return factorials[n];\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+        if (result > Long.MAX_VALUE) {\n+            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+        }\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,12 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+        if (result == Double.POSITIVE_INFINITY) {\n+            throw new ArithmeticException(\"factorial value is too large to fit in a double\");\n+        }\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,6 @@\n public static double factorialLog(final int n) {\n     if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        if (result < 0) {\n            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n        }\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        if (result == Double.POSITIVE_INFINITY) {\n            throw new ArithmeticException(\"factorial value is too large to fit in a double\");\n        }\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,13 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return factorials[n];\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+        if (result < 0) {\n+            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+        }\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,12 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+        if (result == Double.POSITIVE_INFINITY) {\n+            throw new ArithmeticException(\"factorial value is too large to fit in a double\");\n+        }\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,6 @@\n public static double factorialLog(final int n) {\n     if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        if (result == Long.MAX_VALUE) {\n            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n        }\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,13 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return factorials[n];\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+        if (result == Long.MAX_VALUE) {\n+            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+        }\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,6 @@\n public static double factorialLog(final int n) {\n     if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if(n < 0){\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n <= 1){\n        return 1;\n    }\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    if (result == Long.MAX_VALUE) {\n        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if(n < 0){\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n <= 1){\n        return 1;\n    }\n    double result = 1.0;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if(n < 0){\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n <= 1){\n        return 0;\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,16 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n+    if(n < 0){\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    if (n <= 1){\n+        return 1;\n+    }\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n     if (result == Long.MAX_VALUE) {\n         throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n     }\n-    return factorials[n];\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -1,6 +1,13 @@\n public static double factorialDouble(final int n) {\n-    if (n < 0) {\n+    if(n < 0){\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    if (n <= 1){\n+        return 1;\n+    }\n+    double result = 1.0;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,9 @@\n public static double factorialLog(final int n) {\n-    if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+    if(n < 0){\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    if (n <= 1){\n+        return 0;\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n < factorials.length && factorials[n] != 0) {\n        return factorials[n];\n    } else {\n        long result = Math.round(factorialDouble(n));\n        if (n < factorials.length) {\n            factorials[n] = result;\n        }\n        if (result == Long.MAX_VALUE) {\n            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n        }\n        return result;\n    }\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,17 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return factorials[n];\n+    if (n < factorials.length && factorials[n] != 0) {\n+        return factorials[n];\n+    } else {\n+        long result = Math.round(factorialDouble(n));\n+        if (n < factorials.length) {\n+            factorials[n] = result;\n+        }\n+        if (result == Long.MAX_VALUE) {\n+            throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+        }\n+        return result;\n+    }\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,6 @@\n public static double factorialLog(final int n) {\n     if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n < factorials.length && factorials[n] != 0) {\n        return factorials[n];\n    }\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n        if (i < factorials.length) {\n            factorials[i] = result;\n        }\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1.0;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,16 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return factorials[n];\n+    if (n < factorials.length && factorials[n] != 0) {\n+        return factorials[n];\n+    }\n+    long result = 1;\n+    for (int i = 1; i <= n; i++) {\n+        result *= i;\n+        if (i < factorials.length) {\n+            factorials[i] = result;\n+        }\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1.0;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,5 +1,5 @@\n public static double factorialLog(final int n) {\n-    if (n < 0) {\n+    if (n <= 0) {\n         throw new IllegalArgumentException(\"must have n > 0 for n!\");\n     }\n     double logSum = 0;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n > 20) {\n        throw new IllegalArgumentException(\"value of n cannot be greater than 20!\");\n    }\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n == 0) {\n        return 0;\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,13 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n-        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return factorials[n];\n+    if (n > 20) {\n+        throw new IllegalArgumentException(\"value of n cannot be greater than 20!\");\n+    }\n+    long result = 1;\n+    for (int i = 1; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for (int i = 1; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,9 @@\n public static double factorialLog(final int n) {\n     if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    if (n == 0) {\n+        return 0;\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n > 20) {\n        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n    }\n\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n == 0) {\n        return 0;\n    }\n\n    double logSum = 0;\n    for (int i = 1; i <= n; i++) {\n        logSum += Math.log(i);\n    }\n\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,15 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    if (n > 20) {\n         throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n     }\n-    return factorials[n];\n+\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,10 +1,15 @@\n public static double factorialLog(final int n) {\n     if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n+    if (n == 0) {\n+        return 0;\n+    }\n+\n     double logSum = 0;\n-    for (int i = 2; i <= n; i++) {\n-        logSum += Math.log((double) i);\n+    for (int i = 1; i <= n; i++) {\n+        logSum += Math.log(i);\n     }\n+\n     return logSum;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic static long factorial(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    if (result > Long.MAX_VALUE) {\n        throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n    }\n    return result;\n}\n\n## Fixed Function 2\npublic static double factorialDouble(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    double result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n## Fixed Function 3\npublic static double factorialLog(final int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n    }\n    if (n == 0) {\n        return 0;\n    }\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += Math.log((double) i);\n    }\n    return logSum;\n}", "diff": "--- org/apache/commons/math/util/MathUtils.java@factorial\n+++ org/apache/commons/math/util/MathUtils.java@factorial\n@@ -1,7 +1,13 @@\n public static long factorial(final int n) {\n-    long result = Math.round(factorialDouble(n));\n-    if (result == Long.MAX_VALUE) {\n+    if (n < 0) {\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    long result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    if (result > Long.MAX_VALUE) {\n         throw new ArithmeticException(\"factorial value is too large to fit in a long\");\n     }\n-    return factorials[n];\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialDouble\n+++ org/apache/commons/math/util/MathUtils.java@factorialDouble\n@@ -2,5 +2,9 @@\n     if (n < 0) {\n         throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n     }\n-    return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n+    double result = 1;\n+    for (int i = 2; i <= n; i++) {\n+        result *= i;\n+    }\n+    return result;\n }\n--- org/apache/commons/math/util/MathUtils.java@factorialLog\n+++ org/apache/commons/math/util/MathUtils.java@factorialLog\n@@ -1,6 +1,9 @@\n public static double factorialLog(final int n) {\n     if (n < 0) {\n-        throw new IllegalArgumentException(\"must have n > 0 for n!\");\n+        throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n+    }\n+    if (n == 0) {\n+        return 0;\n     }\n     double logSum = 0;\n     for (int i = 2; i <= n; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}]