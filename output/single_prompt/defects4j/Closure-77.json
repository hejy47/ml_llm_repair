[{"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\/\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\!\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,47 +22,35 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\/\");\n                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\!\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c <= 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == '>' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,9 +22,8 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == '>' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                // Fix the condition to handle \"-->\" and \"]]>\"\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == '>' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Fix to handle \"</script>\"\n                final String END_SCRIPT = \"/script\";\n                // Fix to handle \"<!--\"\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,18 +22,18 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                // Fix the condition to handle \"-->\" and \"]]>\"\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == '>' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n+                // Fix to handle \"</script>\"\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n+                // Fix to handle \"<!--\"\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == '['))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,9 +22,8 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == '['))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            // Fixed case to correctly escape the > and ] characters\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ' ' && s.charAt(i - 2) == ' ' && s.charAt(i - 3) == '-'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case ']':\n                if (i >= 2 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']') {\n                    sb.append(\"\\\\]\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,10 +22,17 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            // Fixed case to correctly escape the > and ] characters\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ' ' && s.charAt(i - 2) == ' ' && s.charAt(i - 3) == '-'))) {\n                     sb.append(\"\\\\>\");\n+                } else {\n+                    sb.append(c);\n+                }\n+                break;\n+            case ']':\n+                if (i >= 2 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']') {\n+                    sb.append(\"\\\\]\");\n                 } else {\n                     sb.append(c);\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            // Fixing the case for > and ]]> to escape properly\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,9 +22,9 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            // Fixing the case for > and ]]> to escape properly\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\\\\/\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,8 +22,7 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n+            case '>':\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n@@ -36,9 +35,9 @@\n                 // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\\\\\/\");\n                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\\\\\\");\n                 } else {\n                     sb.append(c);\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && (s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\/script\");\n                    i += END_SCRIPT.length();\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\!--\");\n                    i += START_COMMENT.length() - 1;\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,47 +22,37 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && (s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\/script\");\n+                    i += END_SCRIPT.length();\n                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\!--\");\n+                    i += START_COMMENT.length() - 1;\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c <= 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == '!'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\/\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\!\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,47 +22,35 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == '!'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\/\");\n                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\!\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c <= 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == '>' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,18 +22,15 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == '>' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n@@ -44,25 +41,16 @@\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c <= 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\/\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\!\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,9 +22,8 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n@@ -36,9 +35,9 @@\n                 // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\/\");\n                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n-                    sb.append(\"<\\\\\");\n+                    sb.append(\"<\\\\!\");\n                 } else {\n                     sb.append(c);\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (i + END_SCRIPT.length() < s.length() && s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (i + START_COMMENT.length() < s.length() && s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,47 +22,35 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n-                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n+                if (i + END_SCRIPT.length() < s.length() && s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n-                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n+                } else if (i + START_COMMENT.length() < s.length() && s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                     sb.append(\"<\\\\\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c <= 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,18 +22,15 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n@@ -44,25 +41,16 @@\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c <= 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c >= 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,18 +22,15 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n@@ -44,25 +41,16 @@\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n-                    if (c > 0x1f && c <= 0x7f) {\n+                    if (c >= 0x1f && c <= 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == '!'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,18 +22,15 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == '!'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n@@ -44,25 +41,16 @@\n                 }\n                 break;\n             default:\n-                // If we're given an outputCharsetEncoder, then check if the\n-                //  character can be represented in this character set.\n                 if (outputCharsetEncoder != null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        // Unicode-escape the character.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n-                    // No charsetEncoder provided - pass straight latin characters\n-                    // through, and escape the rest.  Doing the explicit character\n-                    // check is measurably faster than using the CharsetEncoder.\n                     if (c > 0x1f && c <= 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        // Other characters can be misinterpreted by some js parsers,\n-                        // or perhaps mangled by proxies along the way,\n-                        // so we play it safe and unicode escape them.\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '-':\n                // Fix for --\\> into --> (HTML closing tag)\n                if (i >= 2 && s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') {\n                    sb.append(\"\\\\\");\n                }\n                sb.append(c);\n                break;\n            case ']':\n                // Fix for ]]\\> into ]]\n                if (i >= 2 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']') {\n                    sb.append(\"\\\\\");\n                }\n                sb.append(c);\n                break;\n            case '>':\n                // Fix for > into '\\>'\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\\");\n                }\n                sb.append(c);\n                break;\n            case '<':\n                // Fix for </script into <\\/script and <!-- into <\\!--\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,18 +22,30 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n+            case '-':\n+                // Fix for --\\> into --> (HTML closing tag)\n+                if (i >= 2 && s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') {\n+                    sb.append(\"\\\\\");\n+                }\n+                sb.append(c);\n+                break;\n+            case ']':\n+                // Fix for ]]\\> into ]]\n+                if (i >= 2 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']') {\n+                    sb.append(\"\\\\\");\n+                }\n+                sb.append(c);\n+                break;\n+            case '>':\n+                // Fix for > into '\\>'\n                 if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n-                    sb.append(\"\\\\>\");\n-                } else {\n-                    sb.append(c);\n+                    sb.append(\"\\\\\");\n                 }\n+                sb.append(c);\n                 break;\n             case '<':\n-                // Break </script into <\\/script\n+                // Fix for </script into <\\/script and <!-- into <\\!--\n                 final String END_SCRIPT = \"/script\";\n-                // Break <!-- into <\\!--\n                 final String START_COMMENT = \"!--\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                // Break --> into --\\> or ]]> into ]]\\>\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,9 +22,9 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                // Break --> into --\\> or ]]> into ]]\\>\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script\n                final String END_SCRIPT = \"/script\";\n                // Break <!-- into <\\!--\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // If we're given an outputCharsetEncoder, then check if the\n                //  character can be represented in this character set.\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        // Unicode-escape the character.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    // No charsetEncoder provided - pass straight latin characters\n                    // through, and escape the rest.  Doing the explicit character\n                    // check is measurably faster than using the CharsetEncoder.\n                    if (c > 0x1f && c <= 0x7f) {\n                        sb.append(c);\n                    } else {\n                        // Other characters can be misinterpreted by some js parsers,\n                        // or perhaps mangled by proxies along the way,\n                        // so we play it safe and unicode escape them.\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}", "diff": "--- com/google/javascript/jscomp/CodeGenerator.javastrEscape\n+++ com/google/javascript/jscomp/CodeGenerator.javastrEscape\n@@ -22,9 +22,8 @@\n             case '\\'':\n                 sb.append(singlequoteEscape);\n                 break;\n-            case // Break --> into --\\> or ]]> into ]]\\>\n-            '>':\n-                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+            case '>':\n+                if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (i >= 3 && s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']' && s.charAt(i - 3) == ']'))) {\n                     sb.append(\"\\\\>\");\n                 } else {\n                     sb.append(c);\n", "finish_reason": "stop", "valid": false, "num": 1}]