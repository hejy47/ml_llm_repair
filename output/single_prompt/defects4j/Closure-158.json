[{"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPoints(config.closureEntryPoints);\n    }\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setInputVariableMapSerialized(VariableMap.load(config.variableMapInputFile).toBytes());\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setInputPropertyMapSerialized(VariableMap.load(config.propertyMapInputFile).toBytes());\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError = jscompError;\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning = jscompWarning;\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff = jscompOff;\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken().trim());\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs);\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        CommandLineConfig config = getCommandLineConfig();\n        config.setPrintTree(flags.print_tree);\n        config.setComputePhaseOrdering(flags.compute_phase_ordering);\n        config.setPrintAst(flags.print_ast);\n        config.setPrintPassGraph(flags.print_pass_graph);\n        config.setJscompDevMode(flags.jscomp_dev_mode);\n        config.setLoggingLevel(flags.logging_level);\n        config.setExterns(flags.externs);\n        config.setJs(flags.js);\n        config.setJsOutputFile(flags.js_output_file);\n        config.setModule(flags.module);\n        config.setVariableMapInputFile(flags.variable_map_input_file);\n        config.setPropertyMapInputFile(flags.property_map_input_file);\n        config.setVariableMapOutputFile(flags.variable_map_output_file);\n        config.setCreateNameMapFiles(flags.create_name_map_files);\n        config.setPropertyMapOutputFile(flags.property_map_output_file);\n        config.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n        config.setSummaryDetailLevel(flags.summary_detail_level);\n        config.setOutputWrapper(flags.output_wrapper);\n        config.setModuleWrapper(flags.module_wrapper);\n        config.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n        config.setCreateSourceMap(flags.create_source_map);\n        config.setJscompError(flags.jscomp_error);\n        config.setJscompWarning(flags.jscomp_warning);\n        config.setJscompOff(flags.jscomp_off);\n        config.setDefine(flags.define);\n        config.setCharset(flags.charset);\n        config.setManageClosureDependencies(flags.manage_closure_dependencies);\n        config.setClosureEntryPoints(flags.closure_entry_point);\n        config.setOutputManifest(flags.output_manifest);\n        config.setAcceptConstKeyword(flags.accept_const_keyword);\n        config.setSourceMapFormat(flags.source_map_format);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,30 +8,30 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPoints(config.closureEntryPoints);\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setInputVariableMapSerialized(VariableMap.load(config.variableMapInputFile).toBytes());\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setInputPropertyMapSerialized(VariableMap.load(config.propertyMapInputFile).toBytes());\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompError(List<String> jscompError) {\n-    this.jscompError.clear();\n-    this.jscompError.addAll(jscompError);\n+    this.jscompError = jscompError;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompWarning(List<String> jscompWarning) {\n-    this.jscompWarning.clear();\n-    this.jscompWarning.addAll(jscompWarning);\n+    this.jscompWarning = jscompWarning;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompOff(List<String> jscompOff) {\n-    this.jscompOff.clear();\n-    this.jscompOff.addAll(jscompOff);\n+    this.jscompOff = jscompOff;\n     return this;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,9 +1,9 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n     while (tokenizer.hasMoreTokens()) {\n-        argsInFile.add(tokenizer.nextToken());\n+        argsInFile.add(tokenizer.nextToken().trim());\n     }\n     flags.flag_file = \"\";\n     List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -3,7 +3,7 @@\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n-        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        parser.parseArgument(processedArgs);\n         // For contains --flagfile flag\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n@@ -24,6 +24,37 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        CommandLineConfig config = getCommandLineConfig();\n+        config.setPrintTree(flags.print_tree);\n+        config.setComputePhaseOrdering(flags.compute_phase_ordering);\n+        config.setPrintAst(flags.print_ast);\n+        config.setPrintPassGraph(flags.print_pass_graph);\n+        config.setJscompDevMode(flags.jscomp_dev_mode);\n+        config.setLoggingLevel(flags.logging_level);\n+        config.setExterns(flags.externs);\n+        config.setJs(flags.js);\n+        config.setJsOutputFile(flags.js_output_file);\n+        config.setModule(flags.module);\n+        config.setVariableMapInputFile(flags.variable_map_input_file);\n+        config.setPropertyMapInputFile(flags.property_map_input_file);\n+        config.setVariableMapOutputFile(flags.variable_map_output_file);\n+        config.setCreateNameMapFiles(flags.create_name_map_files);\n+        config.setPropertyMapOutputFile(flags.property_map_output_file);\n+        config.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n+        config.setSummaryDetailLevel(flags.summary_detail_level);\n+        config.setOutputWrapper(flags.output_wrapper);\n+        config.setModuleWrapper(flags.module_wrapper);\n+        config.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n+        config.setCreateSourceMap(flags.create_source_map);\n+        config.setJscompError(flags.jscomp_error);\n+        config.setJscompWarning(flags.jscomp_warning);\n+        config.setJscompOff(flags.jscomp_off);\n+        config.setDefine(flags.define);\n+        config.setCharset(flags.charset);\n+        config.setManageClosureDependencies(flags.manage_closure_dependencies);\n+        config.setClosureEntryPoints(flags.closure_entry_point);\n+        config.setOutputManifest(flags.output_manifest);\n+        config.setAcceptConstKeyword(flags.accept_const_keyword);\n+        config.setSourceMapFormat(flags.source_map_format);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.generateForEntryPoint(config.closureEntryPoints));\n    }\n    options.setLanguageIn(stringToLanguageMode(config.languageIn));\n    options.setLanguageOut(stringToLanguageMode(config.languageOut));\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputJsFileName(config.jsOutputFile);\n    }\n    if (config.sourceMapOutputFile.length() > 0) {\n        options.setSourceMapOutputPath(config.sourceMapOutputFile);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(stringToSourceMapFormat(config.sourceMapFormat));\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    options.setExternExports(config.externExports);\n    options.setWarningLevel(DiagnosticGroups.MISSING_PROVIDE, CheckLevel.ERROR);\n    options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.ERROR);\n    options.setRenamingPolicy(getRenamingPolicy());\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(String format) {\n    this.sourceMapFormat = stringToSourceMapFormat(format);\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError = ImmutableList.copyOf(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning = ImmutableList.copyOf(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff = ImmutableList.copyOf(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(Boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Files.readLines(new File(flags.flag_file), Charset.defaultCharset());\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[0]));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[0]));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain --flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs);\n        // For contains --flagfile flag\n        if (!flags.flag_file.isEmpty()) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://github.com/google/closure-compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(Lists.newArrayList(flags.jscomp_error)).setJscompWarning(Lists.newArrayList(flags.jscomp_warning)).setJscompOff(Lists.newArrayList(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoint(flags.closure_entry_point).setOutputManifests(flags.output_manifests).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setLanguageOut(flags.language_out);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    DiagnosticGroups groups = getDiagnosticGroups();\n    ImmutableList<String> groupsToSet = ImmutableList.copyOf(diagnosticGroups);\n    for (String groupName : groupsToSet) {\n        DiagnosticGroup group = groups.forName(groupName);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + groupName);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,37 +8,32 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.generateForEntryPoint(config.closureEntryPoints));\n     }\n+    options.setLanguageIn(stringToLanguageMode(config.languageIn));\n+    options.setLanguageOut(stringToLanguageMode(config.languageOut));\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputJsFileName(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (config.sourceMapOutputFile.length() > 0) {\n+        options.setSourceMapOutputPath(config.sourceMapOutputFile);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(stringToSourceMapFormat(config.sourceMapFormat));\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setExternExports(config.externExports);\n+    options.setWarningLevel(DiagnosticGroups.MISSING_PROVIDE, CheckLevel.ERROR);\n+    options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.ERROR);\n+    options.setRenamingPolicy(getRenamingPolicy());\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompError(List<String> jscompError) {\n-    this.jscompError.clear();\n-    this.jscompError.addAll(jscompError);\n+    this.jscompError = ImmutableList.copyOf(jscompError);\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompWarning(List<String> jscompWarning) {\n-    this.jscompWarning.clear();\n-    this.jscompWarning.addAll(jscompWarning);\n+    this.jscompWarning = ImmutableList.copyOf(jscompWarning);\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompOff(List<String> jscompOff) {\n-    this.jscompOff.clear();\n-    this.jscompOff.addAll(jscompOff);\n+    this.jscompOff = ImmutableList.copyOf(jscompOff);\n     return this;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,17 +1,12 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n-    List<String> argsInFile = Lists.newArrayList();\n-    File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n-    while (tokenizer.hasMoreTokens()) {\n-        argsInFile.add(tokenizer.nextToken());\n-    }\n+    List<String> argsInFile = Files.readLines(new File(flags.flag_file), Charset.defaultCharset());\n     flags.flag_file = \"\";\n-    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n+    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[0]));\n     CmdLineParser parserFileArgs = new CmdLineParser(flags);\n-    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n+    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[0]));\n     // Currently we are not supporting this (prevent direct/indirect loops)\n     if (!flags.flag_file.equals(\"\")) {\n-        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n+        err.println(\"ERROR - Arguments in the file cannot contain --flagfile option.\");\n         isConfigValid = false;\n     }\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -3,9 +3,9 @@\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n-        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        parser.parseArgument(processedArgs);\n         // For contains --flagfile flag\n-        if (!flags.flag_file.equals(\"\")) {\n+        if (!flags.flag_file.isEmpty()) {\n             processFlagFile(err);\n         }\n     } catch (CmdLineException e) {\n@@ -17,13 +17,13 @@\n     }\n     if (flags.version) {\n         ResourceBundle config = ResourceBundle.getBundle(configResource);\n-        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n+        err.println(\"Closure Compiler (http://github.com/google/closure-compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n         err.flush();\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(Lists.newArrayList(flags.jscomp_error)).setJscompWarning(Lists.newArrayList(flags.jscomp_warning)).setJscompOff(Lists.newArrayList(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoint(flags.closure_entry_point).setOutputManifests(flags.output_manifests).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setLanguageOut(flags.language_out);\n     }\n }\n--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,7 +1,9 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n-    for (String name : diagnosticGroups) {\n-        DiagnosticGroup group = forName(name);\n-        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n+    DiagnosticGroups groups = getDiagnosticGroups();\n+    ImmutableList<String> groupsToSet = ImmutableList.copyOf(diagnosticGroups);\n+    for (String groupName : groupsToSet) {\n+        DiagnosticGroup group = groups.forName(groupName);\n+        Preconditions.checkNotNull(group, \"No warning class for name: \" + groupName);\n         options.setWarningLevel(group, level);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencySorting(true);\n        options.setDependencyOptions(new DependencyOptions().setEntryPointAliases(config.closureEntryPoints));\n    }\n    options.setLanguageIn(config.languageIn);\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapFromJson(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapFromJson(config.propertyMapInputFile);\n    }\n    options.setOutputWrapper(config.outputWrapper);\n    options.setModuleWrapper(config.moduleWrapper);\n    options.setModuleOutputPathPrefix(config.moduleOutputPathPrefix);\n    options.setCreateSourceMap(config.createSourceMap != null && !config.createSourceMap.isEmpty());\n    if (config.manage_closure_dependencies) {\n        options.setDependencyOptions(new DependencyOptions()\n                .setDependencySorting(true)\n                .setMoocherDumper(new DefaultMoocherDumper()));\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    for (String line : Files.readLines(flagFileInput, Charset.defaultCharset())) {\n        Collections.addAll(argsInFile, line.split(\"\\\\s+\"));\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[0]));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[0]));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[0]));\n        // For contains --flagfile flag\n        if (!flags.flag_file.isEmpty()) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        CommandLineConfig commandLineConfig = getCommandLineConfig();\n        commandLineConfig.setOutputWrapper(flags.output_wrapper);\n        commandLineConfig.setJsOutputFile(flags.js_output_file);\n        commandLineConfig.setCreateSourceMap(flags.create_source_map);\n        commandLineConfig.setSourceMapDetailLevel(flags.source_map_detail_level);\n        commandLineConfig.setSourceMapFormat(flags.source_map_format);\n        commandLineConfig.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n        commandLineConfig.setLanguageIn(flags.language_in);\n        commandLineConfig.setJs(flags.js);\n        commandLineConfig.setJszip(flags.jszip);\n        commandLineConfig.setJsOutputWrapper(flags.js_output_wrapper);\n        commandLineConfig.setThirdParty(flags.third_party);\n        commandLineConfig.setExterns(flags.externs);\n        commandLineConfig.setOnlyClosureDependencies(flags.only_closure_dependencies);\n        commandLineConfig.setAngularPass(flags.angular_pass);\n        commandLineConfig.setDependencyMode(flags.dependency_mode);\n        commandLineConfig.setWarningLevel(flags.warning_level);\n        commandLineConfig.setChecksOnly(flags.checks_only);\n        commandLineConfig.setOutputManifest(flags.output_manifest);\n        commandLineConfig.setSummaryDetailLevel(flags.summary_detail_level);\n        commandLineConfig.setPrintAst(flags.print_ast);\n        commandLineConfig.setPrintPassGraph(flags.print_pass_graph);\n        commandLineConfig.setPrintTree(flags.print_tree);\n        commandLineConfig.setPrintTweakedFlags(flags.print_tweaked_flags);\n        commandLineConfig.setModule(flags.module);\n        commandLineConfig.setVariableMapInputFile(flags.variable_map_input_file);\n        commandLineConfig.setPropertyMapInputFile(flags.property_map_input_file);\n        commandLineConfig.setVariableMapOutputFile(flags.variable_map_output_file);\n        commandLineConfig.setPropertyMapOutputFile(flags.property_map_output_file);\n        commandLineConfig.setDependencySorting(flags.dependency_sorting);\n        commandLineConfig.setDependencyOptions(flags.dependency_mode, flags.entry_point, flags.process_closure_primitives, flags.process_common_js_modules).setModuleNameMapper(flags.module_name_mapper).setModuleResolutionMode(flags.module_resolution_mode);\n        commandLineConfig.setManageClosureDependencies(flags.manage_closure_dependencies);\n        commandLineConfig.setUseTypesForOptimization(flags.use_types_for_optimization);\n        commandLineConfig.setPrettyPrint(flags.formatting.equals(\"PRETTY_PRINT\") || flags.formatting.equals(\"PRETTY_PRINT_SINGLE_LINE\"));\n        commandLineConfig.setLineBreaks(flags.line_breaks || flags.formatting.equals(\"SINGLE\"));\n        commandLineConfig.setAcceptConstKeyword(flags.accept_const_keyword);\n        commandLineConfig.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,37 +8,37 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencySorting(true);\n+        options.setDependencyOptions(new DependencyOptions().setEntryPointAliases(config.closureEntryPoints));\n     }\n+    options.setLanguageIn(config.languageIn);\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMapFromJson(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMapFromJson(config.propertyMapInputFile);\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n+    options.setOutputWrapper(config.outputWrapper);\n+    options.setModuleWrapper(config.moduleWrapper);\n+    options.setModuleOutputPathPrefix(config.moduleOutputPathPrefix);\n+    options.setCreateSourceMap(config.createSourceMap != null && !config.createSourceMap.isEmpty());\n+    if (config.manage_closure_dependencies) {\n+        options.setDependencyOptions(new DependencyOptions()\n+                .setDependencySorting(true)\n+                .setMoocherDumper(new DefaultMoocherDumper()));\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,14 +1,13 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n-    while (tokenizer.hasMoreTokens()) {\n-        argsInFile.add(tokenizer.nextToken());\n+    for (String line : Files.readLines(flagFileInput, Charset.defaultCharset())) {\n+        Collections.addAll(argsInFile, line.split(\"\\\\s+\"));\n     }\n     flags.flag_file = \"\";\n-    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n+    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[0]));\n     CmdLineParser parserFileArgs = new CmdLineParser(flags);\n-    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n+    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[0]));\n     // Currently we are not supporting this (prevent direct/indirect loops)\n     if (!flags.flag_file.equals(\"\")) {\n         err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -3,9 +3,9 @@\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n-        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        parser.parseArgument(processedArgs.toArray(new String[0]));\n         // For contains --flagfile flag\n-        if (!flags.flag_file.equals(\"\")) {\n+        if (!flags.flag_file.isEmpty()) {\n             processFlagFile(err);\n         }\n     } catch (CmdLineException e) {\n@@ -24,6 +24,42 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        CommandLineConfig commandLineConfig = getCommandLineConfig();\n+        commandLineConfig.setOutputWrapper(flags.output_wrapper);\n+        commandLineConfig.setJsOutputFile(flags.js_output_file);\n+        commandLineConfig.setCreateSourceMap(flags.create_source_map);\n+        commandLineConfig.setSourceMapDetailLevel(flags.source_map_detail_level);\n+        commandLineConfig.setSourceMapFormat(flags.source_map_format);\n+        commandLineConfig.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n+        commandLineConfig.setLanguageIn(flags.language_in);\n+        commandLineConfig.setJs(flags.js);\n+        commandLineConfig.setJszip(flags.jszip);\n+        commandLineConfig.setJsOutputWrapper(flags.js_output_wrapper);\n+        commandLineConfig.setThirdParty(flags.third_party);\n+        commandLineConfig.setExterns(flags.externs);\n+        commandLineConfig.setOnlyClosureDependencies(flags.only_closure_dependencies);\n+        commandLineConfig.setAngularPass(flags.angular_pass);\n+        commandLineConfig.setDependencyMode(flags.dependency_mode);\n+        commandLineConfig.setWarningLevel(flags.warning_level);\n+        commandLineConfig.setChecksOnly(flags.checks_only);\n+        commandLineConfig.setOutputManifest(flags.output_manifest);\n+        commandLineConfig.setSummaryDetailLevel(flags.summary_detail_level);\n+        commandLineConfig.setPrintAst(flags.print_ast);\n+        commandLineConfig.setPrintPassGraph(flags.print_pass_graph);\n+        commandLineConfig.setPrintTree(flags.print_tree);\n+        commandLineConfig.setPrintTweakedFlags(flags.print_tweaked_flags);\n+        commandLineConfig.setModule(flags.module);\n+        commandLineConfig.setVariableMapInputFile(flags.variable_map_input_file);\n+        commandLineConfig.setPropertyMapInputFile(flags.property_map_input_file);\n+        commandLineConfig.setVariableMapOutputFile(flags.variable_map_output_file);\n+        commandLineConfig.setPropertyMapOutputFile(flags.property_map_output_file);\n+        commandLineConfig.setDependencySorting(flags.dependency_sorting);\n+        commandLineConfig.setDependencyOptions(flags.dependency_mode, flags.entry_point, flags.process_closure_primitives, flags.process_common_js_modules).setModuleNameMapper(flags.module_name_mapper).setModuleResolutionMode(flags.module_resolution_mode);\n+        commandLineConfig.setManageClosureDependencies(flags.manage_closure_dependencies);\n+        commandLineConfig.setUseTypesForOptimization(flags.use_types_for_optimization);\n+        commandLineConfig.setPrettyPrint(flags.formatting.equals(\"PRETTY_PRINT\") || flags.formatting.equals(\"PRETTY_PRINT_SINGLE_LINE\"));\n+        commandLineConfig.setLineBreaks(flags.line_breaks || flags.formatting.equals(\"SINGLE\"));\n+        commandLineConfig.setAcceptConstKeyword(flags.accept_const_keyword);\n+        commandLineConfig.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1 (setRunOptions)\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(options, CheckLevel.ERROR, config.jscompError.toArray(new String[0]));\n    diagnosticGroups.setWarningLevel(options, CheckLevel.WARNING, config.jscompWarning.toArray(new String[0]));\n    diagnosticGroups.setWarningLevel(options, CheckLevel.OFF, config.jscompOff.toArray(new String[0]));\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPoints(config.closureEntryPoints);\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJSOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    options.sourceMapFormat = config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2 (setSourceMapFormat)\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format.toString();\n    return this;\n}\n\n## Fixed Function 3 (setJscompError)\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4 (setJscompWarning)\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5 (setJscompOff)\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6 (setAcceptConstKeyword)\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7 (processFlagFile)\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n        String token = tokenizer.nextToken().trim();\n        if (!token.startsWith(\"#\") && !token.isEmpty()) {\n            argsInFile.add(token);\n        }\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8 (initConfigFromFlags)\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(new ArrayList<String>(flags.jscomp_error)).setJscompWarning(new ArrayList<String>(flags.jscomp_warning)).setJscompOff(new ArrayList<String>(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(SourceMap.Format.valueOf(flags.source_map_format.toUpperCase()));\n    }\n}\n\n## Fixed Function 9 (setWarningLevels)\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,14 +1,14 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(options, CheckLevel.ERROR, config.jscompError.toArray(new String[0]));\n+    diagnosticGroups.setWarningLevel(options, CheckLevel.WARNING, config.jscompWarning.toArray(new String[0]));\n+    diagnosticGroups.setWarningLevel(options, CheckLevel.OFF, config.jscompOff.toArray(new String[0]));\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPoints(config.closureEntryPoints);\n     }\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n@@ -16,7 +16,7 @@\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJSOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n         options.sourceMapOutputPath = config.createSourceMap;\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setSourceMapFormat\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setSourceMapFormat\n@@ -1,4 +1,4 @@\n CommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n-    this.sourceMapFormat = format;\n+    this.sourceMapFormat = format.toString();\n     return this;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,15 +1,17 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n     while (tokenizer.hasMoreTokens()) {\n-        argsInFile.add(tokenizer.nextToken());\n+        String token = tokenizer.nextToken().trim();\n+        if (!token.startsWith(\"#\") && !token.isEmpty()) {\n+            argsInFile.add(token);\n+        }\n     }\n     flags.flag_file = \"\";\n     List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n     CmdLineParser parserFileArgs = new CmdLineParser(flags);\n     parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n-    // Currently we are not supporting this (prevent direct/indirect loops)\n     if (!flags.flag_file.equals(\"\")) {\n         err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n         isConfigValid = false;\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -4,7 +4,6 @@\n     isConfigValid = true;\n     try {\n         parser.parseArgument(processedArgs.toArray(new String[] {}));\n-        // For contains --flagfile flag\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n         }\n@@ -24,6 +23,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(new ArrayList<String>(flags.jscomp_error)).setJscompWarning(new ArrayList<String>(flags.jscomp_warning)).setJscompOff(new ArrayList<String>(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(SourceMap.Format.valueOf(flags.source_map_format.toUpperCase()));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPoints(config.closureEntryPoints);\n    }\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputJsFileName(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        VariableMap varMap = VariableMap.load(config.variableMapInputFile);\n        Preconditions.checkNotNull(varMap, \"Cannot read variableMapInputFile: \" + config.variableMapInputFile);\n        options.inputVariableMap = varMap;\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        VariableMap propMap = VariableMap.load(config.propertyMapInputFile);\n        Preconditions.checkNotNull(propMap, \"Cannot read propertyMapInputFile: \" + config.propertyMapInputFile);\n        options.inputPropertyMap = propMap;\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken());\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(flags.source_map_format).setSourceMapDetailLevel(flags.source_map_detail_level);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,30 +8,34 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPoints(config.closureEntryPoints);\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputJsFileName(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        VariableMap varMap = VariableMap.load(config.variableMapInputFile);\n+        Preconditions.checkNotNull(varMap, \"Cannot read variableMapInputFile: \" + config.variableMapInputFile);\n+        options.inputVariableMap = varMap;\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        VariableMap propMap = VariableMap.load(config.propertyMapInputFile);\n+        Preconditions.checkNotNull(propMap, \"Cannot read propertyMapInputFile: \" + config.propertyMapInputFile);\n+        options.inputPropertyMap = propMap;\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +44,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,7 +1,7 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n     while (tokenizer.hasMoreTokens()) {\n         argsInFile.add(tokenizer.nextToken());\n     }\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(flags.source_map_format).setSourceMapDetailLevel(flags.source_map_detail_level);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.closureEntryPoints = config.closureEntryPoints;\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setManageClosureDependencies(true);\n        options.setOutputPath(config.jsOutputFile);\n        options.setDependencyMode(DependencyOptions.DependencyMode.LOOP);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(SourceMap.DetailLevel.ALL);\n    options.setSourceMapFormat(SourceMap.Format.V3);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n            options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n            options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n            options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError = jscompError;\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning = jscompWarning;\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff = jscompOff;\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n        String token = tokenizer.nextToken().trim();\n        if (!token.isEmpty() && !token.startsWith(\"#\")) {\n            argsInFile.add(token);\n        }\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setSourceMapFormat(SourceMap.Format.V3).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = DiagnosticGroups.forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,7 +8,7 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.closureEntryPoints = config.closureEntryPoints;\n     }\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n@@ -16,13 +16,15 @@\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setManageClosureDependencies(true);\n+        options.setOutputPath(config.jsOutputFile);\n+        options.setDependencyMode(DependencyOptions.DependencyMode.LOOP);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(SourceMap.DetailLevel.ALL);\n+    options.setSourceMapFormat(SourceMap.Format.V3);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,14 +33,17 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n+            options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n+            options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT3);\n         } else {\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompError(List<String> jscompError) {\n-    this.jscompError.clear();\n-    this.jscompError.addAll(jscompError);\n+    this.jscompError = jscompError;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompWarning(List<String> jscompWarning) {\n-    this.jscompWarning.clear();\n-    this.jscompWarning.addAll(jscompWarning);\n+    this.jscompWarning = jscompWarning;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompOff(List<String> jscompOff) {\n-    this.jscompOff.clear();\n-    this.jscompOff.addAll(jscompOff);\n+    this.jscompOff = jscompOff;\n     return this;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,9 +1,12 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n     while (tokenizer.hasMoreTokens()) {\n-        argsInFile.add(tokenizer.nextToken());\n+        String token = tokenizer.nextToken().trim();\n+        if (!token.isEmpty() && !token.startsWith(\"#\")) {\n+            argsInFile.add(token);\n+        }\n     }\n     flags.flag_file = \"\";\n     List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setSourceMapFormat(SourceMap.Format.V3).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n     }\n }\n--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,6 +1,6 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n     for (String name : diagnosticGroups) {\n-        DiagnosticGroup group = forName(name);\n+        DiagnosticGroup group = DiagnosticGroups.forName(name);\n         Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n         options.setWarningLevel(group, level);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPoints(config.closureEntryPoints);\n    }\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputPath(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMapFormat format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken());\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMaps(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapOutputPath(flags.create_source_map).setSourceMapFormat(SourceMap.Format.DEFAULT);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,21 +8,21 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPoints(config.closureEntryPoints);\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputPath(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +31,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,7 +1,7 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n     while (tokenizer.hasMoreTokens()) {\n         argsInFile.add(tokenizer.nextToken());\n     }\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMaps(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapOutputPath(flags.create_source_map).setSourceMapFormat(SourceMap.Format.DEFAULT);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevelsWithStringList(options, DiagnosticGroups.forName(\"JSC_ERROR\"), config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevelsWithStringList(options, DiagnosticGroups.forName(\"JSC_WARNING\"), config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevelsWithStringList(options, DiagnosticGroups.forName(\"JSC_OFF\"), config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJSOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    String fileContent = Files.toString(flagFileInput, Charset.defaultCharset());\n    StringTokenizer tokenizer = new StringTokenizer(fileContent);\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken());\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapDetailLevel(flags.source_map_detail_level).setSourceMapFormat(flags.source_map_format);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevelsWithStringList(CompilerOptions options, DiagnosticGroup group, List<String> warningNames, CheckLevel level) {\n    for (String name : warningNames) {\n        DiagnosticGroups groups = getDiagnosticGroups();\n        DiagnosticGroup diagnosticGroup = groups.forName(name);\n        options.setWarningLevel(diagnosticGroup, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,8 +1,8 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevelsWithStringList(options, DiagnosticGroups.forName(\"JSC_ERROR\"), config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevelsWithStringList(options, DiagnosticGroups.forName(\"JSC_WARNING\"), config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevelsWithStringList(options, DiagnosticGroups.forName(\"JSC_OFF\"), config.jscompOff, CheckLevel.OFF);\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n@@ -16,13 +16,13 @@\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJSOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,7 +1,8 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    String fileContent = Files.toString(flagFileInput, Charset.defaultCharset());\n+    StringTokenizer tokenizer = new StringTokenizer(fileContent);\n     while (tokenizer.hasMoreTokens()) {\n         argsInFile.add(tokenizer.nextToken());\n     }\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapDetailLevel(flags.source_map_detail_level).setSourceMapFormat(flags.source_map_format);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPoint(config.closureEntryPoints.get(0));\n    }\n    options.setAssumeFunctionWrapper(true);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(SourceMap.DetailLevel.ALL);\n    options.setSourceMapFormat(SourceMap.Format.V3);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapFromJson = Files.asCharSource(new File(config.variableMapInputFile), Charset.defaultCharset()).read();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapFromJson = Files.asCharSource(new File(config.propertyMapInputFile), Charset.defaultCharset()).read();\n    }\n    if (config.acceptConstKeyword) {\n        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT6);\n    }\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.asCharSource(flagFileInput, Charset.defaultCharset()).read());\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken());\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs);\n        // For contains --flagfile flag\n        if (!flags.flag_file.isEmpty()) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    CommandLineConfig commandLineConfig = getCommandLineConfig();\n    commandLineConfig.setPrintTree(flags.print_tree);\n    commandLineConfig.setComputePhaseOrdering(flags.compute_phase_ordering);\n    commandLineConfig.setPrintAst(flags.print_ast);\n    commandLineConfig.setPrintPassGraph(flags.print_pass_graph);\n    commandLineConfig.setJscompDevMode(flags.jscomp_dev_mode);\n    commandLineConfig.setLoggingLevel(flags.logging_level);\n    commandLineConfig.setExterns(flags.externs);\n    commandLineConfig.setJs(flags.js);\n    commandLineConfig.setJsOutputFile(flags.js_output_file);\n    commandLineConfig.setModule(flags.module);\n    commandLineConfig.setVariableMapInputFile(flags.variable_map_input_file);\n    commandLineConfig.setPropertyMapInputFile(flags.property_map_input_file);\n    commandLineConfig.setVariableMapOutputFile(flags.variable_map_output_file);\n    commandLineConfig.setCreateNameMapFiles(flags.create_name_map_files);\n    commandLineConfig.setPropertyMapOutputFile(flags.property_map_output_file);\n    commandLineConfig.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n    commandLineConfig.setSummaryDetailLevel(flags.summary_detail_level);\n    commandLineConfig.setOutputWrapper(flags.output_wrapper);\n    commandLineConfig.setModuleWrapper(flags.module_wrapper);\n    commandLineConfig.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n    commandLineConfig.setCreateSourceMap(flags.create_source_map);\n    commandLineConfig.setJscompError(flags.jscomp_error);\n    commandLineConfig.setJscompWarning(flags.jscomp_warning);\n    commandLineConfig.setJscompOff(flags.jscomp_off);\n    commandLineConfig.setDefine(flags.define);\n    commandLineConfig.setCharset(flags.charset);\n    commandLineConfig.setManageClosureDependencies(flags.manage_closure_dependencies);\n    commandLineConfig.setClosureEntryPoint(flags.closure_entry_point);\n    commandLineConfig.setOutputManifest(flags.output_manifest);\n    commandLineConfig.setAcceptConstKeyword(flags.accept_const_keyword);\n    commandLineConfig.setLanguageIn(getLanguageMode(flags.language_in));\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    DiagnosticGroups diagnosticGroupsObj = new DiagnosticGroups();\n    Map<String, CheckLevel> warningLevels = diagnosticGroupsObj.getRegisteredGroups();\n    for (String name : diagnosticGroups) {\n        CheckLevel nameLevel = warningLevels.get(name);\n        Preconditions.checkNotNull(nameLevel, \"No warning class for name: \" + name);\n        options.setWarningLevel(nameLevel, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,37 +8,29 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPoint(config.closureEntryPoints.get(0));\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setAssumeFunctionWrapper(true);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(SourceMap.DetailLevel.ALL);\n+    options.setSourceMapFormat(SourceMap.Format.V3);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMapFromJson = Files.asCharSource(new File(config.variableMapInputFile), Charset.defaultCharset()).read();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMapFromJson = Files.asCharSource(new File(config.propertyMapInputFile), Charset.defaultCharset()).read();\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n+    if (config.acceptConstKeyword) {\n+        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT6);\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,7 +1,7 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.asCharSource(flagFileInput, Charset.defaultCharset()).read());\n     while (tokenizer.hasMoreTokens()) {\n         argsInFile.add(tokenizer.nextToken());\n     }\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -3,9 +3,9 @@\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n-        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        parser.parseArgument(processedArgs);\n         // For contains --flagfile flag\n-        if (!flags.flag_file.equals(\"\")) {\n+        if (!flags.flag_file.isEmpty()) {\n             processFlagFile(err);\n         }\n     } catch (CmdLineException e) {\n@@ -20,10 +20,36 @@\n         err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n         err.flush();\n     }\n-    if (!isConfigValid || flags.display_help) {\n-        isConfigValid = false;\n-        parser.printUsage(err);\n-    } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n-    }\n+    CommandLineConfig commandLineConfig = getCommandLineConfig();\n+    commandLineConfig.setPrintTree(flags.print_tree);\n+    commandLineConfig.setComputePhaseOrdering(flags.compute_phase_ordering);\n+    commandLineConfig.setPrintAst(flags.print_ast);\n+    commandLineConfig.setPrintPassGraph(flags.print_pass_graph);\n+    commandLineConfig.setJscompDevMode(flags.jscomp_dev_mode);\n+    commandLineConfig.setLoggingLevel(flags.logging_level);\n+    commandLineConfig.setExterns(flags.externs);\n+    commandLineConfig.setJs(flags.js);\n+    commandLineConfig.setJsOutputFile(flags.js_output_file);\n+    commandLineConfig.setModule(flags.module);\n+    commandLineConfig.setVariableMapInputFile(flags.variable_map_input_file);\n+    commandLineConfig.setPropertyMapInputFile(flags.property_map_input_file);\n+    commandLineConfig.setVariableMapOutputFile(flags.variable_map_output_file);\n+    commandLineConfig.setCreateNameMapFiles(flags.create_name_map_files);\n+    commandLineConfig.setPropertyMapOutputFile(flags.property_map_output_file);\n+    commandLineConfig.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n+    commandLineConfig.setSummaryDetailLevel(flags.summary_detail_level);\n+    commandLineConfig.setOutputWrapper(flags.output_wrapper);\n+    commandLineConfig.setModuleWrapper(flags.module_wrapper);\n+    commandLineConfig.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n+    commandLineConfig.setCreateSourceMap(flags.create_source_map);\n+    commandLineConfig.setJscompError(flags.jscomp_error);\n+    commandLineConfig.setJscompWarning(flags.jscomp_warning);\n+    commandLineConfig.setJscompOff(flags.jscomp_off);\n+    commandLineConfig.setDefine(flags.define);\n+    commandLineConfig.setCharset(flags.charset);\n+    commandLineConfig.setManageClosureDependencies(flags.manage_closure_dependencies);\n+    commandLineConfig.setClosureEntryPoint(flags.closure_entry_point);\n+    commandLineConfig.setOutputManifest(flags.output_manifest);\n+    commandLineConfig.setAcceptConstKeyword(flags.accept_const_keyword);\n+    commandLineConfig.setLanguageIn(getLanguageMode(flags.language_in));\n }\n--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,7 +1,9 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n+    DiagnosticGroups diagnosticGroupsObj = new DiagnosticGroups();\n+    Map<String, CheckLevel> warningLevels = diagnosticGroupsObj.getRegisteredGroups();\n     for (String name : diagnosticGroups) {\n-        DiagnosticGroup group = forName(name);\n-        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-        options.setWarningLevel(group, level);\n+        CheckLevel nameLevel = warningLevels.get(name);\n+        Preconditions.checkNotNull(nameLevel, \"No warning class for name: \" + name);\n+        options.setWarningLevel(nameLevel, level);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPoints(config.closureEntryPoints);\n    }\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputJsFileName(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\"); // fix: specify delimiter\n    while (tokenizer.hasMoreTokens()) {\n        String token = tokenizer.nextToken().trim(); // fix: remove whitespace\n        if (!token.isEmpty() && !token.startsWith(\"#\")) { // fix: ignore empty lines and comments\n            argsInFile.add(token);\n        }\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n        getCommandLineConfig().setSourceMapFormat(SourceMap.FileFormat.findByClassName(flags.source_map_format)); // fix: set source map format\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -6,23 +6,23 @@\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPoints(config.closureEntryPoints);\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputJsFileName(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,9 +1,12 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\"); // fix: specify delimiter\n     while (tokenizer.hasMoreTokens()) {\n-        argsInFile.add(tokenizer.nextToken());\n+        String token = tokenizer.nextToken().trim(); // fix: remove whitespace\n+        if (!token.isEmpty() && !token.startsWith(\"#\")) { // fix: ignore empty lines and comments\n+            argsInFile.add(token);\n+        }\n     }\n     flags.flag_file = \"\";\n     List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -25,5 +25,6 @@\n         parser.printUsage(err);\n     } else {\n         getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setSourceMapFormat(SourceMap.FileFormat.findByClassName(flags.source_map_format)); // fix: set source map format\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPoints(config.closureEntryPoints);\n    }\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputPath(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setVariableMapInputFilePath(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setPropertyMapInputFilePath(config.propertyMapInputFile);\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(String format) {\n    this.sourceMapFormat = SourceMap.Format.fromString(format);\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError = jscompError;\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning = jscompWarning;\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff = jscompOff;\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\\r \");\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken());\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(flags.source_map_format);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,30 +8,30 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPoints(config.closureEntryPoints);\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputPath(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setVariableMapInputFilePath(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setPropertyMapInputFilePath(config.propertyMapInputFile);\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompError(List<String> jscompError) {\n-    this.jscompError.clear();\n-    this.jscompError.addAll(jscompError);\n+    this.jscompError = jscompError;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompWarning(List<String> jscompWarning) {\n-    this.jscompWarning.clear();\n-    this.jscompWarning.addAll(jscompWarning);\n+    this.jscompWarning = jscompWarning;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompOff(List<String> jscompOff) {\n-    this.jscompOff.clear();\n-    this.jscompOff.addAll(jscompOff);\n+    this.jscompOff = jscompOff;\n     return this;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,7 +1,7 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\\r \");\n     while (tokenizer.hasMoreTokens()) {\n         argsInFile.add(tokenizer.nextToken());\n     }\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(flags.source_map_format);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPoints(config.closureEntryPoints);\n    }\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken());\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapDetailLevel(flags.source_map_detail_level).setSourceMapFormat(flags.source_map_format);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        if (group != null) { // Use null check instead of Preconditions so that the loop will continue even if no warning class is found for a name\n            options.setWarningLevel(group, level);\n        }\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -6,23 +6,23 @@\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPoints(config.closureEntryPoints);\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +31,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,7 +1,7 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n     while (tokenizer.hasMoreTokens()) {\n         argsInFile.add(tokenizer.nextToken());\n     }\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapDetailLevel(flags.source_map_detail_level).setSourceMapFormat(flags.source_map_format);\n     }\n }\n--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,7 +1,8 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n     for (String name : diagnosticGroups) {\n         DiagnosticGroup group = forName(name);\n-        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-        options.setWarningLevel(group, level);\n+        if (group != null) { // Use null check instead of Preconditions so that the loop will continue even if no warning class is found for a name\n+            options.setWarningLevel(group, level);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPoints(config.closureEntryPoints);\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputPath(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError = jscompError;\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning = jscompWarning;\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff = jscompOff;\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    BufferedReader br = new BufferedReader(new FileReader(flagFileInput));\n    String currentLine;\n    while ((currentLine = br.readLine()) != null) {\n        StringTokenizer tokenizer = new StringTokenizer(currentLine);\n        while (tokenizer.hasMoreTokens()) {\n            argsInFile.add(tokenizer.nextToken());\n        }\n    }\n    br.close();\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(new ArrayList<>(flags.jscomp_error)).setJscompWarning(new ArrayList<>(flags.jscomp_warning)).setJscompOff(new ArrayList<>(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(new ArrayList<>(flags.closure_entry_point)).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(SourceMap.Format.valueOf(flags.js_source_map_format.toUpperCase().replaceAll(\"-\", \"_\")));\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,7 +8,7 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPoints(config.closureEntryPoints);\n     }\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n@@ -16,13 +16,13 @@\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputPath(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +31,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompError(List<String> jscompError) {\n-    this.jscompError.clear();\n-    this.jscompError.addAll(jscompError);\n+    this.jscompError = jscompError;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompWarning(List<String> jscompWarning) {\n-    this.jscompWarning.clear();\n-    this.jscompWarning.addAll(jscompWarning);\n+    this.jscompWarning = jscompWarning;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompOff(List<String> jscompOff) {\n-    this.jscompOff.clear();\n-    this.jscompOff.addAll(jscompOff);\n+    this.jscompOff = jscompOff;\n     return this;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,10 +1,15 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n-    while (tokenizer.hasMoreTokens()) {\n-        argsInFile.add(tokenizer.nextToken());\n+    BufferedReader br = new BufferedReader(new FileReader(flagFileInput));\n+    String currentLine;\n+    while ((currentLine = br.readLine()) != null) {\n+        StringTokenizer tokenizer = new StringTokenizer(currentLine);\n+        while (tokenizer.hasMoreTokens()) {\n+            argsInFile.add(tokenizer.nextToken());\n+        }\n     }\n+    br.close();\n     flags.flag_file = \"\";\n     List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n     CmdLineParser parserFileArgs = new CmdLineParser(flags);\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(new ArrayList<>(flags.jscomp_error)).setJscompWarning(new ArrayList<>(flags.jscomp_warning)).setJscompOff(new ArrayList<>(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(new ArrayList<>(flags.closure_entry_point)).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(SourceMap.Format.valueOf(flags.js_source_map_format.toUpperCase().replaceAll(\"-\", \"_\")));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPointPrefix(config.closureEntryPoints.get(0));\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n        String line = tokenizer.nextToken().trim();\n        if (!line.isEmpty() && !line.startsWith(\"#\")) {\n            argsInFile.add(line);\n        }\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPointPrefix(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapDetailLevel(flags.source_map_detail_level).setSourceMapFormat(flags.source_map_format);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,7 +8,7 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPointPrefix(config.closureEntryPoints.get(0));\n     }\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n@@ -16,22 +16,22 @@\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,9 +1,12 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n     while (tokenizer.hasMoreTokens()) {\n-        argsInFile.add(tokenizer.nextToken());\n+        String line = tokenizer.nextToken().trim();\n+        if (!line.isEmpty() && !line.startsWith(\"#\")) {\n+            argsInFile.add(line);\n+        }\n     }\n     flags.flag_file = \"\";\n     List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPointPrefix(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapDetailLevel(flags.source_map_detail_level).setSourceMapFormat(flags.source_map_format);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1 (Corresponds to Buggy Function 1)\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(\n            config.sourceMapDetailLevel != null ? config.sourceMapDetailLevel : SourceMap.DetailLevel.ALL);\n    options.setSourceMapFormat(\n            config.sourceMapFormat != null ? config.sourceMapFormat : SourceMap.Format.V3);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}\n\n## Fixed Function 2 (Corresponds to Buggy Function 2)\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format != null ? format : SourceMap.Format.DEFAULT;\n    return this;\n}\n\n## Fixed Function 3 (Corresponds to Buggy Function 3)\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    if (jscompError != null) {\n        this.jscompError.addAll(jscompError);\n    }\n    return this;\n}\n\n## Fixed Function 4 (Corresponds to Buggy Function 4)\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    if (jscompWarning != null) {\n        this.jscompWarning.addAll(jscompWarning);\n    }\n    return this;\n}\n\n## Fixed Function 5 (Corresponds to Buggy Function 5)\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    if (jscompOff != null) {\n        this.jscompOff.addAll(jscompOff);\n    }\n    return this;\n}\n\n## Fixed Function 6 (Corresponds to Buggy Function 6)\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7 (Corresponds to Buggy Function 7)\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n        String line = tokenizer.nextToken().trim();\n        if (!line.startsWith(\"#\") && !line.isEmpty()) {\n            argsInFile.add(line);\n        }\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8 (Corresponds to Buggy Function 8)\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        CommandLineConfig commandLineConfig = getCommandLineConfig();\n        CompilerOptions options = commandLineConfig.getCurrentCompilerOptions();\n        commandLineConfig.setPrintTree(flags.print_tree)\n            .setComputePhaseOrdering(flags.compute_phase_ordering)\n            .setPrintAst(flags.print_ast)\n            .setPrintPassGraph(flags.print_pass_graph)\n            .setJscompDevMode(flags.jscomp_dev_mode)\n            .setLoggingLevel(flags.logging_level)\n            .setExterns(flags.externs)\n            .setJs(flags.js)\n            .setJsOutputFile(flags.js_output_file)\n            .setModule(flags.module)\n            .setVariableMapInputFile(flags.variable_map_input_file)\n            .setPropertyMapInputFile(flags.property_map_input_file)\n            .setVariableMapOutputFile(flags.variable_map_output_file)\n            .setCreateNameMapFiles(flags.create_name_map_files)\n            .setPropertyMapOutputFile(flags.property_map_output_file)\n            .setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention())\n            .setSummaryDetailLevel(flags.summary_detail_level)\n            .setOutputWrapper(flags.output_wrapper)\n            .setModuleWrapper(flags.module_wrapper)\n            .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n            .setCreateSourceMap(flags.create_source_map)\n            .setDefine(flags.define)\n            .setCharset(flags.charset)\n            .setManageClosureDependencies(flags.manage_closure_dependencies)\n            .setClosureEntryPoints(flags.closure_entry_point)\n            .setOutputManifest(flags.output_manifest)\n            .setAcceptConstKeyword(flags.accept_const_keyword)\n            .setLanguageIn(flags.language_in)\n            .setSourceMapFormat(flags.source_map_format)\n            .setSourceMapDetailLevel(flags.source_map_detail_level);\n        DiagnosticGroups diagnosticGroups = commandLineConfig.getDiagnosticGroups();\n        diagnosticGroups.setWarningLevels(options, flags.jscomp_error, CheckLevel.ERROR);\n        diagnosticGroups.setWarningLevels(options, flags.jscomp_warning, CheckLevel.WARNING);\n        diagnosticGroups.setWarningLevels(options, flags.jscomp_off, CheckLevel.OFF);\n    }\n}\n\n## Fixed Function 9 (Corresponds to Buggy Function 9)\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -16,13 +16,15 @@\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(\n+            config.sourceMapDetailLevel != null ? config.sourceMapDetailLevel : SourceMap.DetailLevel.ALL);\n+    options.setSourceMapFormat(\n+            config.sourceMapFormat != null ? config.sourceMapFormat : SourceMap.Format.V3);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setSourceMapFormat\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setSourceMapFormat\n@@ -1,4 +1,4 @@\n CommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n-    this.sourceMapFormat = format;\n+    this.sourceMapFormat = format != null ? format : SourceMap.Format.DEFAULT;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n@@ -1,5 +1,7 @@\n CommandLineConfig setJscompError(List<String> jscompError) {\n     this.jscompError.clear();\n-    this.jscompError.addAll(jscompError);\n+    if (jscompError != null) {\n+        this.jscompError.addAll(jscompError);\n+    }\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n@@ -1,5 +1,7 @@\n CommandLineConfig setJscompWarning(List<String> jscompWarning) {\n     this.jscompWarning.clear();\n-    this.jscompWarning.addAll(jscompWarning);\n+    if (jscompWarning != null) {\n+        this.jscompWarning.addAll(jscompWarning);\n+    }\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n@@ -1,5 +1,7 @@\n CommandLineConfig setJscompOff(List<String> jscompOff) {\n     this.jscompOff.clear();\n-    this.jscompOff.addAll(jscompOff);\n+    if (jscompOff != null) {\n+        this.jscompOff.addAll(jscompOff);\n+    }\n     return this;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,9 +1,12 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n     while (tokenizer.hasMoreTokens()) {\n-        argsInFile.add(tokenizer.nextToken());\n+        String line = tokenizer.nextToken().trim();\n+        if (!line.startsWith(\"#\") && !line.isEmpty()) {\n+            argsInFile.add(line);\n+        }\n     }\n     flags.flag_file = \"\";\n     List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,41 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        CommandLineConfig commandLineConfig = getCommandLineConfig();\n+        CompilerOptions options = commandLineConfig.getCurrentCompilerOptions();\n+        commandLineConfig.setPrintTree(flags.print_tree)\n+            .setComputePhaseOrdering(flags.compute_phase_ordering)\n+            .setPrintAst(flags.print_ast)\n+            .setPrintPassGraph(flags.print_pass_graph)\n+            .setJscompDevMode(flags.jscomp_dev_mode)\n+            .setLoggingLevel(flags.logging_level)\n+            .setExterns(flags.externs)\n+            .setJs(flags.js)\n+            .setJsOutputFile(flags.js_output_file)\n+            .setModule(flags.module)\n+            .setVariableMapInputFile(flags.variable_map_input_file)\n+            .setPropertyMapInputFile(flags.property_map_input_file)\n+            .setVariableMapOutputFile(flags.variable_map_output_file)\n+            .setCreateNameMapFiles(flags.create_name_map_files)\n+            .setPropertyMapOutputFile(flags.property_map_output_file)\n+            .setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention())\n+            .setSummaryDetailLevel(flags.summary_detail_level)\n+            .setOutputWrapper(flags.output_wrapper)\n+            .setModuleWrapper(flags.module_wrapper)\n+            .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n+            .setCreateSourceMap(flags.create_source_map)\n+            .setDefine(flags.define)\n+            .setCharset(flags.charset)\n+            .setManageClosureDependencies(flags.manage_closure_dependencies)\n+            .setClosureEntryPoints(flags.closure_entry_point)\n+            .setOutputManifest(flags.output_manifest)\n+            .setAcceptConstKeyword(flags.accept_const_keyword)\n+            .setLanguageIn(flags.language_in)\n+            .setSourceMapFormat(flags.source_map_format)\n+            .setSourceMapDetailLevel(flags.source_map_detail_level);\n+        DiagnosticGroups diagnosticGroups = commandLineConfig.getDiagnosticGroups();\n+        diagnosticGroups.setWarningLevels(options, flags.jscomp_error, CheckLevel.ERROR);\n+        diagnosticGroups.setWarningLevels(options, flags.jscomp_warning, CheckLevel.WARNING);\n+        diagnosticGroups.setWarningLevels(options, flags.jscomp_off, CheckLevel.OFF);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPoints(config.closureEntryPoints);\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \" \\n\\r\\f\");\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken());\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(flags.source_map_format);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,7 +8,7 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPoints(config.closureEntryPoints);\n     }\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n@@ -16,13 +16,13 @@\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +31,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,7 +1,7 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \" \\n\\r\\f\");\n     while (tokenizer.hasMoreTokens()) {\n         argsInFile.add(tokenizer.nextToken());\n     }\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(flags.source_map_format);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPointBytes(Joiner.on(\"\\n\").join(config.closureEntryPoints).getBytes(Charsets.UTF_8));\n    }\n    options.setLanguageIn(config.languageIn);\n    options.acceptConstKeyword = config.acceptConstKeyword;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.getSourceMapFormat());\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapFromJson(Files.asCharSource(\n                new File(config.variableMapInputFile), Charset.defaultCharset()).read());\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapFromJson(Files.asCharSource(\n                new File(config.propertyMapInputFile), Charset.defaultCharset()).read());\n    }\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError = jscompError;\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning = jscompWarning;\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff = jscompOff;\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken());\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(new ArrayList<String>(flags.jscomp_error)).setJscompWarning(new ArrayList<String>(flags.jscomp_warning)).setJscompOff(new ArrayList<String>(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(flags.output_wrapper.endsWith(\".json\") ? SourceMap.Format.V3 : SourceMap.Format.DEFAULT);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -6,39 +6,30 @@\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPointBytes(Joiner.on(\"\\n\").join(config.closureEntryPoints).getBytes(Charsets.UTF_8));\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setLanguageIn(config.languageIn);\n+    options.acceptConstKeyword = config.acceptConstKeyword;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n-    outputCharset = options.outputCharset = getOutputCharset();\n+    outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.getSourceMapFormat());\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMapFromJson(Files.asCharSource(\n+                new File(config.variableMapInputFile), Charset.defaultCharset()).read());\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMapFromJson(Files.asCharSource(\n+                new File(config.propertyMapInputFile), Charset.defaultCharset()).read());\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompError(List<String> jscompError) {\n-    this.jscompError.clear();\n-    this.jscompError.addAll(jscompError);\n+    this.jscompError = jscompError;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompWarning(List<String> jscompWarning) {\n-    this.jscompWarning.clear();\n-    this.jscompWarning.addAll(jscompWarning);\n+    this.jscompWarning = jscompWarning;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompOff(List<String> jscompOff) {\n-    this.jscompOff.clear();\n-    this.jscompOff.addAll(jscompOff);\n+    this.jscompOff = jscompOff;\n     return this;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,7 +1,7 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n     while (tokenizer.hasMoreTokens()) {\n         argsInFile.add(tokenizer.nextToken());\n     }\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(new ArrayList<String>(flags.jscomp_error)).setJscompWarning(new ArrayList<String>(flags.jscomp_warning)).setJscompOff(new ArrayList<String>(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(flags.output_wrapper.endsWith(\".json\") ? SourceMap.Format.V3 : SourceMap.Format.DEFAULT);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(ImmutableList.copyOf(config.closureEntryPoints)));\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError = jscompError;\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning = jscompWarning;\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff = jscompOff;\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n        String line = tokenizer.nextToken().trim();\n        if (line.isEmpty() || line.startsWith(\"#\")) {\n            continue;\n        }\n        argsInFile.add(line);\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(ImmutableList.copyOf(flags.jscomp_error)).setJscompWarning(ImmutableList.copyOf(flags.jscomp_warning)).setJscompOff(ImmutableList.copyOf(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,7 +8,7 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(ImmutableList.copyOf(config.closureEntryPoints)));\n     }\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n@@ -16,13 +16,13 @@\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +31,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompError\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompError(List<String> jscompError) {\n-    this.jscompError.clear();\n-    this.jscompError.addAll(jscompError);\n+    this.jscompError = jscompError;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompWarning\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompWarning(List<String> jscompWarning) {\n-    this.jscompWarning.clear();\n-    this.jscompWarning.addAll(jscompWarning);\n+    this.jscompWarning = jscompWarning;\n     return this;\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setJscompOff\n@@ -1,5 +1,4 @@\n CommandLineConfig setJscompOff(List<String> jscompOff) {\n-    this.jscompOff.clear();\n-    this.jscompOff.addAll(jscompOff);\n+    this.jscompOff = jscompOff;\n     return this;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,9 +1,13 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\");\n     while (tokenizer.hasMoreTokens()) {\n-        argsInFile.add(tokenizer.nextToken());\n+        String line = tokenizer.nextToken().trim();\n+        if (line.isEmpty() || line.startsWith(\"#\")) {\n+            continue;\n+        }\n+        argsInFile.add(line);\n     }\n     flags.flag_file = \"\";\n     List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(ImmutableList.copyOf(flags.jscomp_error)).setJscompWarning(ImmutableList.copyOf(flags.jscomp_warning)).setJscompOff(ImmutableList.copyOf(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevelsWithPrefix(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevelsWithPrefix(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevelsWithPrefix(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(options.getDependencyOptions().toBuilder().setEntryPoints(config.closureEntryPoints).build());\n    }\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setInputVariableMapSerialized(VariableMap.load(config.variableMapInputFile).toBytes());\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setInputPropertyMapSerialized(VariableMap.load(config.propertyMapInputFile).toBytes());\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\\r\\f\");\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken());\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(flags.source_map_format);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevelsWithPrefix(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n        options.getWarningLevelGuard().disallowDiagnosticGroupPrefix(group);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,33 +1,33 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevelsWithPrefix(options, config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevelsWithPrefix(options, config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevelsWithPrefix(options, config.jscompOff, CheckLevel.OFF);\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(options.getDependencyOptions().toBuilder().setEntryPoints(config.closureEntryPoints).build());\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setInputVariableMapSerialized(VariableMap.load(config.variableMapInputFile).toBytes());\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setInputPropertyMapSerialized(VariableMap.load(config.propertyMapInputFile).toBytes());\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,7 +1,7 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n+    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()), \"\\n\\r\\f\");\n     while (tokenizer.hasMoreTokens()) {\n         argsInFile.add(tokenizer.nextToken());\n     }\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setSourceMapFormat(flags.source_map_format);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPoints(config.closureEntryPoints);\n    }\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setVariableMapInput(new File(config.variableMapInputFile));\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setPropertyMapInput(new File(config.propertyMapInputFile));\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}\n\n## Fixed Function 2\nCommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}\n\n## Fixed Function 3\nCommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}\n\n## Fixed Function 4\nCommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}\n\n## Fixed Function 5\nCommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}\n\n## Fixed Function 6\nCommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}\n\n## Fixed Function 7\nprivate void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    argsInFile.addAll(Files.readLines(flagFileInput, Charset.defaultCharset()));\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}\n\n## Fixed Function 8\nprivate void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(Lists.newArrayList(flags.jscomp_error)).setJscompWarning(Lists.newArrayList(flags.jscomp_warning)).setJscompOff(Lists.newArrayList(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}\n\n## Fixed Function 9\nvoid setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,30 +8,30 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPoints(config.closureEntryPoints);\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n-    outputCharset = options.outputCharset = getOutputCharset();\n+    outputCharset = options.getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setVariableMapInput(new File(config.variableMapInputFile));\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setPropertyMapInput(new File(config.propertyMapInputFile));\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n+++ com/google/javascript/jscomp/CommandLineRunner.java@processFlagFile\n@@ -1,10 +1,7 @@\n private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n-    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n-    while (tokenizer.hasMoreTokens()) {\n-        argsInFile.add(tokenizer.nextToken());\n-    }\n+    argsInFile.addAll(Files.readLines(flagFileInput, Charset.defaultCharset()));\n     flags.flag_file = \"\";\n     List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n     CmdLineParser parserFileArgs = new CmdLineParser(flags);\n--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(Lists.newArrayList(flags.jscomp_error)).setJscompWarning(Lists.newArrayList(flags.jscomp_warning)).setJscompOff(Lists.newArrayList(flags.jscomp_off)).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]