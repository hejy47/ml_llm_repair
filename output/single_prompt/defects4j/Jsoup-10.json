[{"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl = attr(attributeKey);\n    if (relUrl.isEmpty()) {\n        // nothing to make absolute with\n        return \"\";\n    } else if (!hasAttr(attributeKey)) {\n        return relUrl;\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,9 +1,11 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n     String relUrl = attr(attributeKey);\n-    if (!hasAttr(attributeKey)) {\n+    if (relUrl.isEmpty()) {\n         // nothing to make absolute with\n         return \"\";\n+    } else if (!hasAttr(attributeKey)) {\n+        return relUrl;\n     } else {\n         URL base;\n         try {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            base = new URL(baseUri);\n        } catch (MalformedURLException e1) {\n            try {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e2) {\n                return \"\";\n            }\n        }\n        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n        URL abs;\n        try {\n            abs = new URL(base, relUrl);\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n        return abs.toExternalForm();\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,24 +1,29 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n+        String relUrl = attr(attributeKey);\n         URL base;\n         try {\n+            base = new URL(baseUri);\n+        } catch (MalformedURLException e1) {\n             try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n                 // the base is unsuitable, but the attribute may be abs on its own, so try that\n                 URL abs = new URL(relUrl);\n                 return abs.toExternalForm();\n+            } catch (MalformedURLException e2) {\n+                return \"\";\n             }\n-            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n-            URL abs = new URL(base, relUrl);\n-            return abs.toExternalForm();\n+        }\n+        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n+        URL abs;\n+        try {\n+            abs = new URL(base, relUrl);\n         } catch (MalformedURLException e) {\n             return \"\";\n         }\n+        return abs.toExternalForm();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else if (relUrl.startsWith(\"//\")) {\n        // handle protocol-relative URLs\n        return baseUri.substring(0, baseUri.indexOf(\":\")) + \":\" + relUrl;\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -4,6 +4,9 @@\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n+    } else if (relUrl.startsWith(\"//\")) {\n+        // handle protocol-relative URLs\n+        return baseUri.substring(0, baseUri.indexOf(\":\")) + \":\" + relUrl;\n     } else {\n         URL base;\n         try {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl = attr(attributeKey);\n    if (relUrl.equals(\"\")) { // Fixing null comparison\n        // nothing to make absolute with\n        return \"\";\n    } else if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n} \n\n## Fixed Function 2\npublic static void connect(String host, int port) throws IOException {\n    Validate.notNull(host, \"host must not be null\");\n    Validate.isTrue(port > 0 && port < 65536, \"port must be valid\");\n    Socket s = createSocket();\n    s.connect(new InetSocketAddress(host, port), DEFAULT_TIMEOUT);\n    s.setSoTimeout(DEFAULT_TIMEOUT);\n    try {\n        OutputStream out = s.getOutputStream();\n        writer = new OutputStreamWriter(out, charset);\n        OutputStream byteOut = new BufferedOutputStream(out, BUFFER_SIZE);\n        os = new BufferedWriter(new OutputStreamWriter(byteOut, DataUtil.defaultCharset()), BUFFER_SIZE);\n\n        InputStream in = s.getInputStream();\n        reader = new InputStreamReader(in, charset);\n        InputStream byteIn = new BufferedInputStream(in, BUFFER_SIZE);\n        is = new BufferedReader(new InputStreamReader(byteIn, DataUtil.defaultCharset()), BUFFER_SIZE);\n\n        conn = s;\n    } catch (IOException e) {\n        safeClose(s);\n        throw e;\n    }\n}\n\n## Fixed Function 3\npublic static String clean(String bodyHtml, String baseUri, Whitelist whitelist) {\n    Document dirty;\n    if( StringUtil.isBlank(baseUri) )\n        dirty = Jsoup.parse(bodyHtml);\n    else\n        dirty = Jsoup.parse(bodyHtml, baseUri);\n\n    Cleaner cleaner = new Cleaner(whitelist);\n    Document clean = cleaner.clean(dirty);\n\n    return clean.body().html();\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,7 +1,10 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n     String relUrl = attr(attributeKey);\n-    if (!hasAttr(attributeKey)) {\n+    if (relUrl.equals(\"\")) { // Fixing null comparison\n+        // nothing to make absolute with\n+        return \"\";\n+    } else if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        URL base;\n        try {\n            base = new URL(baseUri);\n        } catch (MalformedURLException e) {\n            // the base is unsuitable, but the attribute may be abs on its own, so try that\n            try {\n                URL abs = new URL(attr(attributeKey));\n                return abs.toExternalForm();\n            } catch (MalformedURLException e1) {\n                return \"\";\n            }\n        }\n        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n        try {\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,20 +1,23 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n         URL base;\n         try {\n+            base = new URL(baseUri);\n+        } catch (MalformedURLException e) {\n+            // the base is unsuitable, but the attribute may be abs on its own, so try that\n             try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n+                URL abs = new URL(attr(attributeKey));\n                 return abs.toExternalForm();\n+            } catch (MalformedURLException e1) {\n+                return \"\";\n             }\n-            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n+        }\n+        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n+        try {\n             URL abs = new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            base = new URL(baseUri);\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            try {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e2) {\n                return \"\";\n            }\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,24 +1,24 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n+        String relUrl = attr(attributeKey);\n         URL base;\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n+            base = new URL(baseUri);\n             // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n             URL abs = new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n-            return \"\";\n+            try {\n+                // the base is unsuitable, but the attribute may be abs on its own, so try that\n+                URL abs = new URL(relUrl);\n+                return abs.toExternalForm();\n+            } catch (MalformedURLException e2) {\n+                return \"\";\n+            }\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        try {\n            // fix: use URI instead of URL for better URL resolution\n            URI base = new URI(baseUri);\n            URI abs = base.resolve(relUrl);\n            return abs.toURL().toExternalForm();\n        } catch (URISyntaxException | MalformedURLException e) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -5,19 +5,12 @@\n         // nothing to make absolute with\n         return \"\";\n     } else {\n-        URL base;\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n-            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n-            URL abs = new URL(base, relUrl);\n-            return abs.toExternalForm();\n-        } catch (MalformedURLException e) {\n+            // fix: use URI instead of URL for better URL resolution\n+            URI base = new URI(baseUri);\n+            URI abs = base.resolve(relUrl);\n+            return abs.toURL().toExternalForm();\n+        } catch (URISyntaxException | MalformedURLException e) {\n             return \"\";\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        try {\n            URL base = new URL(baseUri);\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}\n\n## Fixed Function 2\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    }\n    String relUrl = attr(attributeKey);\n    try {\n        URL base = new URL(baseUri);\n        URL abs = new URL(base, relUrl);\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        return \"\";\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -5,16 +5,8 @@\n         // nothing to make absolute with\n         return \"\";\n     } else {\n-        URL base;\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n-            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n+            URL base = new URL(baseUri);\n             URL abs = new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    }\n    String relUrl = attr(attributeKey);\n    URL base;\n    try {\n        base = new URL(baseUri);\n        URL abs = new URL(base, relUrl);\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        try {\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e2) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,23 +1,20 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n-    } else {\n-        URL base;\n+    }\n+    String relUrl = attr(attributeKey);\n+    URL base;\n+    try {\n+        base = new URL(baseUri);\n+        URL abs = new URL(base, relUrl);\n+        return abs.toExternalForm();\n+    } catch (MalformedURLException e) {\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n-            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n-            URL abs = new URL(base, relUrl);\n+            URL abs = new URL(relUrl);\n             return abs.toExternalForm();\n-        } catch (MalformedURLException e) {\n+        } catch (MalformedURLException e2) {\n             return \"\";\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl = attr(attributeKey);\n    if (relUrl.equals(\"\")) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,7 +1,7 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n     String relUrl = attr(attributeKey);\n-    if (!hasAttr(attributeKey)) {\n+    if (relUrl.equals(\"\")) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } \n    String relUrl = attr(attributeKey);\n    try {\n        URL base = new URL(baseUri);\n        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n        URL abs = new URL(base, relUrl);\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        try {\n            // if relUrl is already absolute, URL constructor will throw an exception\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException ex) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,23 +1,21 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n-    } else {\n-        URL base;\n+    } \n+    String relUrl = attr(attributeKey);\n+    try {\n+        URL base = new URL(baseUri);\n+        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n+        URL abs = new URL(base, relUrl);\n+        return abs.toExternalForm();\n+    } catch (MalformedURLException e) {\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n-            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n-            URL abs = new URL(base, relUrl);\n+            // if relUrl is already absolute, URL constructor will throw an exception\n+            URL abs = new URL(relUrl);\n             return abs.toExternalForm();\n-        } catch (MalformedURLException e) {\n+        } catch (MalformedURLException ex) {\n             return \"\";\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl = attr(attributeKey);\n    if (relUrl.equals(\"\")) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        try {\n            URL base = new URL(baseUri);\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,20 +1,12 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n     String relUrl = attr(attributeKey);\n-    if (!hasAttr(attributeKey)) {\n+    if (relUrl.equals(\"\")) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n-        URL base;\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n-            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n+            URL base = new URL(baseUri);\n             URL abs = new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl = attr(attributeKey);\n    if (relUrl.isEmpty()) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        try {\n            URL base = new URL(baseUri);\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,19 +1,12 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n     String relUrl = attr(attributeKey);\n-    if (!hasAttr(attributeKey)) {\n+    if (relUrl.isEmpty()) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n-        URL base;\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n+            URL base = new URL(baseUri);\n             // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n             URL abs = new URL(base, relUrl);\n             return abs.toExternalForm();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            base = new URL(baseUri);\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            try {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException ex) {\n                return \"\";\n            }\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,24 +1,24 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n+        String relUrl = attr(attributeKey);\n         URL base;\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n+            base = new URL(baseUri);\n             // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n             URL abs = new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n-            return \"\";\n+            try {\n+                // the base is unsuitable, but the attribute may be abs on its own, so try that\n+                URL abs = new URL(relUrl);\n+                return abs.toExternalForm();\n+            } catch (MalformedURLException ex) {\n+                return \"\";\n+            }\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    }\n    String relUrl = attr(attributeKey);\n    URL base;\n    try {\n        base = new URL(baseUri);\n        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n        URL abs = new URL(base, relUrl);\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        try {\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e2) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,23 +1,21 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n-    } else {\n-        URL base;\n+    }\n+    String relUrl = attr(attributeKey);\n+    URL base;\n+    try {\n+        base = new URL(baseUri);\n+        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n+        URL abs = new URL(base, relUrl);\n+        return abs.toExternalForm();\n+    } catch (MalformedURLException e) {\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n-            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n-            URL abs = new URL(base, relUrl);\n+            URL abs = new URL(relUrl);\n             return abs.toExternalForm();\n-        } catch (MalformedURLException e) {\n+        } catch (MalformedURLException e2) {\n             return \"\";\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            base = new URL(baseUri);\n        } catch (MalformedURLException e) {\n            // the base is unsuitable, but the attribute may be abs on its own, so try that\n            try {\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException ex) {\n                return \"\";\n            }\n        }\n\n        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n        try {\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,20 +1,25 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n+        String relUrl = attr(attributeKey);\n         URL base;\n         try {\n+            base = new URL(baseUri);\n+        } catch (MalformedURLException e) {\n+            // the base is unsuitable, but the attribute may be abs on its own, so try that\n             try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                 URL abs = new URL(relUrl);\n                 return abs.toExternalForm();\n+            } catch (MalformedURLException ex) {\n+                return \"\";\n             }\n-            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n+        }\n+\n+        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n+        try {\n             URL abs = new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            base = new URL(baseUri);\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            try {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e2) {\n                return \"\";\n            }\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,24 +1,25 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n+\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n+        String relUrl = attr(attributeKey);\n         URL base;\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n+            base = new URL(baseUri);\n             // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n             URL abs = new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n-            return \"\";\n+            try {\n+                // the base is unsuitable, but the attribute may be abs on its own, so try that\n+                URL abs = new URL(relUrl);\n+                return abs.toExternalForm();\n+            } catch (MalformedURLException e2) {\n+                return \"\";\n+            }\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            base = new URL(baseUri);\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            // the base is unsuitable, but the attribute may be abs on its own, so try that\n            try {\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e2) {\n                return \"\";\n            }\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,24 +1,24 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n+        String relUrl = attr(attributeKey);\n         URL base;\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n+            base = new URL(baseUri);\n             // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n             URL abs = new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n-            return \"\";\n+            // the base is unsuitable, but the attribute may be abs on its own, so try that\n+            try {\n+                URL abs = new URL(relUrl);\n+                return abs.toExternalForm();\n+            } catch (MalformedURLException e2) {\n+                return \"\";\n+            }\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    } else {\n        String relUrl = attr(attributeKey);\n        URL base;\n        try {\n            base = new URL(baseUri);\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,20 +1,13 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n     } else {\n+        String relUrl = attr(attributeKey);\n         URL base;\n         try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n-            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n+            base = new URL(baseUri);\n             URL abs = new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    if (!hasAttr(attributeKey)) {\n        // nothing to make absolute with\n        return \"\";\n    }\n\n    String relUrl = attr(attributeKey);\n    try {\n        URL base = new URL(baseUri);\n        URL abs = new URL(base, relUrl);\n        return abs.toExternalForm();\n    } catch (MalformedURLException e) {\n        return \"\";\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@absUrl\n+++ org/jsoup/nodes/Node.java@absUrl\n@@ -1,24 +1,17 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n-    String relUrl = attr(attributeKey);\n+\n     if (!hasAttr(attributeKey)) {\n         // nothing to make absolute with\n         return \"\";\n-    } else {\n-        URL base;\n-        try {\n-            try {\n-                base = new URL(baseUri);\n-            } catch (MalformedURLException e) {\n-                // the base is unsuitable, but the attribute may be abs on its own, so try that\n-                URL abs = new URL(relUrl);\n-                return abs.toExternalForm();\n-            }\n-            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n-            URL abs = new URL(base, relUrl);\n-            return abs.toExternalForm();\n-        } catch (MalformedURLException e) {\n-            return \"\";\n-        }\n+    }\n+\n+    String relUrl = attr(attributeKey);\n+    try {\n+        URL base = new URL(baseUri);\n+        URL abs = new URL(base, relUrl);\n+        return abs.toExternalForm();\n+    } catch (MalformedURLException e) {\n+        return \"\";\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]