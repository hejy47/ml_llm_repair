[{"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() && Attribute.isBooleanAttribute(key)))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,7 +6,7 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() && Attribute.isBooleanAttribute(key)))) {\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n             accum.append('\"');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || (val.isEmpty() && Attribute.isBooleanAttribute(key))))) { // fixed condition to check for empty string\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,7 +6,7 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || (val.isEmpty() && Attribute.isBooleanAttribute(key))))) { // fixed condition to check for empty string\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n             accum.append('\"');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() || val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key)))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,9 +6,9 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() || val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key)))) {\n             accum.append(\"=\\\"\");\n-            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n+            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n             accum.append('\"');\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() && Attribute.isBooleanAttribute(key))) {\n            continue;\n        }\n        accum.append(\"=\\\"\");\n        Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n        accum.append('\"');\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,10 +6,11 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n-            accum.append(\"=\\\"\");\n-            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n-            accum.append('\"');\n+        if (out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() && Attribute.isBooleanAttribute(key))) {\n+            continue;\n         }\n+        accum.append(\"=\\\"\");\n+        Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n+        accum.append('\"');\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() || val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key)))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,7 +6,7 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() || val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key)))) {\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n             accum.append('\"');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (val == null) {\n            if (out.syntax() == Document.OutputSettings.Syntax.html && Attribute.isBooleanAttribute(key)) {\n                continue;\n            }\n            accum.append(\"=\\\"\\\"\");\n        } else if (out.escapeMode().isNormalize()) {\n            final String normalized = Normalizer.normalize(val.trim(), Normalizer.Form.NFKC);\n            if (!Attribute.shouldCollapseAttribute(key, normalized, out)) {\n                accum.append(\"=\\\"\");\n                Entities.escape(accum, normalized, out, true, false, false);\n                accum.append('\"');\n            }\n        } else {\n            if (!Attribute.shouldCollapseAttribute(key, val.trim(), out)) {\n                accum.append(\"=\\\"\");\n                Entities.escape(accum, val, out, true, false, false);\n                accum.append('\"');\n            }\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,10 +6,24 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n-            accum.append(\"=\\\"\");\n-            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n-            accum.append('\"');\n+        if (val == null) {\n+            if (out.syntax() == Document.OutputSettings.Syntax.html && Attribute.isBooleanAttribute(key)) {\n+                continue;\n+            }\n+            accum.append(\"=\\\"\\\"\");\n+        } else if (out.escapeMode().isNormalize()) {\n+            final String normalized = Normalizer.normalize(val.trim(), Normalizer.Form.NFKC);\n+            if (!Attribute.shouldCollapseAttribute(key, normalized, out)) {\n+                accum.append(\"=\\\"\");\n+                Entities.escape(accum, normalized, out, true, false, false);\n+                accum.append('\"');\n+            }\n+        } else {\n+            if (!Attribute.shouldCollapseAttribute(key, val.trim(), out)) {\n+                accum.append(\"=\\\"\");\n+                Entities.escape(accum, val, out, true, false, false);\n+                accum.append('\"');\n+            }\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || (Attribute.isBooleanAttribute(key) && val.isEmpty()) || val.equals(key)))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,9 +6,9 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || (Attribute.isBooleanAttribute(key) && val.isEmpty()) || val.equals(key)))) {\n             accum.append(\"=\\\"\");\n-            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n+            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n             accum.append('\"');\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && Attribute.shouldCollapseAttribute(key, val))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,7 +6,7 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && Attribute.shouldCollapseAttribute(key, val))) {\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n             accum.append('\"');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(\"\") || (val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key))))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,9 +6,9 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(\"\") || (val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key))))) {\n             accum.append(\"=\\\"\");\n-            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n+            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n             accum.append('\"');\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || (Attribute.isBooleanAttribute(key) && val.equals(\"\")) || val.equalsIgnoreCase(key)))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,7 +6,7 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || (Attribute.isBooleanAttribute(key) && val.equals(\"\")) || val.equalsIgnoreCase(key)))) {\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n             accum.append('\"');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.length() == 0 || val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key)))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,9 +6,9 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.length() == 0 || val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key)))) {\n             accum.append(\"=\\\"\");\n-            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n+            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n             accum.append('\"');\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(\"\") || val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key)))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,9 +6,9 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(\"\") || val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key)))) {\n             accum.append(\"=\\\"\");\n-            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n+            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n             accum.append('\"');\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,9 +6,9 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n             accum.append(\"=\\\"\");\n-            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n+            Entities.escape(accum, val, out, true, false, false);\n             accum.append('\"');\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() || (val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key))))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,7 +6,7 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.isEmpty() || (val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key))))) {\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n             accum.append('\"');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!out.syntax().equals(Document.OutputSettings.Syntax.html) ||\n            (val != null && (!val.isEmpty() || !Attribute.isBooleanAttribute(key)) && !val.equals(key))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,7 +6,8 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!out.syntax().equals(Document.OutputSettings.Syntax.html) ||\n+            (val != null && (!val.isEmpty() || !Attribute.isBooleanAttribute(key)) && !val.equals(key))) {\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n             accum.append('\"');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = key(i);\n        final String val = val(i);\n\n        accum.append(' ')\n             .append(key);\n\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -2,13 +2,16 @@\n     final int sz = size;\n     for (int i = 0; i < sz; i++) {\n         // inlined from Attribute.html()\n-        final String key = keys[i];\n-        final String val = vals[i];\n-        accum.append(' ').append(key);\n+        final String key = key(i);\n+        final String val = val(i);\n+\n+        accum.append(' ')\n+             .append(key);\n+\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n         if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n             accum.append(\"=\\\"\");\n-            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n+            Entities.escape(accum, val == null ? \"\" : val, out, true, false, false);\n             accum.append('\"');\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (val != null\n                && !(out.syntax() == Document.OutputSettings.Syntax.html \n                && (val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key)))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,9 +6,11 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (val != null\n+                && !(out.syntax() == Document.OutputSettings.Syntax.html \n+                && (val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key)))) {\n             accum.append(\"=\\\"\");\n-            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n+            Entities.escape(accum, val, out, true, false, false);\n             accum.append('\"');\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.length() == 0 || (val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key))))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,7 +6,7 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.length() == 0 || (val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key))))) {\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n             accum.append('\"');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || (val.equalsIgnoreCase(\"checked\") && Attribute.isBooleanAttribute(key)) || val.equals(key) && !Attribute.isBooleanAttribute(key)))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,7 +6,7 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || (val.equalsIgnoreCase(\"checked\") && Attribute.isBooleanAttribute(key)) || val.equals(key) && !Attribute.isBooleanAttribute(key)))) {\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n             accum.append('\"');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        // inlined from Attribute.html()\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n        // collapse checked=null, checked=\"\", checked=checked; write out others\n        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(\"\") || (val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key))))) {\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}", "diff": "--- org/jsoup/nodes/Attributes.java@html\n+++ org/jsoup/nodes/Attributes.java@html\n@@ -6,7 +6,7 @@\n         final String val = vals[i];\n         accum.append(' ').append(key);\n         // collapse checked=null, checked=\"\", checked=checked; write out others\n-        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n+        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(\"\") || (val.equalsIgnoreCase(key) && Attribute.isBooleanAttribute(key))))) {\n             accum.append(\"=\\\"\");\n             Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n             accum.append('\"');\n", "finish_reason": "stop", "valid": false, "num": 1}]