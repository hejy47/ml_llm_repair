[{"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null && format.getShape() == JsonFormat.Shape.STRING) {\n        // [databind#2264]: Need special handling for `BigDecimal`\n        return ToStringSerializer.instance;\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null && format.getShape() == JsonFormat.Shape.STRING) {\n        return ToStringSerializer.instance;\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -1,13 +1,9 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n     JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n-    if (format != null) {\n-        switch(format.getShape()) {\n-            case STRING:\n-                // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n-            default:\n-        }\n+    if (format != null && format.getShape() == JsonFormat.Shape.STRING) {\n+        // [databind#2264]: Need special handling for `BigDecimal`\n+        return ToStringSerializer.instance;\n     }\n     return this;\n }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -1,12 +1,9 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n     JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n-    if (format != null) {\n-        switch(format.getShape()) {\n-            case STRING:\n-                return ToStringSerializer.instance;\n-            default:\n-        }\n+    if (format != null && format.getShape() == JsonFormat.Shape.STRING) {\n+        // [databind#2264]: Need special handling for `BigDecimal`\n+        return ToStringSerializer.instance;\n     }\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 8}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                JsonSerializer<?> ser = prov.findValueSerializer(BigDecimal.class, property);\n                return ser;\n            default:\n        }\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                return ToStringSerializer.instance;\n            default:\n                return this;\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,8 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                JsonSerializer<?> ser = prov.findValueSerializer(BigDecimal.class, property);\n+                return ser;\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,9 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                JsonSerializer<?> ser = prov.findValueSerializer(BigDecimal.class, property);\n+                return ser;\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null && format.getShape() == Shape.STRING) {\n        // [databind#2264]: Need special handling for `BigDecimal`\n        return ToStringSerializer.instance;\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null && format.getShape() == Shape.STRING) {\n        return ToStringSerializer.instance;\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -1,13 +1,9 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n     JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n-    if (format != null) {\n-        switch(format.getShape()) {\n-            case STRING:\n-                // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n-            default:\n-        }\n+    if (format != null && format.getShape() == Shape.STRING) {\n+        // [databind#2264]: Need special handling for `BigDecimal`\n+        return ToStringSerializer.instance;\n     }\n     return this;\n }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -1,12 +1,9 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n     JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n-    if (format != null) {\n-        switch(format.getShape()) {\n-            case STRING:\n-                return ToStringSerializer.instance;\n-            default:\n-        }\n+    if (format != null && format.getShape() == Shape.STRING) {\n+        // [databind#2264]: Need special handling for `BigDecimal`\n+        return ToStringSerializer.instance;\n     }\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (handledType() == BigDecimal.class) {\n                    return new BigDecimalToStringSerializer();\n                } else {\n                    return ToStringSerializer.instance;\n                }\n            default:\n        }\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                if (handledType() == BigDecimal.class) {\n                    return new BigDecimalToStringSerializer();\n                } else {\n                    return ToStringSerializer.instance;\n                }\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,11 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (handledType() == BigDecimal.class) {\n+                    return new BigDecimalToStringSerializer();\n+                } else {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,12 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (handledType() == BigDecimal.class) {\n+                    return new BigDecimalToStringSerializer();\n+                } else {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                return ToStringSerializer.instance;\n            default:\n                return this;\n        }\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                return ToStringSerializer.instance;\n            default:\n                return this;\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -7,6 +7,7 @@\n                 // [databind#2264]: Need special handling for `BigDecimal`\n                 return ToStringSerializer.instance;\n             default:\n+                return this;\n         }\n     }\n     return this;\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,8 +4,10 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n+                // [databind#2264]: Need special handling for `BigDecimal`\n                 return ToStringSerializer.instance;\n             default:\n+                return this;\n         }\n     }\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                return prov.findValueSerializer(BigDecimal.class, property);\n            default:\n        }\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                return prov.findValueSerializer(handledType(), property);\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,7 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                return prov.findValueSerializer(BigDecimal.class, property);\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,8 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                return prov.findValueSerializer(BigDecimal.class, property);\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (BigDecimal.class.isAssignableFrom(handledType())) {\n                    return new ToStringSerializer(format);\n                } else {\n                    return ToStringSerializer.instance;\n                }\n            default:\n        }\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (BigDecimal.class.isAssignableFrom(handledType())) {\n                    return new ToStringSerializer(format);\n                } else {\n                    return ToStringSerializer.instance;\n                }\n            default:\n                return this;\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,11 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return new ToStringSerializer(format);\n+                } else {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,12 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return new ToStringSerializer(format);\n+                } else {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (Number.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n                break;\n            default:\n        }\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                if (Number.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n                break;\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,10 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (Number.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,11 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (Number.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                return ToStringSerializer.instance;\n            default:\n                return this; // added return statement to handle all cases\n        }\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                return ToStringSerializer.instance;\n            default:\n                return this; // added return statement to handle all cases\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -7,6 +7,7 @@\n                 // [databind#2264]: Need special handling for `BigDecimal`\n                 return ToStringSerializer.instance;\n             default:\n+                return this; // added return statement to handle all cases\n         }\n     }\n     return this;\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,8 +4,10 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n+                // [databind#2264]: Need special handling for `BigDecimal`\n                 return ToStringSerializer.instance;\n             default:\n+                return this; // added return statement to handle all cases\n         }\n     }\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                return new NumberSerializer(BigDecimal.class);\n            default:\n        }\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                return ToStringSerializer.instance;\n            default:\n                return this;\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,7 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                return new NumberSerializer(BigDecimal.class);\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,8 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                return new NumberSerializer(BigDecimal.class);\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#406]: Need special handling for `BigDecimal`\n                if (BigDecimal.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n                break;\n            default:\n        }\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#406]: Need special handling for `BigDecimal`\n                if (BigDecimal.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n                break;\n            default:\n        }\n    }\n    // [databind#1936]: may have a content converter\n    JsonSerializer<?> ser = prov.handlePrimaryContextualization(this, property);\n    if ((ser != null) && requiresContextualization(ser)) {\n        return prov.handleSecondaryContextualization(ser, property);\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -4,8 +4,11 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                // [databind#406]: Need special handling for `BigDecimal`\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,11 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#406]: Need special handling for `BigDecimal`\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (BigDecimal.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                } else {\n                    return this;\n                }\n            default:\n        }\n    }\n    return this;\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                if (shouldToStringSerialize(format, property)) {\n                    return ToStringSerializer.instance;\n                } else {\n                    return this;\n                }\n            default:\n        }\n    }\n    return this;\n}\n\nprivate boolean shouldToStringSerialize(JsonFormat.Value format, BeanProperty property) {\n    JsonFormat.Shape shape = format.getShape();\n    return shape.isNumeric() && !shape.isStructured() && !isDefaultFormatter(format, property);\n}\n\nprivate boolean isDefaultFormatter(JsonFormat.Value format, BeanProperty property) {\n    if (property != null) {\n        JsonSerializer<?> ser = property.findSerializer();\n        if (ser instanceof ContextualSerializer) {\n            ser = ((ContextualSerializer) ser).createContextual(property.getSerializerProvider(), property);\n        }\n        return ser.getClass().equals(NumberSerializer.class);\n    } else {\n        return false;\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,11 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                } else {\n+                    return this;\n+                }\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,12 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                } else {\n+                    return this;\n+                }\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (handledType() != BigDecimal.class) {\n                    return ToStringSerializer.instance;\n                }\n                break;\n            default:\n        }\n    }\n    return this;\n}\n\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                if (handledType() != BigDecimal.class) {\n                    return ToStringSerializer.instance;\n                }\n                break;\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,10 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (handledType() != BigDecimal.class) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,11 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (handledType() != BigDecimal.class) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]