[{"output": "## Fixed Function 1\n@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException {\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += (_inputEnd - _inputPtr);\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}", "diff": "--- com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n+++ com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n@@ -12,7 +12,7 @@\n         _reportError(\"Already closed, can not feed more input\");\n     }\n     // Time to update pointers first\n-    _currInputProcessed += _origBufferLen;\n+    _currInputProcessed += (_inputEnd - _inputPtr);\n     // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n     _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n     // And then update buffer settings\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "## Fixed Function 1\n@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException {\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _inputEnd - _inputPtr;\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}", "diff": "--- com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n+++ com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n@@ -12,7 +12,7 @@\n         _reportError(\"Already closed, can not feed more input\");\n     }\n     // Time to update pointers first\n-    _currInputProcessed += _origBufferLen;\n+    _currInputProcessed += _inputEnd - _inputPtr;\n     // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n     _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n     // And then update buffer settings\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "## Fixed Function 1\n@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException {\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}", "diff": "--- com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n+++ com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n@@ -14,7 +14,7 @@\n     // Time to update pointers first\n     _currInputProcessed += _origBufferLen;\n     // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n-    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n+    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n     // And then update buffer settings\n     _inputBuffer = buf;\n     _inputPtr = start;\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "## Fixed Function 1\n@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException {\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n\n    // check if the new input completely fills the buffer\n    if (_origBufferLen == _inputBuffer.length) {\n        _reportError(\"Input buffer is too small for input data\");\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n+++ com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n@@ -20,4 +20,9 @@\n     _inputPtr = start;\n     _inputEnd = end;\n     _origBufferLen = end - start;\n+\n+    // check if the new input completely fills the buffer\n+    if (_origBufferLen == _inputBuffer.length) {\n+        _reportError(\"Input buffer is too small for input data\");\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException {\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = _currInputRowStart - (_inputEnd - start);\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}", "diff": "--- com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n+++ com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n@@ -14,7 +14,7 @@\n     // Time to update pointers first\n     _currInputProcessed += _origBufferLen;\n     // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n-    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n+    _currInputRowStart = _currInputRowStart - (_inputEnd - start);\n     // And then update buffer settings\n     _inputBuffer = buf;\n     _inputPtr = start;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException {\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _inputPtr - _currInputRowStart;\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}", "diff": "--- com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n+++ com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n@@ -12,9 +12,9 @@\n         _reportError(\"Already closed, can not feed more input\");\n     }\n     // Time to update pointers first\n-    _currInputProcessed += _origBufferLen;\n+    _currInputProcessed += _inputPtr - _currInputRowStart;\n     // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n-    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n+    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n     // And then update buffer settings\n     _inputBuffer = buf;\n     _inputPtr = start;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException {\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = _currInputRowStart + (start - _inputEnd); // Fixed this line\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}", "diff": "--- com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n+++ com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n@@ -14,7 +14,7 @@\n     // Time to update pointers first\n     _currInputProcessed += _origBufferLen;\n     // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n-    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n+    _currInputRowStart = _currInputRowStart + (start - _inputEnd); // Fixed this line\n     // And then update buffer settings\n     _inputBuffer = buf;\n     _inputPtr = start;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException {\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart); // corrected line\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}", "diff": "--- com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n+++ com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n@@ -14,7 +14,7 @@\n     // Time to update pointers first\n     _currInputProcessed += _origBufferLen;\n     // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n-    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n+    _currInputRowStart = start - (_inputPtr - _currInputRowStart); // corrected line\n     // And then update buffer settings\n     _inputBuffer = buf;\n     _inputPtr = start;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException {\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    \n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    \n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n    // Change orig buffer len to track the total input size processed including the current buffer\n    _origBufferLen = end - start + _currInputProcessed - _currInputRowStart;\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n}", "diff": "--- com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n+++ com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n@@ -4,6 +4,7 @@\n     if (_inputPtr < _inputEnd) {\n         _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n     }\n+    \n     if (end < start) {\n         _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n     }\n@@ -11,13 +12,15 @@\n     if (_endOfInput) {\n         _reportError(\"Already closed, can not feed more input\");\n     }\n+    \n     // Time to update pointers first\n     _currInputProcessed += _origBufferLen;\n     // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n-    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n+    _currInputRowStart = start - (_inputPtr - _currInputRowStart);\n+    // Change orig buffer len to track the total input size processed including the current buffer\n+    _origBufferLen = end - start + _currInputProcessed - _currInputRowStart;\n     // And then update buffer settings\n     _inputBuffer = buf;\n     _inputPtr = start;\n     _inputEnd = end;\n-    _origBufferLen = end - start;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException {\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _inputEnd - _inputPtr;\n\n    //Also, need to adjust row start to work as if it extended into the past wrt new buffer\n    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _origBufferLen = _inputEnd - start;\n    _inputEnd = end;\n}", "diff": "--- com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n+++ com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n@@ -12,12 +12,14 @@\n         _reportError(\"Already closed, can not feed more input\");\n     }\n     // Time to update pointers first\n-    _currInputProcessed += _origBufferLen;\n-    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n+    _currInputProcessed += _inputEnd - _inputPtr;\n+\n+    //Also, need to adjust row start to work as if it extended into the past wrt new buffer\n     _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n+\n     // And then update buffer settings\n     _inputBuffer = buf;\n     _inputPtr = start;\n+    _origBufferLen = _inputEnd - start;\n     _inputEnd = end;\n-    _origBufferLen = end - start;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@Override\npublic void feedInput(byte[] buf, int start, int end) throws IOException {\n    // Must not have remaining input\n    if (_inputPtr < _inputEnd) {\n        _reportError(\"Still have %d undecoded bytes, should not call 'feedInput'\", _inputEnd - _inputPtr);\n    }\n    if (end < start) {\n        _reportError(\"Input end (%d) may not be before start (%d)\", end, start);\n    }\n    // and shouldn't have been marked as end-of-input\n    if (_endOfInput) {\n        _reportError(\"Already closed, can not feed more input\");\n    }\n    // Time to update pointers first\n    _currInputProcessed += _origBufferLen;\n    // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n    if (_currInputRowStart >= _inputEnd) {\n        // If previous input was fully processed, row start should be updated based on new buffer\n        _currInputRowStart = start;\n    } else {\n        // If previous input was not fully processed, row start should be adjusted based on how much was processed\n        _currInputRowStart += (start - _inputPtr);\n    }\n    // And then update buffer settings\n    _inputBuffer = buf;\n    _inputPtr = start;\n    _inputEnd = end;\n    _origBufferLen = end - start;\n}", "diff": "--- com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n+++ com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java@feedInput\n@@ -14,7 +14,13 @@\n     // Time to update pointers first\n     _currInputProcessed += _origBufferLen;\n     // Also need to adjust row start, to work as if it extended into the past wrt new buffer\n-    _currInputRowStart = start - (_inputEnd - _currInputRowStart);\n+    if (_currInputRowStart >= _inputEnd) {\n+        // If previous input was fully processed, row start should be updated based on new buffer\n+        _currInputRowStart = start;\n+    } else {\n+        // If previous input was not fully processed, row start should be adjusted based on how much was processed\n+        _currInputRowStart += (start - _inputPtr);\n+    }\n     // And then update buffer settings\n     _inputBuffer = buf;\n     _inputPtr = start;\n", "finish_reason": "stop", "valid": false, "num": 1}]