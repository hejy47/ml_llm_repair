[{"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -13,7 +13,7 @@\n             // back before the transition, whereas it should be\n             // on or after the transition\n             long nextLocal = nextTransition(instantAdjusted);\n-            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n             if (nextLocal != nextAdjusted) {\n                 return offsetLocal;\n             }\n", "finish_reason": "stop", "valid": false, "num": 6}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal); //fixed offsetAdjusted to offsetLocal\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -13,7 +13,7 @@\n             // back before the transition, whereas it should be\n             // on or after the transition\n             long nextLocal = nextTransition(instantAdjusted);\n-            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal); //fixed offsetAdjusted to offsetLocal\n             if (nextLocal != nextAdjusted) {\n                 return offsetLocal;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal); // fix\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -13,7 +13,7 @@\n             // back before the transition, whereas it should be\n             // on or after the transition\n             long nextLocal = nextTransition(instantAdjusted);\n-            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal); // fix\n             if (nextLocal != nextAdjusted) {\n                 return offsetLocal;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal + 1);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        } else {\n            // offsetLocal > offsetAdjusted\n            // we need to ensure that time is always before the DST overlap\n            // this happens naturally for negative offsets, but not for positive\n            // the check below does the latter\n            // long prevLocal = previousTransition(instantAdjusted);\n            // long prevAdjusted = previousTransition(instantLocal-offsetLocal+1);\n            // if (prevLocal != prevAdjusted) {\n            //     return offsetLocal;\n            // }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -13,10 +13,20 @@\n             // back before the transition, whereas it should be\n             // on or after the transition\n             long nextLocal = nextTransition(instantAdjusted);\n-            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal + 1);\n             if (nextLocal != nextAdjusted) {\n                 return offsetLocal;\n             }\n+        } else {\n+            // offsetLocal > offsetAdjusted\n+            // we need to ensure that time is always before the DST overlap\n+            // this happens naturally for negative offsets, but not for positive\n+            // the check below does the latter\n+            // long prevLocal = previousTransition(instantAdjusted);\n+            // long prevAdjusted = previousTransition(instantLocal-offsetLocal+1);\n+            // if (prevLocal != prevAdjusted) {\n+            //     return offsetLocal;\n+            // }\n         }\n     } else if (offsetLocal > 0) {\n         long prev = previousTransition(instantAdjusted);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal); // fixed this line\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -13,7 +13,7 @@\n             // back before the transition, whereas it should be\n             // on or after the transition\n             long nextLocal = nextTransition(instantAdjusted);\n-            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal); // fixed this line\n             if (nextLocal != nextAdjusted) {\n                 return offsetLocal;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                int offsetNextAdjusted = getOffset(nextAdjusted);\n                if (offsetLocal != offsetNextAdjusted) {\n                    return offsetLocal;\n                }\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -15,7 +15,10 @@\n             long nextLocal = nextTransition(instantAdjusted);\n             long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n             if (nextLocal != nextAdjusted) {\n-                return offsetLocal;\n+                int offsetNextAdjusted = getOffset(nextAdjusted);\n+                if (offsetLocal != offsetNextAdjusted) {\n+                    return offsetLocal;\n+                }\n             }\n         }\n     } else if (offsetLocal > 0) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal + 1);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -13,7 +13,7 @@\n             // back before the transition, whereas it should be\n             // on or after the transition\n             long nextLocal = nextTransition(instantAdjusted);\n-            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal + 1);\n             if (nextLocal != nextAdjusted) {\n                 return offsetLocal;\n             }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal); // fixed: should be offsetLocal instead of offsetAdjusted\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -13,7 +13,7 @@\n             // back before the transition, whereas it should be\n             // on or after the transition\n             long nextLocal = nextTransition(instantAdjusted);\n-            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal); // fixed: should be offsetLocal instead of offsetAdjusted\n             if (nextLocal != nextAdjusted) {\n                 return offsetLocal;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal); // fixed mistake\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -13,7 +13,7 @@\n             // back before the transition, whereas it should be\n             // on or after the transition\n             long nextLocal = nextTransition(instantAdjusted);\n-            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal); // fixed mistake\n             if (nextLocal != nextAdjusted) {\n                 return offsetLocal;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal); // Fixed this line\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -13,7 +13,7 @@\n             // back before the transition, whereas it should be\n             // on or after the transition\n             long nextLocal = nextTransition(instantAdjusted);\n-            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal); // Fixed this line\n             if (nextLocal != nextAdjusted) {\n                 return offsetLocal;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            if (nextLocal != instantLocal) {\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -13,9 +13,11 @@\n             // back before the transition, whereas it should be\n             // on or after the transition\n             long nextLocal = nextTransition(instantAdjusted);\n-            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-            if (nextLocal != nextAdjusted) {\n-                return offsetLocal;\n+            if (nextLocal != instantLocal) {\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n             }\n         }\n     } else if (offsetLocal > 0) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal != offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // fix: add the offset difference to instantLocal instead of subtracting it from instantAdjusted\n            long nextLocal = nextTransition(instantLocal + (offsetLocal - offsetAdjusted));\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -1,18 +1,11 @@\n public int getOffsetFromLocal(long instantLocal) {\n-    // get the offset at instantLocal (first estimate)\n     final int offsetLocal = getOffset(instantLocal);\n-    // adjust instantLocal using the estimate and recalc the offset\n     final long instantAdjusted = instantLocal - offsetLocal;\n     final int offsetAdjusted = getOffset(instantAdjusted);\n-    // if the offsets differ, we must be near a DST boundary\n     if (offsetLocal != offsetAdjusted) {\n-        // we need to ensure that time is always after the DST gap\n-        // this happens naturally for positive offsets, but not for negative\n         if ((offsetLocal - offsetAdjusted) < 0) {\n-            // if we just return offsetAdjusted then the time is pushed\n-            // back before the transition, whereas it should be\n-            // on or after the transition\n-            long nextLocal = nextTransition(instantAdjusted);\n+            // fix: add the offset difference to instantLocal instead of subtracting it from instantAdjusted\n+            long nextLocal = nextTransition(instantLocal + (offsetLocal - offsetAdjusted));\n             long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n             if (nextLocal != nextAdjusted) {\n                 return offsetLocal;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal != offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal + 1);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prev = previousTransition(instantAdjusted - 1);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}", "diff": "--- org/joda/time/DateTimeZone.java@getOffsetFromLocal\n+++ org/joda/time/DateTimeZone.java@getOffsetFromLocal\n@@ -1,25 +1,17 @@\n public int getOffsetFromLocal(long instantLocal) {\n-    // get the offset at instantLocal (first estimate)\n     final int offsetLocal = getOffset(instantLocal);\n-    // adjust instantLocal using the estimate and recalc the offset\n     final long instantAdjusted = instantLocal - offsetLocal;\n     final int offsetAdjusted = getOffset(instantAdjusted);\n-    // if the offsets differ, we must be near a DST boundary\n     if (offsetLocal != offsetAdjusted) {\n-        // we need to ensure that time is always after the DST gap\n-        // this happens naturally for positive offsets, but not for negative\n         if ((offsetLocal - offsetAdjusted) < 0) {\n-            // if we just return offsetAdjusted then the time is pushed\n-            // back before the transition, whereas it should be\n-            // on or after the transition\n             long nextLocal = nextTransition(instantAdjusted);\n-            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal + 1);\n             if (nextLocal != nextAdjusted) {\n                 return offsetLocal;\n             }\n         }\n     } else if (offsetLocal > 0) {\n-        long prev = previousTransition(instantAdjusted);\n+        long prev = previousTransition(instantAdjusted - 1);\n         if (prev < instantAdjusted) {\n             int offsetPrev = getOffset(prev);\n             int diff = offsetPrev - offsetLocal;\n", "finish_reason": "stop", "valid": false, "num": 1}]