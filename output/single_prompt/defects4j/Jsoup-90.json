[{"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i] & 0xFF; //make sure o is unsigned\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            if (i >= input.length) return false;\n            o = input[i] & 0xFF;\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,12 +1,12 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n     for (int j = input.length; i < j; ++i) {\n-        int o = input[i];\n+        int o = input[i] & 0xFF; //make sure o is unsigned\n         if ((o & 0x80) == 0) {\n             // ASCII\n             continue;\n@@ -23,7 +23,8 @@\n         }\n         while (i < end) {\n             i++;\n-            o = input[i];\n+            if (i >= input.length) return false;\n+            o = input[i] & 0xFF;\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end - 1) {\n            i++;\n            o = input[i];\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,7 +1,7 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n@@ -21,7 +21,7 @@\n         } else {\n             return false;\n         }\n-        while (i < end) {\n+        while (i < end - 1) {\n             i++;\n             o = input[i];\n             if ((o & 0xC0) != 0x80) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n            if (end >= input.length) {\n                return false;\n            }\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n            if (end >= input.length) {\n                return false;\n            }\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n            if (end >= input.length) {\n                return false;\n            }\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            o = input[i];\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,7 +1,7 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n@@ -14,10 +14,19 @@\n         // UTF-8 leading:\n         if ((o & 0xE0) == 0xC0) {\n             end = i + 1;\n+            if (end >= input.length) {\n+                return false;\n+            }\n         } else if ((o & 0xF0) == 0xE0) {\n             end = i + 2;\n+            if (end >= input.length) {\n+                return false;\n+            }\n         } else if ((o & 0xF8) == 0xF0) {\n             end = i + 3;\n+            if (end >= input.length) {\n+                return false;\n+            }\n         } else {\n             return false;\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i] & 0xFF; // fix: make sure \"o\" is unsigned\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            if (i >= input.length) {\n                return false; // fix: make sure not to overflow input array\n            }\n            o = input[i] & 0xFF; // fix: make sure \"o\" is unsigned\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,12 +1,12 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n     for (int j = input.length; i < j; ++i) {\n-        int o = input[i];\n+        int o = input[i] & 0xFF; // fix: make sure \"o\" is unsigned\n         if ((o & 0x80) == 0) {\n             // ASCII\n             continue;\n@@ -23,7 +23,10 @@\n         }\n         while (i < end) {\n             i++;\n-            o = input[i];\n+            if (i >= input.length) {\n+                return false; // fix: make sure not to overflow input array\n+            }\n+            o = input[i] & 0xFF; // fix: make sure \"o\" is unsigned\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i] & 0xFF; // Mask off signed bit\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            if (i >= input.length) {\n                return false;\n            }\n            o = input[i] & 0xFF; // Mask off signed bit\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,12 +1,12 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n     for (int j = input.length; i < j; ++i) {\n-        int o = input[i];\n+        int o = input[i] & 0xFF; // Mask off signed bit\n         if ((o & 0x80) == 0) {\n             // ASCII\n             continue;\n@@ -23,7 +23,10 @@\n         }\n         while (i < end) {\n             i++;\n-            o = input[i];\n+            if (i >= input.length) {\n+                return false;\n+            }\n+            o = input[i] & 0xFF; // Mask off signed bit\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i] & 0xFF;\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            if (i >= input.length) {\n                return false;\n            }\n            o = input[i] & 0xFF;\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,12 +1,12 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n     for (int j = input.length; i < j; ++i) {\n-        int o = input[i];\n+        int o = input[i] & 0xFF;\n         if ((o & 0x80) == 0) {\n             // ASCII\n             continue;\n@@ -23,7 +23,10 @@\n         }\n         while (i < end) {\n             i++;\n-            o = input[i];\n+            if (i >= input.length) {\n+                return false;\n+            }\n+            o = input[i] & 0xFF;\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end-1) {\n            // fix: decrease end by 1 so that the loop stops when i=end-1\n            // instead of when i=end\n            i++;\n            o = input[i];\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,7 +1,7 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n@@ -21,7 +21,9 @@\n         } else {\n             return false;\n         }\n-        while (i < end) {\n+        while (i < end-1) {\n+            // fix: decrease end by 1 so that the loop stops when i=end-1\n+            // instead of when i=end\n             i++;\n             o = input[i];\n             if ((o & 0xC0) != 0x80) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i] & 0xFF; // fix added to prevent sign extension\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            o = input[i] & 0xFF; // fix added to prevent sign extension\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,12 +1,12 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n     for (int j = input.length; i < j; ++i) {\n-        int o = input[i];\n+        int o = input[i] & 0xFF; // fix added to prevent sign extension\n         if ((o & 0x80) == 0) {\n             // ASCII\n             continue;\n@@ -23,7 +23,7 @@\n         }\n         while (i < end) {\n             i++;\n-            o = input[i];\n+            o = input[i] & 0xFF; // fix added to prevent sign extension\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end-1) {\n            i++;\n            o = input[i];\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,7 +1,7 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n@@ -21,7 +21,7 @@\n         } else {\n             return false;\n         }\n-        while (i < end) {\n+        while (i < end-1) {\n             i++;\n             o = input[i];\n             if ((o & 0xC0) != 0x80) {\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1 < input.length ? i + 1 : i;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2 < input.length ? i + 2 : i;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3 < input.length ? i + 3 : i;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            o = input[i];\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,7 +1,7 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n@@ -13,11 +13,11 @@\n         }\n         // UTF-8 leading:\n         if ((o & 0xE0) == 0xC0) {\n-            end = i + 1;\n+            end = i + 1 < input.length ? i + 1 : i;\n         } else if ((o & 0xF0) == 0xE0) {\n-            end = i + 2;\n+            end = i + 2 < input.length ? i + 2 : i;\n         } else if ((o & 0xF8) == 0xF0) {\n-            end = i + 3;\n+            end = i + 3 < input.length ? i + 3 : i;\n         } else {\n             return false;\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i] & 0xFF; // ensure unsigned byte value\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            if (i >= input.length) {\n                return false;\n            }\n            o = input[i] & 0xFF; // ensure unsigned byte value\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,12 +1,12 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n     for (int j = input.length; i < j; ++i) {\n-        int o = input[i];\n+        int o = input[i] & 0xFF; // ensure unsigned byte value\n         if ((o & 0x80) == 0) {\n             // ASCII\n             continue;\n@@ -23,7 +23,10 @@\n         }\n         while (i < end) {\n             i++;\n-            o = input[i];\n+            if (i >= input.length) {\n+                return false;\n+            }\n+            o = input[i] & 0xFF; // ensure unsigned byte value\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i];\n        if ((o & 0xFF) < 0x80) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            if (i >= input.length) {\n                return false;\n            }\n            o = input[i];\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,13 +1,13 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n     for (int j = input.length; i < j; ++i) {\n         int o = input[i];\n-        if ((o & 0x80) == 0) {\n+        if ((o & 0xFF) < 0x80) {\n             // ASCII\n             continue;\n         }\n@@ -23,6 +23,9 @@\n         }\n         while (i < end) {\n             i++;\n+            if (i >= input.length) {\n+                return false;\n+            }\n             o = input[i];\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i] & 0xFF; // convert signed byte to unsigned int\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            if (i >= input.length) {\n                return false;\n            }\n            o = input[i] & 0xFF; // convert signed byte to unsigned int\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,12 +1,12 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n     for (int j = input.length; i < j; ++i) {\n-        int o = input[i];\n+        int o = input[i] & 0xFF; // convert signed byte to unsigned int\n         if ((o & 0x80) == 0) {\n             // ASCII\n             continue;\n@@ -23,7 +23,10 @@\n         }\n         while (i < end) {\n             i++;\n-            o = input[i];\n+            if (i >= input.length) {\n+                return false;\n+            }\n+            o = input[i] & 0xFF; // convert signed byte to unsigned int\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        if (end > input.length) {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            o = input[i];\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,7 +1,7 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n@@ -21,6 +21,9 @@\n         } else {\n             return false;\n         }\n+        if (end > input.length) {\n+            return false;\n+        }\n         while (i < end) {\n             i++;\n             o = input[i];\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i] & 0xFF; // Fix: Force convert to unsigned byte\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            if (i >= input.length) {\n                return false;\n            }\n            o = input[i] & 0xFF; // Fix: Force convert to unsigned byte\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,12 +1,12 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n     for (int j = input.length; i < j; ++i) {\n-        int o = input[i];\n+        int o = input[i] & 0xFF; // Fix: Force convert to unsigned byte\n         if ((o & 0x80) == 0) {\n             // ASCII\n             continue;\n@@ -23,7 +23,10 @@\n         }\n         while (i < end) {\n             i++;\n-            o = input[i];\n+            if (i >= input.length) {\n+                return false;\n+            }\n+            o = input[i] & 0xFF; // Fix: Force convert to unsigned byte\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            if(i >= input.length)\n              return false;\n            o = input[i];\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,7 +1,7 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n@@ -23,6 +23,8 @@\n         }\n         while (i < end) {\n             i++;\n+            if(i >= input.length)\n+              return false;\n             o = input[i];\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        if (end > input.length) { // Ensure the UTF-8 sequence is not truncated\n            return false;\n        }\n        while (i < end) {\n            i++;\n            o = input[i];\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,7 +1,7 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n@@ -21,6 +21,9 @@\n         } else {\n             return false;\n         }\n+        if (end > input.length) { // Ensure the UTF-8 sequence is not truncated\n+            return false;\n+        }\n         while (i < end) {\n             i++;\n             o = input[i];\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end = 0;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            if(i >= input.length) {\n                return false;\n            }\n            o = input[i];\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,10 +1,10 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n-    int end;\n+    int end = 0;\n     for (int j = input.length; i < j; ++i) {\n         int o = input[i];\n         if ((o & 0x80) == 0) {\n@@ -23,6 +23,9 @@\n         }\n         while (i < end) {\n             i++;\n+            if(i >= input.length) {\n+                return false;\n+            }\n             o = input[i];\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i] & 0xFF; // mask to get unsigned value\n        if ((o & 0x80) == 0) {\n            // ASCII\n            continue;\n        }\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n        while (i < end) {\n            i++;\n            o = input[i] & 0xFF; // mask to get unsigned value\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n+++ org/jsoup/helper/HttpConnection.java@looksLikeUtf8\n@@ -1,12 +1,12 @@\n private static boolean looksLikeUtf8(byte[] input) {\n     int i = 0;\n     // BOM:\n-    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n         i = 3;\n     }\n     int end;\n     for (int j = input.length; i < j; ++i) {\n-        int o = input[i];\n+        int o = input[i] & 0xFF; // mask to get unsigned value\n         if ((o & 0x80) == 0) {\n             // ASCII\n             continue;\n@@ -23,7 +23,7 @@\n         }\n         while (i < end) {\n             i++;\n-            o = input[i];\n+            o = input[i] & 0xFF; // mask to get unsigned value\n             if ((o & 0xC0) != 0x80) {\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}]