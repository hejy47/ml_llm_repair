[{"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!config.jsOutputFile.isEmpty()) {\n        options.setOutputFile(config.jsOutputFile);\n    }\n    if (!config.createSourceMap.isEmpty()) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.isEmpty()) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.isEmpty()) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    B options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getOutputFile().isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.getOutputFile(), inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setClosurePassEnabled(flags.process_closure_primitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,25 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    if (!config.jsOutputFile.isEmpty()) {\n+        options.setOutputFile(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (!config.createSourceMap.isEmpty()) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    if (!config.variableMapInputFile.isEmpty()) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n+    if (!config.propertyMapInputFile.isEmpty()) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -9,13 +9,13 @@\n     Result result;\n     setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getOutputFile().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(options.getOutputFile(), inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -12,7 +12,7 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setClosurePassEnabled(flags.process_closure_primitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -4,7 +4,7 @@\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(DependencyOptions.pruneLegacyForEntryPoints(config.entryPoints));\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFeature(CompilerOptions.OutputFeature.DETAILED_SOURCE_MAPS);\n        options.setSourceMapOutputPath(config.jsOutputFile + \".map\");\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setOutputFeature(CompilerOptions.OutputFeature.DETAILED_SOURCE_MAPS);\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n    }\n    options.setLanguageIn(CompilerOptions.LanguageMode.fromString(config.languageIn));\n    options.setLanguageOut(CompilerOptions.LanguageMode.fromString(config.languageOut));\n    options.setExterns(config.externs);\n    options.setChecksOnly(config.checksOnly);\n    options.skipTranspilationAndCrash(true);\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    B options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(config.jsOutputFile, inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        options.setModuleResolutionMode(CompilerOptions.ModuleResolutionMode.WEBPACK);\n        options.setChromePass(true);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    CompilationLevel compilationLevel = flags.getCompilationLevel(options);\n    compilationLevel.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        compilationLevel.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel warningLevel = flags.getWarningLevel(options);\n    warningLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setClosurePassEnabled(flags.processClosurePrimitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.shouldPrettyPrint());\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,33 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setDependencyOptions(DependencyOptions.pruneLegacyForEntryPoints(config.entryPoints));\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputFeature(CompilerOptions.OutputFeature.DETAILED_SOURCE_MAPS);\n+        options.setSourceMapOutputPath(config.jsOutputFile + \".map\");\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setOutputFeature(CompilerOptions.OutputFeature.DETAILED_SOURCE_MAPS);\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n     }\n+    options.setLanguageIn(CompilerOptions.LanguageMode.fromString(config.languageIn));\n+    options.setLanguageOut(CompilerOptions.LanguageMode.fromString(config.languageOut));\n+    options.setExterns(config.externs);\n+    options.setChecksOnly(config.checksOnly);\n+    options.skipTranspilationAndCrash(true);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -9,18 +9,20 @@\n     Result result;\n     setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(config.jsOutputFile, inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n     if (!moduleSpecs.isEmpty()) {\n         modules = createJsModules(moduleSpecs, jsFiles);\n+        options.setModuleResolutionMode(CompilerOptions.ModuleResolutionMode.WEBPACK);\n+        options.setChromePass(true);\n         result = compiler.compile(externs, modules, options);\n     } else {\n         List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -1,18 +1,17 @@\n @Override\n protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n-    options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n-    level.setOptionsForCompilationLevel(options);\n+    CompilationLevel compilationLevel = flags.getCompilationLevel(options);\n+    compilationLevel.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n-        level.setDebugOptionsForCompilationLevel(options);\n+        compilationLevel.setDebugOptionsForCompilationLevel(options);\n     }\n-    WarningLevel wLevel = flags.warning_level;\n-    wLevel.setOptionsForWarningLevel(options);\n+    WarningLevel warningLevel = flags.getWarningLevel(options);\n+    warningLevel.setOptionsForWarningLevel(options);\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setClosurePassEnabled(flags.processClosurePrimitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,10 +1,10 @@\n private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n+    builder.setPrettyPrint(options.shouldPrettyPrint());\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    options.setLanguageIn(config.languageIn);\n    options.setLanguageOut(config.languageOut);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!config.jsOutputFile.isEmpty()) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (!config.createSourceMap.isEmpty()) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.isEmpty()) {\n        options.inputVariableMapSerialized = VariableMap.load(makeInputFile(config.variableMapInputFile)).toByteArray();\n    }\n    if (!config.propertyMapInputFile.isEmpty()) {\n        options.inputPropertyMapSerialized = VariableMap.load(makeInputFile(config.propertyMapInputFile)).toByteArray();\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    List<String> jsFiles = config.js;\n    if (jsFiles.isEmpty()) {\n        throw new FlagUsageException(\"At least one js file must be specified.\");\n    }\n    JSModule[] modules = null;\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    CompilerOptions options = createOptions();\n    setRunOptions(options);\n    Charset outputCharset = inputCharset == Charsets.UTF_8 ? Charsets.US_ASCII : inputCharset;\n    options.setOutputCharset(outputCharset);\n    Writer output = null;\n    if (!config.jsOutputFile.isEmpty()) {\n        output = new OutputStreamWriter(new FileOutputStream(config.jsOutputFile), outputCharset);\n    }\n    try {\n        List<String> moduleSpecs = config.module;\n        if (!moduleSpecs.isEmpty()) {\n            modules = createJsModules(moduleSpecs, jsFiles);\n            compiler.compileModules(externs, modules, options);\n            if (modules.length != moduleSpecs.size()) {\n                throw new RuntimeException(\"The number of module output files specified using --module_output_path doesn't match the number of expected modules.\");\n            }\n            for (int i = 0; i < modules.length; i++) {\n                String fileName = moduleSpecs.get(i);\n                String outputCode = compiler.toSource(modules[i]);\n                String sourceMap = options.sourceMapOutputPath;\n                if (sourceMap != null) {\n                    sourceMap += \".\" + fileName + \".map\";\n                }\n                CompilerInput input = new CompilerInput(ext(fileName), fs.simplifyPath(fileName), outputCode);\n                onOutput(input, outputCode, null, sourceMap);\n            }\n        } else {\n            List<String> inputNames = Lists.newArrayListWithCapacity(jsFiles.size());\n            for (String jsFile : jsFiles) {\n                String inputFile = makeInputFile(jsFile);\n                CompilerInput input = new CompilerInput(ext(inputFile), fs.simplifyPath(inputFile), fs.readFile(inputFile));\n                onInput(input);\n                inputNames.add(input.getName());\n            }\n            Result result = compiler.compile(externs, inputNames, options);\n            if (result.success) {\n                String outputCode = compiler.toSource();\n                onOutput(null, outputCode, result.sourceMap, config.sourceMapOutputPath);\n                if (output != null) {\n                    output.write(outputCode);\n                }\n            }\n            if (result.errors.length > 0) {\n                for (JSError error : result.errors) {\n                    println(error.toString());\n                }\n                return 1;\n            }\n            if (result.warnings.length > 0) {\n                for (JSError warning : result.warnings) {\n                    println(warning.toString());\n                }\n            }\n        }\n    } finally {\n        if (output != null) {\n            output.close();\n        }\n    }\n    return 0;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setProcessClosurePrimitives(flags.process_closure_primitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,27 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setLanguageIn(config.languageIn);\n+    options.setLanguageOut(config.languageOut);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    if (!config.jsOutputFile.isEmpty()) {\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (!config.createSourceMap.isEmpty()) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    if (!config.variableMapInputFile.isEmpty()) {\n+        options.inputVariableMapSerialized = VariableMap.load(makeInputFile(config.variableMapInputFile)).toByteArray();\n     }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+    if (!config.propertyMapInputFile.isEmpty()) {\n+        options.inputPropertyMapSerialized = VariableMap.load(makeInputFile(config.propertyMapInputFile)).toByteArray();\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -1,37 +1,72 @@\n protected int doRun() throws FlagUsageException, IOException {\n     Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n     List<JSSourceFile> externsList = createExterns();\n+    List<String> jsFiles = config.js;\n+    if (jsFiles.isEmpty()) {\n+        throw new FlagUsageException(\"At least one js file must be specified.\");\n+    }\n+    JSModule[] modules = null;\n     JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n     externsList.toArray(externs);\n     compiler = createCompiler();\n-    B options = createOptions();\n-    JSModule[] modules = null;\n-    Result result;\n+    CompilerOptions options = createOptions();\n     setRunOptions(options);\n-    if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n-    } else {\n-        options.outputCharset = inputCharset;\n+    Charset outputCharset = inputCharset == Charsets.UTF_8 ? Charsets.US_ASCII : inputCharset;\n+    options.setOutputCharset(outputCharset);\n+    Writer output = null;\n+    if (!config.jsOutputFile.isEmpty()) {\n+        output = new OutputStreamWriter(new FileOutputStream(config.jsOutputFile), outputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n-    if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+    try {\n+        List<String> moduleSpecs = config.module;\n+        if (!moduleSpecs.isEmpty()) {\n+            modules = createJsModules(moduleSpecs, jsFiles);\n+            compiler.compileModules(externs, modules, options);\n+            if (modules.length != moduleSpecs.size()) {\n+                throw new RuntimeException(\"The number of module output files specified using --module_output_path doesn't match the number of expected modules.\");\n+            }\n+            for (int i = 0; i < modules.length; i++) {\n+                String fileName = moduleSpecs.get(i);\n+                String outputCode = compiler.toSource(modules[i]);\n+                String sourceMap = options.sourceMapOutputPath;\n+                if (sourceMap != null) {\n+                    sourceMap += \".\" + fileName + \".map\";\n+                }\n+                CompilerInput input = new CompilerInput(ext(fileName), fs.simplifyPath(fileName), outputCode);\n+                onOutput(input, outputCode, null, sourceMap);\n+            }\n+        } else {\n+            List<String> inputNames = Lists.newArrayListWithCapacity(jsFiles.size());\n+            for (String jsFile : jsFiles) {\n+                String inputFile = makeInputFile(jsFile);\n+                CompilerInput input = new CompilerInput(ext(inputFile), fs.simplifyPath(inputFile), fs.readFile(inputFile));\n+                onInput(input);\n+                inputNames.add(input.getName());\n+            }\n+            Result result = compiler.compile(externs, inputNames, options);\n+            if (result.success) {\n+                String outputCode = compiler.toSource();\n+                onOutput(null, outputCode, result.sourceMap, config.sourceMapOutputPath);\n+                if (output != null) {\n+                    output.write(outputCode);\n+                }\n+            }\n+            if (result.errors.length > 0) {\n+                for (JSError error : result.errors) {\n+                    println(error.toString());\n+                }\n+                return 1;\n+            }\n+            if (result.warnings.length > 0) {\n+                for (JSError warning : result.warnings) {\n+                    println(warning.toString());\n+                }\n+            }\n+        }\n+    } finally {\n+        if (output != null) {\n+            output.close();\n+        }\n     }\n-    List<String> jsFiles = config.js;\n-    List<String> moduleSpecs = config.module;\n-    if (!moduleSpecs.isEmpty()) {\n-        modules = createJsModules(moduleSpecs, jsFiles);\n-        result = compiler.compile(externs, modules, options);\n-    } else {\n-        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n-        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n-        inputList.toArray(inputs);\n-        result = compiler.compile(externs, inputs, options);\n-    }\n-    int errCode = processResults(result, modules, options);\n-    // Close the output if we are writing to a file.\n-    if (writeOutputToFile) {\n-        ((Writer) out).close();\n-    }\n-    return errCode;\n+    return 0;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -1,7 +1,6 @@\n @Override\n protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n-    options.setCodingConvention(new ClosureCodingConvention());\n     CompilationLevel level = flags.compilation_level;\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n@@ -12,7 +11,7 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setProcessClosurePrimitives(flags.process_closure_primitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -4,7 +4,7 @@\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setLanguageIn(config.languageIn);\n    options.setLanguageOut(config.languageOut);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!config.jsOutputFile.isEmpty()) {\n        options.setOutputFile(config.jsOutputFile);\n    }\n    if (!config.createSourceMap.isEmpty()) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = externsList.toArray(new JSSourceFile[0]);\n    compiler = createCompiler();\n    B options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset != Charsets.UTF_8) {\n        options.setCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getOutputFile().isEmpty();\n    if (writeOutputToFile) {\n        out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(options.getOutputFile()), inputCharset.name()));\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = inputList.toArray(new JSSourceFile[0]);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        out.close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = super.createOptions();\n    options.setClosurePassEnabled(flags.process_closure_primitives);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.shouldPrintPretty());\n    builder.setLineBreak(options.getLineBreak());\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,20 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setLanguageIn(config.languageIn);\n+    options.setLanguageOut(config.languageOut);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    if (!config.jsOutputFile.isEmpty()) {\n+        options.setOutputFile(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (!config.createSourceMap.isEmpty()) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n-    }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n-    }\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -1,21 +1,18 @@\n protected int doRun() throws FlagUsageException, IOException {\n     Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n     List<JSSourceFile> externsList = createExterns();\n-    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n-    externsList.toArray(externs);\n+    JSSourceFile[] externs = externsList.toArray(new JSSourceFile[0]);\n     compiler = createCompiler();\n     B options = createOptions();\n     JSModule[] modules = null;\n     Result result;\n     setRunOptions(options);\n-    if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n-    } else {\n-        options.outputCharset = inputCharset;\n+    if (inputCharset != Charsets.UTF_8) {\n+        options.setCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getOutputFile().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(options.getOutputFile()), inputCharset.name()));\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n@@ -24,14 +21,13 @@\n         result = compiler.compile(externs, modules, options);\n     } else {\n         List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n-        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n-        inputList.toArray(inputs);\n+        JSSourceFile[] inputs = inputList.toArray(new JSSourceFile[0]);\n         result = compiler.compile(externs, inputs, options);\n     }\n     int errCode = processResults(result, modules, options);\n     // Close the output if we are writing to a file.\n     if (writeOutputToFile) {\n-        ((Writer) out).close();\n+        out.close();\n     }\n     return errCode;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -1,18 +1,6 @@\n @Override\n protected CompilerOptions createOptions() {\n-    CompilerOptions options = new CompilerOptions();\n-    options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n-    level.setOptionsForCompilationLevel(options);\n-    if (flags.debug) {\n-        level.setDebugOptionsForCompilationLevel(options);\n-    }\n-    WarningLevel wLevel = flags.warning_level;\n-    wLevel.setOptionsForWarningLevel(options);\n-    for (FormattingOption formattingOption : flags.formatting) {\n-        formattingOption.applyToOptions(options);\n-    }\n-    options.closurePass = flags.process_closure_primitives;\n-    initOptionsFromFlags(options);\n+    CompilerOptions options = super.createOptions();\n+    options.setClosurePassEnabled(flags.process_closure_primitives);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,10 +1,10 @@\n private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n-    builder.setLineBreak(options.lineBreak);\n+    builder.setPrettyPrint(options.shouldPrintPretty());\n+    builder.setLineBreak(options.getLineBreak());\n     builder.setSourceMap(sourceMap);\n-    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(new DependencyOptions(config.manageClosureDependencies, true));\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    CompilerOptions options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setRewriteClosureCode(flags.processClosurePrimitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.shouldPrettyPrint());\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    Charset charset = options.outputCharset;\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,21 +1,21 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setDependencyOptions(new DependencyOptions(config.manageClosureDependencies, true));\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -4,18 +4,18 @@\n     JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n     externsList.toArray(externs);\n     compiler = createCompiler();\n-    B options = createOptions();\n+    CompilerOptions options = createOptions();\n     JSModule[] modules = null;\n     Result result;\n     setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -12,7 +12,7 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setRewriteClosureCode(flags.processClosurePrimitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,6 +1,6 @@\n private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n+    builder.setPrettyPrint(options.shouldPrettyPrint());\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    options.setProcessCommonJSModules(config.commonJsEntryModule != null);\n    options.setDependencyOptions(createDependencyOptions());\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.getCodingConvention());\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    CompilerOptions options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = super.createOptions();\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    options.setProcessCommonJSModules(flags.processCommonJsModules);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) throws IOException {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    CodePrinter.Builder builder = new CodePrinter.Builder(n)\n        .setTypeRegistry(compiler.getTypeRegistry())\n        .setPrettyPrint(options.prettyPrint)\n        .setSourceMap(sourceMap)\n        .setLineBreak(options.lineBreak)\n        .setSourceMapDetailLevel(options.sourceMapDetailLevel)\n        .setOutputCharset(options.outputCharset)\n        .setLanguageOut(options.getLanguageOut());\n    CodePrinter codePrinter;\n    try {\n      codePrinter = builder.build();\n      PrintWriter writer = new PrintWriter(out, true);\n      writer.append(codePrinter.print());\n      writer.close();\n      return out.toString(options.outputCharset.name());\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,21 +1,23 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setProcessCommonJSModules(config.commonJsEntryModule != null);\n+    options.setDependencyOptions(createDependencyOptions());\n     options.devMode = config.jscompDevMode;\n-    options.setCodingConvention(config.codingConvention);\n+    options.setCodingConvention(config.getCodingConvention());\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -4,18 +4,18 @@\n     JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n     externsList.toArray(externs);\n     compiler = createCompiler();\n-    B options = createOptions();\n+    CompilerOptions options = createOptions();\n     JSModule[] modules = null;\n     Result result;\n     setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -1,18 +1,16 @@\n @Override\n protected CompilerOptions createOptions() {\n-    CompilerOptions options = new CompilerOptions();\n-    options.setCodingConvention(new ClosureCodingConvention());\n+    CompilerOptions options = super.createOptions();\n     CompilationLevel level = flags.compilation_level;\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n-        level.setDebugOptionsForCompilationLevel(options);\n+      level.setDebugOptionsForCompilationLevel(options);\n     }\n     WarningLevel wLevel = flags.warning_level;\n     wLevel.setOptionsForWarningLevel(options);\n     for (FormattingOption formattingOption : flags.formatting) {\n-        formattingOption.applyToOptions(options);\n+      formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n-    initOptionsFromFlags(options);\n+    options.setProcessCommonJSModules(flags.processCommonJsModules);\n     return options;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(JSErrorGroup.GENERIC_ERROR, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.CHECK_VARIABLES, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.DEBUGGER_STATEMENT_PRESENT, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.GLOBAL_THIS, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.UNDEFINED_NAMES, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.UNDEFINED_VARIABLES, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.OPTIONAL_TYPE_MARKER, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.CHECK_TYPES, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.STRICT_MODULE_DEP_CHECK, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.MISSING_RETURN, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.EXTRA_REQUIRE, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.MISSING_REQUIRE, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSErrorGroup.MISSING_PROVIDE, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setGeneratorOutputPath(JSGen::getSourceFile, config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapDetailLevel(SourceMap.DetailLevel.ALL);\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setOriginalVariableNaming(config.originalVariableNaming);\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    CompilerOptions options = createOptions();\n    JSModule[] modules = null;\n    CompilerOptionsReflector reflector = new CompilerOptionsReflector(options);\n    setRunOptions(reflector);\n    Charset outputCharset = config.outputCharset == null ? Charsets.UTF_8 : config.outputCharset;\n    if (inputCharset != null && !outputCharset.equals(inputCharset)) {\n        reflector.setOutputCharset(outputCharset);\n    }\n    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n    if (writeOutputToFile) {\n        out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(config.jsOutputFile), outputCharset));\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        Result result = compiler.compile(externs, modules, options);\n        return processResult(result, modules, out, writeOutputToFile);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        Result result = compiler.compile(externs, inputs, options);\n        return processResult(result, null, out, writeOutputToFile);\n    }\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    options.setLanguageOut(LanguageMode.ECMASCRIPT5);\n    options.setWarningLevel(DiagnosticGroups.STRICT_MISSING_REQUIRE, CheckLevel.ERROR);\n    options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE, CheckLevel.ERROR);\n    options.setWarningLevel(DiagnosticGroups.MISSING_PROVIDE, CheckLevel.ERROR);\n    options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.ERROR);\n    options.setWarningLevel(DiagnosticGroups.TYPE_INVALIDATION, CheckLevel.ERROR);\n    options.setWarningLevel(DiagnosticGroups.JSDOC_MISPLACED_ANNOTATION, CheckLevel.WARNING);\n    options.setCollapsePropertiesLevel(Options.PropertyCollapseLevel.ALL);\n    options.setCheckGlobalThisLevel(Options.CheckLevel.STRICT);\n    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.shouldPrettyPrint());\n    builder.setLineBreak(options.getLineBreak());\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,6 +1,18 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.GENERIC_ERROR, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.CHECK_VARIABLES, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.DEBUGGER_STATEMENT_PRESENT, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.GLOBAL_THIS, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.UNDEFINED_NAMES, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.UNDEFINED_VARIABLES, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.OPTIONAL_TYPE_MARKER, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.CHECK_TYPES, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.STRICT_MODULE_DEP_CHECK, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.MISSING_RETURN, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.EXTRA_REQUIRE, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.MISSING_REQUIRE, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSErrorGroup.MISSING_PROVIDE, CheckLevel.ERROR);\n     diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n     diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n@@ -10,16 +22,11 @@\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setGeneratorOutputPath(JSGen::getSourceFile, config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapDetailLevel(SourceMap.DetailLevel.ALL);\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n-    }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n-    }\n+    options.setOriginalVariableNaming(config.originalVariableNaming);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -4,34 +4,29 @@\n     JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n     externsList.toArray(externs);\n     compiler = createCompiler();\n-    B options = createOptions();\n+    CompilerOptions options = createOptions();\n     JSModule[] modules = null;\n-    Result result;\n-    setRunOptions(options);\n-    if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n-    } else {\n-        options.outputCharset = inputCharset;\n+    CompilerOptionsReflector reflector = new CompilerOptionsReflector(options);\n+    setRunOptions(reflector);\n+    Charset outputCharset = config.outputCharset == null ? Charsets.UTF_8 : config.outputCharset;\n+    if (inputCharset != null && !outputCharset.equals(inputCharset)) {\n+        reflector.setOutputCharset(outputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(config.jsOutputFile), outputCharset));\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n     if (!moduleSpecs.isEmpty()) {\n         modules = createJsModules(moduleSpecs, jsFiles);\n-        result = compiler.compile(externs, modules, options);\n+        Result result = compiler.compile(externs, modules, options);\n+        return processResult(result, modules, out, writeOutputToFile);\n     } else {\n         List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n         JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n         inputList.toArray(inputs);\n-        result = compiler.compile(externs, inputs, options);\n+        Result result = compiler.compile(externs, inputs, options);\n+        return processResult(result, null, out, writeOutputToFile);\n     }\n-    int errCode = processResults(result, modules, options);\n-    // Close the output if we are writing to a file.\n-    if (writeOutputToFile) {\n-        ((Writer) out).close();\n-    }\n-    return errCode;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -2,17 +2,16 @@\n protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n-    level.setOptionsForCompilationLevel(options);\n-    if (flags.debug) {\n-        level.setDebugOptionsForCompilationLevel(options);\n-    }\n-    WarningLevel wLevel = flags.warning_level;\n-    wLevel.setOptionsForWarningLevel(options);\n-    for (FormattingOption formattingOption : flags.formatting) {\n-        formattingOption.applyToOptions(options);\n-    }\n-    options.closurePass = flags.process_closure_primitives;\n-    initOptionsFromFlags(options);\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n+    options.setLanguageOut(LanguageMode.ECMASCRIPT5);\n+    options.setWarningLevel(DiagnosticGroups.STRICT_MISSING_REQUIRE, CheckLevel.ERROR);\n+    options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE, CheckLevel.ERROR);\n+    options.setWarningLevel(DiagnosticGroups.MISSING_PROVIDE, CheckLevel.ERROR);\n+    options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.ERROR);\n+    options.setWarningLevel(DiagnosticGroups.TYPE_INVALIDATION, CheckLevel.ERROR);\n+    options.setWarningLevel(DiagnosticGroups.JSDOC_MISPLACED_ANNOTATION, CheckLevel.WARNING);\n+    options.setCollapsePropertiesLevel(Options.PropertyCollapseLevel.ALL);\n+    options.setCheckGlobalThisLevel(Options.CheckLevel.STRICT);\n+    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,10 +1,10 @@\n private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n-    builder.setLineBreak(options.lineBreak);\n+    builder.setPrettyPrint(options.shouldPrettyPrint());\n+    builder.setLineBreak(options.getLineBreak());\n     builder.setSourceMap(sourceMap);\n-    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    CompilerOptions options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setProcessClosurePrimitives(flags.process_closure_primitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,25 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -4,18 +4,18 @@\n     JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n     externsList.toArray(externs);\n     compiler = createCompiler();\n-    B options = createOptions();\n+    CompilerOptions options = createOptions();\n     JSModule[] modules = null;\n     Result result;\n     setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -12,7 +12,7 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setProcessClosurePrimitives(flags.process_closure_primitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -3,8 +3,8 @@\n     builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n-    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setInputVariableMapSerialized(VariableMap.load(config.variableMapInputFile).toBytes());\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setInputPropertyMapSerialized(VariableMap.load(config.propertyMapInputFile).toBytes());\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    B options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getOutputFile().isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.getOutputFile(), inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile && out instanceof Writer) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setClosurePassEnabled(flags.process_closure_primitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.shouldPrettyPrint());\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,25 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setInputVariableMapSerialized(VariableMap.load(config.variableMapInputFile).toBytes());\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setInputPropertyMapSerialized(VariableMap.load(config.propertyMapInputFile).toBytes());\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -9,13 +9,13 @@\n     Result result;\n     setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getOutputFile().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(options.getOutputFile(), inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n@@ -30,7 +30,7 @@\n     }\n     int errCode = processResults(result, modules, options);\n     // Close the output if we are writing to a file.\n-    if (writeOutputToFile) {\n+    if (writeOutputToFile && out instanceof Writer) {\n         ((Writer) out).close();\n     }\n     return errCode;\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -12,7 +12,7 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setClosurePassEnabled(flags.process_closure_primitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,10 +1,10 @@\n private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n+    builder.setPrettyPrint(options.shouldPrettyPrint());\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n-    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!config.jsOutputFile.isEmpty()) {\n        options.setLanguageOut(LanguageMode.ECMASCRIPT5);\n    }\n    options.setSourceMapOutputPath(config.createSourceMap);\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.isEmpty()) {\n        options.inputVariableMap =\n            VariableMap.load(config.variableMapInputFile).getResolvedMap();\n    }\n    if (!config.propertyMapInputFile.isEmpty()) {\n        options.inputPropertyMap =\n            VariableMap.load(config.propertyMapInputFile).getResolvedMap();\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    B options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(config.jsOutputFile, inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        out.close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setClosurePassEnabled(flags.process_closure_primitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.getPrettyPrint());\n    builder.setLineBreak(options.getLineBreak());\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,25 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setDependencyOptions(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    if (!config.jsOutputFile.isEmpty()) {\n+        options.setLanguageOut(LanguageMode.ECMASCRIPT5);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    options.setSourceMapOutputPath(config.createSourceMap);\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    if (!config.variableMapInputFile.isEmpty()) {\n+        options.inputVariableMap =\n+            VariableMap.load(config.variableMapInputFile).getResolvedMap();\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n-    }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+    if (!config.propertyMapInputFile.isEmpty()) {\n+        options.inputPropertyMap =\n+            VariableMap.load(config.propertyMapInputFile).getResolvedMap();\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -9,13 +9,13 @@\n     Result result;\n     setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(config.jsOutputFile, inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n@@ -31,7 +31,7 @@\n     int errCode = processResults(result, modules, options);\n     // Close the output if we are writing to a file.\n     if (writeOutputToFile) {\n-        ((Writer) out).close();\n+        out.close();\n     }\n     return errCode;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -12,7 +12,7 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setClosurePassEnabled(flags.process_closure_primitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,10 +1,10 @@\n private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n-    builder.setLineBreak(options.lineBreak);\n+    builder.setPrettyPrint(options.getPrettyPrint());\n+    builder.setLineBreak(options.getLineBreak());\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setIdeMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!config.jsOutputFile.isEmpty()) {\n        options.setOutputJs(config.jsOutputFile);\n    }\n    if (!config.createSourceMap.isEmpty()) {\n        options.getSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.isEmpty()) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.isEmpty()) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    B options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset.equals(Charsets.UTF_8)) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getOutputJs().isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.getOutputJs(), inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setClosurePassEnabled(flags.process_closure_primitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.shouldPrintPretty());\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,25 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setIdeMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    if (!config.jsOutputFile.isEmpty()) {\n+        options.setOutputJs(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (!config.createSourceMap.isEmpty()) {\n+        options.getSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    if (!config.variableMapInputFile.isEmpty()) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n+    if (!config.propertyMapInputFile.isEmpty()) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -8,14 +8,14 @@\n     JSModule[] modules = null;\n     Result result;\n     setRunOptions(options);\n-    if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+    if (inputCharset.equals(Charsets.UTF_8)) {\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getOutputJs().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(options.getOutputJs(), inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -12,7 +12,7 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setClosurePassEnabled(flags.process_closure_primitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,10 +1,10 @@\n private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n+    builder.setPrettyPrint(options.shouldPrintPretty());\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n-    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(DependencyOptions.pruneLegacyForEntryPoints(config.entryPoints));\n    options.setManagingDependencies(config.manageClosureDependencies);\n    options.setLanguageIn(config.inputLanguage);\n    options.setLanguageOut(config.outputLanguage);\n    options.setDevMode(config.jscompDevMode);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    CompilerOptions options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setCheckGlobalThisLevel(flags.check_global_this_level);\n    options.setRenamingPolicy(flags.rename_prefix_namespace);\n    options.setGenerateExports(flags.generate_exports);\n    options.setChromePass(flags.process_common_js_modules);\n    options.setRewritePolyfills(flags.environment);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,27 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n-    options.setCodingConvention(config.codingConvention);\n+    options.setDependencyOptions(DependencyOptions.pruneLegacyForEntryPoints(config.entryPoints));\n+    options.setManagingDependencies(config.manageClosureDependencies);\n+    options.setLanguageIn(config.inputLanguage);\n+    options.setLanguageOut(config.outputLanguage);\n+    options.setDevMode(config.jscompDevMode);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -4,18 +4,18 @@\n     JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n     externsList.toArray(externs);\n     compiler = createCompiler();\n-    B options = createOptions();\n+    CompilerOptions options = createOptions();\n     JSModule[] modules = null;\n     Result result;\n     setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -12,7 +12,10 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n-    initOptionsFromFlags(options);\n+    options.setCheckGlobalThisLevel(flags.check_global_this_level);\n+    options.setRenamingPolicy(flags.rename_prefix_namespace);\n+    options.setGenerateExports(flags.generate_exports);\n+    options.setChromePass(flags.process_common_js_modules);\n+    options.setRewritePolyfills(flags.environment);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -3,8 +3,8 @@\n     builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n-    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(config.dependencyMode, config.dependencyManifest);\n    options.setLanguageIn(config.languageIn);\n    options.setLanguageOut(config.languageOut);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.isEmpty()) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.isEmpty()) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externs = createExterns();\n    compiler = createCompiler();\n    B options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputs = createSourceInputs(jsFiles);\n        result = compiler.compile(externs, inputs.toArray(new JSSourceFile[0]), options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    FieldPosition position = new FieldPosition(0);\n    NumberFormat numberFormat = NumberFormat.getIntegerInstance(Locale.ENGLISH);\n    numberFormat.setMinimumIntegerDigits(3);\n    numberFormat.setMaximumFractionDigits(0);\n    numberFormat.setMaximumIntegerDigits(3);\n    String outputWrapper = config.outputWrapper;\n    if (!Strings.isNullOrEmpty(outputWrapper)) {\n        outputWrapper = outputWrapper.replaceAll(\"%output%\", \"%s\");\n        outputWrapper = outputWrapper.replaceAll(\"%output|basename%.js\",\n                \"%s_\" + config.getOutputFileName().replaceAll(\"\\\\.js$\", \"\") + \".js\");\n        Matcher matcher = Pattern.compile(\"%03d\").matcher(outputWrapper);\n        StringBuffer sb = new StringBuffer();\n        while (matcher.find()) {\n            matcher.appendReplacement(sb, numberFormat.format(position.getBeginIndex()));\n        }\n        matcher.appendTail(sb);\n        outputWrapper = sb.toString();\n    }\n    CompilerOptions options = new CompilerOptions();\n    options.setOutputWrapper(outputWrapper);\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setDependencyOptions(flags.dependency_mode, flags.dependency_file);\n    options.setLanguageIn(flags.language_in);\n    options.setLanguageOut(flags.language_out);\n    if (flags.process_common_js_modules) {\n        options.setProcessCommonJsModules(flags.common_js_entry_module, flags.common_js_module_path_prefix);\n    }\n    options.setCheckDeterminism(flags.check_closure_assignments, flags.check_closure_imports);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,25 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n-    options.setCodingConvention(config.codingConvention);\n+    options.setDependencyOptions(config.dependencyMode, config.dependencyManifest);\n+    options.setLanguageIn(config.languageIn);\n+    options.setLanguageOut(config.languageOut);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    if (!config.variableMapInputFile.isEmpty()) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n+    if (!config.propertyMapInputFile.isEmpty()) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -1,21 +1,19 @@\n protected int doRun() throws FlagUsageException, IOException {\n     Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n-    List<JSSourceFile> externsList = createExterns();\n-    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n-    externsList.toArray(externs);\n+    List<JSSourceFile> externs = createExterns();\n     compiler = createCompiler();\n     B options = createOptions();\n     JSModule[] modules = null;\n     Result result;\n     setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n@@ -23,10 +21,8 @@\n         modules = createJsModules(moduleSpecs, jsFiles);\n         result = compiler.compile(externs, modules, options);\n     } else {\n-        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n-        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n-        inputList.toArray(inputs);\n-        result = compiler.compile(externs, inputs, options);\n+        List<JSSourceFile> inputs = createSourceInputs(jsFiles);\n+        result = compiler.compile(externs, inputs.toArray(new JSSourceFile[0]), options);\n     }\n     int errCode = processResults(result, modules, options);\n     // Close the output if we are writing to a file.\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -1,7 +1,25 @@\n @Override\n protected CompilerOptions createOptions() {\n+    FieldPosition position = new FieldPosition(0);\n+    NumberFormat numberFormat = NumberFormat.getIntegerInstance(Locale.ENGLISH);\n+    numberFormat.setMinimumIntegerDigits(3);\n+    numberFormat.setMaximumFractionDigits(0);\n+    numberFormat.setMaximumIntegerDigits(3);\n+    String outputWrapper = config.outputWrapper;\n+    if (!Strings.isNullOrEmpty(outputWrapper)) {\n+        outputWrapper = outputWrapper.replaceAll(\"%output%\", \"%s\");\n+        outputWrapper = outputWrapper.replaceAll(\"%output|basename%.js\",\n+                \"%s_\" + config.getOutputFileName().replaceAll(\"\\\\.js$\", \"\") + \".js\");\n+        Matcher matcher = Pattern.compile(\"%03d\").matcher(outputWrapper);\n+        StringBuffer sb = new StringBuffer();\n+        while (matcher.find()) {\n+            matcher.appendReplacement(sb, numberFormat.format(position.getBeginIndex()));\n+        }\n+        matcher.appendTail(sb);\n+        outputWrapper = sb.toString();\n+    }\n     CompilerOptions options = new CompilerOptions();\n-    options.setCodingConvention(new ClosureCodingConvention());\n+    options.setOutputWrapper(outputWrapper);\n     CompilationLevel level = flags.compilation_level;\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n@@ -12,7 +30,12 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n-    initOptionsFromFlags(options);\n+    options.setDependencyOptions(flags.dependency_mode, flags.dependency_file);\n+    options.setLanguageIn(flags.language_in);\n+    options.setLanguageOut(flags.language_out);\n+    if (flags.process_common_js_modules) {\n+        options.setProcessCommonJsModules(flags.common_js_entry_module, flags.common_js_module_path_prefix);\n+    }\n+    options.setCheckDeterminism(flags.check_closure_assignments, flags.check_closure_imports);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -3,8 +3,8 @@\n     builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n-    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized =\n                VariableMap.load(config.variableMapInputFile).toByteArray();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized =\n                VariableMap.load(config.propertyMapInputFile).toByteArray();\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    B options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setProcessClosurePrimitives(flags.process_closure_primitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.shouldPrettyPrint());\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,27 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMapSerialized =\n+                VariableMap.load(config.variableMapInputFile).toByteArray();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMapSerialized =\n+                VariableMap.load(config.propertyMapInputFile).toByteArray();\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -1,5 +1,4 @@\n protected int doRun() throws FlagUsageException, IOException {\n-    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n     List<JSSourceFile> externsList = createExterns();\n     JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n     externsList.toArray(externs);\n@@ -9,13 +8,13 @@\n     Result result;\n     setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(options.getJsOutputFile(), inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -12,7 +12,7 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setProcessClosurePrimitives(flags.process_closure_primitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,10 +1,10 @@\n private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n+    builder.setPrettyPrint(options.shouldPrettyPrint());\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n-    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    builder.setSourceMapDetailLevel(options.getSourceMapDetailLevel());\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!config.jsOutputFile.isEmpty()) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (!config.createSourceMap.isEmpty()) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.isEmpty()) {\n        options.inputVariableMapSerialized = Files.toByteArray(new File(config.variableMapInputFile));\n    }\n    if (!config.propertyMapInputFile.isEmpty()) {\n        options.inputPropertyMapSerialized = Files.toByteArray(new File(config.propertyMapInputFile));\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    B options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset.equals(Charsets.UTF_8)) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n    if (writeOutputToFile) {\n        out = Files.newWriter(new File(options.getJsOutputFile()), inputCharset);\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        out.close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        CodeGenerator.setPrettyPrint(true);\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setProcessClosurePrimitives(flags.process_closure_primitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder =\n        new CodePrinter.Builder(n)\n            .setPrettyPrint(options.shouldPrettyPrint())\n            .setLineBreak(options.lineBreak);\n    if (sourceMap != null) {\n      builder.setSourceMap(sourceMap);\n      builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    }\n    Charset charset = options.getOutputCharset();\n    if (charset != null) {\n        builder.setOutputCharset(charset);\n    }\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,25 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    if (!config.jsOutputFile.isEmpty()) {\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (!config.createSourceMap.isEmpty()) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    if (!config.variableMapInputFile.isEmpty()) {\n+        options.inputVariableMapSerialized = Files.toByteArray(new File(config.variableMapInputFile));\n     }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+    if (!config.propertyMapInputFile.isEmpty()) {\n+        options.inputPropertyMapSerialized = Files.toByteArray(new File(config.propertyMapInputFile));\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -8,14 +8,14 @@\n     JSModule[] modules = null;\n     Result result;\n     setRunOptions(options);\n-    if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+    if (inputCharset.equals(Charsets.UTF_8)) {\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getJsOutputFile().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = Files.newWriter(new File(options.getJsOutputFile()), inputCharset);\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n@@ -31,7 +31,7 @@\n     int errCode = processResults(result, modules, options);\n     // Close the output if we are writing to a file.\n     if (writeOutputToFile) {\n-        ((Writer) out).close();\n+        out.close();\n     }\n     return errCode;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -5,6 +5,7 @@\n     CompilationLevel level = flags.compilation_level;\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n+        CodeGenerator.setPrettyPrint(true);\n         level.setDebugOptionsForCompilationLevel(options);\n     }\n     WarningLevel wLevel = flags.warning_level;\n@@ -12,7 +13,7 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setProcessClosurePrimitives(flags.process_closure_primitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,10 +1,15 @@\n private String toSource(Node n, SourceMap sourceMap) {\n-    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n-    builder.setLineBreak(options.lineBreak);\n-    builder.setSourceMap(sourceMap);\n-    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n-    builder.setOutputCharset(charset);\n+    CodePrinter.Builder builder =\n+        new CodePrinter.Builder(n)\n+            .setPrettyPrint(options.shouldPrettyPrint())\n+            .setLineBreak(options.lineBreak);\n+    if (sourceMap != null) {\n+      builder.setSourceMap(sourceMap);\n+      builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n+    }\n+    Charset charset = options.getOutputCharset();\n+    if (charset != null) {\n+        builder.setOutputCharset(charset);\n+    }\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(config.jscompError), CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(config.jscompWarning), CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(config.jscompOff), CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setClosurePasses(new ArrayList<>(config.closurePass));\n    options.setDependencyOptions(createDependencyOptions(config));\n    options.setDevMode(config.jscompDevMode);\n    options.setOutputCharset(Charsets.UTF_8);\n    options.setCodingConvention(new ClosureCodingConvention());\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputJsFileName(config.jsOutputFile);\n    }\n    if (config.createSourceMap) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapOutputFile.isEmpty()) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapOutputFile).toByteArray();\n    }\n    if (!config.propertyMapOutputFile.isEmpty()) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapOutputFile).toByteArray();\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = externsList.toArray(new JSSourceFile[externsList.size()]);\n    compiler = createCompiler();\n    CompilerOptions options = createOptions();\n    setRunOptions(options);\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        JSModule[] modules = createJsModules(moduleSpecs, jsFiles);\n        Result result = compiler.compile(externs, modules, options);\n        int errCode = processResults(result, modules, options);\n        if (errCode != 0) {\n            return errCode;\n        }\n        for (JSModule module : modules) {\n            String name = module.getName();\n            if (name == null) {\n                throw new RuntimeException(\"Module with no name.\");\n            }\n            String fileName = name + \".js\";\n            printOutput(options.jsOutputFile + fileName, compiler.toSource(module));\n            if (options.sourceMapOutputPath != null) {\n                printOutput(getOutputSourceMapFileName(options.jsOutputFile, fileName), compiler.getSourceMap());\n            }\n        }\n    } else {\n        List<JSSourceFile> inputs = createSourceInputs(jsFiles);\n        Result result = compiler.compile(externs, inputs.toArray(new JSSourceFile[inputs.size()]), options);\n        return processResults(result, null, options);\n    }\n    return 0;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        options.setCheckDebugAsserts(true);\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setProcessClosurePrimitives(flags.process_closure_primitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,26 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(config.jscompError), CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(config.jscompWarning), CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(config.jscompOff), CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n-    options.setCodingConvention(config.codingConvention);\n+    options.setClosurePasses(new ArrayList<>(config.closurePass));\n+    options.setDependencyOptions(createDependencyOptions(config));\n+    options.setDevMode(config.jscompDevMode);\n+    options.setOutputCharset(Charsets.UTF_8);\n+    options.setCodingConvention(new ClosureCodingConvention());\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n-    inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputJsFileName(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (config.createSourceMap) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    if (!config.variableMapOutputFile.isEmpty()) {\n+        options.inputVariableMapSerialized = VariableMap.load(config.variableMapOutputFile).toByteArray();\n     }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+    if (!config.propertyMapOutputFile.isEmpty()) {\n+        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapOutputFile).toByteArray();\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -1,37 +1,34 @@\n protected int doRun() throws FlagUsageException, IOException {\n     Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n     List<JSSourceFile> externsList = createExterns();\n-    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n-    externsList.toArray(externs);\n+    JSSourceFile[] externs = externsList.toArray(new JSSourceFile[externsList.size()]);\n     compiler = createCompiler();\n-    B options = createOptions();\n-    JSModule[] modules = null;\n-    Result result;\n+    CompilerOptions options = createOptions();\n     setRunOptions(options);\n-    if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n-    } else {\n-        options.outputCharset = inputCharset;\n-    }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n-    if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n-    }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n     if (!moduleSpecs.isEmpty()) {\n-        modules = createJsModules(moduleSpecs, jsFiles);\n-        result = compiler.compile(externs, modules, options);\n+        JSModule[] modules = createJsModules(moduleSpecs, jsFiles);\n+        Result result = compiler.compile(externs, modules, options);\n+        int errCode = processResults(result, modules, options);\n+        if (errCode != 0) {\n+            return errCode;\n+        }\n+        for (JSModule module : modules) {\n+            String name = module.getName();\n+            if (name == null) {\n+                throw new RuntimeException(\"Module with no name.\");\n+            }\n+            String fileName = name + \".js\";\n+            printOutput(options.jsOutputFile + fileName, compiler.toSource(module));\n+            if (options.sourceMapOutputPath != null) {\n+                printOutput(getOutputSourceMapFileName(options.jsOutputFile, fileName), compiler.getSourceMap());\n+            }\n+        }\n     } else {\n-        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n-        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n-        inputList.toArray(inputs);\n-        result = compiler.compile(externs, inputs, options);\n+        List<JSSourceFile> inputs = createSourceInputs(jsFiles);\n+        Result result = compiler.compile(externs, inputs.toArray(new JSSourceFile[inputs.size()]), options);\n+        return processResults(result, null, options);\n     }\n-    int errCode = processResults(result, modules, options);\n-    // Close the output if we are writing to a file.\n-    if (writeOutputToFile) {\n-        ((Writer) out).close();\n-    }\n-    return errCode;\n+    return 0;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -5,6 +5,7 @@\n     CompilationLevel level = flags.compilation_level;\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n+        options.setCheckDebugAsserts(true);\n         level.setDebugOptionsForCompilationLevel(options);\n     }\n     WarningLevel wLevel = flags.warning_level;\n@@ -12,7 +13,7 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setProcessClosurePrimitives(flags.process_closure_primitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -4,7 +4,7 @@\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(getDependencyOptions());\n    CompilationLevel level = getCompilationLevel();\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel wLevel = getWarningLevel();\n    wLevel.setOptionsForWarningLevel(options);\n    options.setWarningGuard(new ClosureOptimizeWarningsGuard());\n    options.setDebugOptionsForSafeCompilation();\n    if (!config.moduleOutputPath.isEmpty()) {\n        options.setProcessCommonJSModules(true);\n        options.setModuleResolutionMode(ModuleLoader.ResolutionMode.BROWSER);\n    }\n    inputCharset = getInputCharset();\n    options.setLanguageIn(InputLanguageMode.fromString(config.languageIn));\n    options.setLanguageOut(OutputLanguageMode.fromString(config.languageOut));\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputCharset(Charsets.UTF_8);\n        options.setGeneratePseudoNames(true);\n        options.setTrustedStrings(true);\n        options.setOutputPath(config.jsOutputFile);\n    }\n    if (!config.createSourceMap.isEmpty() ||\n            !config.createNameMap.isEmpty() ||\n            !config.sourceMapOutputPath.isEmpty()) {\n        options.setSourceMapFormat(SourceMap.Format.V3);\n        options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n        if (!config.createSourceMap.isEmpty()) {\n            options.setSourceMapOutputPath(config.createSourceMap);\n            options.setSourceMapLocationMappings(\n                    // This is relative to the location of the generated source.\n                    SourceMapJoiner.join(\n                            getPrefixMappings(),\n                            config.sourceMapLocationMapping));\n        }\n        if (!config.createNameMap.isEmpty()) {\n            options.setNameMapOutputPath(config.createNameMap);\n        }\n        if (!config.sourceMapOutputPath.isEmpty()) {\n            options.setSourceMapOutputPath(config.sourceMapOutputPath);\n        }\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    CompilerOptions options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(config.jsOutputFile, inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles, options);\n        result = compiler.compileModules(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.OFF);\n    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);\n    options.setWarningLevel(DiagnosticGroups.ACCESS_CONTROLS, CheckLevel.WARNING);\n    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);\n    options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARIABLES, CheckLevel.WARNING);\n    CompilationLevel level = getCompilationLevel();\n    level.setOptionsForCompilationLevel(options);\n    WarningLevel wLevel = getWarningLevel();\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : config.formattingOptions) {\n        formattingOption.applyToOptions(options);\n    }\n    if (config.checksOnly) {\n        options.setChecksOnly(true);\n    }\n    if (!config.jsdocParsing.equals(\"WARN_ONLY\")) {\n        options.setWarningLevel(DiagnosticGroups.JSDOC_PARSE_ERROR, CheckLevel.ERROR);\n    }\n    if (config.polymerPass) {\n        options.setPolymerVersion(config.polymerVersion);\n        options.setPolymerStrict(config.polymerStrict);\n    }\n    if (config.processClosurePrimitives) {\n        options.setProcessClosurePrimitives(true);\n    }\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.shouldPrintPretty());\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    Charset charset = options.outputCharset;\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,47 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n-    options.setCodingConvention(config.codingConvention);\n-    options.setSummaryDetailLevel(config.summaryDetailLevel);\n+    options.setDependencyOptions(getDependencyOptions());\n+    CompilationLevel level = getCompilationLevel();\n+    level.setOptionsForCompilationLevel(options);\n+    WarningLevel wLevel = getWarningLevel();\n+    wLevel.setOptionsForWarningLevel(options);\n+    options.setWarningGuard(new ClosureOptimizeWarningsGuard());\n+    options.setDebugOptionsForSafeCompilation();\n+    if (!config.moduleOutputPath.isEmpty()) {\n+        options.setProcessCommonJSModules(true);\n+        options.setModuleResolutionMode(ModuleLoader.ResolutionMode.BROWSER);\n+    }\n     inputCharset = getInputCharset();\n+    options.setLanguageIn(InputLanguageMode.fromString(config.languageIn));\n+    options.setLanguageOut(OutputLanguageMode.fromString(config.languageOut));\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputCharset(Charsets.UTF_8);\n+        options.setGeneratePseudoNames(true);\n+        options.setTrustedStrings(true);\n+        options.setOutputPath(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n-    }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n-    }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+    if (!config.createSourceMap.isEmpty() ||\n+            !config.createNameMap.isEmpty() ||\n+            !config.sourceMapOutputPath.isEmpty()) {\n+        options.setSourceMapFormat(SourceMap.Format.V3);\n+        options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+        if (!config.createSourceMap.isEmpty()) {\n+            options.setSourceMapOutputPath(config.createSourceMap);\n+            options.setSourceMapLocationMappings(\n+                    // This is relative to the location of the generated source.\n+                    SourceMapJoiner.join(\n+                            getPrefixMappings(),\n+                            config.sourceMapLocationMapping));\n+        }\n+        if (!config.createNameMap.isEmpty()) {\n+            options.setNameMapOutputPath(config.createNameMap);\n+        }\n+        if (!config.sourceMapOutputPath.isEmpty()) {\n+            options.setSourceMapOutputPath(config.sourceMapOutputPath);\n+        }\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -4,24 +4,19 @@\n     JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n     externsList.toArray(externs);\n     compiler = createCompiler();\n-    B options = createOptions();\n+    CompilerOptions options = createOptions();\n     JSModule[] modules = null;\n     Result result;\n     setRunOptions(options);\n-    if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n-    } else {\n-        options.outputCharset = inputCharset;\n-    }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(config.jsOutputFile, inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n     if (!moduleSpecs.isEmpty()) {\n-        modules = createJsModules(moduleSpecs, jsFiles);\n-        result = compiler.compile(externs, modules, options);\n+        modules = createJsModules(moduleSpecs, jsFiles, options);\n+        result = compiler.compileModules(externs, modules, options);\n     } else {\n         List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n         JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -2,17 +2,30 @@\n protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n+    options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.OFF);\n+    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);\n+    options.setWarningLevel(DiagnosticGroups.ACCESS_CONTROLS, CheckLevel.WARNING);\n+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);\n+    options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARIABLES, CheckLevel.WARNING);\n+    CompilationLevel level = getCompilationLevel();\n     level.setOptionsForCompilationLevel(options);\n-    if (flags.debug) {\n-        level.setDebugOptionsForCompilationLevel(options);\n-    }\n-    WarningLevel wLevel = flags.warning_level;\n+    WarningLevel wLevel = getWarningLevel();\n     wLevel.setOptionsForWarningLevel(options);\n-    for (FormattingOption formattingOption : flags.formatting) {\n+    for (FormattingOption formattingOption : config.formattingOptions) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n-    initOptionsFromFlags(options);\n+    if (config.checksOnly) {\n+        options.setChecksOnly(true);\n+    }\n+    if (!config.jsdocParsing.equals(\"WARN_ONLY\")) {\n+        options.setWarningLevel(DiagnosticGroups.JSDOC_PARSE_ERROR, CheckLevel.ERROR);\n+    }\n+    if (config.polymerPass) {\n+        options.setPolymerVersion(config.polymerVersion);\n+        options.setPolymerStrict(config.polymerStrict);\n+    }\n+    if (config.processClosurePrimitives) {\n+        options.setProcessClosurePrimitives(true);\n+    }\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,6 +1,6 @@\n private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n+    builder.setPrettyPrint(options.shouldPrintPretty());\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(getDependencyOptions());\n    options.setPrintInputDelimiter(config.printInputDelimiter);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setChecksOnly(config.checksOnly);\n    options.setCheckSymbols(config.checkSymbols);\n    options.setFormatting(config.formatting);\n    options.setAllowHotswapReplaceScript(config.allowHotswapReplaceScript);\n    options.setNewTypeInference(config.newTypeInference);\n    options.setPreserveDetailedSourceInfo(config.preserveDetailedSourceInfo);\n    options.setLanguageIn(config.languageIn);\n    options.setLanguageOut(config.languageOut);\n    options.setParseJsDocDocumentation(config.parseJsDocDocumentation);\n    options.setParseInlineSourceMaps(config.parseInlineSourceMaps);\n    options.setEmitUseStrict(config.emitUseStrict);\n    options.setGenerateExports(config.exportLocalPropertyDefinitions);\n    options.setExportTestFunctions(config.exportTestFunctions);\n    options.setClosurePass(config.processClosurePrimitives);\n    options.setUseTypesForOptimization(config.checkTypes);\n    options.setAmbiguateProperties(config.ambiguateProperties);\n    options.setDisambiguateProperties(config.disambiguateProperties);\n    options.setRenamingPolicy(getRenamingPolicy());\n    if (config.propertyMapInputFile != null) {\n        options.setPropertyMapInputPath(config.propertyMapInputFile.getPath());\n    }\n    if (config.propertyMapOutputFile != null) {\n        options.setPropertyMapOutputPath(config.propertyMapOutputFile.getPath());\n    }\n    if (config.variableMapInputFile != null) {\n        options.setVariableMapInputPath(config.variableMapInputFile.getPath());\n    }\n    if (config.variableMapOutputFile != null) {\n        options.setVariableMapOutputPath(config.variableMapOutputFile.getPath());\n    }\n    options.setIdGenerators(config.idGenerators);\n    inputCharset = getInputCharset();\n    options.setOutputCharset(inputCharset);\n    if (config.jsOutputFile != null) {\n        options.setOutputJsFileName(config.jsOutputFile.getPath());\n    }\n    if (config.createSourceMap != null) {\n        options.setSourceMapOutputPath(config.createSourceMap.getPath());\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    CompilerOptions options = optionsProvider.getOptions();\n    JSModule[] modules = null;\n    Result result;\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getOutputJsFileName().isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.getOutputJsFileName(), inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    CompilationLevel level = flags.getCompilationLevel();\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.getWarningLevel();\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.getFormattingOptions()) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setDefineReplacements(flags.getDefineReplacements());\n    options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.WARNING);\n\n    RenamingPolicy policy = flags.getRenamingPolicy();\n    if (policy != null) {\n        options.setRenamingPolicy(policy);\n    }\n\n    options.setVariableRenaming(flags.isVariableRenamingEnabled() ? VariableRenamingPolicy.ALL : VariableRenamingPolicy.OFF);\n    options.setLanguageIn(flags.getLanguageIn());\n    options.setLanguageOut(flags.getLanguageOut());\n    options.setChecksOnly(flags.isCheckOnly());\n    options.setCheckTypes(flags.isCheckTypes());\n    options.setProcessCommonJSModules(flags.processCommonJSModules);\n    options.setAngularPass(flags.generateAngularPass);\n    options.setDartPass(flags.dartPass);\n    options.setCollapseProperties(flags.collapseProperties);\n    options.setCollapseAnonymousFunctions(flags.collapseAnonymousFunctions);\n    options.setDisambiguateProperties(flags.disambiguateProperties);\n    options.setAmbiguateProperties(flags.ambiguateProperties);\n    options.setInlineFunctions(flags.inlineFunctions);\n    options.setGenerateExports(flags.exportLocalPropertyDefinitions);\n    options.setExportTestFunctions(flags.exportTestFunctions);\n    options.setDiagnosticsOptions(flags.enforceCodingConvention);\n    options.setNewTypeInference(flags.getNewTypeInference());\n    options.setPreserveDetailedSourceInfo(flags.preserveDetailedSourceInfo);\n    options.setOutputJs(docRoot.getCanonicalPath() + \"/\" + flags.getJsOutputFile());\n    options.setGeneratePseudoNames(flags.generatePseudoNames);\n    options.setPrintInputDelimiter(flags.printInputDelimiter);\n    options.setUseTypesForOptimization(flags.useTypesForOptimization);\n    options.setAssumeFunctionWrapper(flags.assumeFunctionWrapper);\n    options.setIgnoreCajaLanguagePrimitives(flags.ignoreCajaLanguage);\n    options.setExternExports(flags.externExports);\n    options.setExternExportsPath(flags.externExportsPath);\n    options.setModuleResolutionMode(flags.moduleResolutionMode);\n\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.shouldPrettyPrint());\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    Charset charset = options.outputCharset;\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,50 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n-    options.setCodingConvention(config.codingConvention);\n-    options.setSummaryDetailLevel(config.summaryDetailLevel);\n+    options.setDependencyOptions(getDependencyOptions());\n+    options.setPrintInputDelimiter(config.printInputDelimiter);\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setChecksOnly(config.checksOnly);\n+    options.setCheckSymbols(config.checkSymbols);\n+    options.setFormatting(config.formatting);\n+    options.setAllowHotswapReplaceScript(config.allowHotswapReplaceScript);\n+    options.setNewTypeInference(config.newTypeInference);\n+    options.setPreserveDetailedSourceInfo(config.preserveDetailedSourceInfo);\n+    options.setLanguageIn(config.languageIn);\n+    options.setLanguageOut(config.languageOut);\n+    options.setParseJsDocDocumentation(config.parseJsDocDocumentation);\n+    options.setParseInlineSourceMaps(config.parseInlineSourceMaps);\n+    options.setEmitUseStrict(config.emitUseStrict);\n+    options.setGenerateExports(config.exportLocalPropertyDefinitions);\n+    options.setExportTestFunctions(config.exportTestFunctions);\n+    options.setClosurePass(config.processClosurePrimitives);\n+    options.setUseTypesForOptimization(config.checkTypes);\n+    options.setAmbiguateProperties(config.ambiguateProperties);\n+    options.setDisambiguateProperties(config.disambiguateProperties);\n+    options.setRenamingPolicy(getRenamingPolicy());\n+    if (config.propertyMapInputFile != null) {\n+        options.setPropertyMapInputPath(config.propertyMapInputFile.getPath());\n+    }\n+    if (config.propertyMapOutputFile != null) {\n+        options.setPropertyMapOutputPath(config.propertyMapOutputFile.getPath());\n+    }\n+    if (config.variableMapInputFile != null) {\n+        options.setVariableMapInputPath(config.variableMapInputFile.getPath());\n+    }\n+    if (config.variableMapOutputFile != null) {\n+        options.setVariableMapOutputPath(config.variableMapOutputFile.getPath());\n+    }\n+    options.setIdGenerators(config.idGenerators);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    options.setOutputCharset(inputCharset);\n+    if (config.jsOutputFile != null) {\n+        options.setOutputJsFileName(config.jsOutputFile.getPath());\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (config.createSourceMap != null) {\n+        options.setSourceMapOutputPath(config.createSourceMap.getPath());\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n-    }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n-    }\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -1,21 +1,19 @@\n protected int doRun() throws FlagUsageException, IOException {\n-    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n     List<JSSourceFile> externsList = createExterns();\n     JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n     externsList.toArray(externs);\n     compiler = createCompiler();\n-    B options = createOptions();\n+    CompilerOptions options = optionsProvider.getOptions();\n     JSModule[] modules = null;\n     Result result;\n-    setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getOutputJsFileName().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = toWriter(options.getOutputJsFileName(), inputCharset.name());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -1,18 +1,51 @@\n @Override\n protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n-    options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n+    CompilationLevel level = flags.getCompilationLevel();\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n         level.setDebugOptionsForCompilationLevel(options);\n     }\n-    WarningLevel wLevel = flags.warning_level;\n+    WarningLevel wLevel = flags.getWarningLevel();\n     wLevel.setOptionsForWarningLevel(options);\n-    for (FormattingOption formattingOption : flags.formatting) {\n+    for (FormattingOption formattingOption : flags.getFormattingOptions()) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n-    initOptionsFromFlags(options);\n+    options.setDefineReplacements(flags.getDefineReplacements());\n+    options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.WARNING);\n+\n+    RenamingPolicy policy = flags.getRenamingPolicy();\n+    if (policy != null) {\n+        options.setRenamingPolicy(policy);\n+    }\n+\n+    options.setVariableRenaming(flags.isVariableRenamingEnabled() ? VariableRenamingPolicy.ALL : VariableRenamingPolicy.OFF);\n+    options.setLanguageIn(flags.getLanguageIn());\n+    options.setLanguageOut(flags.getLanguageOut());\n+    options.setChecksOnly(flags.isCheckOnly());\n+    options.setCheckTypes(flags.isCheckTypes());\n+    options.setProcessCommonJSModules(flags.processCommonJSModules);\n+    options.setAngularPass(flags.generateAngularPass);\n+    options.setDartPass(flags.dartPass);\n+    options.setCollapseProperties(flags.collapseProperties);\n+    options.setCollapseAnonymousFunctions(flags.collapseAnonymousFunctions);\n+    options.setDisambiguateProperties(flags.disambiguateProperties);\n+    options.setAmbiguateProperties(flags.ambiguateProperties);\n+    options.setInlineFunctions(flags.inlineFunctions);\n+    options.setGenerateExports(flags.exportLocalPropertyDefinitions);\n+    options.setExportTestFunctions(flags.exportTestFunctions);\n+    options.setDiagnosticsOptions(flags.enforceCodingConvention);\n+    options.setNewTypeInference(flags.getNewTypeInference());\n+    options.setPreserveDetailedSourceInfo(flags.preserveDetailedSourceInfo);\n+    options.setOutputJs(docRoot.getCanonicalPath() + \"/\" + flags.getJsOutputFile());\n+    options.setGeneratePseudoNames(flags.generatePseudoNames);\n+    options.setPrintInputDelimiter(flags.printInputDelimiter);\n+    options.setUseTypesForOptimization(flags.useTypesForOptimization);\n+    options.setAssumeFunctionWrapper(flags.assumeFunctionWrapper);\n+    options.setIgnoreCajaLanguagePrimitives(flags.ignoreCajaLanguage);\n+    options.setExternExports(flags.externExports);\n+    options.setExternExportsPath(flags.externExportsPath);\n+    options.setModuleResolutionMode(flags.moduleResolutionMode);\n+\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,6 +1,6 @@\n private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n+    builder.setPrettyPrint(options.shouldPrettyPrint());\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(JSError.INTERNAL_ERROR, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevel(JSError.TYPE_MISMATCH_WARNING, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setChecksOnly(config.checksOnly);\n    options.setEnv(getEnvironment(config));\n    options.setWarningLevel(DiagnosticGroups.DEPRECATED, CheckLevel.OFF);\n    options.setLanguageIn(config.languageIn);\n    options.setLanguageOut(config.languageOut);\n    options.setBrokenClosureRequiresLevel(getBrokenClosureRequiresLevel(config.closureEntryPoint));\n    options.setRewritePolyfills(config.polymerVersion == PolymerVersion.V2);\n    options.setCollapsePropertiesLevel(config.collapsePropertiesLevel);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setCheckGlobalThisLevel(CheckLevel.WARNING);\n        options.setOutputJs(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setInputVariableMapSerialized(config.variableMapInputFile);\n    options.setInputPropertyMapSerialized(config.propertyMapInputFile);\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    CompilerOptions options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getOutputJs().isEmpty();\n    if (writeOutputToFile) {\n        out = new FileWriter(options.getOutputJs(), false);\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        out.close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        setDebugOptionsForCompilationLevel(level, options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setDependencyOptions(createDependencyOptions());\n    options.setSyntheticBlockStartMarker(SYNTHETIC_BLOCK_MARKER_OPEN);\n    options.setSyntheticBlockEndMarker(SYNTHETIC_BLOCK_MARKER_CLOSE);\n    options.setFingerprintTransformation(PRESERVE_FUNCTION_EXPRESSIONS_TRANSFORM);\n    options.setChecksOnly(flags.checks_only);\n    options.setExportLocalPropertyDefinitions(true);\n    options.setClosurePass(flags.process_closure_primitives);\n    options.setLanguageIn(flags.language_in);\n    options.setPolymerVersion(flags.polymer_version);\n    options.setRewritePolyfills(flags.polymer_version == PolymerVersion.V2);\n    options.setCoalesceVariableNames(flags.closure_ambiguate_properties);\n    options.setCollapsePropertiesLevel(flags.closure_compile);\n    options.setEnv(getEnvironment());\n    options.setRenamingPolicy(getRenamingPolicy());\n    options.setCodingConvention(getCodingConvention());\n    addAllToSet(flags.flag_file, options.getDefineReplacements());\n    options.setGenerateExports(flags.generate_exports);\n    options.setLanguageOut(flags.language_out);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n)\n            .setTypeRegistry(compiler.getTypeRegistry());\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    Charset charset = options.getOutputCharset();\n    if (charset != null) {\n        builder.setOutputCharset(charset);\n    }\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,32 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n+    diagnosticGroups.setWarningLevel(JSError.INTERNAL_ERROR, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(JSError.TYPE_MISMATCH_WARNING, CheckLevel.OFF);\n     diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n     diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n     diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setChecksOnly(config.checksOnly);\n+    options.setEnv(getEnvironment(config));\n+    options.setWarningLevel(DiagnosticGroups.DEPRECATED, CheckLevel.OFF);\n+    options.setLanguageIn(config.languageIn);\n+    options.setLanguageOut(config.languageOut);\n+    options.setBrokenClosureRequiresLevel(getBrokenClosureRequiresLevel(config.closureEntryPoint));\n+    options.setRewritePolyfills(config.polymerVersion == PolymerVersion.V2);\n+    options.setCollapsePropertiesLevel(config.collapsePropertiesLevel);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setCheckGlobalThisLevel(CheckLevel.WARNING);\n+        options.setOutputJs(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n-    }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n-    }\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setInputVariableMapSerialized(config.variableMapInputFile);\n+    options.setInputPropertyMapSerialized(config.propertyMapInputFile);\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -4,18 +4,18 @@\n     JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n     externsList.toArray(externs);\n     compiler = createCompiler();\n-    B options = createOptions();\n+    CompilerOptions options = createOptions();\n     JSModule[] modules = null;\n     Result result;\n     setRunOptions(options);\n     if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getOutputJs().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = new FileWriter(options.getOutputJs(), false);\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n@@ -31,7 +31,7 @@\n     int errCode = processResults(result, modules, options);\n     // Close the output if we are writing to a file.\n     if (writeOutputToFile) {\n-        ((Writer) out).close();\n+        out.close();\n     }\n     return errCode;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -1,18 +1,33 @@\n @Override\n protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n-    options.setCodingConvention(new ClosureCodingConvention());\n     CompilationLevel level = flags.compilation_level;\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n-        level.setDebugOptionsForCompilationLevel(options);\n+        setDebugOptionsForCompilationLevel(level, options);\n     }\n     WarningLevel wLevel = flags.warning_level;\n     wLevel.setOptionsForWarningLevel(options);\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n-    initOptionsFromFlags(options);\n+    options.setDependencyOptions(createDependencyOptions());\n+    options.setSyntheticBlockStartMarker(SYNTHETIC_BLOCK_MARKER_OPEN);\n+    options.setSyntheticBlockEndMarker(SYNTHETIC_BLOCK_MARKER_CLOSE);\n+    options.setFingerprintTransformation(PRESERVE_FUNCTION_EXPRESSIONS_TRANSFORM);\n+    options.setChecksOnly(flags.checks_only);\n+    options.setExportLocalPropertyDefinitions(true);\n+    options.setClosurePass(flags.process_closure_primitives);\n+    options.setLanguageIn(flags.language_in);\n+    options.setPolymerVersion(flags.polymer_version);\n+    options.setRewritePolyfills(flags.polymer_version == PolymerVersion.V2);\n+    options.setCoalesceVariableNames(flags.closure_ambiguate_properties);\n+    options.setCollapsePropertiesLevel(flags.closure_compile);\n+    options.setEnv(getEnvironment());\n+    options.setRenamingPolicy(getRenamingPolicy());\n+    options.setCodingConvention(getCodingConvention());\n+    addAllToSet(flags.flag_file, options.getDefineReplacements());\n+    options.setGenerateExports(flags.generate_exports);\n+    options.setLanguageOut(flags.language_out);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,10 +1,13 @@\n private String toSource(Node n, SourceMap sourceMap) {\n-    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n+    CodePrinter.Builder builder = new CodePrinter.Builder(n)\n+            .setTypeRegistry(compiler.getTypeRegistry());\n     builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n-    builder.setOutputCharset(charset);\n+    Charset charset = options.getOutputCharset();\n+    if (charset != null) {\n+        builder.setOutputCharset(charset);\n+    }\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nfinal protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!config.jsOutputFile.isEmpty()) {\n        options.setOutputFile(config.jsOutputFile);\n    }\n    if (!config.createSourceMap.isEmpty()) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.isEmpty()) {\n        options.setInputVariableMapSerialized(VariableMap.load(config.variableMapInputFile).toByteArray());\n    }\n    if (!config.propertyMapInputFile.isEmpty()) {\n        options.setInputPropertyMapSerialized(VariableMap.load(config.propertyMapInputFile).toByteArray());\n    }\n}\n\n## Fixed Function 2\nprotected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    B options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset.equals(Charsets.UTF_8)) {\n        options.setOutputCharset(Charsets.US_ASCII);\n    } else {\n        options.setOutputCharset(inputCharset);\n    }\n    boolean writeOutputToFile = !options.getOutputFile().isEmpty();\n    if (writeOutputToFile) {\n        out = new FileWriter(options.getOutputFile());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        out.close();\n    }\n    return errCode;\n}\n\n## Fixed Function 3\n@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setTieredCompilation(true);\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setClosurePass(flags.process_closure_primitives);\n    initOptionsFromFlags(options);\n    return options;\n}\n\n## Fixed Function 4\nprivate String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.lineBreak(options.lineBreak);\n    builder.sourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    Charset charset = options.getOutputCharset();\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,25 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    if (!config.jsOutputFile.isEmpty()) {\n+        options.setOutputFile(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (!config.createSourceMap.isEmpty()) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    if (!config.variableMapInputFile.isEmpty()) {\n+        options.setInputVariableMapSerialized(VariableMap.load(config.variableMapInputFile).toByteArray());\n     }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+    if (!config.propertyMapInputFile.isEmpty()) {\n+        options.setInputPropertyMapSerialized(VariableMap.load(config.propertyMapInputFile).toByteArray());\n     }\n }\n--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@doRun\n@@ -8,14 +8,14 @@\n     JSModule[] modules = null;\n     Result result;\n     setRunOptions(options);\n-    if (inputCharset == Charsets.UTF_8) {\n-        options.outputCharset = Charsets.US_ASCII;\n+    if (inputCharset.equals(Charsets.UTF_8)) {\n+        options.setOutputCharset(Charsets.US_ASCII);\n     } else {\n-        options.outputCharset = inputCharset;\n+        options.setOutputCharset(inputCharset);\n     }\n-    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n+    boolean writeOutputToFile = !options.getOutputFile().isEmpty();\n     if (writeOutputToFile) {\n-        out = toWriter(options.jsOutputFile, inputCharset.name());\n+        out = new FileWriter(options.getOutputFile());\n     }\n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n@@ -31,7 +31,7 @@\n     int errCode = processResults(result, modules, options);\n     // Close the output if we are writing to a file.\n     if (writeOutputToFile) {\n-        ((Writer) out).close();\n+        out.close();\n     }\n     return errCode;\n }\n--- com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n+++ com/google/javascript/jscomp/CommandLineRunner.java@createOptions\n@@ -3,6 +3,7 @@\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new ClosureCodingConvention());\n     CompilationLevel level = flags.compilation_level;\n+    level.setTieredCompilation(true);\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n         level.setDebugOptionsForCompilationLevel(options);\n@@ -12,7 +13,7 @@\n     for (FormattingOption formattingOption : flags.formatting) {\n         formattingOption.applyToOptions(options);\n     }\n-    options.closurePass = flags.process_closure_primitives;\n+    options.setClosurePass(flags.process_closure_primitives);\n     initOptionsFromFlags(options);\n     return options;\n }\n--- com/google/javascript/jscomp/Compiler.java@toSource\n+++ com/google/javascript/jscomp/Compiler.java@toSource\n@@ -1,10 +1,10 @@\n private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n     builder.setPrettyPrint(options.prettyPrint);\n-    builder.setLineBreak(options.lineBreak);\n-    builder.setSourceMap(sourceMap);\n+    builder.lineBreak(options.lineBreak);\n+    builder.sourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    Charset charset = options.outputCharset;\n+    Charset charset = options.getOutputCharset();\n     builder.setOutputCharset(charset);\n     return builder.build();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]