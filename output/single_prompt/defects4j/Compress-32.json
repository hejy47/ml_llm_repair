[{"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            double doubleValue = Double.parseDouble(val);\n            long longValue = doubleValue * 1000;\n            currEntry.setModTime(longValue);\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -17,7 +17,9 @@\n         } else if (\"size\".equals(key)) {\n             currEntry.setSize(Long.parseLong(val));\n         } else if (\"mtime\".equals(key)) {\n-            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n+            double doubleValue = Double.parseDouble(val);\n+            long longValue = doubleValue * 1000;\n+            currEntry.setModTime(longValue);\n         } else if (\"SCHILY.devminor\".equals(key)) {\n             currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        } else {\n            currEntry.addOtherHeader(key, val); // fix: add support for custom headers\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -22,6 +22,8 @@\n             currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n             currEntry.setDevMajor(Integer.parseInt(val));\n+        } else {\n+            currEntry.addOtherHeader(key, val); // fix: add support for custom headers\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n            String key = ent.getKey();\n            String val = ent.getValue();\n            if (\"path\".equals(key)) {\n                currEntry.setName(val);\n            } else if (\"linkpath\".equals(key)) {\n                currEntry.setLinkName(val);\n            } else if (\"gid\".equals(key)) {\n                currEntry.setGroupId(Integer.parseInt(val));\n            } else if (\"gname\".equals(key)) {\n                currEntry.setGroupName(val);\n            } else if (\"uid\".equals(key)) {\n                currEntry.setUserId(Integer.parseInt(val));\n            } else if (\"uname\".equals(key)) {\n                currEntry.setUserName(val);\n            } else if (\"size\".equals(key)) {\n                currEntry.setSize(Long.parseLong(val));\n            } else if (\"mtime\".equals(key)) {\n                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n            } else if (\"SCHILY.devminor\".equals(key)) {\n                currEntry.setDevMinor(Integer.parseInt(val));\n            } else if (\"SCHILY.devmajor\".equals(key)) {\n                currEntry.setDevMajor(Integer.parseInt(val));\n            } else if (\"SCHILY.ino\".equals(key)) { //Fixed line\n                currEntry.setINode(Long.parseLong(val)); //Fixed line\n            }\n        }\n    }", "diff": "", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n    for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        } else if (\"realSize\".equals(key)) { // add this condition\n            currEntry.setCompressedSize(Long.parseLong(val)); // set compressed size from \"realSize\" header\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -1,5 +1,5 @@\n private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n-        for (Entry<String, String> ent : headers.entrySet()) {\n+    for (Entry<String, String> ent : headers.entrySet()) {\n         String key = ent.getKey();\n         String val = ent.getValue();\n         if (\"path\".equals(key)) {\n@@ -22,6 +22,8 @@\n             currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n             currEntry.setDevMajor(Integer.parseInt(val));\n+        } else if (\"realSize\".equals(key)) { // add this condition\n+            currEntry.setCompressedSize(Long.parseLong(val)); // set compressed size from \"realSize\" header\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        switch (key) {\n            case \"path\":\n                currEntry.setName(val);\n                break;\n            case \"linkpath\":\n                currEntry.setLinkName(val);\n                break;\n            case \"gid\":\n                try {\n                    currEntry.setGroupId(Integer.parseInt(val));\n                } catch (NumberFormatException e) {\n                    // handle invalid number format gracefully\n                }\n                break;\n            case \"gname\":\n                currEntry.setGroupName(val);\n                break;\n            case \"uid\":\n                try {\n                    currEntry.setUserId(Integer.parseInt(val));\n                } catch (NumberFormatException e) {\n                    // handle invalid number format gracefully\n                }\n                break;\n            case \"uname\":\n                currEntry.setUserName(val);\n                break;\n            case \"size\":\n                try {\n                    currEntry.setSize(Long.parseLong(val));\n                } catch (NumberFormatException e) {\n                    // handle invalid number format gracefully\n                }\n                break;\n            case \"mtime\":\n                try {\n                    currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n                } catch (NumberFormatException e) {\n                    // handle invalid number format gracefully\n                }\n                break;\n            case \"SCHILY.devminor\":\n                try {\n                    currEntry.setDevMinor(Integer.parseInt(val));\n                } catch (NumberFormatException e) {\n                    // handle invalid number format gracefully\n                }\n                break;\n            case \"SCHILY.devmajor\":\n                try {\n                    currEntry.setDevMajor(Integer.parseInt(val));\n                } catch (NumberFormatException e) {\n                    // handle invalid number format gracefully\n                }\n                break;\n            default:\n                // handle unknown header keys gracefully\n                break;\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -2,26 +2,64 @@\n         for (Entry<String, String> ent : headers.entrySet()) {\n         String key = ent.getKey();\n         String val = ent.getValue();\n-        if (\"path\".equals(key)) {\n-            currEntry.setName(val);\n-        } else if (\"linkpath\".equals(key)) {\n-            currEntry.setLinkName(val);\n-        } else if (\"gid\".equals(key)) {\n-            currEntry.setGroupId(Integer.parseInt(val));\n-        } else if (\"gname\".equals(key)) {\n-            currEntry.setGroupName(val);\n-        } else if (\"uid\".equals(key)) {\n-            currEntry.setUserId(Integer.parseInt(val));\n-        } else if (\"uname\".equals(key)) {\n-            currEntry.setUserName(val);\n-        } else if (\"size\".equals(key)) {\n-            currEntry.setSize(Long.parseLong(val));\n-        } else if (\"mtime\".equals(key)) {\n-            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n-        } else if (\"SCHILY.devminor\".equals(key)) {\n-            currEntry.setDevMinor(Integer.parseInt(val));\n-        } else if (\"SCHILY.devmajor\".equals(key)) {\n-            currEntry.setDevMajor(Integer.parseInt(val));\n+        switch (key) {\n+            case \"path\":\n+                currEntry.setName(val);\n+                break;\n+            case \"linkpath\":\n+                currEntry.setLinkName(val);\n+                break;\n+            case \"gid\":\n+                try {\n+                    currEntry.setGroupId(Integer.parseInt(val));\n+                } catch (NumberFormatException e) {\n+                    // handle invalid number format gracefully\n+                }\n+                break;\n+            case \"gname\":\n+                currEntry.setGroupName(val);\n+                break;\n+            case \"uid\":\n+                try {\n+                    currEntry.setUserId(Integer.parseInt(val));\n+                } catch (NumberFormatException e) {\n+                    // handle invalid number format gracefully\n+                }\n+                break;\n+            case \"uname\":\n+                currEntry.setUserName(val);\n+                break;\n+            case \"size\":\n+                try {\n+                    currEntry.setSize(Long.parseLong(val));\n+                } catch (NumberFormatException e) {\n+                    // handle invalid number format gracefully\n+                }\n+                break;\n+            case \"mtime\":\n+                try {\n+                    currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n+                } catch (NumberFormatException e) {\n+                    // handle invalid number format gracefully\n+                }\n+                break;\n+            case \"SCHILY.devminor\":\n+                try {\n+                    currEntry.setDevMinor(Integer.parseInt(val));\n+                } catch (NumberFormatException e) {\n+                    // handle invalid number format gracefully\n+                }\n+                break;\n+            case \"SCHILY.devmajor\":\n+                try {\n+                    currEntry.setDevMajor(Integer.parseInt(val));\n+                } catch (NumberFormatException e) {\n+                    // handle invalid number format gracefully\n+                }\n+                break;\n+            default:\n+                // handle unknown header keys gracefully\n+                break;\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key) || \"SCHILY.4.0.modificationtime\".equals(key)) { // fix for incorrect header key\n            currEntry.setModTime(Long.parseLong(val) * 1000); // fix for incorrect conversion\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        }\n    }\n}\n\n## Fixed Function 2\nprivate void readPaxHeaders() throws IOException {\n        String line;\n        Map<String, String> headers = new HashMap<String, String>();\n        while ((line = readLine()) != null && !line.isEmpty()) {\n            if (line.charAt(0) == ' ') {\n                line = headers.get(headers.size() - 1) + line.substring(1); // fix for incorrect index\n                headers.put(headers.size() - 1, line); // fix for incorrect index\n            } else {\n                int colon = line.indexOf(':');\n                if (colon == -1) {\n                    continue;\n                }\n                String key = line.substring(0, colon);\n                String value = line.substring(colon + 1).trim();\n                headers.put(key, value);\n            }\n        }\n        if (!headers.isEmpty()) {\n            applyPaxHeadersToCurrentEntry(headers);\n        }\n    }", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -16,8 +16,8 @@\n             currEntry.setUserName(val);\n         } else if (\"size\".equals(key)) {\n             currEntry.setSize(Long.parseLong(val));\n-        } else if (\"mtime\".equals(key)) {\n-            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n+        } else if (\"mtime\".equals(key) || \"SCHILY.4.0.modificationtime\".equals(key)) { // fix for incorrect header key\n+            currEntry.setModTime(Long.parseLong(val) * 1000); // fix for incorrect conversion\n         } else if (\"SCHILY.devminor\".equals(key)) {\n             currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            currEntry.setModTime((long) (Float.parseFloat(val) * 1000));\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -17,7 +17,7 @@\n         } else if (\"size\".equals(key)) {\n             currEntry.setSize(Long.parseLong(val));\n         } else if (\"mtime\".equals(key)) {\n-            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n+            currEntry.setModTime((long) (Float.parseFloat(val) * 1000));\n         } else if (\"SCHILY.devminor\".equals(key)) {\n             currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n    for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Long.parseLong(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Long.parseLong(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -1,5 +1,5 @@\n private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n-        for (Entry<String, String> ent : headers.entrySet()) {\n+    for (Entry<String, String> ent : headers.entrySet()) {\n         String key = ent.getKey();\n         String val = ent.getValue();\n         if (\"path\".equals(key)) {\n@@ -7,11 +7,11 @@\n         } else if (\"linkpath\".equals(key)) {\n             currEntry.setLinkName(val);\n         } else if (\"gid\".equals(key)) {\n-            currEntry.setGroupId(Integer.parseInt(val));\n+            currEntry.setGroupId(Long.parseLong(val));\n         } else if (\"gname\".equals(key)) {\n             currEntry.setGroupName(val);\n         } else if (\"uid\".equals(key)) {\n-            currEntry.setUserId(Integer.parseInt(val));\n+            currEntry.setUserId(Long.parseLong(val));\n         } else if (\"uname\".equals(key)) {\n             currEntry.setUserName(val);\n         } else if (\"size\".equals(key)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        } else if (\"SCHILY.devminor\".equals(key)) { // changed the order to set DevMinor after DevMajor\n            currEntry.setDevMinor(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -18,10 +18,10 @@\n             currEntry.setSize(Long.parseLong(val));\n         } else if (\"mtime\".equals(key)) {\n             currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n-        } else if (\"SCHILY.devminor\".equals(key)) {\n-            currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n             currEntry.setDevMajor(Integer.parseInt(val));\n+        } else if (\"SCHILY.devminor\".equals(key)) { // changed the order to set DevMinor after DevMajor\n+            currEntry.setDevMinor(Integer.parseInt(val));\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n    for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            currEntry.setModTime(Math.round(Double.parseDouble(val) * 1000));\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -1,5 +1,5 @@\n private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n-        for (Entry<String, String> ent : headers.entrySet()) {\n+    for (Entry<String, String> ent : headers.entrySet()) {\n         String key = ent.getKey();\n         String val = ent.getValue();\n         if (\"path\".equals(key)) {\n@@ -17,7 +17,7 @@\n         } else if (\"size\".equals(key)) {\n             currEntry.setSize(Long.parseLong(val));\n         } else if (\"mtime\".equals(key)) {\n-            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n+            currEntry.setModTime(Math.round(Double.parseDouble(val) * 1000));\n         } else if (\"SCHILY.devminor\".equals(key)) {\n             currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        } else if (\"SCHILY.ino\".equals(key)) {\n            currEntry.setFileId(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -22,6 +22,8 @@\n             currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n             currEntry.setDevMajor(Integer.parseInt(val));\n+        } else if (\"SCHILY.ino\".equals(key)) {\n+            currEntry.setFileId(Integer.parseInt(val));\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            try {\n                currEntry.setModTime(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(val).getTime());\n            } catch (ParseException e) {\n                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n            }\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -17,7 +17,11 @@\n         } else if (\"size\".equals(key)) {\n             currEntry.setSize(Long.parseLong(val));\n         } else if (\"mtime\".equals(key)) {\n-            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n+            try {\n+                currEntry.setModTime(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(val).getTime());\n+            } catch (ParseException e) {\n+                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n+            }\n         } else if (\"SCHILY.devminor\".equals(key)) {\n             currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n    for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Long.parseLong(val)); // Fixed: Use `Long.parseLong` instead of `Integer.parseInt`\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Long.parseLong(val)); // Fixed: Use `Long.parseLong` instead of `Integer.parseInt`\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -1,5 +1,5 @@\n private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n-        for (Entry<String, String> ent : headers.entrySet()) {\n+    for (Entry<String, String> ent : headers.entrySet()) {\n         String key = ent.getKey();\n         String val = ent.getValue();\n         if (\"path\".equals(key)) {\n@@ -7,11 +7,11 @@\n         } else if (\"linkpath\".equals(key)) {\n             currEntry.setLinkName(val);\n         } else if (\"gid\".equals(key)) {\n-            currEntry.setGroupId(Integer.parseInt(val));\n+            currEntry.setGroupId(Long.parseLong(val)); // Fixed: Use `Long.parseLong` instead of `Integer.parseInt`\n         } else if (\"gname\".equals(key)) {\n             currEntry.setGroupName(val);\n         } else if (\"uid\".equals(key)) {\n-            currEntry.setUserId(Integer.parseInt(val));\n+            currEntry.setUserId(Long.parseLong(val)); // Fixed: Use `Long.parseLong` instead of `Integer.parseInt`\n         } else if (\"uname\".equals(key)) {\n             currEntry.setUserName(val);\n         } else if (\"size\".equals(key)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        } else if (\"SCHILY.ino\".equals(key)) { // Fix for missing \"ino\" mapping\n            currEntry.setInode(Long.parseLong(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -22,6 +22,8 @@\n             currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n             currEntry.setDevMajor(Integer.parseInt(val));\n+        } else if (\"SCHILY.ino\".equals(key)) { // Fix for missing \"ino\" mapping\n+            currEntry.setInode(Long.parseLong(val));\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n    for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            Double dVal = Double.valueOf(val);\n            long lVal = (long) (dVal * 1000);\n            currEntry.setModTime(lVal);\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -1,5 +1,5 @@\n private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n-        for (Entry<String, String> ent : headers.entrySet()) {\n+    for (Entry<String, String> ent : headers.entrySet()) {\n         String key = ent.getKey();\n         String val = ent.getValue();\n         if (\"path\".equals(key)) {\n@@ -17,7 +17,9 @@\n         } else if (\"size\".equals(key)) {\n             currEntry.setSize(Long.parseLong(val));\n         } else if (\"mtime\".equals(key)) {\n-            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n+            Double dVal = Double.valueOf(val);\n+            long lVal = (long) (dVal * 1000);\n+            currEntry.setModTime(lVal);\n         } else if (\"SCHILY.devminor\".equals(key)) {\n             currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n    for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Long.parseLong(val)); // Use Long.parseLong instead of Integer.parseInt\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Long.parseLong(val)); // Use Long.parseLong instead of Integer.parseInt\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -1,5 +1,5 @@\n private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n-        for (Entry<String, String> ent : headers.entrySet()) {\n+    for (Entry<String, String> ent : headers.entrySet()) {\n         String key = ent.getKey();\n         String val = ent.getValue();\n         if (\"path\".equals(key)) {\n@@ -7,11 +7,11 @@\n         } else if (\"linkpath\".equals(key)) {\n             currEntry.setLinkName(val);\n         } else if (\"gid\".equals(key)) {\n-            currEntry.setGroupId(Integer.parseInt(val));\n+            currEntry.setGroupId(Long.parseLong(val)); // Use Long.parseLong instead of Integer.parseInt\n         } else if (\"gname\".equals(key)) {\n             currEntry.setGroupName(val);\n         } else if (\"uid\".equals(key)) {\n-            currEntry.setUserId(Integer.parseInt(val));\n+            currEntry.setUserId(Long.parseLong(val)); // Use Long.parseLong instead of Integer.parseInt\n         } else if (\"uname\".equals(key)) {\n             currEntry.setUserName(val);\n         } else if (\"size\".equals(key)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n    for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Long.parseLong(val)); // fix: changed Integer.parseInt to Long.parseLong\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Long.parseLong(val)); // fix: changed Integer.parseInt to Long.parseLong\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -1,5 +1,5 @@\n private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n-        for (Entry<String, String> ent : headers.entrySet()) {\n+    for (Entry<String, String> ent : headers.entrySet()) {\n         String key = ent.getKey();\n         String val = ent.getValue();\n         if (\"path\".equals(key)) {\n@@ -7,11 +7,11 @@\n         } else if (\"linkpath\".equals(key)) {\n             currEntry.setLinkName(val);\n         } else if (\"gid\".equals(key)) {\n-            currEntry.setGroupId(Integer.parseInt(val));\n+            currEntry.setGroupId(Long.parseLong(val)); // fix: changed Integer.parseInt to Long.parseLong\n         } else if (\"gname\".equals(key)) {\n             currEntry.setGroupName(val);\n         } else if (\"uid\".equals(key)) {\n-            currEntry.setUserId(Integer.parseInt(val));\n+            currEntry.setUserId(Long.parseLong(val)); // fix: changed Integer.parseInt to Long.parseLong\n         } else if (\"uname\".equals(key)) {\n             currEntry.setUserName(val);\n         } else if (\"size\".equals(key)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        if (\"path\".equals(key)) {\n            currEntry.setName(val);\n        } else if (\"linkpath\".equals(key)) {\n            currEntry.setLinkName(val);\n        } else if (\"gid\".equals(key)) {\n            currEntry.setGroupId(Integer.parseInt(val));\n        } else if (\"gname\".equals(key)) {\n            currEntry.setGroupName(val);\n        } else if (\"uid\".equals(key)) {\n            currEntry.setUserId(Integer.parseInt(val));\n        } else if (\"uname\".equals(key)) {\n            currEntry.setUserName(val);\n        } else if (\"size\".equals(key)) {\n            currEntry.setSize(Long.parseLong(val));\n        } else if (\"mtime\".equals(key)) {\n            double modtime = Double.parseDouble(val);\n            long modTimeMillis = (long) (modtime * 1000);\n            currEntry.setModTime(modTimeMillis);\n        } else if (\"SCHILY.devminor\".equals(key)) {\n            currEntry.setDevMinor(Integer.parseInt(val));\n        } else if (\"SCHILY.devmajor\".equals(key)) {\n            currEntry.setDevMajor(Integer.parseInt(val));\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -17,7 +17,9 @@\n         } else if (\"size\".equals(key)) {\n             currEntry.setSize(Long.parseLong(val));\n         } else if (\"mtime\".equals(key)) {\n-            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n+            double modtime = Double.parseDouble(val);\n+            long modTimeMillis = (long) (modtime * 1000);\n+            currEntry.setModTime(modTimeMillis);\n         } else if (\"SCHILY.devminor\".equals(key)) {\n             currEntry.setDevMinor(Integer.parseInt(val));\n         } else if (\"SCHILY.devmajor\".equals(key)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        for (Entry<String, String> ent : headers.entrySet()) {\n        String key = ent.getKey();\n        String val = ent.getValue();\n        switch(key){\n            case \"path\":\n                currEntry.setName(val);\n                break;\n            case \"linkpath\":\n                currEntry.setLinkName(val);\n                break;\n            case \"gid\":\n                currEntry.setGroupId(Integer.parseInt(val));\n                break;\n            case \"gname\":\n                currEntry.setGroupName(val);\n                break;\n            case \"uid\":\n                currEntry.setUserId(Integer.parseInt(val));\n                break;\n            case \"uname\":\n                currEntry.setUserName(val);\n                break;\n            case \"size\":\n                currEntry.setSize(Long.parseLong(val));\n                break;\n            case \"mtime\":\n                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n                break;\n            case \"SCHILY.devminor\":\n                currEntry.setDevMinor(Integer.parseInt(val));\n                break;\n            case \"SCHILY.devmajor\":\n                currEntry.setDevMajor(Integer.parseInt(val));\n                break;\n            default:\n                // Do not set if key is not valid\n                break;\n        }\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java@applyPaxHeadersToCurrentEntry\n@@ -2,26 +2,40 @@\n         for (Entry<String, String> ent : headers.entrySet()) {\n         String key = ent.getKey();\n         String val = ent.getValue();\n-        if (\"path\".equals(key)) {\n-            currEntry.setName(val);\n-        } else if (\"linkpath\".equals(key)) {\n-            currEntry.setLinkName(val);\n-        } else if (\"gid\".equals(key)) {\n-            currEntry.setGroupId(Integer.parseInt(val));\n-        } else if (\"gname\".equals(key)) {\n-            currEntry.setGroupName(val);\n-        } else if (\"uid\".equals(key)) {\n-            currEntry.setUserId(Integer.parseInt(val));\n-        } else if (\"uname\".equals(key)) {\n-            currEntry.setUserName(val);\n-        } else if (\"size\".equals(key)) {\n-            currEntry.setSize(Long.parseLong(val));\n-        } else if (\"mtime\".equals(key)) {\n-            currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n-        } else if (\"SCHILY.devminor\".equals(key)) {\n-            currEntry.setDevMinor(Integer.parseInt(val));\n-        } else if (\"SCHILY.devmajor\".equals(key)) {\n-            currEntry.setDevMajor(Integer.parseInt(val));\n+        switch(key){\n+            case \"path\":\n+                currEntry.setName(val);\n+                break;\n+            case \"linkpath\":\n+                currEntry.setLinkName(val);\n+                break;\n+            case \"gid\":\n+                currEntry.setGroupId(Integer.parseInt(val));\n+                break;\n+            case \"gname\":\n+                currEntry.setGroupName(val);\n+                break;\n+            case \"uid\":\n+                currEntry.setUserId(Integer.parseInt(val));\n+                break;\n+            case \"uname\":\n+                currEntry.setUserName(val);\n+                break;\n+            case \"size\":\n+                currEntry.setSize(Long.parseLong(val));\n+                break;\n+            case \"mtime\":\n+                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n+                break;\n+            case \"SCHILY.devminor\":\n+                currEntry.setDevMinor(Integer.parseInt(val));\n+                break;\n+            case \"SCHILY.devmajor\":\n+                currEntry.setDevMajor(Integer.parseInt(val));\n+                break;\n+            default:\n+                // Do not set if key is not valid\n+                break;\n         }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]