[{"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    return value.toEngineeringString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toEngineeringString();\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toEngineeringString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,4 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    return value.toEngineeringString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,7 +5,7 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toEngineeringString();\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,9 +5,9 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toEngineeringString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    // return value.toString();\n    // Fixed code\n    return value.toPlainString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toEngineeringString());\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toEngineeringString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,6 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    // return value.toString();\n+    // Fixed code\n+    return value.toPlainString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,14 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toEngineeringString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,6 +1,5 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n@@ -10,6 +9,6 @@\n     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toEngineeringString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if(value.scale() <= 0){\n        return value.toString();\n    }else{\n        return value.stripTrailingZeros().toPlainString();\n    }\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toString());\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,8 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if(value.scale() <= 0){\n+        return value.toString();\n+    }else{\n+        return value.stripTrailingZeros().toPlainString();\n+    }\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,11 +5,11 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,11 +5,11 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() < 0) {\n        value = value.setScale(0, RoundingMode.UNNECESSARY);\n    } else if (value.scale() > 999) {\n        value = value.setScale(999, RoundingMode.HALF_UP);\n    }\n    return value.toString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,9 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n+    if (value.scale() < 0) {\n+        value = value.setScale(0, RoundingMode.UNNECESSARY);\n+    } else if (value.scale() > 999) {\n+        value = value.setScale(999, RoundingMode.HALF_UP);\n+    }\n     return value.toString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,7 +5,7 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,9 +5,9 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    return value.toPlainString(); // fixed to use toPlainString() instead of toString()\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,4 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    return value.toPlainString(); // fixed to use toPlainString() instead of toString()\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,9 +5,9 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    // fixed by limiting the scale of BigDecimal before converting to string\n    BigDecimal fixedValue = value.setScale(10);\n    return fixedValue.toString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        // fixed by using BigDecimal's toEngineeringString method\n        writeRaw(value.toEngineeringString());\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        // fixed by using BigDecimal's toEngineeringString method\n        writeRaw(value.toEngineeringString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,6 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    // fixed by limiting the scale of BigDecimal before converting to string\n+    BigDecimal fixedValue = value.setScale(10);\n+    return fixedValue.toString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -10,6 +10,7 @@\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        // fixed by using BigDecimal's toEngineeringString method\n+        writeRaw(value.toEngineeringString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,11 +5,12 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        // fixed by using BigDecimal's toEngineeringString method\n+        writeRaw(value.toEngineeringString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    return value.toEngineeringString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toEngineeringString();\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toEngineeringString());\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toEngineeringString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toEngineeringString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,4 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    return value.toEngineeringString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,14 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toEngineeringString();\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toEngineeringString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,14 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toEngineeringString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toEngineeringString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if(value.scale() < 0){\n        value = value.setScale(0, RoundingMode.UNNECESSARY);\n    }\n    return value.toString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? \n                     value.toPlainString() : \n                     _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        _asString(value); // prevent possible DoS vector\n        writeRaw(value.toString());\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? \n                     value.toPlainString() : \n                     _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        _asString(value); // prevent possible DoS vector\n        writeRaw(value.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,7 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n+    if(value.scale() < 0){\n+        value = value.setScale(0, RoundingMode.UNNECESSARY);\n+    }\n     return value.toString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,11 +5,14 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? \n+                     value.toPlainString() : \n+                     _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _asString(value); // prevent possible DoS vector\n+        writeRaw(value.toString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,11 +5,14 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? \n+                     value.toPlainString() : \n+                     _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _asString(value); // prevent possible DoS vector\n+        writeRaw(value.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    // fix: return value.toPlainString() to avoid exponential notation\n    return value.toPlainString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        // fix: use writeString instead of writeRaw to properly escape values\n        writeString(value.toPlainString());\n    } else {\n        // fix: use writeString instead of writeRaw to properly escape values\n        writeString(_asString(value));\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        // fix: use writeString instead of writeRaw to properly escape values\n        writeString(value.toPlainString());\n    } else {\n        // fix: use writeString instead of writeRaw to properly escape values\n        writeString(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,5 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    // fix: return value.toPlainString() to avoid exponential notation\n+    return value.toPlainString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -8,8 +8,10 @@\n         String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+        // fix: use writeString instead of writeRaw to properly escape values\n+        writeString(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        // fix: use writeString instead of writeRaw to properly escape values\n+        writeString(_asString(value));\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,11 +5,13 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+        // fix: use writeString instead of writeRaw to properly escape values\n+        writeString(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        // fix: use writeString instead of writeRaw to properly escape values\n+        writeString(_asString(value));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    return value.toEngineeringString(); // Use toEngineeringString() instead of toString()\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toEngineeringString(); // Use toEngineeringString() instead of toString()\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toEngineeringString(); // Use toEngineeringString() instead of toString()\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,4 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    return value.toEngineeringString(); // Use toEngineeringString() instead of toString()\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,7 +5,7 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toEngineeringString(); // Use toEngineeringString() instead of toString()\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,9 +5,9 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toEngineeringString(); // Use toEngineeringString() instead of toString()\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.compareTo(BigDecimal.ZERO) == 0) {\n        // should output \"0\", not \"0.0\"\n        return \"0\";\n    }\n    return value.stripTrailingZeros().toPlainString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        _writeSimpleValue(value);\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        _writeSimpleValue(value);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,8 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.compareTo(BigDecimal.ZERO) == 0) {\n+        // should output \"0\", not \"0.0\"\n+        return \"0\";\n+    }\n+    return value.stripTrailingZeros().toPlainString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,14 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _writeSimpleValue(value);\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,14 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _writeSimpleValue(value);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    return value.toPlainString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,4 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    return value.toPlainString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,7 +5,7 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,9 +5,9 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    // fixed by limiting scale of BigDecimal to 10 before converting to string\n    value = value.setScale(10, RoundingMode.DOWN);\n    return value.toString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else {\n        writeRaw(_asString(value));\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,6 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n+    // fixed by limiting scale of BigDecimal to 10 before converting to string\n+    value = value.setScale(10, RoundingMode.DOWN);\n     return value.toString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,10 +5,8 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n     }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,10 +5,8 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    // Use the toPlainString() method to prevent possible DoS vector\n    return value.toPlainString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        // Always use the toPlainString() method\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toPlainString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        // Call the fixed _asString() method\n        writeRaw(_asString(value));\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        // Always use the toPlainString() method\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toPlainString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        // Call the fixed _asString() method\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,5 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    // Use the toPlainString() method to prevent possible DoS vector\n+    return value.toPlainString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,16 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        // Always use the toPlainString() method\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toPlainString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n+        // Call the fixed _asString() method\n         writeRaw(_asString(value));\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,16 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        // Always use the toPlainString() method\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toPlainString();\n         _writeQuotedRaw(raw);\n     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n+        // Call the fixed _asString() method\n         writeRaw(_asString(value));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    // Use a more efficient way to convert BigDecimal to String\n    return value.toPlainString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toString()); // Use the original method, as it is already fixed\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toString()); // Use the original method, as it is already fixed\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,5 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    // Use a more efficient way to convert BigDecimal to String\n+    return value.toPlainString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -10,6 +10,6 @@\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toString()); // Use the original method, as it is already fixed\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,11 +5,11 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toString()); // Use the original method, as it is already fixed\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    return value.toPlainString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,4 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    return value.toPlainString();\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,9 +5,9 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    return value.toPlainString();\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toPlainString());\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toPlainString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,4 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    return value.toPlainString();\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -10,6 +10,6 @@\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toPlainString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,11 +5,11 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toPlainString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprotected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() <= 0) {\n        return value.unscaledValue().toString();\n    } else if (value.scale() <= 10) {\n        return value.toString();\n    } else {\n        return value.setScale(10, RoundingMode.HALF_UP).toString();\n    }\n}\n\n## Fixed Function 2\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toString());\n    }\n}\n\n## Fixed Function 3\n@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,10 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.scale() <= 0) {\n+        return value.unscaledValue().toString();\n+    } else if (value.scale() <= 10) {\n+        return value.toString();\n+    } else {\n+        return value.setScale(10, RoundingMode.HALF_UP).toString();\n+    }\n }\n--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,11 +5,11 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,11 +5,11 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]