[{"output": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.getTimeInMillis() > 818075684000000L) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == Calendar.MILLISECOND) {\n        return;\n    }\n    // Manually truncate milliseconds, seconds and minutes, rather than using\n    // Calendar methods.\n    Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    // truncate milliseconds\n    if (round && val.get(Calendar.MILLISECOND) >= 500) {\n        time = time + 1000L;\n    }\n    int millisecs = 0;\n    // truncate seconds\n    if (field == Calendar.SECOND) {\n        millisecs = val.get(Calendar.MILLISECOND);\n        if (round && millisecs >= 500) {\n            time = time + 1000L;\n        }\n    }\n    val.setTimeInMillis(time);\n    int seconds = 0;\n    // truncate minutes\n    if (field == Calendar.MINUTE) {\n        millisecs = val.get(Calendar.MILLISECOND);\n        seconds = val.get(Calendar.SECOND);\n        if (round && seconds >= 30) {\n            time = time + 60L * 1000L;\n        }\n        val.setTimeInMillis(time);\n    }\n    done = (field == Calendar.SECOND);\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && !done) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        int hourOfDay = val.get(Calendar.HOUR_OF_DAY);\n                        if (hourOfDay >= 12) {\n                            val.add(Calendar.DATE, 1);\n                        }\n                    } else if (field == Calendar.HOUR_OF_DAY) {\n                        int minute = val.get(Calendar.MINUTE);\n                        if (minute >= 30) {\n                            val.add(Calendar.HOUR_OF_DAY, 1);\n                        }\n                    } else {\n                        int offset = 60;\n                        if (field == Calendar.DAY_OF_MONTH) {\n                            offset = 24;\n                        } else if (field == Calendar.MONTH) {\n                            offset = 12;\n                        }\n                        int value = val.get(field);\n                        if (value >= offset / 2) {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                }\n                return;\n            }\n        }\n        int min = val.getActualMinimum(fields[i][0]);\n        int max = val.getActualMaximum(fields[i][0]);\n        int offset = 0;\n        boolean roundUp = false;\n        if (val.get(fields[i][0]) < min + (max - min) / 2) {\n            offset = val.get(fields[i][0]) - min;\n        } else {\n            offset = max - val.get(fields[i][0]);\n            roundUp = true;\n        }\n        if (offset != 0) {\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            if (fields[i][0] == Calendar.MONTH) {\n                // If we're adjusting the month, we need to re-adjust the day\n                int domMax = val.getActualMaximum(Calendar.DAY_OF_MONTH);\n                int dom = val.get(Calendar.DAY_OF_MONTH);\n                if (dom > domMax) {\n                    val.set(Calendar.DAY_OF_MONTH, domMax);\n                }\n            }\n            if (roundUp) {\n                val.add(fields[i][0], 1);\n            }\n        }\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 20}]