[{"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.isEmpty()) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName + \">\");\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n            // want to show as text, but not contain inside tags (so not a data tag?)\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        } else {\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        }\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (!href.isEmpty()) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName.isEmpty()) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n@@ -26,21 +26,21 @@\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        String data = tq.chompTo(\"</\" + tagName + \">\");\n         Node dataNode;\n-        if (// want to show as text, but not contain inside tags (so not a data tag?)\n-        tag.equals(titleTag) || tag.equals(textareaTag))\n+        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n+            // want to show as text, but not contain inside tags (so not a data tag?)\n             dataNode = TextNode.createFromEncoded(data, baseUri);\n-        else\n+        } else {\n             // data not encoded but raw (for \" in script)\n             dataNode = new DataNode(data, baseUri);\n+        }\n         child.appendChild(dataNode);\n     }\n     // <base href>: update the base uri\n     if (child.tagName().equals(\"base\")) {\n         String href = child.absUrl(\"href\");\n-        if (href.length() != 0) {\n+        if (!href.isEmpty()) {\n             // ignore <base target> etc\n             baseUri = href;\n             // set on the doc so doc.createElement(Tag) will get updated base\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName == null || tagName.length() == 0) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName.toLowerCase(Locale.ENGLISH)); // use lowercase for tag name\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName);\n        tq.chompTo(\">\");\n        Node dataNode;\n        if (// want to show as text, but not contain inside tags (so not a data tag?)\n        tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        else\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName == null || tagName.length() == 0) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n@@ -13,7 +13,7 @@\n         if (attribute != null)\n             attributes.put(attribute);\n     }\n-    Tag tag = Tag.valueOf(tagName);\n+    Tag tag = Tag.valueOf(tagName.toLowerCase(Locale.ENGLISH)); // use lowercase for tag name\n     Element child = new Element(tag, baseUri, attributes);\n     // empty element if empty tag (e.g. img) or self-closed el (<div/>\n     boolean isEmptyElement = tag.isEmpty();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName == null || tagName.length() == 0) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName);\n        tq.consume(\"</\" + tagName); //tq.chompTo(\">\") chomps from the start of the tag\n        Node dataNode;\n        if (// want to show as text, but not contain inside tags (so not a data tag?)\n        tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        else\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (\"base\".equalsIgnoreCase(child.tagName())) { //lowercase the tag name to complete case-insensitive check\n        String href = child.absUrl(\"href\");\n        if (href != null && href.length() != 0) { //add null check\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName == null || tagName.length() == 0) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n@@ -27,7 +27,7 @@\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n         String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        tq.consume(\"</\" + tagName); //tq.chompTo(\">\") chomps from the start of the tag\n         Node dataNode;\n         if (// want to show as text, but not contain inside tags (so not a data tag?)\n         tag.equals(titleTag) || tag.equals(textareaTag))\n@@ -38,9 +38,9 @@\n         child.appendChild(dataNode);\n     }\n     // <base href>: update the base uri\n-    if (child.tagName().equals(\"base\")) {\n+    if (\"base\".equalsIgnoreCase(child.tagName())) { //lowercase the tag name to complete case-insensitive check\n         String href = child.absUrl(\"href\");\n-        if (href.length() != 0) {\n+        if (href != null && href.length() != 0) { //add null check\n             // ignore <base target> etc\n             baseUri = href;\n             // set on the doc so doc.createElement(Tag) will get updated base\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName == null) {\n        // add < back on stack and handle as text\n        tq.addFirst(\"<\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName);\n        tq.matchChomp(\">\");\n        Node dataNode;\n        if (// show as text, but not contain inside tags (so not a data tag?)\n        tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        else\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,9 +1,9 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n-        // doesn't look like a start tag after all; put < back on stack and handle as text\n-        tq.addFirst(\"&lt;\");\n+    if (tagName == null) {\n+        // add < back on stack and handle as text\n+        tq.addFirst(\"<\");\n         parseTextNode();\n         return;\n     }\n@@ -27,9 +27,9 @@\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n         String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        tq.matchChomp(\">\");\n         Node dataNode;\n-        if (// want to show as text, but not contain inside tags (so not a data tag?)\n+        if (// show as text, but not contain inside tags (so not a data tag?)\n         tag.equals(titleTag) || tag.equals(textareaTag))\n             dataNode = TextNode.createFromEncoded(data, baseUri);\n         else\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.isEmpty()) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName + \">\");\n        Node dataNode;\n        if (// want to show as text, but not contain inside tags (so not a data tag?)\n        tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        else\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName.isEmpty()) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n@@ -26,8 +26,7 @@\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        String data = tq.chompTo(\"</\" + tagName + \">\");\n         Node dataNode;\n         if (// want to show as text, but not contain inside tags (so not a data tag?)\n         tag.equals(titleTag) || tag.equals(textareaTag))\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.length() == 0) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    boolean isEmptyElement = tag.isEmpty();\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    Element child = new Element(tag, baseUri, attributes);\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName);\n        tq.chompTo(\">\");\n        Node dataNode;\n        if (// want to show as text, but not contain inside tags (so not a data tag?)\n        tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        else\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -14,15 +14,15 @@\n             attributes.put(attribute);\n     }\n     Tag tag = Tag.valueOf(tagName);\n-    Element child = new Element(tag, baseUri, attributes);\n+    boolean isEmptyElement = tag.isEmpty();\n     // empty element if empty tag (e.g. img) or self-closed el (<div/>\n-    boolean isEmptyElement = tag.isEmpty();\n     if (tq.matchChomp(\"/>\")) {\n         // close empty element or tag\n         isEmptyElement = true;\n     } else {\n         tq.matchChomp(\">\");\n     }\n+    Element child = new Element(tag, baseUri, attributes);\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.isEmpty()) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"<\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName);\n        tq.matchChomp(\">\");\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        } else {\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        }\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (!href.isEmpty()) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,9 +1,9 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName.isEmpty()) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n-        tq.addFirst(\"&lt;\");\n+        tq.addFirst(\"<\");\n         parseTextNode();\n         return;\n     }\n@@ -27,20 +27,20 @@\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n         String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        tq.matchChomp(\">\");\n         Node dataNode;\n-        if (// want to show as text, but not contain inside tags (so not a data tag?)\n-        tag.equals(titleTag) || tag.equals(textareaTag))\n+        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n             dataNode = TextNode.createFromEncoded(data, baseUri);\n-        else\n+        } else {\n             // data not encoded but raw (for \" in script)\n             dataNode = new DataNode(data, baseUri);\n+        }\n         child.appendChild(dataNode);\n     }\n     // <base href>: update the base uri\n     if (child.tagName().equals(\"base\")) {\n         String href = child.absUrl(\"href\");\n-        if (href.length() != 0) {\n+        if (!href.isEmpty()) {\n             // ignore <base target> etc\n             baseUri = href;\n             // set on the doc so doc.createElement(Tag) will get updated base\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.consumeTo(\"</\" + tagName);\n        data = Entities.escape(data);\n        Node dataNode = new DataNode(data, baseUri);\n        if (tag.preserveWhitespace()) {\n            dataNode.setAsEncoded();\n        }\n        child.appendChild(dataNode);\n        tq.matchChomp(\"</\" + tagName + \">\");\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,8 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n-        // doesn't look like a start tag after all; put < back on stack and handle as text\n+    if (tagName.isEmpty()) {\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n         return;\n@@ -26,16 +25,14 @@\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n-        Node dataNode;\n-        if (// want to show as text, but not contain inside tags (so not a data tag?)\n-        tag.equals(titleTag) || tag.equals(textareaTag))\n-            dataNode = TextNode.createFromEncoded(data, baseUri);\n-        else\n-            // data not encoded but raw (for \" in script)\n-            dataNode = new DataNode(data, baseUri);\n+        String data = tq.consumeTo(\"</\" + tagName);\n+        data = Entities.escape(data);\n+        Node dataNode = new DataNode(data, baseUri);\n+        if (tag.preserveWhitespace()) {\n+            dataNode.setAsEncoded();\n+        }\n         child.appendChild(dataNode);\n+        tq.matchChomp(\"</\" + tagName + \">\");\n     }\n     // <base href>: update the base uri\n     if (child.tagName().equals(\"base\")) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName == null || tagName.length() == 0) { // check if tagName is null\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName);\n        tq.chompTo(\">\");\n        Node dataNode;\n        if (// want to show as text, but not contain inside tags (so not a data tag?)\n        tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        else\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName == null || tagName.length() == 0) { // check if tagName is null\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.length() == 0) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    if (tag == null) {\n        // not a valid tag, handle as text\n        tq.addFirst(\"<\" + tagName + \">\");\n        parseTextNode();\n        return;\n    }\n    Element child = new Element(tag, baseUri, attributes);\n\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>)\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName);\n        tq.chompTo(\">\");\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        } else {\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        }\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -14,8 +14,15 @@\n             attributes.put(attribute);\n     }\n     Tag tag = Tag.valueOf(tagName);\n+    if (tag == null) {\n+        // not a valid tag, handle as text\n+        tq.addFirst(\"<\" + tagName + \">\");\n+        parseTextNode();\n+        return;\n+    }\n     Element child = new Element(tag, baseUri, attributes);\n-    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n+\n+    // empty element if empty tag (e.g. img) or self-closed el (<div/>)\n     boolean isEmptyElement = tag.isEmpty();\n     if (tq.matchChomp(\"/>\")) {\n         // close empty element or tag\n@@ -24,17 +31,18 @@\n         tq.matchChomp(\">\");\n     }\n     addChildToParent(child, isEmptyElement);\n+\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n         String data = tq.chompTo(\"</\" + tagName);\n         tq.chompTo(\">\");\n         Node dataNode;\n-        if (// want to show as text, but not contain inside tags (so not a data tag?)\n-        tag.equals(titleTag) || tag.equals(textareaTag))\n+        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n             dataNode = TextNode.createFromEncoded(data, baseUri);\n-        else\n+        } else {\n             // data not encoded but raw (for \" in script)\n             dataNode = new DataNode(data, baseUri);\n+        }\n         child.appendChild(dataNode);\n     }\n     // <base href>: update the base uri\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.length() == 0) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompBalanced('<', '>', \"</\" + tagName);\n        Node dataNode;\n        if (// want to show as text, but not contain inside tags (so not a data tag?)\n        tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        else\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equalsIgnoreCase(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -26,8 +26,7 @@\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        String data = tq.chompBalanced('<', '>', \"</\" + tagName);\n         Node dataNode;\n         if (// want to show as text, but not contain inside tags (so not a data tag?)\n         tag.equals(titleTag) || tag.equals(textareaTag))\n@@ -38,7 +37,7 @@\n         child.appendChild(dataNode);\n     }\n     // <base href>: update the base uri\n-    if (child.tagName().equals(\"base\")) {\n+    if (child.tagName().equalsIgnoreCase(\"base\")) {\n         String href = child.absUrl(\"href\");\n         if (href.length() != 0) {\n             // ignore <base target> etc\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.isEmpty()) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null) {\n            attributes.put(attribute);\n        } else {\n            break;\n        }\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.consumeTo(\"</\" + tagName, false);\n        tq.consumeTo(\">\", true);\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        } else {\n            dataNode = new DataNode(data, baseUri);\n        }\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (!href.isEmpty()) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName.isEmpty()) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n@@ -10,8 +10,11 @@\n     Attributes attributes = new Attributes();\n     while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n         Attribute attribute = parseAttribute();\n-        if (attribute != null)\n+        if (attribute != null) {\n             attributes.put(attribute);\n+        } else {\n+            break;\n+        }\n     }\n     Tag tag = Tag.valueOf(tagName);\n     Element child = new Element(tag, baseUri, attributes);\n@@ -26,21 +29,20 @@\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        String data = tq.consumeTo(\"</\" + tagName, false);\n+        tq.consumeTo(\">\", true);\n         Node dataNode;\n-        if (// want to show as text, but not contain inside tags (so not a data tag?)\n-        tag.equals(titleTag) || tag.equals(textareaTag))\n+        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n             dataNode = TextNode.createFromEncoded(data, baseUri);\n-        else\n-            // data not encoded but raw (for \" in script)\n+        } else {\n             dataNode = new DataNode(data, baseUri);\n+        }\n         child.appendChild(dataNode);\n     }\n     // <base href>: update the base uri\n     if (child.tagName().equals(\"base\")) {\n         String href = child.absUrl(\"href\");\n-        if (href.length() != 0) {\n+        if (!href.isEmpty()) {\n             // ignore <base target> etc\n             baseUri = href;\n             // set on the doc so doc.createElement(Tag) will get updated base\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.length() == 0) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName + \">\");\n        // fix: check if data ends with \"</\" + tagName + \">\" before chomping\n        if (!data.endsWith(\"</\" + tagName + \">\")) {\n            // if the input html string is malformed, handle as text content\n            tq.addFirst(data);\n            parseTextNode();\n            return;\n        }\n        data = data.substring(0, data.length() - tagName.length() - 3);\n        Node dataNode;\n        if (// want to show as text, but not contain inside tags (so not a data tag?)\n        tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        else\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -26,8 +26,15 @@\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        String data = tq.chompTo(\"</\" + tagName + \">\");\n+        // fix: check if data ends with \"</\" + tagName + \">\" before chomping\n+        if (!data.endsWith(\"</\" + tagName + \">\")) {\n+            // if the input html string is malformed, handle as text content\n+            tq.addFirst(data);\n+            parseTextNode();\n+            return;\n+        }\n+        data = data.substring(0, data.length() - tagName.length() - 3);\n         Node dataNode;\n         if (// want to show as text, but not contain inside tags (so not a data tag?)\n         tag.equals(titleTag) || tag.equals(textareaTag))\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.isEmpty()) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"<\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null) {\n            attributes.put(attribute);\n        }\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.consumeTo(\"</\" + tagName);\n        tq.consume(\"</\" + tagName);\n        Node dataNode;\n        if (// want to show as text, but not contain inside tags (so not a data tag?)\n        tag.equals(titleTag) || tag.equals(textareaTag)) {\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        }\n        else {\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        }\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (!href.isEmpty()) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,17 +1,18 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName.isEmpty()) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n-        tq.addFirst(\"&lt;\");\n+        tq.addFirst(\"<\");\n         parseTextNode();\n         return;\n     }\n     Attributes attributes = new Attributes();\n     while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n         Attribute attribute = parseAttribute();\n-        if (attribute != null)\n+        if (attribute != null) {\n             attributes.put(attribute);\n+        }\n     }\n     Tag tag = Tag.valueOf(tagName);\n     Element child = new Element(tag, baseUri, attributes);\n@@ -26,21 +27,23 @@\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        String data = tq.consumeTo(\"</\" + tagName);\n+        tq.consume(\"</\" + tagName);\n         Node dataNode;\n         if (// want to show as text, but not contain inside tags (so not a data tag?)\n-        tag.equals(titleTag) || tag.equals(textareaTag))\n+        tag.equals(titleTag) || tag.equals(textareaTag)) {\n             dataNode = TextNode.createFromEncoded(data, baseUri);\n-        else\n+        }\n+        else {\n             // data not encoded but raw (for \" in script)\n             dataNode = new DataNode(data, baseUri);\n+        }\n         child.appendChild(dataNode);\n     }\n     // <base href>: update the base uri\n     if (child.tagName().equals(\"base\")) {\n         String href = child.absUrl(\"href\");\n-        if (href.length() != 0) {\n+        if (!href.isEmpty()) {\n             // ignore <base target> etc\n             baseUri = href;\n             // set on the doc so doc.createElement(Tag) will get updated base\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName == null || tagName.length() == 0) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName);\n        tq.chompTo(\">\");\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n            // want to show as text, but not contain inside tags (so not a data tag?)\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        } else {\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        }\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equalsIgnoreCase(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName == null || tagName.length() == 0) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n@@ -29,16 +29,17 @@\n         String data = tq.chompTo(\"</\" + tagName);\n         tq.chompTo(\">\");\n         Node dataNode;\n-        if (// want to show as text, but not contain inside tags (so not a data tag?)\n-        tag.equals(titleTag) || tag.equals(textareaTag))\n+        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n+            // want to show as text, but not contain inside tags (so not a data tag?)\n             dataNode = TextNode.createFromEncoded(data, baseUri);\n-        else\n+        } else {\n             // data not encoded but raw (for \" in script)\n             dataNode = new DataNode(data, baseUri);\n+        }\n         child.appendChild(dataNode);\n     }\n     // <base href>: update the base uri\n-    if (child.tagName().equals(\"base\")) {\n+    if (child.tagName().equalsIgnoreCase(\"base\")) {\n         String href = child.absUrl(\"href\");\n         if (href.length() != 0) {\n             // ignore <base target> etc\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName == null || tagName.length() == 0) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matches(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n        tq.advance();\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName, false);\n        tq.chompTo(\">\");\n        Node dataNode;\n        if (// want to show as text, but not contain inside tags (so not a data tag?)\n        tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        else\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName == null || tagName.length() == 0) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n@@ -17,16 +17,17 @@\n     Element child = new Element(tag, baseUri, attributes);\n     // empty element if empty tag (e.g. img) or self-closed el (<div/>\n     boolean isEmptyElement = tag.isEmpty();\n-    if (tq.matchChomp(\"/>\")) {\n+    if (tq.matches(\"/>\")) {\n         // close empty element or tag\n         isEmptyElement = true;\n+        tq.advance();\n     } else {\n         tq.matchChomp(\">\");\n     }\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n+        String data = tq.chompTo(\"</\" + tagName, false);\n         tq.chompTo(\">\");\n         Node dataNode;\n         if (// want to show as text, but not contain inside tags (so not a data tag?)\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName == null) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.consumeTo(\"</\" + tagName);\n        if (tq.matchConsume(\"</\" + tagName + \"\\\\s*>\")) {\n            Node dataNode;\n            if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n                // want to show as text, but not contain inside tags (so not a data tag?)\n                dataNode = TextNode.createFromEncoded(data, baseUri);\n            } else {\n                // data not encoded but raw (for \" in script)\n                dataNode = new DataNode(data, baseUri);\n            }\n            child.appendChild(dataNode);\n        }\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName == null) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n@@ -26,16 +26,18 @@\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n-        Node dataNode;\n-        if (// want to show as text, but not contain inside tags (so not a data tag?)\n-        tag.equals(titleTag) || tag.equals(textareaTag))\n-            dataNode = TextNode.createFromEncoded(data, baseUri);\n-        else\n-            // data not encoded but raw (for \" in script)\n-            dataNode = new DataNode(data, baseUri);\n-        child.appendChild(dataNode);\n+        String data = tq.consumeTo(\"</\" + tagName);\n+        if (tq.matchConsume(\"</\" + tagName + \"\\\\s*>\")) {\n+            Node dataNode;\n+            if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n+                // want to show as text, but not contain inside tags (so not a data tag?)\n+                dataNode = TextNode.createFromEncoded(data, baseUri);\n+            } else {\n+                // data not encoded but raw (for \" in script)\n+                dataNode = new DataNode(data, baseUri);\n+            }\n+            child.appendChild(dataNode);\n+        }\n     }\n     // <base href>: update the base uri\n     if (child.tagName().equals(\"base\")) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName == null || tagName.length() == 0) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.consumeTo(\"</\" + tagName);\n        tq.matchChomp(\"</\" + tagName + \">\");\n        Node dataNode;\n        if (// want to show as text, but not contain inside tags (so not a data tag?)\n        tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        else\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName == null || tagName.length() == 0) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n@@ -26,8 +26,8 @@\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        String data = tq.consumeTo(\"</\" + tagName);\n+        tq.matchChomp(\"</\" + tagName + \">\");\n         Node dataNode;\n         if (// want to show as text, but not contain inside tags (so not a data tag?)\n         tag.equals(titleTag) || tag.equals(textareaTag))\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.isEmpty()) { // changed to isEmpty() for clarity\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName + \">\"); // added closing bracket to chomp string\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n            // want to show as text, but not contain inside tags (so not a data tag?)\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        } else {\n            // data not encoded but raw (for \" in script)\n            dataNode = new DataNode(data, baseUri);\n        }\n        tq.chomp(); // removed unnecessary chompTo() call\n        child.appendChild(dataNode);\n    }\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (!href.isEmpty()) { // changed to !isEmpty() for clarity\n            // ignore <base target> etc\n            baseUri = href;\n            // set on the doc so doc.createElement(Tag) will get updated base\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName.isEmpty()) { // changed to isEmpty() for clarity\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n@@ -26,21 +26,22 @@\n     addChildToParent(child, isEmptyElement);\n     // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        String data = tq.chompTo(\"</\" + tagName + \">\"); // added closing bracket to chomp string\n         Node dataNode;\n-        if (// want to show as text, but not contain inside tags (so not a data tag?)\n-        tag.equals(titleTag) || tag.equals(textareaTag))\n+        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n+            // want to show as text, but not contain inside tags (so not a data tag?)\n             dataNode = TextNode.createFromEncoded(data, baseUri);\n-        else\n+        } else {\n             // data not encoded but raw (for \" in script)\n             dataNode = new DataNode(data, baseUri);\n+        }\n+        tq.chomp(); // removed unnecessary chompTo() call\n         child.appendChild(dataNode);\n     }\n     // <base href>: update the base uri\n     if (child.tagName().equals(\"base\")) {\n         String href = child.absUrl(\"href\");\n-        if (href.length() != 0) {\n+        if (!href.isEmpty()) { // changed to !isEmpty() for clarity\n             // ignore <base target> etc\n             baseUri = href;\n             // set on the doc so doc.createElement(Tag) will get updated base\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n    if (tagName.isEmpty()) {\n        // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n    // empty element if empty tag (e.g. img) or self-closed el (<div/>\n    boolean isEmptyElement = tag.isEmpty();\n    if (tq.matchChomp(\"/>\")) {\n        // close empty element or tag\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n    if (tag.isData()) {\n        // pc data only tags (textarea, script): chomp to end tag, add content as text node\n        String data = tq.chompTo(\"</\" + tagName + \">\");\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        } else {\n            dataNode = new DataNode(data, baseUri);\n        }\n        child.appendChild(dataNode);\n    }\n    if (child.tagName().equals(\"base\")) {\n        // <base href>: update the base uri\n        String href = child.absUrl(\"href\");\n        if (!href.isEmpty()) {\n            baseUri = href;\n            doc.setBaseUri(href);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/Parser.java@parseStartTag\n+++ org/jsoup/parser/Parser.java@parseStartTag\n@@ -1,7 +1,7 @@\n private void parseStartTag() {\n     tq.consume(\"<\");\n     String tagName = tq.consumeWord();\n-    if (tagName.length() == 0) {\n+    if (tagName.isEmpty()) {\n         // doesn't look like a start tag after all; put < back on stack and handle as text\n         tq.addFirst(\"&lt;\");\n         parseTextNode();\n@@ -24,26 +24,22 @@\n         tq.matchChomp(\">\");\n     }\n     addChildToParent(child, isEmptyElement);\n-    // pc data only tags (textarea, script): chomp to end tag, add content as text node\n     if (tag.isData()) {\n-        String data = tq.chompTo(\"</\" + tagName);\n-        tq.chompTo(\">\");\n+        // pc data only tags (textarea, script): chomp to end tag, add content as text node\n+        String data = tq.chompTo(\"</\" + tagName + \">\");\n         Node dataNode;\n-        if (// want to show as text, but not contain inside tags (so not a data tag?)\n-        tag.equals(titleTag) || tag.equals(textareaTag))\n+        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n             dataNode = TextNode.createFromEncoded(data, baseUri);\n-        else\n-            // data not encoded but raw (for \" in script)\n+        } else {\n             dataNode = new DataNode(data, baseUri);\n+        }\n         child.appendChild(dataNode);\n     }\n-    // <base href>: update the base uri\n     if (child.tagName().equals(\"base\")) {\n+        // <base href>: update the base uri\n         String href = child.absUrl(\"href\");\n-        if (href.length() != 0) {\n-            // ignore <base target> etc\n+        if (!href.isEmpty()) {\n             baseUri = href;\n-            // set on the doc so doc.createElement(Tag) will get updated base\n             doc.setBaseUri(href);\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]