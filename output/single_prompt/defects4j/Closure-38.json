[{"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100) {\n            while (Math.abs(mantissa / 10.0 * Math.pow(10, exp + 1)) == Math.abs(value)) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(String.valueOf(x));\n    }\n}\n", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -1,6 +1,4 @@\n void addNumber(double x) {\n-    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n-    // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n     if (x < 0 && prev == '-') {\n@@ -11,7 +9,7 @@\n         long mantissa = value;\n         int exp = 0;\n         if (Math.abs(x) >= 100) {\n-            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+            while (Math.abs(mantissa / 10.0 * Math.pow(10, exp + 1)) == Math.abs(value)) {\n                 mantissa /= 10;\n                 exp++;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100) {\n            while (mantissa % 10 == 0) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(String.valueOf(x));\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -11,7 +11,7 @@\n         long mantissa = value;\n         int exp = 0;\n         if (Math.abs(x) >= 100) {\n-            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+            while (mantissa % 10 == 0) {\n                 mantissa /= 10;\n                 exp++;\n             }\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100) {\n            while ((long)(mantissa / 10 * Math.pow(10, exp + 1)) == value) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(String.valueOf(x));\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -11,7 +11,7 @@\n         long mantissa = value;\n         int exp = 0;\n         if (Math.abs(x) >= 100) {\n-            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+            while ((long)(mantissa / 10 * Math.pow(10, exp + 1)) == value) {\n                 mantissa /= 10;\n                 exp++;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100) {\n            while (mantissa % 10 == 0) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(String.format(\"%.15g\", x));\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -1,6 +1,4 @@\n void addNumber(double x) {\n-    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n-    // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n     if (x < 0 && prev == '-') {\n@@ -11,7 +9,7 @@\n         long mantissa = value;\n         int exp = 0;\n         if (Math.abs(x) >= 100) {\n-            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+            while (mantissa % 10 == 0) {\n                 mantissa /= 10;\n                 exp++;\n             }\n@@ -22,6 +20,6 @@\n             add(Long.toString(value));\n         }\n     } else {\n-        add(String.valueOf(x));\n+        add(String.format(\"%.15g\", x));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100) {\n            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else if (Double.isNaN(x)) {\n        add(\"NaN\");\n    } else if (Double.isInfinite(x) && x > 0) {\n        add(\"+Infinity\");\n    } else if (Double.isInfinite(x) && x < 0) {\n        add(\"-Infinity\");\n    } else {\n        add(String.valueOf(x));\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -21,6 +21,12 @@\n         } else {\n             add(Long.toString(value));\n         }\n+    } else if (Double.isNaN(x)) {\n+        add(\"NaN\");\n+    } else if (Double.isInfinite(x) && x > 0) {\n+        add(\"+Infinity\");\n+    } else if (Double.isInfinite(x) && x < 0) {\n+        add(\"-Infinity\");\n     } else {\n         add(String.valueOf(x));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100) {\n            while ((mantissa / 10) * Math.pow(10, exp + 1) == value) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(String.format(\"%.15g\", x));\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -1,6 +1,4 @@\n void addNumber(double x) {\n-    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n-    // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n     if (x < 0 && prev == '-') {\n@@ -11,7 +9,7 @@\n         long mantissa = value;\n         int exp = 0;\n         if (Math.abs(x) >= 100) {\n-            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+            while ((mantissa / 10) * Math.pow(10, exp + 1) == value) {\n                 mantissa /= 10;\n                 exp++;\n             }\n@@ -22,6 +20,6 @@\n             add(Long.toString(value));\n         }\n     } else {\n-        add(String.valueOf(x));\n+        add(String.format(\"%.15g\", x));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100) {\n            while (mantissa % 10 == 0) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(Double.toString(x));\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -11,7 +11,7 @@\n         long mantissa = value;\n         int exp = 0;\n         if (Math.abs(x) >= 100) {\n-            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+            while (mantissa % 10 == 0) {\n                 mantissa /= 10;\n                 exp++;\n             }\n@@ -22,6 +22,6 @@\n             add(Long.toString(value));\n         }\n     } else {\n-        add(String.valueOf(x));\n+        add(Double.toString(x));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100) {\n            while ((mantissa / 10) * Math.pow(10, exp + 1) == value) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(String.format(Locale.US, \"%s\", x)); // Use string formatting to fix precision errors\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -1,6 +1,4 @@\n void addNumber(double x) {\n-    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n-    // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n     if (x < 0 && prev == '-') {\n@@ -11,7 +9,7 @@\n         long mantissa = value;\n         int exp = 0;\n         if (Math.abs(x) >= 100) {\n-            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+            while ((mantissa / 10) * Math.pow(10, exp + 1) == value) {\n                 mantissa /= 10;\n                 exp++;\n             }\n@@ -22,6 +20,6 @@\n             add(Long.toString(value));\n         }\n     } else {\n-        add(String.valueOf(x));\n+        add(String.format(Locale.US, \"%s\", x)); // Use string formatting to fix precision errors\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        if (Math.abs(x) >= 100) {\n            long mantissa = value;\n            int exp = 0;\n            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n                mantissa /= 10;\n                exp++;\n            }\n            if (exp > 2) {\n                add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n            } else {\n                add(Long.toString(value));\n            }\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(Double.toString(x));\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -8,20 +8,22 @@\n     }\n     if ((long) x == x && !negativeZero) {\n         long value = (long) x;\n-        long mantissa = value;\n-        int exp = 0;\n         if (Math.abs(x) >= 100) {\n+            long mantissa = value;\n+            int exp = 0;\n             while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n                 mantissa /= 10;\n                 exp++;\n             }\n-        }\n-        if (exp > 2) {\n-            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n+            if (exp > 2) {\n+                add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n+            } else {\n+                add(Long.toString(value));\n+            }\n         } else {\n             add(Long.toString(value));\n         }\n     } else {\n-        add(String.valueOf(x));\n+        add(Double.toString(x));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100) {\n            while (mantissa % 10 == 0) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2 || exp < -2) {\n            add(String.format(\"%.0E\", x));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(String.format(\"%.16g\", x));\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -11,17 +11,17 @@\n         long mantissa = value;\n         int exp = 0;\n         if (Math.abs(x) >= 100) {\n-            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+            while (mantissa % 10 == 0) {\n                 mantissa /= 10;\n                 exp++;\n             }\n         }\n-        if (exp > 2) {\n-            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n+        if (exp > 2 || exp < -2) {\n+            add(String.format(\"%.0E\", x));\n         } else {\n             add(Long.toString(value));\n         }\n     } else {\n-        add(String.valueOf(x));\n+        add(String.format(\"%.16g\", x));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100) {\n            while ((mantissa / 10) * Math.pow(10, exp + 1) == value) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(String.valueOf(x));\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -11,7 +11,7 @@\n         long mantissa = value;\n         int exp = 0;\n         if (Math.abs(x) >= 100) {\n-            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+            while ((mantissa / 10) * Math.pow(10, exp + 1) == value) {\n                 mantissa /= 10;\n                 exp++;\n             }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100) {\n            while ((mantissa / 10) * Math.pow(10, exp + 1) == value) { // fixed exponent calculation\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(String.valueOf(x));\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -11,7 +11,7 @@\n         long mantissa = value;\n         int exp = 0;\n         if (Math.abs(x) >= 100) {\n-            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+            while ((mantissa / 10) * Math.pow(10, exp + 1) == value) { // fixed exponent calculation\n                 mantissa /= 10;\n                 exp++;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nvoid addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n        if (Math.abs(x) >= 100 && value != Long.MIN_VALUE) {\n            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(String.valueOf(x));\n    }\n}", "diff": "--- com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n+++ com/google/javascript/jscomp/CodeConsumer.javaaddNumber\n@@ -10,7 +10,7 @@\n         long value = (long) x;\n         long mantissa = value;\n         int exp = 0;\n-        if (Math.abs(x) >= 100) {\n+        if (Math.abs(x) >= 100 && value != Long.MIN_VALUE) {\n             while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n                 mantissa /= 10;\n                 exp++;\n", "finish_reason": "stop", "valid": false, "num": 1}]