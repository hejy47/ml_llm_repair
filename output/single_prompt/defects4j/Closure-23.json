[{"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || (intIndex == 0 && Math.copySign(1.0, index) == -1.0) ) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,7 +13,7 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || (intIndex == 0 && Math.copySign(1.0, index) == -1.0) ) {\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!NodeUtil.isImmutableValue(right)) { // Check if right is an immutable value\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || intIndex < 0) { // check if index is a non-negative integer\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n    if (current == null) { // check if index is out of bounds\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem == null) {\n        elem = NodeUtil.newUndefinedNode(left); // replace with undefined node\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -6,19 +6,15 @@\n     if (isAssignmentTarget(n)) {\n         return n;\n     }\n-    if (!right.isNumber()) {\n+    if (!NodeUtil.isImmutableValue(right)) { // Check if right is an immutable value\n         // Sometimes people like to use complex expressions to index into\n         // arrays, or strings to index into array methods.\n         return n;\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || intIndex < 0) { // check if index is a non-negative integer\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n-        return n;\n-    }\n-    if (intIndex < 0) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n     Node current = left.getFirstChild();\n@@ -27,12 +23,12 @@\n         elem = current;\n         current = current.getNext();\n     }\n-    if (elem == null) {\n+    if (current == null) { // check if index is out of bounds\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n-    if (elem.isEmpty()) {\n-        elem = NodeUtil.newUndefinedNode(elem);\n+    if (elem == null) {\n+        elem = NodeUtil.newUndefinedNode(left); // replace with undefined node\n     } else {\n         left.removeChild(elem);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || Double.isNaN(index) || Double.isInfinite(index)) { // added check for NaN and Infinite\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0 || intIndex >= left.getChildCount()) { // added check for out-of-bounds index\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node elem = left.getChildAtIndex(intIndex); // simplified get-index logic\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,24 +13,15 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || Double.isNaN(index) || Double.isInfinite(index)) { // added check for NaN and Infinite\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n-    if (intIndex < 0) {\n+    if (intIndex < 0 || intIndex >= left.getChildCount()) { // added check for out-of-bounds index\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-        current = current.getNext();\n-    }\n-    if (elem == null) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-        return n;\n-    }\n+    Node elem = left.getChildAtIndex(intIndex); // simplified get-index logic\n     if (elem.isEmpty()) {\n         elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || Double.isInfinite(index) || Double.isNaN(index)) { // add check for infinity and NaN\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0 || intIndex >= NodeUtil.arrayLength(left)) { // add check for array length\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node elem = NodeUtil.getArrayElement(left, intIndex); // use NodeUtil to get array element\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,24 +13,15 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || Double.isInfinite(index) || Double.isNaN(index)) { // add check for infinity and NaN\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n-    if (intIndex < 0) {\n+    if (intIndex < 0 || intIndex >= NodeUtil.arrayLength(left)) { // add check for array length\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-        current = current.getNext();\n-    }\n-    if (elem == null) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-        return n;\n-    }\n+    Node elem = NodeUtil.getArrayElement(left, intIndex); // use NodeUtil to get array element\n     if (elem.isEmpty()) {\n         elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!NodeUtil.isImmutableValue(right)) { // Changed to check if the right node is an immutable value\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || intIndex < 0) { // Combined the negative check with the index equality check\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n    if (elem == null || !elem.isGetProp()) { // Added a check to ensure elem is a GETPROP node\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem.getLastChild()); // Changed to replace with the property value instead of the entire GETPROP node\n    reportCodeChange();\n    return elem.getLastChild();\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -6,18 +6,14 @@\n     if (isAssignmentTarget(n)) {\n         return n;\n     }\n-    if (!right.isNumber()) {\n+    if (!NodeUtil.isImmutableValue(right)) { // Changed to check if the right node is an immutable value\n         // Sometimes people like to use complex expressions to index into\n         // arrays, or strings to index into array methods.\n         return n;\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-        error(INVALID_GETELEM_INDEX_ERROR, right);\n-        return n;\n-    }\n-    if (intIndex < 0) {\n+    if (intIndex != index || intIndex < 0) { // Combined the negative check with the index equality check\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n@@ -27,17 +23,12 @@\n         elem = current;\n         current = current.getNext();\n     }\n-    if (elem == null) {\n+    if (elem == null || !elem.isGetProp()) { // Added a check to ensure elem is a GETPROP node\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n-    if (elem.isEmpty()) {\n-        elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-        left.removeChild(elem);\n-    }\n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    n.getParent().replaceChild(n, elem.getLastChild()); // Changed to replace with the property value instead of the entire GETPROP node\n     reportCodeChange();\n-    return elem;\n+    return elem.getLastChild();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || index >= Integer.MAX_VALUE) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,7 +13,7 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || index >= Integer.MAX_VALUE) {\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || index < 0) { // consider negative integer index as invalid\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n    if (current == null) { // check if the index is out of bounds\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem == null) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,12 +13,8 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || index < 0) { // consider negative integer index as invalid\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n-        return n;\n-    }\n-    if (intIndex < 0) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n     Node current = left.getFirstChild();\n@@ -27,11 +23,11 @@\n         elem = current;\n         current = current.getNext();\n     }\n-    if (elem == null) {\n+    if (current == null) { // check if the index is out of bounds\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n-    if (elem.isEmpty()) {\n+    if (elem == null) {\n         elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n         left.removeChild(elem);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || intIndex >= left.getChildCount() || intIndex < 0) { // Modified with additional check to prevent index out of bounds error\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    Node elem = left.getChildAtIndex(intIndex);\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,24 +13,11 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || intIndex >= left.getChildCount() || intIndex < 0) { // Modified with additional check to prevent index out of bounds error\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n-    if (intIndex < 0) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-        return n;\n-    }\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-        current = current.getNext();\n-    }\n-    if (elem == null) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-        return n;\n-    }\n+    Node elem = left.getChildAtIndex(intIndex);\n     if (elem.isEmpty()) {\n         elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!NodeUtil.isImmutableValue(right)) { // check if right is immutable value\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -6,7 +6,7 @@\n     if (isAssignmentTarget(n)) {\n         return n;\n     }\n-    if (!right.isNumber()) {\n+    if (!NodeUtil.isImmutableValue(right)) { // check if right is immutable value\n         // Sometimes people like to use complex expressions to index into\n         // arrays, or strings to index into array methods.\n         return n;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0 || intIndex >= left.getChildCount()) { // additional check for valid index\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node elem = left.getChildAtIndex(intIndex); // simpler way to get child node at index\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -17,16 +17,11 @@\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n-    if (intIndex < 0) {\n+    if (intIndex < 0 || intIndex >= left.getChildCount()) { // additional check for valid index\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-        current = current.getNext();\n-    }\n+    Node elem = left.getChildAtIndex(intIndex); // simpler way to get child node at index\n     if (elem == null) {\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || index < 0) { // added condition to check if index is negative\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,12 +13,8 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || index < 0) { // added condition to check if index is negative\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n-        return n;\n-    }\n-    if (intIndex < 0) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n     Node current = left.getFirstChild();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || Double.isNaN(index)) { // Check for NaN \n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0 || intIndex >= NodeUtil.arrayLength(left)) { // Check index value\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node elem = NodeUtil.arrayElement(left, intIndex);\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,20 +13,15 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || Double.isNaN(index)) { // Check for NaN \n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n-    if (intIndex < 0) {\n+    if (intIndex < 0 || intIndex >= NodeUtil.arrayLength(left)) { // Check index value\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-        current = current.getNext();\n-    }\n+    Node elem = NodeUtil.arrayElement(left, intIndex);\n     if (elem == null) {\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex < 0 || intIndex >= left.getChildCount()) { // Check if intIndex >= left.getChildCount()\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node elem = left.getChildAtIndex(intIndex); // Get the child at index intIndex\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,24 +13,11 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-        error(INVALID_GETELEM_INDEX_ERROR, right);\n-        return n;\n-    }\n-    if (intIndex < 0) {\n+    if (intIndex < 0 || intIndex >= left.getChildCount()) { // Check if intIndex >= left.getChildCount()\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-        current = current.getNext();\n-    }\n-    if (elem == null) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-        return n;\n-    }\n+    Node elem = left.getChildAtIndex(intIndex); // Get the child at index intIndex\n     if (elem.isEmpty()) {\n         elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    if (index < 0 || Double.isNaN(index) || Double.isInfinite(index)) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    \n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -12,15 +12,16 @@\n         return n;\n     }\n     double index = right.getDouble();\n+    if (index < 0 || Double.isNaN(index) || Double.isInfinite(index)) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+    }\n     int intIndex = (int) index;\n     if (intIndex != index) {\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n-    if (intIndex < 0) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-        return n;\n-    }\n+    \n     Node current = left.getFirstChild();\n     Node elem = null;\n     for (int i = 0; current != null && i < intIndex; i++) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || intIndex >= left.getChildCount()) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node elem = left.getChildAtIndex(intIndex);\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,7 +13,7 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || intIndex >= left.getChildCount()) {\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n@@ -21,16 +21,7 @@\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-        current = current.getNext();\n-    }\n-    if (elem == null) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-        return n;\n-    }\n+    Node elem = left.getChildAtIndex(intIndex);\n     if (elem.isEmpty()) {\n         elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (NodeUtil.isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || Double.isInfinite(index) || Double.isNaN(index)) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(n);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    parent.replaceChild(n, elem.detachFromParent());\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -3,7 +3,7 @@\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n+    if (NodeUtil.isAssignmentTarget(n)) {\n         return n;\n     }\n     if (!right.isNumber()) {\n@@ -13,7 +13,7 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || Double.isInfinite(index) || Double.isNaN(index)) {\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n@@ -32,12 +32,12 @@\n         return n;\n     }\n     if (elem.isEmpty()) {\n-        elem = NodeUtil.newUndefinedNode(elem);\n+        elem = NodeUtil.newUndefinedNode(n);\n     } else {\n         left.removeChild(elem);\n     }\n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    parent.replaceChild(n, elem.detachFromParent());\n     reportCodeChange();\n     return elem;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0 || intIndex >= left.getChildCount()) { // fixed condition\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node elem = left.getChildAtIndex(intIndex); // simplified code\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -17,20 +17,11 @@\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n-    if (intIndex < 0) {\n+    if (intIndex < 0 || intIndex >= left.getChildCount()) { // fixed condition\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-        current = current.getNext();\n-    }\n-    if (elem == null) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-        return n;\n-    }\n+    Node elem = left.getChildAtIndex(intIndex); // simplified code\n     if (elem.isEmpty()) {\n         elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex < 0 || intIndex >= NodeUtil.getLengthOfArrayLike(left)) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,11 +13,7 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-        error(INVALID_GETELEM_INDEX_ERROR, right);\n-        return n;\n-    }\n-    if (intIndex < 0) {\n+    if (intIndex < 0 || intIndex >= NodeUtil.getLengthOfArrayLike(left)) {\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber() && !right.isString()) { // or use NodeUtil.isImmutableValue(right)\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index;\n    if (right.isNumber()) {\n        index = right.getDouble();\n        int intIndex = (int) index;\n        if (intIndex != index) {\n            error(INVALID_GETELEM_INDEX_ERROR, right);\n            return n;\n        }\n        if (intIndex < 0) {\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n            return n;\n        }\n        Node current = left.getFirstChild();\n        Node elem = null;\n        for (int i = 0; current != null && i < intIndex; i++) {\n            elem = current;\n            current = current.getNext();\n        }\n        if (elem == null) {\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n            return n;\n        }\n        if (elem.isEmpty()) {\n            elem = NodeUtil.newUndefinedNode(elem);\n        } else {\n            left.removeChild(elem);\n        }\n        // Replace the entire GETELEM with the value\n        parent.replaceChild(n, elem);\n        reportCodeChange();\n        return elem;\n    } else { // right.isString()\n        // Not folding string literals to avoid performance regressions.\n        return n;\n    }\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -6,38 +6,44 @@\n     if (isAssignmentTarget(n)) {\n         return n;\n     }\n-    if (!right.isNumber()) {\n+    if (!right.isNumber() && !right.isString()) { // or use NodeUtil.isImmutableValue(right)\n         // Sometimes people like to use complex expressions to index into\n         // arrays, or strings to index into array methods.\n         return n;\n     }\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-        error(INVALID_GETELEM_INDEX_ERROR, right);\n+    double index;\n+    if (right.isNumber()) {\n+        index = right.getDouble();\n+        int intIndex = (int) index;\n+        if (intIndex != index) {\n+            error(INVALID_GETELEM_INDEX_ERROR, right);\n+            return n;\n+        }\n+        if (intIndex < 0) {\n+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+            return n;\n+        }\n+        Node current = left.getFirstChild();\n+        Node elem = null;\n+        for (int i = 0; current != null && i < intIndex; i++) {\n+            elem = current;\n+            current = current.getNext();\n+        }\n+        if (elem == null) {\n+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+            return n;\n+        }\n+        if (elem.isEmpty()) {\n+            elem = NodeUtil.newUndefinedNode(elem);\n+        } else {\n+            left.removeChild(elem);\n+        }\n+        // Replace the entire GETELEM with the value\n+        parent.replaceChild(n, elem);\n+        reportCodeChange();\n+        return elem;\n+    } else { // right.isString()\n+        // Not folding string literals to avoid performance regressions.\n         return n;\n     }\n-    if (intIndex < 0) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-        return n;\n-    }\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-        current = current.getNext();\n-    }\n-    if (elem == null) {\n-        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-        return n;\n-    }\n-    if (elem.isEmpty()) {\n-        elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-        left.removeChild(elem);\n-    }\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || Double.isNaN(index) || Double.isInfinite(index)) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    if (intIndex < 0 || intIndex >= left.getChildCount()) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        elem = current;\n        current = current.getNext();\n    }\n    if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}", "diff": "--- com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n+++ com/google/javascript/jscomp/PeepholeFoldConstants.javatryFoldArrayAccess\n@@ -13,11 +13,11 @@\n     }\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || Double.isNaN(index) || Double.isInfinite(index)) {\n         error(INVALID_GETELEM_INDEX_ERROR, right);\n         return n;\n     }\n-    if (intIndex < 0) {\n+    if (intIndex < 0 || intIndex >= left.getChildCount()) {\n         error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n         return n;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]