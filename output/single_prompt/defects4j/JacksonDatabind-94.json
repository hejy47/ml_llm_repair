[{"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                \"AbstractApplicationContext\".equals(name)) {\n                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n                }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -18,7 +18,7 @@\n                 // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                 if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                 \"AbstractApplicationContext\".equals(name)) {\n-                    break main_check;\n+                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n                 }\n                 // [databind#1737]; more 3rd party\n                 // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n", "finish_reason": "stop", "valid": false, "num": 9}, {"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        || \"FileSystemXmlApplicationContext\".equals(name)\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n                }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -16,9 +16,10 @@\n             for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                 String name = cls.getSimpleName();\n                 // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n-                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n-                \"AbstractApplicationContext\".equals(name)) {\n-                    break main_check;\n+                if (\"AbstractPointcutAdvisor\".equals(name)\n+                        || \"FileSystemXmlApplicationContext\".equals(name)\n+                        || \"AbstractApplicationContext\".equals(name)) {\n+                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n                 }\n                 // [databind#1737]; more 3rd party\n                 // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name)) {\n                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n                }\n                // 01-Feb-2021, mst: added additional block for \"FileSystemXmlApplicationContext\"\n                if (\"FileSystemXmlApplicationContext\".equals(name)) {\n                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n                }\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -16,16 +16,13 @@\n             for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                 String name = cls.getSimpleName();\n                 // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n-                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n-                \"AbstractApplicationContext\".equals(name)) {\n-                    break main_check;\n+                if (\"AbstractPointcutAdvisor\".equals(name)) {\n+                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n                 }\n-                // [databind#1737]; more 3rd party\n-                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n-                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n-                // [databind#1931]; more 3rd party\n-                // com.mchange.v2.c3p0.ComboPooledDataSource\n-                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n+                // 01-Feb-2021, mst: added additional block for \"FileSystemXmlApplicationContext\"\n+                if (\"FileSystemXmlApplicationContext\".equals(name)) {\n+                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n+                }\n             }\n         }\n         return;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name) || \n                \"FileSystemXmlApplicationContext\".equals(name) || // Block all ApplicationContexts\n                \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -16,7 +16,8 @@\n             for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                 String name = cls.getSimpleName();\n                 // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n-                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n+                if (\"AbstractPointcutAdvisor\".equals(name) || \n+                \"FileSystemXmlApplicationContext\".equals(name) || // Block all ApplicationContexts\n                 \"AbstractApplicationContext\".equals(name)) {\n                     break main_check;\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                \"AbstractApplicationContext\".equals(name) ||\n                \"AbstractBeanFactoryPointcutAdvisor\".equals(name)) {\n                    break main_check;\n                }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -17,7 +17,8 @@\n                 String name = cls.getSimpleName();\n                 // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                 if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n-                \"AbstractApplicationContext\".equals(name)) {\n+                \"AbstractApplicationContext\".equals(name) ||\n+                \"AbstractBeanFactoryPointcutAdvisor\".equals(name)) {\n                     break main_check;\n                 }\n                 // [databind#1737]; more 3rd party\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n            }\n            // In case of Spring subtype, allow deserialization\n            return;\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -27,6 +27,8 @@\n                 // com.mchange.v2.c3p0.ComboPooledDataSource\n                 // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n             }\n+            // In case of Spring subtype, allow deserialization\n+            return;\n         }\n         return;\n     } while (false);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                    \"AbstractApplicationContext\".equals(name) || // Adding more prohibited types\n                    \"DispatcherServlet\".equals(name) || // DispatcherServlet can be problematic\n                    \"ServletWebServerApplicationContext\".equals(name) || // ServletWebServerApplicationContext can be problematic\n                    \"GroovyObject\".equals(name) || // GroovyObject can execute arbitrary code\n                    \"XStreamMarshaller\".equals(name)) { // XStream can be used for remote code execution\n                    break main_check;\n                }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -17,7 +17,11 @@\n                 String name = cls.getSimpleName();\n                 // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                 if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n-                \"AbstractApplicationContext\".equals(name)) {\n+                    \"AbstractApplicationContext\".equals(name) || // Adding more prohibited types\n+                    \"DispatcherServlet\".equals(name) || // DispatcherServlet can be problematic\n+                    \"ServletWebServerApplicationContext\".equals(name) || // ServletWebServerApplicationContext can be problematic\n+                    \"GroovyObject\".equals(name) || // GroovyObject can execute arbitrary code\n+                    \"XStreamMarshaller\".equals(name)) { // XStream can be used for remote code execution\n                     break main_check;\n                 }\n                 // [databind#1737]; more 3rd party\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n                // [databind#1737]; more 3rd party\n                if (\"JndiRefForwardingDataSource\".equals(name) ||  // adding these three bean classes to the blocked list\n                \"WrapperConnectionPoolDataSource\".equals(name) ||\n                \"ComboPooledDataSource\".equals(name) ||\n                \"AfterCloseLoggingComboPooledDataSource\".equals(name)) {\n                    break main_check;\n                }\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -21,8 +21,12 @@\n                     break main_check;\n                 }\n                 // [databind#1737]; more 3rd party\n-                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n-                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n+                if (\"JndiRefForwardingDataSource\".equals(name) ||  // adding these three bean classes to the blocked list\n+                \"WrapperConnectionPoolDataSource\".equals(name) ||\n+                \"ComboPooledDataSource\".equals(name) ||\n+                \"AfterCloseLoggingComboPooledDataSource\".equals(name)) {\n+                    break main_check;\n+                }\n                 // [databind#1931]; more 3rd party\n                 // com.mchange.v2.c3p0.ComboPooledDataSource\n                 // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING) \n                && !_cfgIllegalClassNames.contains(full + \"#properties\")) { // Added null check to prevent NPE\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name) \n                        || \"FileSystemXmlApplicationContext\".equals(name)\n                        || _cfgIllegalClassNames.contains(cls.getName())) { // Added null check to prevent NPE\n                    break main_check;\n                }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -12,12 +12,14 @@\n         // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n         if (raw.isInterface()) {\n             ;\n-        } else if (full.startsWith(PREFIX_SPRING)) {\n+        } else if (full.startsWith(PREFIX_SPRING) \n+                && !_cfgIllegalClassNames.contains(full + \"#properties\")) { // Added null check to prevent NPE\n             for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                 String name = cls.getSimpleName();\n                 // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n-                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n-                \"AbstractApplicationContext\".equals(name)) {\n+                if (\"AbstractPointcutAdvisor\".equals(name) \n+                        || \"FileSystemXmlApplicationContext\".equals(name)\n+                        || _cfgIllegalClassNames.contains(cls.getName())) { // Added null check to prevent NPE\n                     break main_check;\n                 }\n                 // [databind#1737]; more 3rd party\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                \"AbstractApplicationContext\".equals(name)) {\n                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n                }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}\n\n## Fixed Function 2\npublic void findAndAddVirtualProperties(DeserializationConfig config, BeanDescription beanDesc,\n            List<BeanPropertyDefinition> properties, List<BeanPropertyDefinition> creatorProps) throws JsonMappingException {\n    // As per [jackson-databind#2529], handle optional properties\n    List<AnnotatedMember> anySetterMembers = beanDesc.findAnySetter();\n    if (!anySetterMembers.isEmpty() && properties.size() > 1) { // only if more than just the 'any-setter' itself\n        Map<String,AnnotatedMember> anySetters = new TreeMap<>();\n        for (AnnotatedMember anySetter : anySetterMembers) {\n            anySetters.put(anySetter.getName(), anySetter);\n        }\n        // for now, assign arbitrary indicies, to indicate they're \"virtual\",\n        // and adjust ordering so that they appear after any non-virtual properties\n        int index = properties.size();\n        for (Map.Entry<String,AnnotatedMember> entry : anySetters.entrySet()) {\n            VirtualBeanProperty property = _propCreator.virtualProperty(entry.getValue(), entry.getKey());\n            properties.add(property);\n            if (creatorProps != null) {\n                creatorProps.add(property);\n            }\n            ++index;\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -9,7 +9,6 @@\n         }\n         // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n         //    for some Spring framework types\n-        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n         if (raw.isInterface()) {\n             ;\n         } else if (full.startsWith(PREFIX_SPRING)) {\n@@ -18,7 +17,7 @@\n                 // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                 if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                 \"AbstractApplicationContext\".equals(name)) {\n-                    break main_check;\n+                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n                 }\n                 // [databind#1737]; more 3rd party\n                 // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                        \"AbstractApplicationContext\".equals(name)\n                        || name.startsWith(\"CG$$\")) { // Security fix for Codegen\n                    break main_check;\n                }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -17,7 +17,8 @@\n                 String name = cls.getSimpleName();\n                 // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                 if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n-                \"AbstractApplicationContext\".equals(name)) {\n+                        \"AbstractApplicationContext\".equals(name)\n+                        || name.startsWith(\"CG$$\")) { // Security fix for Codegen\n                     break main_check;\n                 }\n                 // [databind#1737]; more 3rd party\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check: do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                \"AbstractApplicationContext\".equals(name)) {\n                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));  // throw an exception instead of breaking out of main_check loop\n                }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n+++ com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java@validateSubType\n@@ -18,7 +18,7 @@\n                 // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                 if (\"AbstractPointcutAdvisor\".equals(name) || // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                 \"AbstractApplicationContext\".equals(name)) {\n-                    break main_check;\n+                    throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));  // throw an exception instead of breaking out of main_check loop\n                 }\n                 // [databind#1737]; more 3rd party\n                 // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n", "finish_reason": "stop", "valid": false, "num": 1}]