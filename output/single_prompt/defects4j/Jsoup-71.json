[{"output": "## Fixed Function 1\nprivate void findElements() {\n    if (tq.matchChomp(\"#\"))\n        byId();\n    else if (tq.matchChomp(\".\"))\n        byClass();\n    else if (tq.matchesWord() || tq.matchChomp(\"*|\"))\n        byTag();\n    else if (tq.matches(\"[\"))\n        byAttribute();\n    else if (tq.matchChomp(\"*\"))\n        allElements();\n    else if (tq.matchChomp(\":lt(\"))\n        indexLessThan();\n    else if (tq.matchChomp(\":gt(\"))\n        indexGreaterThan();\n    else if (tq.matchChomp(\":eq(\"))\n        indexEquals();\n    else if (tq.matches(\":has(\"))\n        has();\n    else if (tq.matches(\":contains(\"))\n        contains(false);\n    else if (tq.matches(\":containsOwn(\"))\n        contains(true);\n    else if (tq.matches(\":containsData(\"))\n        containsData();\n    else if (tq.matches(\":matches(\"))\n        matches(false);\n    else if (tq.matches(\":matchesOwn(\"))\n        matches(true);\n    else if (tq.matches(\":not(\"))\n        not();\n    else if (tq.matchChomp(\":nth-child(\"))\n        cssNthChild(false, false);\n    else if (tq.matchChomp(\":nth-last-child(\"))\n        cssNthChild(true, false);\n    else if (tq.matchChomp(\":nth-of-type(\"))\n        cssNthChild(false, true);\n    else if (tq.matchChomp(\":nth-last-of-type(\"))\n        cssNthChild(true, true);\n    else if (tq.matchChomp(\":first-child()\")) // <-- Fix: corrected the function name\n        evals.add(new Evaluator.IsFirstChild());\n    else if (tq.matchChomp(\":last-child()\")) // <-- Fix: corrected the function name\n        evals.add(new Evaluator.IsLastChild());\n    else if (tq.matchChomp(\":first-of-type()\")) // <-- Fix: corrected the function name\n        evals.add(new Evaluator.IsFirstOfType());\n    else if (tq.matchChomp(\":last-of-type()\")) // <-- Fix: corrected the function name\n        evals.add(new Evaluator.IsLastOfType());\n    else if (tq.matchChomp(\":only-child()\")) // <-- Fix: corrected the function name\n        evals.add(new Evaluator.IsOnlyChild());\n    else if (tq.matchChomp(\":only-of-type()\")) // <-- Fix: corrected the function name\n        evals.add(new Evaluator.IsOnlyOfType());\n    else if (tq.matchChomp(\":empty()\")) // <-- Fix: corrected the function name\n        evals.add(new Evaluator.IsEmpty());\n    else if (tq.matchChomp(\":root()\")) // <-- Fix: corrected the function name\n        evals.add(new Evaluator.IsRoot());\n    else\n        // unhandled\n        throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}", "diff": "--- org/jsoup/select/QueryParser.java@findElements\n+++ org/jsoup/select/QueryParser.java@findElements\n@@ -3,7 +3,7 @@\n         byId();\n     else if (tq.matchChomp(\".\"))\n         byClass();\n-    else if (tq.matchesWord() || tq.matches(\"*|\"))\n+    else if (tq.matchesWord() || tq.matchChomp(\"*|\"))\n         byTag();\n     else if (tq.matches(\"[\"))\n         byAttribute();\n@@ -37,21 +37,21 @@\n         cssNthChild(false, true);\n     else if (tq.matchChomp(\":nth-last-of-type(\"))\n         cssNthChild(true, true);\n-    else if (tq.matchChomp(\":first-child\"))\n+    else if (tq.matchChomp(\":first-child()\")) // <-- Fix: corrected the function name\n         evals.add(new Evaluator.IsFirstChild());\n-    else if (tq.matchChomp(\":last-child\"))\n+    else if (tq.matchChomp(\":last-child()\")) // <-- Fix: corrected the function name\n         evals.add(new Evaluator.IsLastChild());\n-    else if (tq.matchChomp(\":first-of-type\"))\n+    else if (tq.matchChomp(\":first-of-type()\")) // <-- Fix: corrected the function name\n         evals.add(new Evaluator.IsFirstOfType());\n-    else if (tq.matchChomp(\":last-of-type\"))\n+    else if (tq.matchChomp(\":last-of-type()\")) // <-- Fix: corrected the function name\n         evals.add(new Evaluator.IsLastOfType());\n-    else if (tq.matchChomp(\":only-child\"))\n+    else if (tq.matchChomp(\":only-child()\")) // <-- Fix: corrected the function name\n         evals.add(new Evaluator.IsOnlyChild());\n-    else if (tq.matchChomp(\":only-of-type\"))\n+    else if (tq.matchChomp(\":only-of-type()\")) // <-- Fix: corrected the function name\n         evals.add(new Evaluator.IsOnlyOfType());\n-    else if (tq.matchChomp(\":empty\"))\n+    else if (tq.matchChomp(\":empty()\")) // <-- Fix: corrected the function name\n         evals.add(new Evaluator.IsEmpty());\n-    else if (tq.matchChomp(\":root\"))\n+    else if (tq.matchChomp(\":root()\")) // <-- Fix: corrected the function name\n         evals.add(new Evaluator.IsRoot());\n     else\n         // unhandled\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "The code for the `findElements()` function is quite complex and it is not clear what the intended behavior is. Therefore, it is difficult to identify specific bugs and provide corresponding fixes.", "diff": "", "finish_reason": "stop", "valid": false, "num": 11}, {"output": "## Fixed Function 1\nprivate void findElements() {\n    if (tq.matchChomp(\"#\")) {\n        byId();\n    } else if (tq.matchChomp(\".\")) {\n        byClass();\n    } else if (tq.matchesWord() || tq.matches(\"*|\")) {\n        byTag();\n    } else if (tq.matches(\"[\") || tq.matches(\"^[\")) { // add ^[ to check for start of attribute selector\n        byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        has();\n    } else if (tq.matches(\":contains(\")) {\n        contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        contains(true);\n    } else if (tq.matches(\":containsData(\")) {\n        containsData();\n    } else if (tq.matches(\":matches(\")) {\n        matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        matches(true);\n    } else if (tq.matches(\":not(\")) {\n        not();\n    } else if (tq.matchChomp(\":nth-child(\")) {\n        cssNthChild(false, false);\n    } else if (tq.matchChomp(\":nth-last-child(\")) {\n        cssNthChild(true, false);\n    } else if (tq.matchChomp(\":nth-of-type(\")) {\n        cssNthChild(false, true);\n    } else if (tq.matchChomp(\":nth-last-of-type(\")) {\n        cssNthChild(true, true);\n    } else if (tq.matchChomp(\":first-child\")) {\n        evals.add(new Evaluator.IsFirstChild());\n    } else if (tq.matchChomp(\":last-child\")) {\n        evals.add(new Evaluator.IsLastChild());\n    } else if (tq.matchChomp(\":first-of-type\")) {\n        evals.add(new Evaluator.IsFirstOfType());\n    } else if (tq.matchChomp(\":last-of-type\")) {\n        evals.add(new Evaluator.IsLastOfType());\n    } else if (tq.matchChomp(\":only-child\")) {\n        evals.add(new Evaluator.IsOnlyChild());\n    } else if (tq.matchChomp(\":only-of-type\")) {\n        evals.add(new Evaluator.IsOnlyOfType());\n    } else if (tq.matchChomp(\":empty\")) {\n        evals.add(new Evaluator.IsEmpty());\n    } else if (tq.matchChomp(\":root\")) {\n        evals.add(new Evaluator.IsRoot());\n    } else {\n        // unhandled\n        throw new Selector.SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n    }\n}", "diff": "--- org/jsoup/select/QueryParser.java@findElements\n+++ org/jsoup/select/QueryParser.java@findElements\n@@ -1,59 +1,60 @@\n private void findElements() {\n-    if (tq.matchChomp(\"#\"))\n+    if (tq.matchChomp(\"#\")) {\n         byId();\n-    else if (tq.matchChomp(\".\"))\n+    } else if (tq.matchChomp(\".\")) {\n         byClass();\n-    else if (tq.matchesWord() || tq.matches(\"*|\"))\n+    } else if (tq.matchesWord() || tq.matches(\"*|\")) {\n         byTag();\n-    else if (tq.matches(\"[\"))\n+    } else if (tq.matches(\"[\") || tq.matches(\"^[\")) { // add ^[ to check for start of attribute selector\n         byAttribute();\n-    else if (tq.matchChomp(\"*\"))\n+    } else if (tq.matchChomp(\"*\")) {\n         allElements();\n-    else if (tq.matchChomp(\":lt(\"))\n+    } else if (tq.matchChomp(\":lt(\")) {\n         indexLessThan();\n-    else if (tq.matchChomp(\":gt(\"))\n+    } else if (tq.matchChomp(\":gt(\")) {\n         indexGreaterThan();\n-    else if (tq.matchChomp(\":eq(\"))\n+    } else if (tq.matchChomp(\":eq(\")) {\n         indexEquals();\n-    else if (tq.matches(\":has(\"))\n+    } else if (tq.matches(\":has(\")) {\n         has();\n-    else if (tq.matches(\":contains(\"))\n+    } else if (tq.matches(\":contains(\")) {\n         contains(false);\n-    else if (tq.matches(\":containsOwn(\"))\n+    } else if (tq.matches(\":containsOwn(\")) {\n         contains(true);\n-    else if (tq.matches(\":containsData(\"))\n+    } else if (tq.matches(\":containsData(\")) {\n         containsData();\n-    else if (tq.matches(\":matches(\"))\n+    } else if (tq.matches(\":matches(\")) {\n         matches(false);\n-    else if (tq.matches(\":matchesOwn(\"))\n+    } else if (tq.matches(\":matchesOwn(\")) {\n         matches(true);\n-    else if (tq.matches(\":not(\"))\n+    } else if (tq.matches(\":not(\")) {\n         not();\n-    else if (tq.matchChomp(\":nth-child(\"))\n+    } else if (tq.matchChomp(\":nth-child(\")) {\n         cssNthChild(false, false);\n-    else if (tq.matchChomp(\":nth-last-child(\"))\n+    } else if (tq.matchChomp(\":nth-last-child(\")) {\n         cssNthChild(true, false);\n-    else if (tq.matchChomp(\":nth-of-type(\"))\n+    } else if (tq.matchChomp(\":nth-of-type(\")) {\n         cssNthChild(false, true);\n-    else if (tq.matchChomp(\":nth-last-of-type(\"))\n+    } else if (tq.matchChomp(\":nth-last-of-type(\")) {\n         cssNthChild(true, true);\n-    else if (tq.matchChomp(\":first-child\"))\n+    } else if (tq.matchChomp(\":first-child\")) {\n         evals.add(new Evaluator.IsFirstChild());\n-    else if (tq.matchChomp(\":last-child\"))\n+    } else if (tq.matchChomp(\":last-child\")) {\n         evals.add(new Evaluator.IsLastChild());\n-    else if (tq.matchChomp(\":first-of-type\"))\n+    } else if (tq.matchChomp(\":first-of-type\")) {\n         evals.add(new Evaluator.IsFirstOfType());\n-    else if (tq.matchChomp(\":last-of-type\"))\n+    } else if (tq.matchChomp(\":last-of-type\")) {\n         evals.add(new Evaluator.IsLastOfType());\n-    else if (tq.matchChomp(\":only-child\"))\n+    } else if (tq.matchChomp(\":only-child\")) {\n         evals.add(new Evaluator.IsOnlyChild());\n-    else if (tq.matchChomp(\":only-of-type\"))\n+    } else if (tq.matchChomp(\":only-of-type\")) {\n         evals.add(new Evaluator.IsOnlyOfType());\n-    else if (tq.matchChomp(\":empty\"))\n+    } else if (tq.matchChomp(\":empty\")) {\n         evals.add(new Evaluator.IsEmpty());\n-    else if (tq.matchChomp(\":root\"))\n+    } else if (tq.matchChomp(\":root\")) {\n         evals.add(new Evaluator.IsRoot());\n-    else\n+    } else {\n         // unhandled\n-        throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        throw new Selector.SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void findElements() {\n    if (tq.matchChomp(\"#\"))\n        byId();\n    else if (tq.matchChomp(\".\"))\n        byClass();\n    else if (tq.matchesWord() || tq.matches(\"*|\"))\n        byTag();\n    else if (tq.matches(\"[\"))\n        byAttribute();\n    else if (tq.matchChomp(\"*\"))\n        allElements();\n    else if (tq.matchChomp(\":lt(\"))\n        indexLessThan();\n    else if (tq.matchChomp(\":gt(\"))\n        indexGreaterThan();\n    else if (tq.matchChomp(\":eq(\"))\n        indexEquals();\n    else if (tq.matches(\":has(\"))\n        has();\n    else if (tq.matches(\":contains(\"))\n        contains(false);\n    else if (tq.matches(\":containsOwn(\"))\n        contains(true);\n    else if (tq.matches(\":containsData(\"))\n        containsData();\n    else if (tq.matches(\":matches(\"))\n        matches(false);\n    else if (tq.matches(\":matchesOwn(\"))\n        matches(true);\n    else if (tq.matches(\":not(\"))\n        not();\n    else if (tq.matchChomp(\":nth-child(\"))\n        cssNthChild(false, false);\n    else if (tq.matchChomp(\":nth-last-child(\"))\n        cssNthChild(true, false);\n    else if (tq.matchChomp(\":nth-of-type(\"))\n        cssNthChild(false, true);\n    else if (tq.matchChomp(\":nth-last-of-type(\"))\n        cssNthChild(true, true);\n    else if (tq.matchChomp(\":first-child()\"))\n        evals.add(new Evaluator.IsFirstChild());\n    else if (tq.matchChomp(\":last-child()\"))\n        evals.add(new Evaluator.IsLastChild());\n    else if (tq.matchChomp(\":first-of-type()\"))\n        evals.add(new Evaluator.IsFirstOfType());\n    else if (tq.matchChomp(\":last-of-type()\"))\n        evals.add(new Evaluator.IsLastOfType());\n    else if (tq.matchChomp(\":only-child()\"))\n        evals.add(new Evaluator.IsOnlyChild());\n    else if (tq.matchChomp(\":only-of-type()\"))\n        evals.add(new Evaluator.IsOnlyOfType());\n    else if (tq.matchChomp(\":empty()\"))\n        evals.add(new Evaluator.IsEmpty());\n    else if (tq.matchChomp(\":root()\"))\n        evals.add(new Evaluator.IsRoot());\n    else\n        // unhandled\n        throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}", "diff": "--- org/jsoup/select/QueryParser.java@findElements\n+++ org/jsoup/select/QueryParser.java@findElements\n@@ -37,21 +37,21 @@\n         cssNthChild(false, true);\n     else if (tq.matchChomp(\":nth-last-of-type(\"))\n         cssNthChild(true, true);\n-    else if (tq.matchChomp(\":first-child\"))\n+    else if (tq.matchChomp(\":first-child()\"))\n         evals.add(new Evaluator.IsFirstChild());\n-    else if (tq.matchChomp(\":last-child\"))\n+    else if (tq.matchChomp(\":last-child()\"))\n         evals.add(new Evaluator.IsLastChild());\n-    else if (tq.matchChomp(\":first-of-type\"))\n+    else if (tq.matchChomp(\":first-of-type()\"))\n         evals.add(new Evaluator.IsFirstOfType());\n-    else if (tq.matchChomp(\":last-of-type\"))\n+    else if (tq.matchChomp(\":last-of-type()\"))\n         evals.add(new Evaluator.IsLastOfType());\n-    else if (tq.matchChomp(\":only-child\"))\n+    else if (tq.matchChomp(\":only-child()\"))\n         evals.add(new Evaluator.IsOnlyChild());\n-    else if (tq.matchChomp(\":only-of-type\"))\n+    else if (tq.matchChomp(\":only-of-type()\"))\n         evals.add(new Evaluator.IsOnlyOfType());\n-    else if (tq.matchChomp(\":empty\"))\n+    else if (tq.matchChomp(\":empty()\"))\n         evals.add(new Evaluator.IsEmpty());\n-    else if (tq.matchChomp(\":root\"))\n+    else if (tq.matchChomp(\":root()\"))\n         evals.add(new Evaluator.IsRoot());\n     else\n         // unhandled\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void findElements() {\n    if (tq.matchChomp(\"#\"))\n        byId();\n    else if (tq.matchChomp(\".\"))\n        byClass();\n    else if (tq.matchesWord() || tq.matches(\"*|\"))\n        byTag();\n    else if (tq.matches(\"[\"))\n        byAttribute();\n    else if (tq.matchChomp(\"*\"))\n        allElements();\n    else if (tq.matchChomp(\":lt(\"))\n        indexLessThan();\n    else if (tq.matchChomp(\":gt(\"))\n        indexGreaterThan();\n    else if (tq.matchChomp(\":eq(\"))\n        indexEquals();\n    else if (tq.matches(\":has(\"))\n        has();\n    else if (tq.matches(\":contains(\"))\n        contains(false);\n    else if (tq.matches(\":containsOwn(\"))\n        contains(true);\n    else if (tq.matches(\":containsData(\"))\n        containsData();\n    else if (tq.matches(\":matches(\"))\n        matches(false);\n    else if (tq.matches(\":matchesOwn(\"))\n        matches(true);\n    else if (tq.matches(\":not(\"))\n        not();\n    else if (tq.matchChomp(\":nth-child(\"))\n        cssNthChild(false, false);\n    else if (tq.matchChomp(\":nth-last-child(\"))\n        cssNthChild(true, false);\n    else if (tq.matchChomp(\":nth-of-type(\"))\n        cssNthChild(false, true);\n    else if (tq.matchChomp(\":nth-last-of-type(\"))\n        cssNthChild(true, true);\n    else if (tq.matchChomp(\":first-child\"))\n        evals.add(Evaluator.IsFirstChild);\n    else if (tq.matchChomp(\":last-child\"))\n        evals.add(Evaluator.IsLastChild);\n    else if (tq.matchChomp(\":first-of-type\"))\n        evals.add(Evaluator.IsFirstOfType);\n    else if (tq.matchChomp(\":last-of-type\"))\n        evals.add(Evaluator.IsLastOfType);\n    else if (tq.matchChomp(\":only-child\"))\n        evals.add(Evaluator.IsOnlyChild);\n    else if (tq.matchChomp(\":only-of-type\"))\n        evals.add(Evaluator.IsOnlyOfType);\n    else if (tq.matchChomp(\":empty\"))\n        evals.add(Evaluator.IsEmpty);\n    else if (tq.matchChomp(\":root\"))\n        evals.add(Evaluator.IsRoot);\n    else\n        // unhandled\n        throw new Selector.SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n}", "diff": "--- org/jsoup/select/QueryParser.java@findElements\n+++ org/jsoup/select/QueryParser.java@findElements\n@@ -38,22 +38,22 @@\n     else if (tq.matchChomp(\":nth-last-of-type(\"))\n         cssNthChild(true, true);\n     else if (tq.matchChomp(\":first-child\"))\n-        evals.add(new Evaluator.IsFirstChild());\n+        evals.add(Evaluator.IsFirstChild);\n     else if (tq.matchChomp(\":last-child\"))\n-        evals.add(new Evaluator.IsLastChild());\n+        evals.add(Evaluator.IsLastChild);\n     else if (tq.matchChomp(\":first-of-type\"))\n-        evals.add(new Evaluator.IsFirstOfType());\n+        evals.add(Evaluator.IsFirstOfType);\n     else if (tq.matchChomp(\":last-of-type\"))\n-        evals.add(new Evaluator.IsLastOfType());\n+        evals.add(Evaluator.IsLastOfType);\n     else if (tq.matchChomp(\":only-child\"))\n-        evals.add(new Evaluator.IsOnlyChild());\n+        evals.add(Evaluator.IsOnlyChild);\n     else if (tq.matchChomp(\":only-of-type\"))\n-        evals.add(new Evaluator.IsOnlyOfType());\n+        evals.add(Evaluator.IsOnlyOfType);\n     else if (tq.matchChomp(\":empty\"))\n-        evals.add(new Evaluator.IsEmpty());\n+        evals.add(Evaluator.IsEmpty);\n     else if (tq.matchChomp(\":root\"))\n-        evals.add(new Evaluator.IsRoot());\n+        evals.add(Evaluator.IsRoot);\n     else\n         // unhandled\n-        throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        throw new Selector.SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void findElements() {\n    if (tq.matchChomp(\"#\"))\n        byId();\n    else if (tq.matchChomp(\".\"))\n        byClass();\n    else if (tq.matchesWord() || tq.matches(\"*|\"))\n        byTag();\n    else if (tq.matches(\"[\"))\n        byAttribute();\n    else if (tq.matchChomp(\"*\"))\n        allElements();\n    else if (tq.matchChomp(\":lt(\"))\n        indexLessThan();\n    else if (tq.matchChomp(\":gt(\"))\n        indexGreaterThan();\n    else if (tq.matchChomp(\":eq(\"))\n        indexEquals();\n    else if (tq.matches(\":has(\"))\n        has();\n    else if (tq.matches(\":contains(\"))\n        contains(false);\n    else if (tq.matches(\":containsOwn(\"))\n        contains(true);\n    else if (tq.matches(\":containsData(\"))\n        containsData();\n    else if (tq.matches(\":matches(\"))\n        matches(false);\n    else if (tq.matches(\":matchesOwn(\"))\n        matches(true);\n    else if (tq.matches(\":not(\"))\n        not();\n    else if (tq.matchChomp(\":nth-child(\"))\n        cssNthChild(false, false);\n    else if (tq.matchChomp(\":nth-last-child(\"))\n        cssNthChild(true, false);\n    else if (tq.matchChomp(\":nth-of-type(\"))\n        cssNthChild(false, true);\n    else if (tq.matchChomp(\":nth-last-of-type(\"))\n        cssNthChild(true, true);\n    else if (tq.matchChomp(\":first-child()\"))\n        evals.add(new Evaluator.IsFirstChild());\n    else if (tq.matchChomp(\":last-child()\"))\n        evals.add(new Evaluator.IsLastChild());\n    else if (tq.matchChomp(\":first-of-type()\"))\n        evals.add(new Evaluator.IsFirstOfType());\n    else if (tq.matchChomp(\":last-of-type()\"))\n        evals.add(new Evaluator.IsLastOfType());\n    else if (tq.matchChomp(\":only-child()\"))\n        evals.add(new Evaluator.IsOnlyChild());\n    else if (tq.matchChomp(\":only-of-type()\"))\n        evals.add(new Evaluator.IsOnlyOfType());\n    else if (tq.matchChomp(\":empty\"))\n        evals.add(new Evaluator.IsEmpty());\n    else if (tq.matchChomp(\":root\"))\n        evals.add(new Evaluator.IsRoot());\n    else\n        // unhandled\n        throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}", "diff": "--- org/jsoup/select/QueryParser.java@findElements\n+++ org/jsoup/select/QueryParser.java@findElements\n@@ -37,17 +37,17 @@\n         cssNthChild(false, true);\n     else if (tq.matchChomp(\":nth-last-of-type(\"))\n         cssNthChild(true, true);\n-    else if (tq.matchChomp(\":first-child\"))\n+    else if (tq.matchChomp(\":first-child()\"))\n         evals.add(new Evaluator.IsFirstChild());\n-    else if (tq.matchChomp(\":last-child\"))\n+    else if (tq.matchChomp(\":last-child()\"))\n         evals.add(new Evaluator.IsLastChild());\n-    else if (tq.matchChomp(\":first-of-type\"))\n+    else if (tq.matchChomp(\":first-of-type()\"))\n         evals.add(new Evaluator.IsFirstOfType());\n-    else if (tq.matchChomp(\":last-of-type\"))\n+    else if (tq.matchChomp(\":last-of-type()\"))\n         evals.add(new Evaluator.IsLastOfType());\n-    else if (tq.matchChomp(\":only-child\"))\n+    else if (tq.matchChomp(\":only-child()\"))\n         evals.add(new Evaluator.IsOnlyChild());\n-    else if (tq.matchChomp(\":only-of-type\"))\n+    else if (tq.matchChomp(\":only-of-type()\"))\n         evals.add(new Evaluator.IsOnlyOfType());\n     else if (tq.matchChomp(\":empty\"))\n         evals.add(new Evaluator.IsEmpty());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void findElements() {\n    if (tq.matchChomp(\"#\")) {\n        byId();\n    } else if (tq.matchChomp(\".\")) {\n        byClass();\n    } else if (tq.matchesWord() || tq.matches(\"*|\")) {\n        byTag();\n    } else if (tq.matches(\"[\")) {\n        byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        has();\n    } else if (tq.matches(\":contains(\")) {\n        contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        contains(true);\n    } else if (tq.matches(\":containsData(\")) {\n        containsData();\n    } else if (tq.matches(\":matches(\")) {\n        matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        matches(true);\n    } else if (tq.matches(\":not(\")) {\n        not();\n    } else if (tq.matchChomp(\":nth-child(\")) {\n        cssNthChild(false, false);\n    } else if (tq.matchChomp(\":nth-last-child(\")) {\n        cssNthChild(true, false);\n    } else if (tq.matchChomp(\":nth-of-type(\")) {\n        cssNthChild(false, true);\n    } else if (tq.matchChomp(\":nth-last-of-type(\")) {\n        cssNthChild(true, true);\n    } else if (tq.matchChomp(\":first-child\")) {\n        evals.add(new Evaluator.IsFirstChild());\n    } else if (tq.matchChomp(\":last-child\")) {\n        evals.add(new Evaluator.IsLastChild());\n    } else if (tq.matchChomp(\":first-of-type\")) {\n        evals.add(new Evaluator.IsFirstOfType());\n    } else if (tq.matchChomp(\":last-of-type\")) {\n        evals.add(new Evaluator.IsLastOfType());\n    } else if (tq.matchChomp(\":only-child\")) {\n        evals.add(new Evaluator.IsOnlyChild());\n    } else if (tq.matchChomp(\":only-of-type\")) {\n        evals.add(new Evaluator.IsOnlyOfType());\n    } else if (tq.matchChomp(\":empty\")) {\n        evals.add(new Evaluator.IsEmpty());\n    } else if (tq.matchChomp(\":root\")) {\n        evals.add(new Evaluator.IsRoot());\n    } else {\n        // unhandled\n        throw new Selector.SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n    }\n}", "diff": "--- org/jsoup/select/QueryParser.java@findElements\n+++ org/jsoup/select/QueryParser.java@findElements\n@@ -1,59 +1,60 @@\n private void findElements() {\n-    if (tq.matchChomp(\"#\"))\n+    if (tq.matchChomp(\"#\")) {\n         byId();\n-    else if (tq.matchChomp(\".\"))\n+    } else if (tq.matchChomp(\".\")) {\n         byClass();\n-    else if (tq.matchesWord() || tq.matches(\"*|\"))\n+    } else if (tq.matchesWord() || tq.matches(\"*|\")) {\n         byTag();\n-    else if (tq.matches(\"[\"))\n+    } else if (tq.matches(\"[\")) {\n         byAttribute();\n-    else if (tq.matchChomp(\"*\"))\n+    } else if (tq.matchChomp(\"*\")) {\n         allElements();\n-    else if (tq.matchChomp(\":lt(\"))\n+    } else if (tq.matchChomp(\":lt(\")) {\n         indexLessThan();\n-    else if (tq.matchChomp(\":gt(\"))\n+    } else if (tq.matchChomp(\":gt(\")) {\n         indexGreaterThan();\n-    else if (tq.matchChomp(\":eq(\"))\n+    } else if (tq.matchChomp(\":eq(\")) {\n         indexEquals();\n-    else if (tq.matches(\":has(\"))\n+    } else if (tq.matches(\":has(\")) {\n         has();\n-    else if (tq.matches(\":contains(\"))\n+    } else if (tq.matches(\":contains(\")) {\n         contains(false);\n-    else if (tq.matches(\":containsOwn(\"))\n+    } else if (tq.matches(\":containsOwn(\")) {\n         contains(true);\n-    else if (tq.matches(\":containsData(\"))\n+    } else if (tq.matches(\":containsData(\")) {\n         containsData();\n-    else if (tq.matches(\":matches(\"))\n+    } else if (tq.matches(\":matches(\")) {\n         matches(false);\n-    else if (tq.matches(\":matchesOwn(\"))\n+    } else if (tq.matches(\":matchesOwn(\")) {\n         matches(true);\n-    else if (tq.matches(\":not(\"))\n+    } else if (tq.matches(\":not(\")) {\n         not();\n-    else if (tq.matchChomp(\":nth-child(\"))\n+    } else if (tq.matchChomp(\":nth-child(\")) {\n         cssNthChild(false, false);\n-    else if (tq.matchChomp(\":nth-last-child(\"))\n+    } else if (tq.matchChomp(\":nth-last-child(\")) {\n         cssNthChild(true, false);\n-    else if (tq.matchChomp(\":nth-of-type(\"))\n+    } else if (tq.matchChomp(\":nth-of-type(\")) {\n         cssNthChild(false, true);\n-    else if (tq.matchChomp(\":nth-last-of-type(\"))\n+    } else if (tq.matchChomp(\":nth-last-of-type(\")) {\n         cssNthChild(true, true);\n-    else if (tq.matchChomp(\":first-child\"))\n+    } else if (tq.matchChomp(\":first-child\")) {\n         evals.add(new Evaluator.IsFirstChild());\n-    else if (tq.matchChomp(\":last-child\"))\n+    } else if (tq.matchChomp(\":last-child\")) {\n         evals.add(new Evaluator.IsLastChild());\n-    else if (tq.matchChomp(\":first-of-type\"))\n+    } else if (tq.matchChomp(\":first-of-type\")) {\n         evals.add(new Evaluator.IsFirstOfType());\n-    else if (tq.matchChomp(\":last-of-type\"))\n+    } else if (tq.matchChomp(\":last-of-type\")) {\n         evals.add(new Evaluator.IsLastOfType());\n-    else if (tq.matchChomp(\":only-child\"))\n+    } else if (tq.matchChomp(\":only-child\")) {\n         evals.add(new Evaluator.IsOnlyChild());\n-    else if (tq.matchChomp(\":only-of-type\"))\n+    } else if (tq.matchChomp(\":only-of-type\")) {\n         evals.add(new Evaluator.IsOnlyOfType());\n-    else if (tq.matchChomp(\":empty\"))\n+    } else if (tq.matchChomp(\":empty\")) {\n         evals.add(new Evaluator.IsEmpty());\n-    else if (tq.matchChomp(\":root\"))\n+    } else if (tq.matchChomp(\":root\")) {\n         evals.add(new Evaluator.IsRoot());\n-    else\n+    } else {\n         // unhandled\n-        throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        throw new Selector.SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void findElements() {\n    if (tq.matchChomp(\"#\"))\n        byId();\n    else if (tq.matchChomp(\".\"))\n        byClass();\n    else if (tq.matchesWord() || tq.matches(\"*|\"))\n        byTag();\n    else if (tq.matches(\"[\"))\n        byAttribute();\n    else if (tq.matchChomp(\"*\"))\n        allElements();\n    else if (tq.matchChomp(\":lt(\"))\n        indexLessThan();\n    else if (tq.matchChomp(\":gt(\"))\n        indexGreaterThan();\n    else if (tq.matchChomp(\":eq(\"))\n        indexEquals();\n    else if (tq.matches(\":has(\"))\n        has();\n    else if (tq.matches(\":contains(\"))\n        contains(false);\n    else if (tq.matches(\":containsOwn(\"))\n        contains(true);\n    else if (tq.matches(\":containsData(\"))\n        containsData();\n    else if (tq.matches(\":matches(\"))\n        matches(false);\n    else if (tq.matches(\":matchesOwn(\"))\n        matches(true);\n    else if (tq.matches(\":not(\"))\n        not();\n    else if (tq.matchChomp(\":nth-child(\"))\n        cssNthChild(false, false);\n    else if (tq.matchChomp(\":nth-last-child(\"))\n        cssNthChild(true, false);\n    else if (tq.matchChomp(\":nth-of-type(\"))\n        cssNthChild(false, true);\n    else if (tq.matchChomp(\":nth-last-of-type(\"))\n        cssNthChild(true, true);\n    else if (tq.matchChomp(\":first-child\"))\n        evals.add(new Evaluator.IsFirstChild());\n    else if (tq.matchChomp(\":last-child\"))\n        evals.add(new Evaluator.IsLastChild());\n    else if (tq.matchChomp(\":first-of-type\"))\n        evals.add(new Evaluator.IsFirstOfType());\n    else if (tq.matchChomp(\":last-of-type\"))\n        evals.add(new Evaluator.IsLastOfType());\n    else if (tq.matchChomp(\":only-child\"))\n        evals.add(new Evaluator.IsOnlyChild());\n    else if (tq.matchChomp(\":only-of-type\"))\n        evals.add(new Evaluator.IsOnlyOfType());\n    else if (tq.matchChomp(\":empty\"))\n        evals.add(new Evaluator.IsEmpty());\n    else if (tq.matchChomp(\":root\"))\n        evals.add(new Evaluator.IsRoot());\n    else\n        // unhandled\n        throw new Selector.SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n}", "diff": "--- org/jsoup/select/QueryParser.java@findElements\n+++ org/jsoup/select/QueryParser.java@findElements\n@@ -55,5 +55,5 @@\n         evals.add(new Evaluator.IsRoot());\n     else\n         // unhandled\n-        throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        throw new Selector.SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void findElements() {\n    if (tq.matchChomp(\"#\")) {\n        byId();\n    } else if (tq.matchChomp(\".\")) {\n        byClass();\n    } else if (tq.matchesWord() || tq.matches(\"*|\")) {\n        byTag();\n    } else if (tq.matches(\"[\") || tq.matches(\"^[\")) { // Fixed: Added \"^[\" to handle attribute notation \"^=\"\n        byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        has();\n    } else if (tq.matches(\":contains(\")) {\n        contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        contains(true);\n    } else if (tq.matches(\":containsData(\")) {\n        containsData();\n    } else if (tq.matches(\":matches(\")) {\n        matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        matches(true);\n    } else if (tq.matches(\":not(\")) {\n        not();\n    } else if (tq.matchChomp(\":nth-child(\")) {\n        cssNthChild(false, false);\n    } else if (tq.matchChomp(\":nth-last-child(\")) {\n        cssNthChild(true, false);\n    } else if (tq.matchChomp(\":nth-of-type(\")) {\n        cssNthChild(false, true);\n    } else if (tq.matchChomp(\":nth-last-of-type(\")) {\n        cssNthChild(true, true);\n    } else if (tq.matchChomp(\":first-child\")) {\n        evals.add(new Evaluator.IsFirstChild());\n    } else if (tq.matchChomp(\":last-child\")) {\n        evals.add(new Evaluator.IsLastChild());\n    } else if (tq.matchChomp(\":first-of-type\")) {\n        evals.add(new Evaluator.IsFirstOfType());\n    } else if (tq.matchChomp(\":last-of-type\")) {\n        evals.add(new Evaluator.IsLastOfType());\n    } else if (tq.matchChomp(\":only-child\")) {\n        evals.add(new Evaluator.IsOnlyChild());\n    } else if (tq.matchChomp(\":only-of-type\")) {\n        evals.add(new Evaluator.IsOnlyOfType());\n    } else if (tq.matchChomp(\":empty\")) {\n        evals.add(new Evaluator.IsEmpty());\n    } else if (tq.matchChomp(\":root\")) {\n        evals.add(new Evaluator.IsRoot());\n    } else {\n        // unhandled\n        throw new Selector.SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder())); // Fixed: Used String.format() to format the error message\n    }\n}", "diff": "--- org/jsoup/select/QueryParser.java@findElements\n+++ org/jsoup/select/QueryParser.java@findElements\n@@ -1,59 +1,60 @@\n private void findElements() {\n-    if (tq.matchChomp(\"#\"))\n+    if (tq.matchChomp(\"#\")) {\n         byId();\n-    else if (tq.matchChomp(\".\"))\n+    } else if (tq.matchChomp(\".\")) {\n         byClass();\n-    else if (tq.matchesWord() || tq.matches(\"*|\"))\n+    } else if (tq.matchesWord() || tq.matches(\"*|\")) {\n         byTag();\n-    else if (tq.matches(\"[\"))\n+    } else if (tq.matches(\"[\") || tq.matches(\"^[\")) { // Fixed: Added \"^[\" to handle attribute notation \"^=\"\n         byAttribute();\n-    else if (tq.matchChomp(\"*\"))\n+    } else if (tq.matchChomp(\"*\")) {\n         allElements();\n-    else if (tq.matchChomp(\":lt(\"))\n+    } else if (tq.matchChomp(\":lt(\")) {\n         indexLessThan();\n-    else if (tq.matchChomp(\":gt(\"))\n+    } else if (tq.matchChomp(\":gt(\")) {\n         indexGreaterThan();\n-    else if (tq.matchChomp(\":eq(\"))\n+    } else if (tq.matchChomp(\":eq(\")) {\n         indexEquals();\n-    else if (tq.matches(\":has(\"))\n+    } else if (tq.matches(\":has(\")) {\n         has();\n-    else if (tq.matches(\":contains(\"))\n+    } else if (tq.matches(\":contains(\")) {\n         contains(false);\n-    else if (tq.matches(\":containsOwn(\"))\n+    } else if (tq.matches(\":containsOwn(\")) {\n         contains(true);\n-    else if (tq.matches(\":containsData(\"))\n+    } else if (tq.matches(\":containsData(\")) {\n         containsData();\n-    else if (tq.matches(\":matches(\"))\n+    } else if (tq.matches(\":matches(\")) {\n         matches(false);\n-    else if (tq.matches(\":matchesOwn(\"))\n+    } else if (tq.matches(\":matchesOwn(\")) {\n         matches(true);\n-    else if (tq.matches(\":not(\"))\n+    } else if (tq.matches(\":not(\")) {\n         not();\n-    else if (tq.matchChomp(\":nth-child(\"))\n+    } else if (tq.matchChomp(\":nth-child(\")) {\n         cssNthChild(false, false);\n-    else if (tq.matchChomp(\":nth-last-child(\"))\n+    } else if (tq.matchChomp(\":nth-last-child(\")) {\n         cssNthChild(true, false);\n-    else if (tq.matchChomp(\":nth-of-type(\"))\n+    } else if (tq.matchChomp(\":nth-of-type(\")) {\n         cssNthChild(false, true);\n-    else if (tq.matchChomp(\":nth-last-of-type(\"))\n+    } else if (tq.matchChomp(\":nth-last-of-type(\")) {\n         cssNthChild(true, true);\n-    else if (tq.matchChomp(\":first-child\"))\n+    } else if (tq.matchChomp(\":first-child\")) {\n         evals.add(new Evaluator.IsFirstChild());\n-    else if (tq.matchChomp(\":last-child\"))\n+    } else if (tq.matchChomp(\":last-child\")) {\n         evals.add(new Evaluator.IsLastChild());\n-    else if (tq.matchChomp(\":first-of-type\"))\n+    } else if (tq.matchChomp(\":first-of-type\")) {\n         evals.add(new Evaluator.IsFirstOfType());\n-    else if (tq.matchChomp(\":last-of-type\"))\n+    } else if (tq.matchChomp(\":last-of-type\")) {\n         evals.add(new Evaluator.IsLastOfType());\n-    else if (tq.matchChomp(\":only-child\"))\n+    } else if (tq.matchChomp(\":only-child\")) {\n         evals.add(new Evaluator.IsOnlyChild());\n-    else if (tq.matchChomp(\":only-of-type\"))\n+    } else if (tq.matchChomp(\":only-of-type\")) {\n         evals.add(new Evaluator.IsOnlyOfType());\n-    else if (tq.matchChomp(\":empty\"))\n+    } else if (tq.matchChomp(\":empty\")) {\n         evals.add(new Evaluator.IsEmpty());\n-    else if (tq.matchChomp(\":root\"))\n+    } else if (tq.matchChomp(\":root\")) {\n         evals.add(new Evaluator.IsRoot());\n-    else\n+    } else {\n         // unhandled\n-        throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        throw new Selector.SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder())); // Fixed: Used String.format() to format the error message\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void findElements() {\n    if (tq.matchChomp(\"#\")) {\n        byId();\n    } else if (tq.matchChomp(\".\")) {\n        byClass();\n    } else if (tq.matchesWord() || tq.matches(\"*|\")) {\n        byTag();\n    } else if (tq.matches(\"[\")) {\n        byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        has();\n    } else if (tq.matches(\":contains(\")) {\n        contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        contains(true);\n    } else if (tq.matches(\":containsData(\")) {\n        containsData();\n    } else if (tq.matches(\":matches(\")) {\n        matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        matches(true);\n    } else if (tq.matches(\":not(\")) {\n        not();\n    } else if (tq.matchChomp(\":nth-child(\")) {\n        cssNthChild(false, false);\n    } else if (tq.matchChomp(\":nth-last-child(\")) {\n        cssNthChild(true, false);\n    } else if (tq.matchChomp(\":nth-of-type(\")) {\n        cssNthChild(false, true);\n    } else if (tq.matchChomp(\":nth-last-of-type(\")) {\n        cssNthChild(true, true);\n    } else if (tq.matchChomp(\":first-child\")) {\n        evals.add(new Evaluator.IsFirstChild());\n    } else if (tq.matchChomp(\":last-child\")) {\n        evals.add(new Evaluator.IsLastChild());\n    } else if (tq.matchChomp(\":first-of-type\")) {\n        evals.add(new Evaluator.IsFirstOfType());\n    } else if (tq.matchChomp(\":last-of-type\")) {\n        evals.add(new Evaluator.IsLastOfType());\n    } else if (tq.matchChomp(\":only-child\")) {\n        evals.add(new Evaluator.IsOnlyChild());\n    } else if (tq.matchChomp(\":only-of-type\")) {\n        evals.add(new Evaluator.IsOnlyOfType());\n    } else if (tq.matchChomp(\":empty\")) {\n        evals.add(new Evaluator.IsEmpty());\n    } else if (tq.matchChomp(\":root\")) {\n        evals.add(new Evaluator.IsRoot());\n    } else {\n        // unhandled\n        throw new Selector.SelectorParseException(\n            \"Could not parse query '%s': unexpected token at '%s'\", \n            query, \n            tq.remainder()\n        );\n    }\n}", "diff": "--- org/jsoup/select/QueryParser.java@findElements\n+++ org/jsoup/select/QueryParser.java@findElements\n@@ -1,59 +1,64 @@\n private void findElements() {\n-    if (tq.matchChomp(\"#\"))\n+    if (tq.matchChomp(\"#\")) {\n         byId();\n-    else if (tq.matchChomp(\".\"))\n+    } else if (tq.matchChomp(\".\")) {\n         byClass();\n-    else if (tq.matchesWord() || tq.matches(\"*|\"))\n+    } else if (tq.matchesWord() || tq.matches(\"*|\")) {\n         byTag();\n-    else if (tq.matches(\"[\"))\n+    } else if (tq.matches(\"[\")) {\n         byAttribute();\n-    else if (tq.matchChomp(\"*\"))\n+    } else if (tq.matchChomp(\"*\")) {\n         allElements();\n-    else if (tq.matchChomp(\":lt(\"))\n+    } else if (tq.matchChomp(\":lt(\")) {\n         indexLessThan();\n-    else if (tq.matchChomp(\":gt(\"))\n+    } else if (tq.matchChomp(\":gt(\")) {\n         indexGreaterThan();\n-    else if (tq.matchChomp(\":eq(\"))\n+    } else if (tq.matchChomp(\":eq(\")) {\n         indexEquals();\n-    else if (tq.matches(\":has(\"))\n+    } else if (tq.matches(\":has(\")) {\n         has();\n-    else if (tq.matches(\":contains(\"))\n+    } else if (tq.matches(\":contains(\")) {\n         contains(false);\n-    else if (tq.matches(\":containsOwn(\"))\n+    } else if (tq.matches(\":containsOwn(\")) {\n         contains(true);\n-    else if (tq.matches(\":containsData(\"))\n+    } else if (tq.matches(\":containsData(\")) {\n         containsData();\n-    else if (tq.matches(\":matches(\"))\n+    } else if (tq.matches(\":matches(\")) {\n         matches(false);\n-    else if (tq.matches(\":matchesOwn(\"))\n+    } else if (tq.matches(\":matchesOwn(\")) {\n         matches(true);\n-    else if (tq.matches(\":not(\"))\n+    } else if (tq.matches(\":not(\")) {\n         not();\n-    else if (tq.matchChomp(\":nth-child(\"))\n+    } else if (tq.matchChomp(\":nth-child(\")) {\n         cssNthChild(false, false);\n-    else if (tq.matchChomp(\":nth-last-child(\"))\n+    } else if (tq.matchChomp(\":nth-last-child(\")) {\n         cssNthChild(true, false);\n-    else if (tq.matchChomp(\":nth-of-type(\"))\n+    } else if (tq.matchChomp(\":nth-of-type(\")) {\n         cssNthChild(false, true);\n-    else if (tq.matchChomp(\":nth-last-of-type(\"))\n+    } else if (tq.matchChomp(\":nth-last-of-type(\")) {\n         cssNthChild(true, true);\n-    else if (tq.matchChomp(\":first-child\"))\n+    } else if (tq.matchChomp(\":first-child\")) {\n         evals.add(new Evaluator.IsFirstChild());\n-    else if (tq.matchChomp(\":last-child\"))\n+    } else if (tq.matchChomp(\":last-child\")) {\n         evals.add(new Evaluator.IsLastChild());\n-    else if (tq.matchChomp(\":first-of-type\"))\n+    } else if (tq.matchChomp(\":first-of-type\")) {\n         evals.add(new Evaluator.IsFirstOfType());\n-    else if (tq.matchChomp(\":last-of-type\"))\n+    } else if (tq.matchChomp(\":last-of-type\")) {\n         evals.add(new Evaluator.IsLastOfType());\n-    else if (tq.matchChomp(\":only-child\"))\n+    } else if (tq.matchChomp(\":only-child\")) {\n         evals.add(new Evaluator.IsOnlyChild());\n-    else if (tq.matchChomp(\":only-of-type\"))\n+    } else if (tq.matchChomp(\":only-of-type\")) {\n         evals.add(new Evaluator.IsOnlyOfType());\n-    else if (tq.matchChomp(\":empty\"))\n+    } else if (tq.matchChomp(\":empty\")) {\n         evals.add(new Evaluator.IsEmpty());\n-    else if (tq.matchChomp(\":root\"))\n+    } else if (tq.matchChomp(\":root\")) {\n         evals.add(new Evaluator.IsRoot());\n-    else\n+    } else {\n         // unhandled\n-        throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        throw new Selector.SelectorParseException(\n+            \"Could not parse query '%s': unexpected token at '%s'\", \n+            query, \n+            tq.remainder()\n+        );\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]