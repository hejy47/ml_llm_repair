[{"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n    EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    if (serializeAsIndex == null) {\n        serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n    }\n    return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format != null) {\n        Boolean serializeAsIndex = _isShapeWrittenUsingIndex(handledType(), format, false);\n        if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n            return new EnumSerializer(_values, serializeAsIndex);\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null || shape == Shape.ANY || shape == Shape.SCALAR || shape == Shape.NATURAL) {\n        return null;\n    } else if (shape == Shape.STRING) {\n        return Boolean.FALSE;\n    } else if (shape == Shape.ARRAY || shape.isNumeric()) {\n        return Boolean.TRUE;\n    } else {\n        throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -1,6 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n-        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n+    EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n+    if (serializeAsIndex == null) {\n+        serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n+    }\n     return new EnumSerializer(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -1,12 +1,10 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n-    if (property != null) {\n-        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n-        if (format != null) {\n-            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n-            if (serializeAsIndex != _serializeAsIndex) {\n-                return new EnumSerializer(_values, serializeAsIndex);\n-            }\n+    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n+    if (format != null) {\n+        Boolean serializeAsIndex = _isShapeWrittenUsingIndex(handledType(), format, false);\n+        if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n+            return new EnumSerializer(_values, serializeAsIndex);\n         }\n     }\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n    EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    if (serializeAsIndex == null) {\n        serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n    }\n    return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null || shape == Shape.ANY || shape == Shape.SCALAR || shape == Shape.NATURAL) {\n        return null;\n    }\n    if (shape == Shape.STRING) {\n        return Boolean.FALSE;\n    }\n    if (shape.isNumeric() || shape == Shape.ARRAY) {\n        return Boolean.TRUE;\n    }\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -1,6 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n-        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n+    EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n+    if (serializeAsIndex == null) {\n+        serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n+    }\n     return new EnumSerializer(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -4,7 +4,7 @@\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n-            if (serializeAsIndex != _serializeAsIndex) {\n+            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer<?> construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n        EnumValues<?> v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    return new EnumSerializer<>(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer<>(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        return null;\n    }\n    // i.e. \"default\", check dynamically\n    if (shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    }\n    // 19-May-2016, tatu: also consider \"natural\" shape\n    if (shape == Shape.STRING || shape == Shape.NATURAL) {\n        return Boolean.FALSE;\n    }\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n    if (shape.isNumeric() || (shape == Shape.ARRAY)) {\n        return Boolean.TRUE;\n    }\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -1,6 +1,6 @@\n @SuppressWarnings(\"unchecked\")\n-public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n-        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n+public static EnumSerializer<?> construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n+        EnumValues<?> v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n-    return new EnumSerializer(v, serializeAsIndex);\n+    return new EnumSerializer<>(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -5,7 +5,7 @@\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n             if (serializeAsIndex != _serializeAsIndex) {\n-                return new EnumSerializer(_values, serializeAsIndex);\n+                return new EnumSerializer<>(_values, serializeAsIndex);\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    // Fix: Check if format is null before passing it to the _isShapeWrittenUsingIndex method\n    if (format == null || !_isShapeWrittenUsingIndex(enumClass, format, true)) {\n            serializeAsIndex = Boolean.FALSE;\n        }\n    return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            // Fix: Check if serializeAsIndex is null before checking if it's different from _serializeAsIndex\n            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        // Fix: Return null when shape is null\n        return null;\n    }\n    // i.e. \"default\", check dynamically\n    if (shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    }\n    // 19-May-2016, tatu: also consider \"natural\" shape\n    if (shape == Shape.STRING || shape == Shape.NATURAL) {\n        return Boolean.FALSE;\n    }\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n    if (shape.isNumeric() || (shape == Shape.ARRAY)) {\n        return Boolean.TRUE;\n    }\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -2,5 +2,9 @@\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n         EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n+    // Fix: Check if format is null before passing it to the _isShapeWrittenUsingIndex method\n+    if (format == null || !_isShapeWrittenUsingIndex(enumClass, format, true)) {\n+            serializeAsIndex = Boolean.FALSE;\n+        }\n     return new EnumSerializer(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -4,7 +4,8 @@\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n-            if (serializeAsIndex != _serializeAsIndex) {\n+            // Fix: Check if serializeAsIndex is null before checking if it's different from _serializeAsIndex\n+            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    if (serializeAsIndex == null) {\n      // if serializeAsIndex is not set (null), set it to default value\n      serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n    }\n    return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                // if serializeAsIndex is not null, set it to the provided value\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        return null;\n    }\n    // i.e. \"default\", check dynamically\n    if (shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    }\n    // 19-May-2016, tatu: also consider \"natural\" shape\n    if (shape == Shape.STRING || shape == Shape.NATURAL || shape == Shape.OBJECT) {\n        // if shape is OBJECT, return null to defer to default behavior\n        return shape == Shape.OBJECT ? null : Boolean.FALSE;\n    }\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n    if (shape.isNumeric() || (shape == Shape.ARRAY)) {\n        return Boolean.TRUE;\n    }\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -2,5 +2,9 @@\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n         EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n+    if (serializeAsIndex == null) {\n+      // if serializeAsIndex is not set (null), set it to default value\n+      serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n+    }\n     return new EnumSerializer(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -4,7 +4,8 @@\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n-            if (serializeAsIndex != _serializeAsIndex) {\n+            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n+                // if serializeAsIndex is not null, set it to the provided value\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n    EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    if (format != null) {\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            serializeAsIndex = true;\n        }\n    }\n    return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        return null;\n    } else if (shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    } else if (shape == Shape.STRING || shape == Shape.NATURAL) {\n        return Boolean.FALSE;\n    } else if (shape == Shape.ARRAY || shape == Shape.OBJECT) {\n        return Boolean.TRUE;\n    }\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -1,6 +1,12 @@\n @SuppressWarnings(\"unchecked\")\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n-        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n+    EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n+    if (format != null) {\n+        JsonFormat.Shape shape = format.getShape();\n+        if (shape.isNumeric()) {\n+            serializeAsIndex = true;\n+        }\n+    }\n     return new EnumSerializer(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -4,7 +4,7 @@\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n-            if (serializeAsIndex != _serializeAsIndex) {\n+            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n    EnumValues v = EnumValues.constructFromName(config, (Class<? extends Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(handledType(), format, false);\n            if (serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        return null;\n    }\n    // i.e. \"default\", check dynamically\n    if (shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    }\n    // 19-May-2016, tatu: also consider \"natural\" shape\n    if (shape == Shape.STRING || shape == Shape.NATURAL || shape == Shape.OBJECT) {\n        return Boolean.FALSE;\n    }\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n    if (shape.isNumeric() || (shape == Shape.ARRAY)) {\n        return Boolean.TRUE;\n    }\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -1,6 +1,6 @@\n @SuppressWarnings(\"unchecked\")\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n-        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n+    EnumValues v = EnumValues.constructFromName(config, (Class<? extends Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n     return new EnumSerializer(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -3,7 +3,7 @@\n     if (property != null) {\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n-            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n+            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(handledType(), format, false);\n             if (serializeAsIndex != _serializeAsIndex) {\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    return new EnumSerializer(v, serializeAsIndex == null ? false : serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null || shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    }\n    if (shape == Shape.STRING || shape == Shape.NATURAL || shape == Shape.OBJECT) {\n        return Boolean.FALSE;\n    }\n    if (shape.isNumeric() || shape == Shape.ARRAY) {\n        return Boolean.TRUE;\n    }\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -2,5 +2,5 @@\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n         EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n-    return new EnumSerializer(v, serializeAsIndex);\n+    return new EnumSerializer(v, serializeAsIndex == null ? false : serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -4,7 +4,7 @@\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n-            if (serializeAsIndex != _serializeAsIndex) {\n+            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n    EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    if (serializeAsIndex == null) {\n        serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n    }\n    return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex == null) {\n                serializeAsIndex = serializers.getConfig().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n            }\n            if (serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        return null;\n    }\n    // i.e. \"default\", check dynamically\n    if (shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    }\n    // 19-May-2016, tatu: also consider \"natural\" shape\n    if (shape == Shape.STRING || shape == Shape.NATURAL) {\n        return Boolean.FALSE;\n    }\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n    if (shape.isNumeric() || (shape == Shape.ARRAY)) {\n        return Boolean.TRUE;\n    }\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -1,6 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n-        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n+    EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n+    if (serializeAsIndex == null) {\n+        serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n+    }\n     return new EnumSerializer(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -4,6 +4,9 @@\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n+            if (serializeAsIndex == null) {\n+                serializeAsIndex = serializers.getConfig().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n+            }\n             if (serializeAsIndex != _serializeAsIndex) {\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer<?> construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n        EnumValues<?> v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    return new EnumSerializer<>(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers.getConfig(), property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format);\n            if (serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer<>(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        return null;\n    }\n    // i.e. \"default\", check dynamically\n    if (shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    }\n    // 19-May-2016, tatu: also consider \"natural\" shape\n    if (shape == Shape.STRING || shape == Shape.NATURAL) {\n        return Boolean.FALSE;\n    }\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n    if (shape.isNumeric() || (shape == Shape.ARRAY)) {\n        return Boolean.TRUE;\n    }\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as property annotation\", shape, enumClass.getName()));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -1,6 +1,6 @@\n @SuppressWarnings(\"unchecked\")\n-public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n-        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n+public static EnumSerializer<?> construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n+        EnumValues<?> v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n-    return new EnumSerializer(v, serializeAsIndex);\n+    return new EnumSerializer<>(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -1,11 +1,11 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n+public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) {\n     if (property != null) {\n-        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n+        JsonFormat.Value format = findFormatOverrides(serializers.getConfig(), property, handledType());\n         if (format != null) {\n-            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n+            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format);\n             if (serializeAsIndex != _serializeAsIndex) {\n-                return new EnumSerializer(_values, serializeAsIndex);\n+                return new EnumSerializer<>(_values, serializeAsIndex);\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    if (serializeAsIndex == null) {\n        serializeAsIndex = v.serializedUsingIndex();\n    }\n    return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        return null;\n    }\n    // i.e. \"default\", check dynamically\n    if (shape == Shape.ANY || shape == Shape.SCALAR || shape == Shape.NATURAL) {\n        return null;\n    }\n    if (shape == Shape.STRING) {\n        return Boolean.FALSE;\n    }\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n    if (shape.isNumeric() || (shape == Shape.ARRAY)) {\n        return Boolean.TRUE;\n    }\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -2,5 +2,8 @@\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n         EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n+    if (serializeAsIndex == null) {\n+        serializeAsIndex = v.serializedUsingIndex();\n+    }\n     return new EnumSerializer(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -4,7 +4,7 @@\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n-            if (serializeAsIndex != _serializeAsIndex) {\n+            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer<?> construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n    EnumValues<?> v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    return new EnumSerializer<>(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer<>(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        return null;\n    }\n    // i.e. \"default\", check dynamically\n    if (shape == JsonFormat.Shape.ANY || shape == JsonFormat.Shape.SCALAR) {\n        return null;\n    }\n    // 19-May-2016, tatu: also consider \"natural\" shape\n    if (shape == JsonFormat.Shape.STRING || shape == JsonFormat.Shape.NATURAL) {\n        return Boolean.FALSE;\n    }\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n    if (shape.isNumeric() || (shape == JsonFormat.Shape.ARRAY)) {\n        return Boolean.TRUE;\n    }\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -1,6 +1,6 @@\n @SuppressWarnings(\"unchecked\")\n-public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n-        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n+public static EnumSerializer<?> construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n+    EnumValues<?> v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n-    return new EnumSerializer(v, serializeAsIndex);\n+    return new EnumSerializer<>(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -5,7 +5,7 @@\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n             if (serializeAsIndex != _serializeAsIndex) {\n-                return new EnumSerializer(_values, serializeAsIndex);\n+                return new EnumSerializer<>(_values, serializeAsIndex);\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    if (serializeAsIndex == null) {\n        serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n    }\n    return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null || shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    }\n    if (shape == Shape.STRING || shape == Shape.NATURAL) {\n        return Boolean.FALSE;\n    }\n    if (shape.isNumeric() || shape == Shape.ARRAY) {\n        return Boolean.TRUE;\n    }\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -2,5 +2,8 @@\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n         EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n+    if (serializeAsIndex == null) {\n+        serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n+    }\n     return new EnumSerializer(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -4,7 +4,7 @@\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n-            if (serializeAsIndex != _serializeAsIndex) {\n+            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    // check if serializeAsIndex is null or not since it can take Boolean value\n    if(serializeAsIndex != null){\n        return new EnumSerializer(v, serializeAsIndex);\n    }\n    return new EnumSerializer(v);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n        \t// check if serializeAsIndex is null or not since it can take Boolean value\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        return null;\n    }\n    // i.e. \"default\", check dynamically\n    if (shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    }\n    // 19-May-2016, tatu: also consider \"natural\" shape\n    if (shape == Shape.STRING || shape == Shape.NATURAL) {\n        return Boolean.FALSE;\n    }\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n    if (shape.isNumeric() || (shape == Shape.ARRAY)) {\n        return Boolean.TRUE;\n    }\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -2,5 +2,9 @@\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n         EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n-    return new EnumSerializer(v, serializeAsIndex);\n+    // check if serializeAsIndex is null or not since it can take Boolean value\n+    if(serializeAsIndex != null){\n+        return new EnumSerializer(v, serializeAsIndex);\n+    }\n+    return new EnumSerializer(v);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -3,8 +3,9 @@\n     if (property != null) {\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n+        \t// check if serializeAsIndex is null or not since it can take Boolean value\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n-            if (serializeAsIndex != _serializeAsIndex) {\n+            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n        Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n        if (v == null) {\n            return null;\n        }\n        return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        return null;\n    }\n    // i.e. \"default\", check dynamically\n    if (shape == Shape.ANY) {\n        return null;\n    }\n    // all other cases, assume shapes apply\n    if (shape == Shape.STRING || shape == Shape.NATURAL || shape == Shape.SCALAR) {\n        return false;\n    }\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n    if (shape == Shape.ARRAY || shape.isNumeric()) {\n        return true;\n    }\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -1,6 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n         EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n-    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n-    return new EnumSerializer(v, serializeAsIndex);\n+        Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n+        if (v == null) {\n+            return null;\n+        }\n+        return new EnumSerializer(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -4,7 +4,7 @@\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n-            if (serializeAsIndex != _serializeAsIndex) {\n+            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass.getRawType());\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass.getRawType(), format, true);\n    return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null) {\n        return null;\n    }\n    // i.e. \"default\", check dynamically\n    if (shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    }\n    // 19-May-2016, tatu: also consider \"natural\" shape\n    if (shape == Shape.STRING || shape == Shape.NATURAL || (shape == Shape.OBJECT && fromClass)) {\n        return Boolean.FALSE;\n    }\n    // 01-Oct-2014, tatu: For convenience, consider \"as-array\" to also mean 'yes, use index')\n    if (shape.isNumeric() || (shape == Shape.ARRAY)) {\n        return Boolean.TRUE;\n    }\n    // 07-Mar-2017, tatu: Also means `OBJECT` not available as property annotation...\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -1,6 +1,6 @@\n @SuppressWarnings(\"unchecked\")\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n-        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n-    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n+        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass.getRawType());\n+    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass.getRawType(), format, true);\n     return new EnumSerializer(v, serializeAsIndex);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\n@SuppressWarnings(\"unchecked\")\npublic static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n        EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n    Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n    if (serializeAsIndex == null) {\n        serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n    }\n\n    return new EnumSerializer(v, serializeAsIndex);\n}\n\n## Fixed Function 2\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {\n    if (property != null) {\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format != null) {\n            Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                return new EnumSerializer(_values, serializeAsIndex);\n            }\n        }\n    }\n    return this;\n}\n\n## Fixed Function 3\nprotected static Boolean _isShapeWrittenUsingIndex(Class<?> enumClass, JsonFormat.Value format, boolean fromClass) {\n    JsonFormat.Shape shape = (format == null) ? null : format.getShape();\n    if (shape == null || shape == Shape.ANY || shape == Shape.SCALAR) {\n        return null;\n    }\n    if (shape == Shape.STRING || shape == Shape.NATURAL) {\n        return Boolean.FALSE;\n    }\n    if (shape.isNumeric() || shape == Shape.ARRAY || shape == Shape.OBJECT) {\n        return Boolean.TRUE;\n    }\n    throw new IllegalArgumentException(String.format(\"Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation\", shape, enumClass.getName(), (fromClass ? \"class\" : \"property\")));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@construct\n@@ -2,5 +2,9 @@\n public static EnumSerializer construct(Class<?> enumClass, SerializationConfig config, BeanDescription beanDesc, JsonFormat.Value format) {\n         EnumValues v = EnumValues.constructFromName(config, (Class<Enum<?>>) enumClass);\n     Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);\n+    if (serializeAsIndex == null) {\n+        serializeAsIndex = config.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n+    }\n+\n     return new EnumSerializer(v, serializeAsIndex);\n }\n--- com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/EnumSerializer.java@createContextual\n@@ -4,7 +4,7 @@\n         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n         if (format != null) {\n             Boolean serializeAsIndex = _isShapeWrittenUsingIndex(property.getType().getRawClass(), format, false);\n-            if (serializeAsIndex != _serializeAsIndex) {\n+            if (serializeAsIndex != null && serializeAsIndex != _serializeAsIndex) {\n                 return new EnumSerializer(_values, serializeAsIndex);\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}]