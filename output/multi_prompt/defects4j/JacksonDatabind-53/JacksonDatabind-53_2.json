[{"output": "protected JavaType _fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings) {\n    JavaType result = _findWellKnownSimple(rawType);\n    if (result != null) {\n        return result;\n    }\n\n    boolean cachable = (bindings == null) || bindings.isEmpty();\n    if (cachable) {\n        result = _typeCache.get(rawType);\n        if (result != null) {\n            return result;\n        }\n    }\n\n    if (context == null) {\n        context = new ClassStack();\n    } else {\n        context = context.child();\n    }\n    context.add(rawType);\n\n    if (rawType.isArray()) {\n        result = ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\n    } else {\n        JavaType superClass;\n        JavaType[] superInterfaces;\n        if (rawType.isInterface()) {\n            superClass = null;\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        } else {\n            superClass = _resolveSuperClass(context, rawType, bindings);\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        }\n\n        if (rawType == Properties.class) {\n            result = MapType.construct(rawType, bindings, superClass, superInterfaces, CORE_TYPE_STRING, CORE_TYPE_STRING);\n        } else if (superClass != null) {\n            result = superClass.refine(rawType, bindings, superInterfaces);\n        } else {\n            result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\n            if (result == null) {\n                result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\n                if (result == null) {\n                    result = _newSimpleType(rawType, bindings, superClass, superInterfaces);\n                }\n            }\n        }\n    }\n\n    context.remove(rawType);\n    context.resolveSelfReferences(result);\n\n    if (cachable) {\n        _typeCache.putIfAbsent(rawType, result);\n    }\n\n    return result;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 20}]