[{"output": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matches(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\")) {\n        return contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        return contains(true);\n    } else if (tq.matches(\":matches(\")) {\n        return matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        return matches(true);\n    } else {\n        // unhandled\n        throw new SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n    }\n}", "diff": "--- org/jsoup/select/Selector.java@findElements\n+++ org/jsoup/select/Selector.java@findElements\n@@ -27,6 +27,6 @@\n         return matches(true);\n     } else {\n         // unhandled\n-        throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        throw new SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 13}, {"output": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matches(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\")) {\n        return contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        return contains(true);\n    } else if (tq.matches(\":matches(\")) {\n        return matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        return matches(true);\n    } else {\n        // unhandled\n        String remainder = tq.remainder();\n        if (StringUtils.isNotBlank(remainder)) {\n            throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, remainder);\n        } else {\n            throw new SelectorParseException(\"Could not parse query '%s': unexpected end of query string\", query);\n        }\n    }\n}", "diff": "--- org/jsoup/select/Selector.java@findElements\n+++ org/jsoup/select/Selector.java@findElements\n@@ -27,6 +27,11 @@\n         return matches(true);\n     } else {\n         // unhandled\n-        throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        String remainder = tq.remainder();\n+        if (StringUtils.isNotBlank(remainder)) {\n+            throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, remainder);\n+        } else {\n+            throw new SelectorParseException(\"Could not parse query '%s': unexpected end of query string\", query);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matches(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\")) {\n        return contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        return contains(true);\n    } else if (tq.matches(\":matches(\")) {\n        return matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        return matches(true);\n    } else {\n        // unhandled\n        throw new Selector.ParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n    }\n}", "diff": "--- org/jsoup/select/Selector.java@findElements\n+++ org/jsoup/select/Selector.java@findElements\n@@ -27,6 +27,6 @@\n         return matches(true);\n     } else {\n         // unhandled\n-        throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        throw new Selector.ParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matches(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matchChomp(\":has(\")) {\n        return has();\n    } else if (tq.matchChomp(\":contains(\")) {\n        return contains(false);\n    } else if (tq.matchChomp(\":containsOwn(\")) {\n        return contains(true);\n    } else if (tq.matchChomp(\":matches(\")) {\n        return matches(false);\n    } else if (tq.matchChomp(\":matchesOwn(\")) {\n        return matches(true);\n    } else {\n        // Unhandled\n        throw new SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n    }\n}", "diff": "--- org/jsoup/select/Selector.java@findElements\n+++ org/jsoup/select/Selector.java@findElements\n@@ -15,18 +15,18 @@\n         return indexGreaterThan();\n     } else if (tq.matchChomp(\":eq(\")) {\n         return indexEquals();\n-    } else if (tq.matches(\":has(\")) {\n+    } else if (tq.matchChomp(\":has(\")) {\n         return has();\n-    } else if (tq.matches(\":contains(\")) {\n+    } else if (tq.matchChomp(\":contains(\")) {\n         return contains(false);\n-    } else if (tq.matches(\":containsOwn(\")) {\n+    } else if (tq.matchChomp(\":containsOwn(\")) {\n         return contains(true);\n-    } else if (tq.matches(\":matches(\")) {\n+    } else if (tq.matchChomp(\":matches(\")) {\n         return matches(false);\n-    } else if (tq.matches(\":matchesOwn(\")) {\n+    } else if (tq.matchChomp(\":matchesOwn(\")) {\n         return matches(true);\n     } else {\n-        // unhandled\n-        throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        // Unhandled\n+        throw new SelectorParseException(String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matches(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\") || tq.matches(\":containsOwn(\")) {\n        return contains(tq.matchChomp(\":containsOwn(\"));\n    } else if (tq.matches(\":matches(\") || tq.matches(\":matchesOwn(\")) {\n        return matches(tq.matchChomp(\":matchesOwn(\"));\n    } else {\n        // unhandled\n        throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n    }\n}", "diff": "--- org/jsoup/select/Selector.java@findElements\n+++ org/jsoup/select/Selector.java@findElements\n@@ -17,14 +17,10 @@\n         return indexEquals();\n     } else if (tq.matches(\":has(\")) {\n         return has();\n-    } else if (tq.matches(\":contains(\")) {\n-        return contains(false);\n-    } else if (tq.matches(\":containsOwn(\")) {\n-        return contains(true);\n-    } else if (tq.matches(\":matches(\")) {\n-        return matches(false);\n-    } else if (tq.matches(\":matchesOwn(\")) {\n-        return matches(true);\n+    } else if (tq.matches(\":contains(\") || tq.matches(\":containsOwn(\")) {\n+        return contains(tq.matchChomp(\":containsOwn(\"));\n+    } else if (tq.matches(\":matches(\") || tq.matches(\":matchesOwn(\")) {\n+        return matches(tq.matchChomp(\":matchesOwn(\"));\n     } else {\n         // unhandled\n         throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matches(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\")) {\n        return contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        return contains(true);\n    } else if (tq.matches(\":matches(\")) {\n        return matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        return matches(true);\n    } else {\n        // unhandled\n        throw new SelectorParseException(\n            String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n    }\n}", "diff": "--- org/jsoup/select/Selector.java@findElements\n+++ org/jsoup/select/Selector.java@findElements\n@@ -27,6 +27,7 @@\n         return matches(true);\n     } else {\n         // unhandled\n-        throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        throw new SelectorParseException(\n+            String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matches(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\")) {\n        return contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        return contains(true);\n    } else if (tq.matches(\":matches(\")) {\n        return matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        return matches(true);\n    } else {\n        // unhandled\n        throw new Selector.ParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n    }\n}", "diff": "--- org/jsoup/select/Selector.java@findElements\n+++ org/jsoup/select/Selector.java@findElements\n@@ -27,6 +27,6 @@\n         return matches(true);\n     } else {\n         // unhandled\n-        throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        throw new Selector.ParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matches(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\")) {\n        return contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        return contains(true);\n    } else if (tq.matches(\":matches(\")) {\n        return matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        return matches(true);\n    } else {\n        // unhandled\n        throw new SelectorParseException(\n                String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n    }\n}", "diff": "--- org/jsoup/select/Selector.java@findElements\n+++ org/jsoup/select/Selector.java@findElements\n@@ -27,6 +27,7 @@\n         return matches(true);\n     } else {\n         // unhandled\n-        throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n+        throw new SelectorParseException(\n+                String.format(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]