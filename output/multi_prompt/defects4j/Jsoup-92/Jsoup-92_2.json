[{"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (pendingAttributeName.length() > 0) {\n            String value = null; // initialize value to null\n            if (hasPendingAttributeValue) {\n                if (pendingAttributeValue != null && pendingAttributeValue.length() > 0) {\n                    value = pendingAttributeValue.toString();\n                } else if (pendingAttributeValueS != null && pendingAttributeValueS.length() > 0) {\n                    value = pendingAttributeValueS;\n                }\n            } else if (hasEmptyAttributeValue) {\n                value = \"\";\n            }\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName, value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -5,13 +5,16 @@\n         // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n         pendingAttributeName = pendingAttributeName.trim();\n         if (pendingAttributeName.length() > 0) {\n-            String value;\n-            if (hasPendingAttributeValue)\n-                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n-            else if (hasEmptyAttributeValue)\n+            String value = null; // initialize value to null\n+            if (hasPendingAttributeValue) {\n+                if (pendingAttributeValue != null && pendingAttributeValue.length() > 0) {\n+                    value = pendingAttributeValue.toString();\n+                } else if (pendingAttributeValueS != null && pendingAttributeValueS.length() > 0) {\n+                    value = pendingAttributeValueS;\n+                }\n+            } else if (hasEmptyAttributeValue) {\n                 value = \"\";\n-            else\n-                value = null;\n+            }\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n             attributes.put(pendingAttributeName, value);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (pendingAttributeName.length() > 0) {\n            String value;\n            if (hasPendingAttributeValue) {\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n                hasPendingAttributeValue = false; // reset flag after using it\n            }\n            else if (hasEmptyAttributeValue) {\n                value = \"\";\n                hasEmptyAttributeValue = false; // reset flag after using it\n            }\n            else {\n                value = null;\n            }\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.add(pendingAttributeName, value); // use add() method instead of put()\n        }\n    }\n    pendingAttributeName = null;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -6,19 +6,22 @@\n         pendingAttributeName = pendingAttributeName.trim();\n         if (pendingAttributeName.length() > 0) {\n             String value;\n-            if (hasPendingAttributeValue)\n+            if (hasPendingAttributeValue) {\n                 value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n-            else if (hasEmptyAttributeValue)\n+                hasPendingAttributeValue = false; // reset flag after using it\n+            }\n+            else if (hasEmptyAttributeValue) {\n                 value = \"\";\n-            else\n+                hasEmptyAttributeValue = false; // reset flag after using it\n+            }\n+            else {\n                 value = null;\n+            }\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            attributes.add(pendingAttributeName, value); // use add() method instead of put()\n         }\n     }\n     pendingAttributeName = null;\n-    hasEmptyAttributeValue = false;\n-    hasPendingAttributeValue = false;\n     reset(pendingAttributeValue);\n     pendingAttributeValueS = null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (!pendingAttributeName.isEmpty()) { // use \"isEmpty()\" to check empty string instead of \"length() > 0\"\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName, value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -4,7 +4,7 @@\n     if (pendingAttributeName != null) {\n         // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n         pendingAttributeName = pendingAttributeName.trim();\n-        if (pendingAttributeName.length() > 0) {\n+        if (!pendingAttributeName.isEmpty()) { // use \"isEmpty()\" to check empty string instead of \"length() > 0\"\n             String value;\n             if (hasPendingAttributeValue)\n                 value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (pendingAttributeName.length() > 0) {\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName.toLowerCase(), value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -13,7 +13,7 @@\n             else\n                 value = null;\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            attributes.put(pendingAttributeName.toLowerCase(), value);\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (pendingAttributeName.length() > 0) {\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.toString();\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName.toLowerCase(), value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -7,13 +7,13 @@\n         if (pendingAttributeName.length() > 0) {\n             String value;\n             if (hasPendingAttributeValue)\n-                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n+                value = pendingAttributeValue.toString();\n             else if (hasEmptyAttributeValue)\n                 value = \"\";\n             else\n                 value = null;\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            attributes.put(pendingAttributeName.toLowerCase(), value);\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (!pendingAttributeName.isEmpty()) {\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.putIgnoreCase(pendingAttributeName, value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -4,7 +4,7 @@\n     if (pendingAttributeName != null) {\n         // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n         pendingAttributeName = pendingAttributeName.trim();\n-        if (pendingAttributeName.length() > 0) {\n+        if (!pendingAttributeName.isEmpty()) {\n             String value;\n             if (hasPendingAttributeValue)\n                 value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n@@ -13,7 +13,7 @@\n             else\n                 value = null;\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            attributes.putIgnoreCase(pendingAttributeName, value);\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (!pendingAttributeName.isEmpty()) { // use .isEmpty() instead of .length() > 0 for readability\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName, value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -4,7 +4,7 @@\n     if (pendingAttributeName != null) {\n         // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n         pendingAttributeName = pendingAttributeName.trim();\n-        if (pendingAttributeName.length() > 0) {\n+        if (!pendingAttributeName.isEmpty()) { // use .isEmpty() instead of .length() > 0 for readability\n             String value;\n             if (hasPendingAttributeValue)\n                 value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (pendingAttributeName.length() > 0) {\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName.toLowerCase(), value); //Fix here by adding .toLowerCase()\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -13,7 +13,7 @@\n             else\n                 value = null;\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            attributes.put(pendingAttributeName.toLowerCase(), value); //Fix here by adding .toLowerCase()\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (pendingAttributeName.length() > 0) {\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // use putIgnoreCase to avoid case sensitivity issues\n            attributes.putIgnoreCase(pendingAttributeName, value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -12,8 +12,8 @@\n                 value = \"\";\n             else\n                 value = null;\n-            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            // use putIgnoreCase to avoid case sensitivity issues\n+            attributes.putIgnoreCase(pendingAttributeName, value);\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (!pendingAttributeName.isEmpty()) { // Use isEmpty() method for string length check\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName, value);\n        }\n        pendingAttributeName = null;\n        hasEmptyAttributeValue = false;\n        hasPendingAttributeValue = false;\n        reset(pendingAttributeValue);\n        pendingAttributeValueS = null;\n    }\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -4,7 +4,7 @@\n     if (pendingAttributeName != null) {\n         // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n         pendingAttributeName = pendingAttributeName.trim();\n-        if (pendingAttributeName.length() > 0) {\n+        if (!pendingAttributeName.isEmpty()) { // Use isEmpty() method for string length check\n             String value;\n             if (hasPendingAttributeValue)\n                 value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n@@ -15,10 +15,10 @@\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n             attributes.put(pendingAttributeName, value);\n         }\n+        pendingAttributeName = null;\n+        hasEmptyAttributeValue = false;\n+        hasPendingAttributeValue = false;\n+        reset(pendingAttributeValue);\n+        pendingAttributeValueS = null;\n     }\n-    pendingAttributeName = null;\n-    hasEmptyAttributeValue = false;\n-    hasPendingAttributeValue = false;\n-    reset(pendingAttributeValue);\n-    pendingAttributeValueS = null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (!pendingAttributeName.isEmpty()) {\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName.toLowerCase(), value); // Added toLowerCase() to make the attribute name case-insensitive\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -4,7 +4,7 @@\n     if (pendingAttributeName != null) {\n         // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n         pendingAttributeName = pendingAttributeName.trim();\n-        if (pendingAttributeName.length() > 0) {\n+        if (!pendingAttributeName.isEmpty()) {\n             String value;\n             if (hasPendingAttributeValue)\n                 value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n@@ -13,7 +13,7 @@\n             else\n                 value = null;\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            attributes.put(pendingAttributeName.toLowerCase(), value); // Added toLowerCase() to make the attribute name case-insensitive\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (!pendingAttributeName.isEmpty()) {\n            String value;\n            if (hasPendingAttributeValue) {\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS.toString();\n            } else if (hasEmptyAttributeValue) {\n                value = \"\";\n            } else {\n                value = null;\n            }\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName, value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -4,14 +4,15 @@\n     if (pendingAttributeName != null) {\n         // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n         pendingAttributeName = pendingAttributeName.trim();\n-        if (pendingAttributeName.length() > 0) {\n+        if (!pendingAttributeName.isEmpty()) {\n             String value;\n-            if (hasPendingAttributeValue)\n-                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n-            else if (hasEmptyAttributeValue)\n+            if (hasPendingAttributeValue) {\n+                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS.toString();\n+            } else if (hasEmptyAttributeValue) {\n                 value = \"\";\n-            else\n+            } else {\n                 value = null;\n+            }\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n             attributes.put(pendingAttributeName, value);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (!pendingAttributeName.isEmpty()) {\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduplicated once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName.toLowerCase(Locale.ENGLISH), value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -4,7 +4,7 @@\n     if (pendingAttributeName != null) {\n         // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n         pendingAttributeName = pendingAttributeName.trim();\n-        if (pendingAttributeName.length() > 0) {\n+        if (!pendingAttributeName.isEmpty()) {\n             String value;\n             if (hasPendingAttributeValue)\n                 value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n@@ -12,8 +12,8 @@\n                 value = \"\";\n             else\n                 value = null;\n-            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            // note that we add, not put. So that the first is kept, and rest are deduplicated once in a context where case sensitivity is known (the appropriate tree builder).\n+            attributes.put(pendingAttributeName.toLowerCase(Locale.ENGLISH), value);\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        String trimmedName = pendingAttributeName.trim();\n        if (trimmedName.length() > 0) {\n            String value;\n            if (hasPendingAttributeValue) {\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            } else if (hasEmptyAttributeValue) {\n                value = \"\";\n            } else {\n                value = null;\n            }\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(trimmedName, value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -3,17 +3,18 @@\n         attributes = new Attributes();\n     if (pendingAttributeName != null) {\n         // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n-        pendingAttributeName = pendingAttributeName.trim();\n-        if (pendingAttributeName.length() > 0) {\n+        String trimmedName = pendingAttributeName.trim();\n+        if (trimmedName.length() > 0) {\n             String value;\n-            if (hasPendingAttributeValue)\n+            if (hasPendingAttributeValue) {\n                 value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n-            else if (hasEmptyAttributeValue)\n+            } else if (hasEmptyAttributeValue) {\n                 value = \"\";\n-            else\n+            } else {\n                 value = null;\n+            }\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            attributes.put(trimmedName, value);\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (pendingAttributeName.length() > 0) {\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            \n            // Fix: Check if the attribute name is already present before adding it\n            if(attributes.get(pendingAttributeName) == null) {\n                attributes.put(pendingAttributeName, value);\n            }\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -13,7 +13,11 @@\n             else\n                 value = null;\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            \n+            // Fix: Check if the attribute name is already present before adding it\n+            if(attributes.get(pendingAttributeName) == null) {\n+                attributes.put(pendingAttributeName, value);\n+            }\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (pendingAttributeName.length() > 0) {\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            Attribute newAttr = new Attribute(pendingAttributeName, value);\n            attributes.put(newAttr);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -13,7 +13,8 @@\n             else\n                 value = null;\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            Attribute newAttr = new Attribute(pendingAttributeName, value);\n+            attributes.put(newAttr);\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (pendingAttributeName.length() > 0) {\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName.toLowerCase(), value); // use toLowerCase() to handle case sensitivity\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -13,7 +13,7 @@\n             else\n                 value = null;\n             // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            attributes.put(pendingAttributeName.toLowerCase(), value); // use toLowerCase() to handle case sensitivity\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        pendingAttributeName = pendingAttributeName.trim(); // moved this line up as checking for null should happen later\n        if (!pendingAttributeName.isEmpty()) { // changed to isEmpty() for clarity and efficiency\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.isEmpty() ? pendingAttributeValueS : pendingAttributeValue.toString(); // swapped order to check for empty first\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            attributes.putIgnoreCase(pendingAttributeName, value); // changed to case-insensitive put method\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -2,18 +2,16 @@\n     if (attributes == null)\n         attributes = new Attributes();\n     if (pendingAttributeName != null) {\n-        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n-        pendingAttributeName = pendingAttributeName.trim();\n-        if (pendingAttributeName.length() > 0) {\n+        pendingAttributeName = pendingAttributeName.trim(); // moved this line up as checking for null should happen later\n+        if (!pendingAttributeName.isEmpty()) { // changed to isEmpty() for clarity and efficiency\n             String value;\n             if (hasPendingAttributeValue)\n-                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n+                value = pendingAttributeValue.isEmpty() ? pendingAttributeValueS : pendingAttributeValue.toString(); // swapped order to check for empty first\n             else if (hasEmptyAttributeValue)\n                 value = \"\";\n             else\n                 value = null;\n-            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n-            attributes.put(pendingAttributeName, value);\n+            attributes.putIgnoreCase(pendingAttributeName, value); // changed to case-insensitive put method\n         }\n     }\n     pendingAttributeName = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (!pendingAttributeName.isEmpty()) { // Use isEmpty() method instead of checking length\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName, value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -4,7 +4,7 @@\n     if (pendingAttributeName != null) {\n         // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n         pendingAttributeName = pendingAttributeName.trim();\n-        if (pendingAttributeName.length() > 0) {\n+        if (!pendingAttributeName.isEmpty()) { // Use isEmpty() method instead of checking length\n             String value;\n             if (hasPendingAttributeValue)\n                 value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final void newAttribute() {\n    if (attributes == null)\n        attributes = new Attributes();\n    if (pendingAttributeName != null) {\n        // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n        pendingAttributeName = pendingAttributeName.trim();\n        if (!pendingAttributeName.isEmpty()) { // changed from checking length > 0 to using .isEmpty()\n            String value;\n            if (hasPendingAttributeValue)\n                value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n            else if (hasEmptyAttributeValue)\n                value = \"\";\n            else\n                value = null;\n            // note that we add, not put. So that the first is kept, and rest are deduped, once in a context where case sensitivity is known (the appropriate tree builder).\n            attributes.put(pendingAttributeName, value);\n        }\n    }\n    pendingAttributeName = null;\n    hasEmptyAttributeValue = false;\n    hasPendingAttributeValue = false;\n    reset(pendingAttributeValue);\n    pendingAttributeValueS = null;\n}", "diff": "--- org/jsoup/parser/Token.java@newAttribute\n+++ org/jsoup/parser/Token.java@newAttribute\n@@ -4,7 +4,7 @@\n     if (pendingAttributeName != null) {\n         // the tokeniser has skipped whitespace control chars, but trimming could collapse to empty for other control codes, so verify here\n         pendingAttributeName = pendingAttributeName.trim();\n-        if (pendingAttributeName.length() > 0) {\n+        if (!pendingAttributeName.isEmpty()) { // changed from checking length > 0 to using .isEmpty()\n             String value;\n             if (hasPendingAttributeValue)\n                 value = pendingAttributeValue.length() > 0 ? pendingAttributeValue.toString() : pendingAttributeValueS;\n", "finish_reason": "stop", "valid": false, "num": 1}]