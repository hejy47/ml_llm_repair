[{"output": "public void removeValue(int index) {\n    if (index >= 0 && index < this.keys.size()) {\n        this.keys.remove(index);\n        this.values.remove(index);\n        if (index < this.keys.size()) {\n            rebuildIndex();\n        }\n    }\n}", "diff": "--- org/jfree/data/DefaultKeyedValues.java@removeValue\n+++ org/jfree/data/DefaultKeyedValues.java@removeValue\n@@ -1,7 +1,9 @@\n public void removeValue(int index) {\n-    this.keys.remove(index);\n-    this.values.remove(index);\n-    if (index < this.keys.size()) {\n-        rebuildIndex();\n+    if (index >= 0 && index < this.keys.size()) {\n+        this.keys.remove(index);\n+        this.values.remove(index);\n+        if (index < this.keys.size()) {\n+            rebuildIndex();\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "public void removeValue(int index) {\n    if (index < this.keys.size()) {\n        this.keys.remove(index);\n        this.values.remove(index);\n        rebuildIndex();\n    }\n}", "diff": "--- org/jfree/data/DefaultKeyedValues.java@removeValue\n+++ org/jfree/data/DefaultKeyedValues.java@removeValue\n@@ -1,7 +1,7 @@\n public void removeValue(int index) {\n-    this.keys.remove(index);\n-    this.values.remove(index);\n     if (index < this.keys.size()) {\n+        this.keys.remove(index);\n+        this.values.remove(index);\n         rebuildIndex();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "public void removeValue(int index) {\n    if(index < this.keys.size()) {\n        this.keys.remove(index);\n        this.values.remove(index);\n        rebuildIndex();\n    }\n}", "diff": "--- org/jfree/data/DefaultKeyedValues.java@removeValue\n+++ org/jfree/data/DefaultKeyedValues.java@removeValue\n@@ -1,7 +1,7 @@\n public void removeValue(int index) {\n-    this.keys.remove(index);\n-    this.values.remove(index);\n-    if (index < this.keys.size()) {\n+    if(index < this.keys.size()) {\n+        this.keys.remove(index);\n+        this.values.remove(index);\n         rebuildIndex();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void removeValue(int index) {\n    this.keys.remove(index);\n    this.values.remove(index);\n    if (index < this.keys.size()) {\n        rebuildIndex(index);\n    }\n}\n\n// Rebuild index method\nprivate void rebuildIndex(int startIndex) {\n    for (int i = startIndex; i < this.keys.size(); i++) {\n        this.index.put(this.keys.get(i), i);\n    }\n}", "diff": "--- org/jfree/data/DefaultKeyedValues.java@removeValue\n+++ org/jfree/data/DefaultKeyedValues.java@removeValue\n@@ -2,6 +2,6 @@\n     this.keys.remove(index);\n     this.values.remove(index);\n     if (index < this.keys.size()) {\n-        rebuildIndex();\n+        rebuildIndex(index);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void removeValue(int index) {\n    if (index >= this.keys.size()) {\n        return;\n    }\n    this.keys.remove(index);\n    this.values.remove(index);\n    if (index < this.keys.size()) {\n        rebuildIndex();\n    }\n}", "diff": "--- org/jfree/data/DefaultKeyedValues.java@removeValue\n+++ org/jfree/data/DefaultKeyedValues.java@removeValue\n@@ -1,4 +1,7 @@\n public void removeValue(int index) {\n+    if (index >= this.keys.size()) {\n+        return;\n+    }\n     this.keys.remove(index);\n     this.values.remove(index);\n     if (index < this.keys.size()) {\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public void removeValue(int index) {\n    if (index >= 0 && index < this.keys.size()) { // Ensure index is within range\n        this.keys.remove(index);\n        this.values.remove(index);\n        if (index < this.keys.size()) {\n            rebuildIndex();\n        }\n    }\n}", "diff": "--- org/jfree/data/DefaultKeyedValues.java@removeValue\n+++ org/jfree/data/DefaultKeyedValues.java@removeValue\n@@ -1,7 +1,9 @@\n public void removeValue(int index) {\n-    this.keys.remove(index);\n-    this.values.remove(index);\n-    if (index < this.keys.size()) {\n-        rebuildIndex();\n+    if (index >= 0 && index < this.keys.size()) { // Ensure index is within range\n+        this.keys.remove(index);\n+        this.values.remove(index);\n+        if (index < this.keys.size()) {\n+            rebuildIndex();\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void removeValue(int index) {\n    if(index < this.keys.size()){\n        this.keys.remove(index);\n        this.values.remove(index);\n        rebuildIndex();\n    }\n}", "diff": "--- org/jfree/data/DefaultKeyedValues.java@removeValue\n+++ org/jfree/data/DefaultKeyedValues.java@removeValue\n@@ -1,7 +1,7 @@\n public void removeValue(int index) {\n-    this.keys.remove(index);\n-    this.values.remove(index);\n-    if (index < this.keys.size()) {\n+    if(index < this.keys.size()){\n+        this.keys.remove(index);\n+        this.values.remove(index);\n         rebuildIndex();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void removeValue(int index) {\n    if(index < this.keys.size() && index >= 0) {\n        this.keys.remove(index);\n        this.values.remove(index);\n        if (index < this.keys.size()) {\n            rebuildIndex();\n        }\n    }\n}", "diff": "--- org/jfree/data/DefaultKeyedValues.java@removeValue\n+++ org/jfree/data/DefaultKeyedValues.java@removeValue\n@@ -1,7 +1,9 @@\n public void removeValue(int index) {\n-    this.keys.remove(index);\n-    this.values.remove(index);\n-    if (index < this.keys.size()) {\n-        rebuildIndex();\n+    if(index < this.keys.size() && index >= 0) {\n+        this.keys.remove(index);\n+        this.values.remove(index);\n+        if (index < this.keys.size()) {\n+            rebuildIndex();\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void removeValue(int index) {\n    if(index >= 0 && index < this.keys.size()) {\n        this.keys.remove(index);\n        this.values.remove(index);\n        if (index < this.keys.size()) {\n            rebuildIndex();\n        }\n    }\n}", "diff": "--- org/jfree/data/DefaultKeyedValues.java@removeValue\n+++ org/jfree/data/DefaultKeyedValues.java@removeValue\n@@ -1,7 +1,9 @@\n public void removeValue(int index) {\n-    this.keys.remove(index);\n-    this.values.remove(index);\n-    if (index < this.keys.size()) {\n-        rebuildIndex();\n+    if(index >= 0 && index < this.keys.size()) {\n+        this.keys.remove(index);\n+        this.values.remove(index);\n+        if (index < this.keys.size()) {\n+            rebuildIndex();\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public void removeValue(int index) {\n    if(index < this.keys.size()) { // check if index is within bounds\n        this.keys.remove(index);\n        this.values.remove(index);\n        if (index < this.keys.size()) {\n            rebuildIndex();\n        }\n    }\n}", "diff": "--- org/jfree/data/DefaultKeyedValues.java@removeValue\n+++ org/jfree/data/DefaultKeyedValues.java@removeValue\n@@ -1,7 +1,9 @@\n public void removeValue(int index) {\n-    this.keys.remove(index);\n-    this.values.remove(index);\n-    if (index < this.keys.size()) {\n-        rebuildIndex();\n+    if(index < this.keys.size()) { // check if index is within bounds\n+        this.keys.remove(index);\n+        this.values.remove(index);\n+        if (index < this.keys.size()) {\n+            rebuildIndex();\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]