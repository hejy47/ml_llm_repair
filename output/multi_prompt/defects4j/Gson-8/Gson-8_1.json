[{"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    if (c == null) {\n        throw new IllegalArgumentException(\"Class cannot be null\");\n    }\n    return (T) allocateInstance.invoke(unsafe, c);\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n+    if (c == null) {\n+        throw new IllegalArgumentException(\"Class cannot be null\");\n+    }\n     return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    if (c == null) {\n+        throw new IllegalArgumentException(\"Class cannot be null\");\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    if (c == null) {\n+        throw new IllegalArgumentException(\"Class cannot be null\");\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    if (Modifier.isAbstract(c.getModifiers())) {\n        throw new IllegalArgumentException(\"Cannot create instances of abstract classes: \" + c.getName());\n    }\n    return (T) allocateInstance.invoke(unsafe, c);\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new IllegalArgumentException(\"Cannot create instances of abstract classes: \" + c.getName());\n+    }\n     return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new IllegalArgumentException(\"Cannot create instances of abstract classes: \" + c.getName());\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new IllegalArgumentException(\"Cannot create instances of abstract classes: \" + c.getName());\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    if (Modifier.isAbstract(c.getModifiers()) || c.isInterface()) {\n        throw new IllegalArgumentException(\"Cannot instantiate abstract classes or interfaces: \" + c.getName());\n    }\n    return (T) allocateInstance.invoke(unsafe, c);\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n+    if (Modifier.isAbstract(c.getModifiers()) || c.isInterface()) {\n+        throw new IllegalArgumentException(\"Cannot instantiate abstract classes or interfaces: \" + c.getName());\n+    }\n     return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    if (Modifier.isAbstract(c.getModifiers()) || c.isInterface()) {\n+        throw new IllegalArgumentException(\"Cannot instantiate abstract classes or interfaces: \" + c.getName());\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    if (Modifier.isAbstract(c.getModifiers()) || c.isInterface()) {\n+        throw new IllegalArgumentException(\"Cannot instantiate abstract classes or interfaces: \" + c.getName());\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    try {\n        return c.getDeclaredConstructor().newInstance();\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n        throw new RuntimeException(e);\n    }\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    try {\n+        return c.getDeclaredConstructor().newInstance();\n+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n+        throw new RuntimeException(e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    try {\n+        return c.getDeclaredConstructor().newInstance();\n+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n+        throw new RuntimeException(e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    try {\n+        return c.getDeclaredConstructor().newInstance();\n+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n+        throw new RuntimeException(e);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    return c.newInstance();\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,5 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    return c.newInstance();\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,5 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    return c.newInstance();\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,5 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    return c.newInstance();\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    if (c == null) {\n        throw new IllegalArgumentException(\"Class must not be null\");\n    }\n    if (c.isInterface()) {\n        throw new IllegalArgumentException(\"Can't allocate interface \" + c);\n    }\n    if (Modifier.isAbstract(c.getModifiers())) {\n        throw new IllegalArgumentException(\"Can't allocate abstract class \" + c);\n    }\n    return (T) allocateInstance.invoke(unsafe, c);\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,14 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n+    if (c == null) {\n+        throw new IllegalArgumentException(\"Class must not be null\");\n+    }\n+    if (c.isInterface()) {\n+        throw new IllegalArgumentException(\"Can't allocate interface \" + c);\n+    }\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new IllegalArgumentException(\"Can't allocate abstract class \" + c);\n+    }\n     return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,14 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    if (c == null) {\n+        throw new IllegalArgumentException(\"Class must not be null\");\n+    }\n+    if (c.isInterface()) {\n+        throw new IllegalArgumentException(\"Can't allocate interface \" + c);\n+    }\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new IllegalArgumentException(\"Can't allocate abstract class \" + c);\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,14 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    if (c == null) {\n+        throw new IllegalArgumentException(\"Class must not be null\");\n+    }\n+    if (c.isInterface()) {\n+        throw new IllegalArgumentException(\"Can't allocate interface \" + c);\n+    }\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new IllegalArgumentException(\"Can't allocate abstract class \" + c);\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    try {\n        return c.newInstance();\n    } catch (InstantiationException e) {\n        return (T)allocateInstance.invoke(unsafe, c);\n    }\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    try {\n+        return c.newInstance();\n+    } catch (InstantiationException e) {\n+        return (T)allocateInstance.invoke(unsafe, c);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    try {\n+        return c.newInstance();\n+    } catch (InstantiationException e) {\n+        return (T)allocateInstance.invoke(unsafe, c);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    try {\n+        return c.newInstance();\n+    } catch (InstantiationException e) {\n+        return (T)allocateInstance.invoke(unsafe, c);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    if (Modifier.isAbstract(c.getModifiers())) {\n        throw new IllegalAccessException(\"Cannot allocate \" + c.getName() + \" because it is abstract\");\n    }\n    return (T) allocateInstance.invoke(unsafe, c);\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new IllegalAccessException(\"Cannot allocate \" + c.getName() + \" because it is abstract\");\n+    }\n     return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new IllegalAccessException(\"Cannot allocate \" + c.getName() + \" because it is abstract\");\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new IllegalAccessException(\"Cannot allocate \" + c.getName() + \" because it is abstract\");\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    try {\n        return (T) allocateInstance.invoke(unsafe, c);\n    } catch (ClassCastException e) {\n        throw new Exception(\"Unable to create instance of \" + c.getName(), e);\n    }\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch (ClassCastException e) {\n+        throw new Exception(\"Unable to create instance of \" + c.getName(), e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch (ClassCastException e) {\n+        throw new Exception(\"Unable to create instance of \" + c.getName(), e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch (ClassCastException e) {\n+        throw new Exception(\"Unable to create instance of \" + c.getName(), e);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    if (c == null) {\n        throw new NullPointerException(\"class cannot be null\");\n    }\n    if (unsafe != null && allocateInstance != null) {\n        return (T) allocateInstance.invoke(unsafe, c);\n    }\n    return c.newInstance();\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,11 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    if (c == null) {\n+        throw new NullPointerException(\"class cannot be null\");\n+    }\n+    if (unsafe != null && allocateInstance != null) {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    }\n+    return c.newInstance();\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,11 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    if (c == null) {\n+        throw new NullPointerException(\"class cannot be null\");\n+    }\n+    if (unsafe != null && allocateInstance != null) {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    }\n+    return c.newInstance();\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,11 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    if (c == null) {\n+        throw new NullPointerException(\"class cannot be null\");\n+    }\n+    if (unsafe != null && allocateInstance != null) {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    }\n+    return c.newInstance();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    try {\n        return (T) allocateInstance.invoke(unsafe, c);\n    } catch(Exception e) {\n        throw new Exception(\"Failed to instantiate class\", e);\n    }\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch(Exception e) {\n+        throw new Exception(\"Failed to instantiate class\", e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch(Exception e) {\n+        throw new Exception(\"Failed to instantiate class\", e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch(Exception e) {\n+        throw new Exception(\"Failed to instantiate class\", e);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    try {\n        Constructor<T> constructor = c.getDeclaredConstructor();\n        constructor.setAccessible(true);\n        return constructor.newInstance();\n    } catch (NoSuchMethodException e) {\n        return (T) allocateInstance.invoke(unsafe, c);\n    }\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,11 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    try {\n+        Constructor<T> constructor = c.getDeclaredConstructor();\n+        constructor.setAccessible(true);\n+        return constructor.newInstance();\n+    } catch (NoSuchMethodException e) {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,11 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    try {\n+        Constructor<T> constructor = c.getDeclaredConstructor();\n+        constructor.setAccessible(true);\n+        return constructor.newInstance();\n+    } catch (NoSuchMethodException e) {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,11 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    try {\n+        Constructor<T> constructor = c.getDeclaredConstructor();\n+        constructor.setAccessible(true);\n+        return constructor.newInstance();\n+    } catch (NoSuchMethodException e) {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    try {\n        return (T) allocateInstance.invoke(unsafe, c);\n    } catch (ClassCastException e) {\n        throw new Exception(\"Cannot instantiate class: \" + c.getName(), e);\n    }\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch (ClassCastException e) {\n+        throw new Exception(\"Cannot instantiate class: \" + c.getName(), e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch (ClassCastException e) {\n+        throw new Exception(\"Cannot instantiate class: \" + c.getName(), e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch (ClassCastException e) {\n+        throw new Exception(\"Cannot instantiate class: \" + c.getName(), e);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    try {\n        Object obj = allocateInstance.invoke(unsafe, c);\n        return (T) obj;\n    } catch (IllegalAccessException | InvocationTargetException e) {\n        throw new Exception(\"Error creating instance of class \" + c.getName(), e);\n    }\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,10 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    try {\n+        Object obj = allocateInstance.invoke(unsafe, c);\n+        return (T) obj;\n+    } catch (IllegalAccessException | InvocationTargetException e) {\n+        throw new Exception(\"Error creating instance of class \" + c.getName(), e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,10 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    try {\n+        Object obj = allocateInstance.invoke(unsafe, c);\n+        return (T) obj;\n+    } catch (IllegalAccessException | InvocationTargetException e) {\n+        throw new Exception(\"Error creating instance of class \" + c.getName(), e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,10 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    try {\n+        Object obj = allocateInstance.invoke(unsafe, c);\n+        return (T) obj;\n+    } catch (IllegalAccessException | InvocationTargetException e) {\n+        throw new Exception(\"Error creating instance of class \" + c.getName(), e);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    if (Modifier.isAbstract(c.getModifiers())) {\n        throw new UnsupportedOperationException(\"Abstract classes can't be instantiated\");\n    }\n    return (T) allocateInstance.invoke(unsafe, c);\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new UnsupportedOperationException(\"Abstract classes can't be instantiated\");\n+    }\n     return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new UnsupportedOperationException(\"Abstract classes can't be instantiated\");\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,8 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    if (Modifier.isAbstract(c.getModifiers())) {\n+        throw new UnsupportedOperationException(\"Abstract classes can't be instantiated\");\n+    }\n+    return (T) allocateInstance.invoke(unsafe, c);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    return (T) unsafe.allocateInstance(c);\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,5 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    return (T) unsafe.allocateInstance(c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,5 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    return (T) unsafe.allocateInstance(c);\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,5 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    return (T) unsafe.allocateInstance(c);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    try {\n        return (T) allocateInstance.invoke(unsafe, c);\n    } catch (Throwable e) {\n        throw new Exception(\"Cannot allocate \" + c, e);\n    }\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch (Throwable e) {\n+        throw new Exception(\"Cannot allocate \" + c, e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch (Throwable e) {\n+        throw new Exception(\"Cannot allocate \" + c, e);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    try {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    } catch (Throwable e) {\n+        throw new Exception(\"Cannot allocate \" + c, e);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T newInstance(Class<T> c) throws Exception {\n    try {\n        return c.newInstance();\n    } catch (InstantiationException e) {\n        return (T) allocateInstance.invoke(unsafe, c);\n    }\n}", "diff": "--- com/google/gson/internal/UnsafeAllocator.java@newInstance\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) allocateInstance.invoke(unsafe, c);\n+    try {\n+        return c.newInstance();\n+    } catch (InstantiationException e) {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance2\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance2\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, constructorId);\n+    try {\n+        return c.newInstance();\n+    } catch (InstantiationException e) {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    }\n }\n--- com/google/gson/internal/UnsafeAllocator.java@newInstance3\n+++ com/google/gson/internal/UnsafeAllocator.java@newInstance3\n@@ -1,5 +1,9 @@\n @Override\n @SuppressWarnings(\"unchecked\")\n public <T> T newInstance(Class<T> c) throws Exception {\n-    return (T) newInstance.invoke(null, c, Object.class);\n+    try {\n+        return c.newInstance();\n+    } catch (InstantiationException e) {\n+        return (T) allocateInstance.invoke(unsafe, c);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]