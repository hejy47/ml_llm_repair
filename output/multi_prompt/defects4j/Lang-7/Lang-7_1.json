[{"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    return new BigDecimal(str.trim());\n    // The fix is to use the trim method to remove whitespace from the String before creating the BigDecimal object.\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -10,5 +10,6 @@\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n     // a wrong value.\n-    return new BigDecimal(str);\n+    return new BigDecimal(str.trim());\n+    // The fix is to use the trim method to remove whitespace from the String before creating the BigDecimal object.\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    // fixed: use new BigDecimal(str.trim()) to remove leading/trailing whitespaces\n    return new BigDecimal(str.trim());\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -10,5 +10,6 @@\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n     // a wrong value.\n-    return new BigDecimal(str);\n+    // fixed: use new BigDecimal(str.trim()) to remove leading/trailing whitespaces\n+    return new BigDecimal(str.trim());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    if (str.trim().equals(\"\")) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    return new BigDecimal(str);\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -10,5 +10,8 @@\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n     // a wrong value.\n+    if (str.trim().equals(\"\")) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n     return new BigDecimal(str);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    try {\n        return new BigDecimal(str);\n    } catch (NumberFormatException e) {\n        throw new NumberFormatException(str + \" is not a valid number\");\n    }\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -2,13 +2,12 @@\n     if (str == null) {\n         return null;\n     }\n-    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n     if (StringUtils.isBlank(str)) {\n         throw new NumberFormatException(\"A blank string is not a valid number\");\n     }\n-    // this is protection for poorness in java.lang.BigDecimal.\n-    // it accepts this as a legal value, but it does not appear\n-    // to be in specification of class. OS X Java parses it to\n-    // a wrong value.\n-    return new BigDecimal(str);\n+    try {\n+        return new BigDecimal(str);\n+    } catch (NumberFormatException e) {\n+        throw new NumberFormatException(str + \" is not a valid number\");\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null || StringUtils.isBlank(str)) {\n        // treat null and blank strings as invalid numbers\n        throw new NumberFormatException(\"A blank or null string is not a valid number\");\n    }\n    // parse the string into a BigDecimal object\n    return new BigDecimal(str.trim()); // trim any leading or trailing whitespace\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -1,14 +1,8 @@\n public static BigDecimal createBigDecimal(String str) {\n-    if (str == null) {\n-        return null;\n+    if (str == null || StringUtils.isBlank(str)) {\n+        // treat null and blank strings as invalid numbers\n+        throw new NumberFormatException(\"A blank or null string is not a valid number\");\n     }\n-    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n-    if (StringUtils.isBlank(str)) {\n-        throw new NumberFormatException(\"A blank string is not a valid number\");\n-    }\n-    // this is protection for poorness in java.lang.BigDecimal.\n-    // it accepts this as a legal value, but it does not appear\n-    // to be in specification of class. OS X Java parses it to\n-    // a wrong value.\n-    return new BigDecimal(str);\n+    // parse the string into a BigDecimal object\n+    return new BigDecimal(str.trim()); // trim any leading or trailing whitespace\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // remove any commas from the string before creating the BigDecimal\n    str = str.replaceAll(\",\", \"\");\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    return new BigDecimal(str);\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -6,6 +6,8 @@\n     if (StringUtils.isBlank(str)) {\n         throw new NumberFormatException(\"A blank string is not a valid number\");\n     }\n+    // remove any commas from the string before creating the BigDecimal\n+    str = str.replaceAll(\",\", \"\");\n     // this is protection for poorness in java.lang.BigDecimal.\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    try {\n        return new BigDecimal(str);\n    } catch (NumberFormatException e) {\n        throw new NumberFormatException(\"Invalid value for BigDecimal: \\\"\" + str + \"\\\"\");\n    }\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -10,5 +10,9 @@\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n     // a wrong value.\n-    return new BigDecimal(str);\n+    try {\n+        return new BigDecimal(str);\n+    } catch (NumberFormatException e) {\n+        throw new NumberFormatException(\"Invalid value for BigDecimal: \\\"\" + str + \"\\\"\");\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NullPointerException(\"A blank string is not a valid number\");\n    }\n    try {\n        return new BigDecimal(str);\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid number: \" + str, e);\n    }\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -4,11 +4,11 @@\n     }\n     // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n     if (StringUtils.isBlank(str)) {\n-        throw new NumberFormatException(\"A blank string is not a valid number\");\n+        throw new NullPointerException(\"A blank string is not a valid number\");\n     }\n-    // this is protection for poorness in java.lang.BigDecimal.\n-    // it accepts this as a legal value, but it does not appear\n-    // to be in specification of class. OS X Java parses it to\n-    // a wrong value.\n-    return new BigDecimal(str);\n+    try {\n+        return new BigDecimal(str);\n+    } catch (NumberFormatException e) {\n+        throw new IllegalArgumentException(\"Invalid number: \" + str, e);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    try {\n        return new BigDecimal(str);\n    } catch (NumberFormatException e) {\n        throw new NumberFormatException(\"The provided string is not a valid number\");\n    }\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -10,5 +10,9 @@\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n     // a wrong value.\n-    return new BigDecimal(str);\n+    try {\n+        return new BigDecimal(str);\n+    } catch (NumberFormatException e) {\n+        throw new NumberFormatException(\"The provided string is not a valid number\");\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    try {\n        // use the constructor that takes a String and a MathContext to avoid inaccurate parse results\n        return new BigDecimal(str, MathContext.UNLIMITED);\n    } catch (NumberFormatException ex) {\n        throw new NumberFormatException(\"String cannot be parsed to a BigDecimal\");\n    }\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -6,9 +6,10 @@\n     if (StringUtils.isBlank(str)) {\n         throw new NumberFormatException(\"A blank string is not a valid number\");\n     }\n-    // this is protection for poorness in java.lang.BigDecimal.\n-    // it accepts this as a legal value, but it does not appear\n-    // to be in specification of class. OS X Java parses it to\n-    // a wrong value.\n-    return new BigDecimal(str);\n+    try {\n+        // use the constructor that takes a String and a MathContext to avoid inaccurate parse results\n+        return new BigDecimal(str, MathContext.UNLIMITED);\n+    } catch (NumberFormatException ex) {\n+        throw new NumberFormatException(\"String cannot be parsed to a BigDecimal\");\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in the specification of class. \n    // Replace the following line with the one below it to fix the bug.\n    // return new BigDecimal(str);\n    return new BigDecimal(str.trim());\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -8,7 +8,8 @@\n     }\n     // this is protection for poorness in java.lang.BigDecimal.\n     // it accepts this as a legal value, but it does not appear\n-    // to be in specification of class. OS X Java parses it to\n-    // a wrong value.\n-    return new BigDecimal(str);\n+    // to be in the specification of class. \n+    // Replace the following line with the one below it to fix the bug.\n+    // return new BigDecimal(str);\n+    return new BigDecimal(str.trim());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    str = str.trim(); // Fix: Trim the string before creating a BigDecimal\n    return new BigDecimal(str);\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -10,5 +10,6 @@\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n     // a wrong value.\n+    str = str.trim(); // Fix: Trim the string before creating a BigDecimal\n     return new BigDecimal(str);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    str = str.trim(); // trim leading and trailing white spaces\n    if (str.isEmpty()) { // check if the string is empty after trimming\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    return new BigDecimal(str);\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -2,13 +2,12 @@\n     if (str == null) {\n         return null;\n     }\n-    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n     if (StringUtils.isBlank(str)) {\n         throw new NumberFormatException(\"A blank string is not a valid number\");\n     }\n-    // this is protection for poorness in java.lang.BigDecimal.\n-    // it accepts this as a legal value, but it does not appear\n-    // to be in specification of class. OS X Java parses it to\n-    // a wrong value.\n+    str = str.trim(); // trim leading and trailing white spaces\n+    if (str.isEmpty()) { // check if the string is empty after trimming\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n     return new BigDecimal(str);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Fix for BigDecimal parsing of non-standard exponential notation\n    if (str.matches(\".*[Ee].*\")) {\n        return new BigDecimal(new BigDecimal(str).toPlainString());\n    }\n    return new BigDecimal(str);\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -6,9 +6,9 @@\n     if (StringUtils.isBlank(str)) {\n         throw new NumberFormatException(\"A blank string is not a valid number\");\n     }\n-    // this is protection for poorness in java.lang.BigDecimal.\n-    // it accepts this as a legal value, but it does not appear\n-    // to be in specification of class. OS X Java parses it to\n-    // a wrong value.\n+    // Fix for BigDecimal parsing of non-standard exponential notation\n+    if (str.matches(\".*[Ee].*\")) {\n+        return new BigDecimal(new BigDecimal(str).toPlainString());\n+    }\n     return new BigDecimal(str);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    if (str.trim().equals(\"\")) {\n        throw new NumberFormatException(\"An empty string is not a valid number\");\n    }\n    return new BigDecimal(str);\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -10,5 +10,8 @@\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n     // a wrong value.\n+    if (str.trim().equals(\"\")) {\n+        throw new NumberFormatException(\"An empty string is not a valid number\");\n+    }\n     return new BigDecimal(str);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    if(str.trim().isEmpty()){\n        throw new NumberFormatException(\"An empty string is not a valid number\");\n    }\n    return new BigDecimal(str);\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -10,5 +10,8 @@\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n     // a wrong value.\n+    if(str.trim().isEmpty()){\n+        throw new NumberFormatException(\"An empty string is not a valid number\");\n+    }\n     return new BigDecimal(str);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // handle values that are not in the correct format for BigDecimal\n    try {\n        return new BigDecimal(str);\n    } catch (NumberFormatException e) {\n        throw new NumberFormatException(\"String \" + str + \" is not in a valid number format\");\n    }\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -6,9 +6,10 @@\n     if (StringUtils.isBlank(str)) {\n         throw new NumberFormatException(\"A blank string is not a valid number\");\n     }\n-    // this is protection for poorness in java.lang.BigDecimal.\n-    // it accepts this as a legal value, but it does not appear\n-    // to be in specification of class. OS X Java parses it to\n-    // a wrong value.\n-    return new BigDecimal(str);\n+    // handle values that are not in the correct format for BigDecimal\n+    try {\n+        return new BigDecimal(str);\n+    } catch (NumberFormatException e) {\n+        throw new NumberFormatException(\"String \" + str + \" is not in a valid number format\");\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    if (str.trim().isEmpty()){\n        throw new NumberFormatException(\"An empty string is not a valid number\");\n    }\n    return new BigDecimal(str);\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -10,5 +10,8 @@\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n     // a wrong value.\n+    if (str.trim().isEmpty()){\n+        throw new NumberFormatException(\"An empty string is not a valid number\");\n+    }\n     return new BigDecimal(str);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    try {\n        return new BigDecimal(str);\n    } catch (NumberFormatException e) {\n        throw new NumberFormatException(\"Invalid number: \" + str);\n    }\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -10,5 +10,9 @@\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n     // a wrong value.\n-    return new BigDecimal(str);\n+    try {\n+        return new BigDecimal(str);\n+    } catch (NumberFormatException e) {\n+        throw new NumberFormatException(\"Invalid number: \" + str);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static BigDecimal createBigDecimal(String str) {\n    if (str == null) {\n        return null;\n    }\n    // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    try {\n        return new BigDecimal(str);\n    } catch (NumberFormatException e) {\n        throw new NumberFormatException(\"Invalid number format: \" + str);\n    }\n}", "diff": "--- org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n+++ org/apache/commons/lang3/math/NumberUtils.java@createBigDecimal\n@@ -10,5 +10,9 @@\n     // it accepts this as a legal value, but it does not appear\n     // to be in specification of class. OS X Java parses it to\n     // a wrong value.\n-    return new BigDecimal(str);\n+    try {\n+        return new BigDecimal(str);\n+    } catch (NumberFormatException e) {\n+        throw new NumberFormatException(\"Invalid number format: \" + str);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]