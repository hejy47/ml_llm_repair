[{"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 2 && (data.startsWith(\"<!--\") || data.startsWith(\"<?\"))) {\n            String declaration = data.substring(2, data.length() - 2);\n            insert = XmlDeclaration.createDeclaration(data, comment.baseUri());\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -5,9 +5,9 @@\n         // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n         // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+        if (data.length() > 2 && (data.startsWith(\"<!--\") || data.startsWith(\"<?\"))) {\n+            String declaration = data.substring(2, data.length() - 2);\n+            insert = XmlDeclaration.createDeclaration(data, comment.baseUri());\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"<!\") || data.startsWith(\"<?\"))) { // Fixed line - checking startsWith(\"<!\") and startsWith(\"<?\") instead of startsWith(\"!\") and startsWith(\"?\")\n            String declaration = data.substring(2, data.length() - 1); // Fixed line - getting the declaration string correctly\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"<!\"));\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -5,9 +5,9 @@\n         // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n         // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+        if (data.length() > 1 && (data.startsWith(\"<!\") || data.startsWith(\"<?\"))) { // Fixed line - checking startsWith(\"<!\") and startsWith(\"<?\") instead of startsWith(\"!\") and startsWith(\"?\")\n+            String declaration = data.substring(2, data.length() - 1); // Fixed line - getting the declaration string correctly\n+            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"<!\"));\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"<!--\") || data.startsWith(\"<![\"))) {\n            // Check if comment is an XML declaration\n            if (data.startsWith(\"<![\")) {\n                int endDeclaration = data.indexOf(\"]>\");\n                if (endDeclaration != -1) {\n                    String declaration = data.substring(2, endDeclaration);\n                    insert = new XmlDeclaration(declaration, comment.baseUri(), true);\n                }\n            } else {\n                // Otherwise, if it's a comment, insert it as a Comment node\n                insert = new Comment(data.substring(4, data.length() - 3), comment.baseUri());\n            }\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -2,12 +2,19 @@\n     Comment comment = new Comment(commentToken.getData(), baseUri);\n     Node insert = comment;\n     if (commentToken.bogus) {\n-        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n-        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+        if (data.length() > 1 && (data.startsWith(\"<!--\") || data.startsWith(\"<![\"))) {\n+            // Check if comment is an XML declaration\n+            if (data.startsWith(\"<![\")) {\n+                int endDeclaration = data.indexOf(\"]>\");\n+                if (endDeclaration != -1) {\n+                    String declaration = data.substring(2, endDeclaration);\n+                    insert = new XmlDeclaration(declaration, comment.baseUri(), true);\n+                }\n+            } else {\n+                // Otherwise, if it's a comment, insert it as a Comment node\n+                insert = new Comment(data.substring(4, data.length() - 3), comment.baseUri());\n+            }\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"<!\") || data.startsWith(\"<?\"))) { // Use \"<!\" and \"<?\" to check for xml declaration\n            String declaration = data.substring(2);\n            boolean isDeclaration = data.startsWith(\"<!\");\n            insert = new XmlDeclaration(declaration, comment.baseUri(), isDeclaration);\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -5,9 +5,10 @@\n         // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n         // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+        if (data.length() > 1 && (data.startsWith(\"<!\") || data.startsWith(\"<?\"))) { // Use \"<!\" and \"<?\" to check for xml declaration\n+            String declaration = data.substring(2);\n+            boolean isDeclaration = data.startsWith(\"<!\");\n+            insert = new XmlDeclaration(declaration, comment.baseUri(), isDeclaration);\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1) { // modified condition to prevent string index out of bounds error\n            if (data.startsWith(\"!\") || data.startsWith(\"?\")) {\n                String declaration = data.substring(1);\n                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n            }\n        }  \n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -5,10 +5,12 @@\n         // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n         // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n-        }\n+        if (data.length() > 1) { // modified condition to prevent string index out of bounds error\n+            if (data.startsWith(\"!\") || data.startsWith(\"?\")) {\n+                String declaration = data.substring(1);\n+                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+            }\n+        }  \n     }\n     insertNode(insert);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n            String declaration = data.substring(1);\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n            insert.setBaseUri(comment.baseUri());\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -8,6 +8,7 @@\n         if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n             String declaration = data.substring(1);\n             insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+            insert.setBaseUri(comment.baseUri());\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 2 && (data.startsWith(\"<!\") || data.startsWith(\"<?\"))) { // added >2 instead of >1 to avoid false positive\n            String declaration = data.substring(2, data.length() - 1); // changed substring to exclude the first and last characters of data\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -5,8 +5,8 @@\n         // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n         // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n+        if (data.length() > 2 && (data.startsWith(\"<!\") || data.startsWith(\"<?\"))) { // added >2 instead of >1 to avoid false positive\n+            String declaration = data.substring(2, data.length() - 1); // changed substring to exclude the first and last characters of data\n             insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.isBogus()) { // changed from commentToken.bogus to commentToken.isBogus()\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n            String declaration = data.substring(1);\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -1,7 +1,7 @@\n void insert(Token.Comment commentToken) {\n     Comment comment = new Comment(commentToken.getData(), baseUri);\n     Node insert = comment;\n-    if (commentToken.bogus) {\n+    if (commentToken.isBogus()) { // changed from commentToken.bogus to commentToken.isBogus()\n         // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n         // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n            String declaration = data.substring(1);\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n            if (parent instanceof Document) {\n                Node prev = ((Document) parent).select(\"xml\").first();\n                if (prev != null)\n                    prev.replaceWith(insert);\n                else\n                    ((Document) parent).prependChild(insert);\n            }\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -8,6 +8,13 @@\n         if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n             String declaration = data.substring(1);\n             insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+            if (parent instanceof Document) {\n+                Node prev = ((Document) parent).select(\"xml\").first();\n+                if (prev != null)\n+                    prev.replaceWith(insert);\n+                else\n+                    ((Document) parent).prependChild(insert);\n+            }\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n            String declaration = data.substring(1);\n            insert = new XmlDeclaration(data, comment.baseUri(), data.startsWith(\"!\"));\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -7,7 +7,7 @@\n         String data = comment.getData();\n         if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n             String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+            insert = new XmlDeclaration(data, comment.baseUri(), data.startsWith(\"!\"));\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n            String declaration = data.substring(1);\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n            // Add the insert node as child to the Document Node to ensure it is included in the final document\n            documentNode.appendChild(insert); \n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -8,6 +8,8 @@\n         if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n             String declaration = data.substring(1);\n             insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+            // Add the insert node as child to the Document Node to ensure it is included in the final document\n+            documentNode.appendChild(insert); \n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 2 && (data.startsWith(\"<!\") || data.startsWith(\"<?\"))) {\n            String declaration = data.substring(2, data.length() - 1);\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"<!\"));\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -5,9 +5,9 @@\n         // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n         // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+        if (data.length() > 2 && (data.startsWith(\"<!\") || data.startsWith(\"<?\"))) {\n+            String declaration = data.substring(2, data.length() - 1);\n+            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"<!\"));\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n            String declaration = data.substring(1);\n            insert = new XmlDeclaration(data.startsWith(\"!\"), declaration, comment.baseUri());\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -7,7 +7,7 @@\n         String data = comment.getData();\n         if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n             String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+            insert = new XmlDeclaration(data.startsWith(\"!\"), declaration, comment.baseUri());\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"<!\") || data.startsWith(\"<?\"))) { // fix: check if data starts with \"<!\" or \"<?\"\n            String declaration = data.substring(2, data.length() - 1); // fix: remove the \"<\" and \">\" characters\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"<!\"));\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -5,9 +5,9 @@\n         // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n         // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+        if (data.length() > 1 && (data.startsWith(\"<!\") || data.startsWith(\"<?\"))) { // fix: check if data starts with \"<!\" or \"<?\"\n+            String declaration = data.substring(2, data.length() - 1); // fix: remove the \"<\" and \">\" characters\n+            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"<!\"));\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"<!--\") || data.startsWith(\"<?\"))) {\n            String declaration = data.substring(2, data.length() - 2);\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"<?\"));\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -5,9 +5,9 @@\n         // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n         // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+        if (data.length() > 1 && (data.startsWith(\"<!--\") || data.startsWith(\"<?\"))) {\n+            String declaration = data.substring(2, data.length() - 2);\n+            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"<?\"));\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n            String declaration = data.substring(1);\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n            insert.setBaseUri(baseUri); // add missing baseUri to XmlDeclaration node\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -8,6 +8,7 @@\n         if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n             String declaration = data.substring(1);\n             insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+            insert.setBaseUri(baseUri); // add missing baseUri to XmlDeclaration node\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"<!--\") || data.startsWith(\"<?\"))) {\n            if(data.startsWith(\"<!--\")){\n                insert = new XmlComment(data.substring(4, data.length() - 3), comment.baseUri());\n            }else{\n                String declaration = data.substring(2, data.length() - 2);\n                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"<?\"));\n             }\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -2,12 +2,14 @@\n     Comment comment = new Comment(commentToken.getData(), baseUri);\n     Node insert = comment;\n     if (commentToken.bogus) {\n-        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n-        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+        if (data.length() > 1 && (data.startsWith(\"<!--\") || data.startsWith(\"<?\"))) {\n+            if(data.startsWith(\"<!--\")){\n+                insert = new XmlComment(data.substring(4, data.length() - 3), comment.baseUri());\n+            }else{\n+                String declaration = data.substring(2, data.length() - 2);\n+                insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"<?\"));\n+             }\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"<!--\") || data.startsWith(\"<?\"))) {\n            String declaration = data.substring(2);\n            boolean isDeclaration = data.startsWith(\"<?\");\n            if (isDeclaration) {\n               declaration = declaration.substring(0, declaration.indexOf(\">\"));\n            } else {\n               declaration = declaration.substring(0, declaration.indexOf(\"-->\"));\n            }\n            insert = new XmlDeclaration(declaration, comment.baseUri(), isDeclaration);\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -5,9 +5,15 @@\n         // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n         // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+        if (data.length() > 1 && (data.startsWith(\"<!--\") || data.startsWith(\"<?\"))) {\n+            String declaration = data.substring(2);\n+            boolean isDeclaration = data.startsWith(\"<?\");\n+            if (isDeclaration) {\n+               declaration = declaration.substring(0, declaration.indexOf(\">\"));\n+            } else {\n+               declaration = declaration.substring(0, declaration.indexOf(\"-->\"));\n+            }\n+            insert = new XmlDeclaration(declaration, comment.baseUri(), isDeclaration);\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 2 && (data.startsWith(\"<!--\") \n            && data.endsWith(\"-->\"))) { // check if it is an xml declaration\n            String declaration = data.substring(4, data.length()-3);\n            insert = new XmlDeclaration(declaration, comment.baseUri(), false);\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -5,9 +5,10 @@\n         // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n         // so we do a bit of a hack and parse the data as an element to pull the attributes out\n         String data = comment.getData();\n-        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n-            String declaration = data.substring(1);\n-            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+        if (data.length() > 2 && (data.startsWith(\"<!--\") \n+            && data.endsWith(\"-->\"))) { // check if it is an xml declaration\n+            String declaration = data.substring(4, data.length()-3);\n+            insert = new XmlDeclaration(declaration, comment.baseUri(), false);\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n            String declaration = data.substring(1);\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n            if (parentNode != null) {\n                parentNode.insertChildren(-1, insert);\n            } else {\n                insertChildren(-1, insert);\n            }\n            return;\n        }\n    }\n    insertNode(insert);\n}", "diff": "--- org/jsoup/parser/XmlTreeBuilder.java@insert\n+++ org/jsoup/parser/XmlTreeBuilder.java@insert\n@@ -8,6 +8,12 @@\n         if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n             String declaration = data.substring(1);\n             insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n+            if (parentNode != null) {\n+                parentNode.insertChildren(-1, insert);\n+            } else {\n+                insertChildren(-1, insert);\n+            }\n+            return;\n         }\n     }\n     insertNode(insert);\n", "finish_reason": "stop", "valid": false, "num": 1}]