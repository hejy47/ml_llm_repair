[{"output": "public List<Node> siblingNodes() {\n    Node parent = parent();\n    if (parent == null) {\n        return Collections.emptyList();\n    }\n    return parent.childNodes();\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,7 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    Node parent = parent();\n+    if (parent == null) {\n+        return Collections.emptyList();\n+    }\n+    return parent.childNodes();\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public List<Node> siblingNodes() {\n    Node parent = parent();\n    if(parent == null) {\n        return Collections.emptyList();\n    }\n    return parent.childNodes();\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,7 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    Node parent = parent();\n+    if(parent == null) {\n+        return Collections.emptyList();\n+    }\n+    return parent.childNodes();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    Node parent = parent();\n    if (parent == null) return Collections.emptyList();\n    return parent.childNodes();\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,5 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    Node parent = parent();\n+    if (parent == null) return Collections.emptyList();\n+    return parent.childNodes();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if (parent() == null) {\n        return Collections.emptyList();\n    }\n    List<Node> siblings = parent().childNodes();\n    siblings.remove(this);\n    return siblings;\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,8 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    if (parent() == null) {\n+        return Collections.emptyList();\n+    }\n+    List<Node> siblings = parent().childNodes();\n+    siblings.remove(this);\n+    return siblings;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if (parent() != null) {\n        return parent().childNodes();\n    }\n    return Collections.emptyList();\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,6 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    if (parent() != null) {\n+        return parent().childNodes();\n+    }\n+    return Collections.emptyList();\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public List<Node> siblingNodes() {\n    if (parent() == null) {\n        return new ArrayList<Node>();\n    }\n    List<Node> siblings = new ArrayList<Node>();\n    for (Node child : parent().childNodes()) {\n        if (!child.equals(this)) {\n            siblings.add(child);\n        }\n    }\n    return siblings;\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,12 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    if (parent() == null) {\n+        return new ArrayList<Node>();\n+    }\n+    List<Node> siblings = new ArrayList<Node>();\n+    for (Node child : parent().childNodes()) {\n+        if (!child.equals(this)) {\n+            siblings.add(child);\n+        }\n+    }\n+    return siblings;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if(parent() != null){\n        return parent().childNodes();\n    }\n    return new ArrayList<Node>();\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,6 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    if(parent() != null){\n+        return parent().childNodes();\n+    }\n+    return new ArrayList<Node>();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if (parent() == null) {\n        return new ArrayList<>();\n    } else {\n        List<Node> siblings = parent().childNodes();\n        siblings.remove(this);\n        return siblings;\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,9 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    if (parent() == null) {\n+        return new ArrayList<>();\n+    } else {\n+        List<Node> siblings = parent().childNodes();\n+        siblings.remove(this);\n+        return siblings;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if (parent() == null) {\n        return new ArrayList<Node>();\n    }\n    return parent().childNodes();\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,6 @@\n public List<Node> siblingNodes() {\n+    if (parent() == null) {\n+        return new ArrayList<Node>();\n+    }\n     return parent().childNodes();\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public List<Node> siblingNodes() {\n    List<Node> siblings = new ArrayList<>();\n    Node parent = parent();\n    if(parent == null) {\n        return siblings;\n    }\n    List<Node> childNodes = parent.childNodes();\n    for (Node node : childNodes) {\n        if (!node.equals(this)) {\n            siblings.add(node);\n        }\n    }\n    return siblings;\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,14 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    List<Node> siblings = new ArrayList<>();\n+    Node parent = parent();\n+    if(parent == null) {\n+        return siblings;\n+    }\n+    List<Node> childNodes = parent.childNodes();\n+    for (Node node : childNodes) {\n+        if (!node.equals(this)) {\n+            siblings.add(node);\n+        }\n+    }\n+    return siblings;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if (parent() == null) {\n        return new ArrayList<Node>();\n    }\n    List<Node> siblings = parent().childNodes();\n    siblings.remove(this);\n    return siblings;\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,8 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    if (parent() == null) {\n+        return new ArrayList<Node>();\n+    }\n+    List<Node> siblings = parent().childNodes();\n+    siblings.remove(this);\n+    return siblings;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if (parent() == null) {\n        return new ArrayList<Node>();\n    } else {\n        return parent().childNodes();\n    }\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,7 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    if (parent() == null) {\n+        return new ArrayList<Node>();\n+    } else {\n+        return parent().childNodes();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if (parent() == null) {\n        return new ArrayList<Node>();\n    }\n    List<Node> siblings = new ArrayList<Node>(parent().childNodes());\n    siblings.remove(this);\n    return siblings;\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,8 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    if (parent() == null) {\n+        return new ArrayList<Node>();\n+    }\n+    List<Node> siblings = new ArrayList<Node>(parent().childNodes());\n+    siblings.remove(this);\n+    return siblings;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if(parent() == null) {\n        return new ArrayList<>();\n    }\n    return parent().childNodes();\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,6 @@\n public List<Node> siblingNodes() {\n+    if(parent() == null) {\n+        return new ArrayList<>();\n+    }\n     return parent().childNodes();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if (parent() == null) {\n        return new ArrayList<Node>();\n    }\n    List<Node> siblings = new ArrayList<Node>();\n    for (Node node : parent().childNodes()) {\n        if (node != this) {\n            siblings.add(node);\n        }\n    }\n    return siblings;\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,12 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    if (parent() == null) {\n+        return new ArrayList<Node>();\n+    }\n+    List<Node> siblings = new ArrayList<Node>();\n+    for (Node node : parent().childNodes()) {\n+        if (node != this) {\n+            siblings.add(node);\n+        }\n+    }\n+    return siblings;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if(parent() != null)\n        return parent().childNodes();\n    else\n        return new ArrayList<Node>();\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,6 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    if(parent() != null)\n+        return parent().childNodes();\n+    else\n+        return new ArrayList<Node>();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public List<Node> siblingNodes() {\n    if(parent() != null) {\n        List<Node> siblings = new ArrayList<>();\n        for(Node child : parent().childNodes()) {\n            if(!child.equals(this)) {\n                siblings.add(child);\n            }\n        }\n        return siblings;\n    }\n    return new ArrayList<Node>();\n}", "diff": "--- org/jsoup/nodes/Node.java@siblingNodes\n+++ org/jsoup/nodes/Node.java@siblingNodes\n@@ -1,3 +1,12 @@\n public List<Node> siblingNodes() {\n-    return parent().childNodes();\n+    if(parent() != null) {\n+        List<Node> siblings = new ArrayList<>();\n+        for(Node child : parent().childNodes()) {\n+            if(!child.equals(this)) {\n+                siblings.add(child);\n+            }\n+        }\n+        return siblings;\n+    }\n+    return new ArrayList<Node>();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]