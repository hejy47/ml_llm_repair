[{"output": "protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException {\n    ClassUtil.throwIfIOE(e);\n    ClassUtil.throwIfRTE(e);\n    // let's wrap the innermost problem\n    Throwable th = ClassUtil.getRootCause(e);\n    if (th instanceof IOException) {\n        throw (IOException) th;\n    }\n    throw new JsonMappingException(p, th.getMessage(), th);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n+++ com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n@@ -3,5 +3,8 @@\n     ClassUtil.throwIfRTE(e);\n     // let's wrap the innermost problem\n     Throwable th = ClassUtil.getRootCause(e);\n-    throw JsonMappingException.from(p, th.getMessage(), th);\n+    if (th instanceof IOException) {\n+        throw (IOException) th;\n+    }\n+    throw new JsonMappingException(p, th.getMessage(), th);\n }\n", "finish_reason": "stop", "valid": false, "num": 11}, {"output": "protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException {\n    ClassUtil.throwIfIOE(e);\n    ClassUtil.throwIfRTE(e);\n    // let's wrap the innermost problem\n    Throwable th = ClassUtil.getRootCause(e);\n    if (th instanceof IOException) {\n        throw (IOException) th;\n    } else {\n        throw new JsonMappingException(p, \"Root cause: \"+ th.getMessage(), th);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n+++ com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n@@ -3,5 +3,9 @@\n     ClassUtil.throwIfRTE(e);\n     // let's wrap the innermost problem\n     Throwable th = ClassUtil.getRootCause(e);\n-    throw JsonMappingException.from(p, th.getMessage(), th);\n+    if (th instanceof IOException) {\n+        throw (IOException) th;\n+    } else {\n+        throw new JsonMappingException(p, \"Root cause: \"+ th.getMessage(), th);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException {\n    ClassUtil.throwIfIOE(e);\n    ClassUtil.throwIfRTE(e);\n    // let's wrap the innermost problem\n    Throwable th = ClassUtil.getRootCause(e);\n    if (th instanceof IOException) {\n        throw (IOException) th;\n    } else {\n        throw new JsonMappingException(p, th.getMessage(), th);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n+++ com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n@@ -3,5 +3,9 @@\n     ClassUtil.throwIfRTE(e);\n     // let's wrap the innermost problem\n     Throwable th = ClassUtil.getRootCause(e);\n-    throw JsonMappingException.from(p, th.getMessage(), th);\n+    if (th instanceof IOException) {\n+        throw (IOException) th;\n+    } else {\n+        throw new JsonMappingException(p, th.getMessage(), th);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException {\n    ClassUtil.throwIfIOE(e);\n    ClassUtil.throwIfRTE(e);\n    // let's wrap the innermost problem\n    Throwable th = ClassUtil.getRootCause(e);\n    if(th instanceof IOException){\n        throw (IOException)th;\n    }else{\n        throw new JsonMappingException(p, th.getMessage(), th);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n+++ com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n@@ -3,5 +3,9 @@\n     ClassUtil.throwIfRTE(e);\n     // let's wrap the innermost problem\n     Throwable th = ClassUtil.getRootCause(e);\n-    throw JsonMappingException.from(p, th.getMessage(), th);\n+    if(th instanceof IOException){\n+        throw (IOException)th;\n+    }else{\n+        throw new JsonMappingException(p, th.getMessage(), th);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException {\n    ClassUtil.throwIfIOE(e);\n    ClassUtil.throwIfRTE(e);\n    // let's wrap the innermost problem\n    Throwable th = ClassUtil.getRootCause(e);\n    if(th instanceof IOException) {\n        throw (IOException) th;\n    }\n    throw new JsonMappingException(p, th.getMessage(), th);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n+++ com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n@@ -3,5 +3,8 @@\n     ClassUtil.throwIfRTE(e);\n     // let's wrap the innermost problem\n     Throwable th = ClassUtil.getRootCause(e);\n-    throw JsonMappingException.from(p, th.getMessage(), th);\n+    if(th instanceof IOException) {\n+        throw (IOException) th;\n+    }\n+    throw new JsonMappingException(p, th.getMessage(), th);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException {\n    ClassUtil.throwIfIOE(e);\n    ClassUtil.throwIfRTE(e);\n    // let's wrap the innermost problem\n    Throwable th = ClassUtil.getRootCause(e);\n    if (th instanceof IOException) {\n        throw (IOException) th;\n    } else {\n        throw JsonMappingException.from(p, th.getMessage(), th);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n+++ com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n@@ -3,5 +3,9 @@\n     ClassUtil.throwIfRTE(e);\n     // let's wrap the innermost problem\n     Throwable th = ClassUtil.getRootCause(e);\n-    throw JsonMappingException.from(p, th.getMessage(), th);\n+    if (th instanceof IOException) {\n+        throw (IOException) th;\n+    } else {\n+        throw JsonMappingException.from(p, th.getMessage(), th);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException {\n    ClassUtil.throwIfIOE(e);\n    ClassUtil.throwIfRTE(e);\n    // let's wrap the innermost problem\n    Throwable th = ClassUtil.getRootCause(e);\n    String message = (th != null) ? th.getMessage() : e.getMessage(); // fixed line\n    throw JsonMappingException.from(p, message, th);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n+++ com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n@@ -3,5 +3,6 @@\n     ClassUtil.throwIfRTE(e);\n     // let's wrap the innermost problem\n     Throwable th = ClassUtil.getRootCause(e);\n-    throw JsonMappingException.from(p, th.getMessage(), th);\n+    String message = (th != null) ? th.getMessage() : e.getMessage(); // fixed line\n+    throw JsonMappingException.from(p, message, th);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException {\n    ClassUtil.throwIfIOE(e);\n    ClassUtil.throwIfRTE(e);\n    // let's wrap the innermost problem\n    Throwable th = ClassUtil.getRootCause(e);\n    if(th instanceof IOException) {\n        throw (IOException)th;\n    }\n    throw new JsonMappingException(p, th.getMessage(), th);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n+++ com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n@@ -3,5 +3,8 @@\n     ClassUtil.throwIfRTE(e);\n     // let's wrap the innermost problem\n     Throwable th = ClassUtil.getRootCause(e);\n-    throw JsonMappingException.from(p, th.getMessage(), th);\n+    if(th instanceof IOException) {\n+        throw (IOException)th;\n+    }\n+    throw new JsonMappingException(p, th.getMessage(), th);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException {\n    ClassUtil.throwIfIOE(e);\n    ClassUtil.throwIfRTE(e);\n    // let's wrap the innermost problem\n    Throwable th = ClassUtil.getRootCause(e);\n    if (th instanceof IOException) {\n        throw (IOException) th;\n    }\n    else {\n        throw new JsonMappingException(p, th.getMessage(), th);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n+++ com/fasterxml/jackson/databind/deser/SettableBeanProperty.java@_throwAsIOE1\n@@ -3,5 +3,10 @@\n     ClassUtil.throwIfRTE(e);\n     // let's wrap the innermost problem\n     Throwable th = ClassUtil.getRootCause(e);\n-    throw JsonMappingException.from(p, th.getMessage(), th);\n+    if (th instanceof IOException) {\n+        throw (IOException) th;\n+    }\n+    else {\n+        throw new JsonMappingException(p, th.getMessage(), th);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]