[{"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n    }\n    return new JsonMappingException(\"Instantiation of \" + getValueTypeDesc() + \" value failed\", t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -8,5 +8,5 @@\n             return (JsonMappingException) curr;\n         }\n     }\n-    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n+    return new JsonMappingException(\"Instantiation of \" + getValueTypeDesc() + \" value failed\", t);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        } else if (curr.getCause() == null) { // added condition to check if current exception has no cause\n            return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + curr.getMessage(), curr);\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -6,6 +6,8 @@\n     for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n+        } else if (curr.getCause() == null) { // added condition to check if current exception has no cause\n+            return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + curr.getMessage(), curr);\n         }\n     }\n     return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n        if (curr instanceof InvocationTargetException) {\n            curr = curr.getCause();\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -7,6 +7,9 @@\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n         }\n+        if (curr instanceof InvocationTargetException) {\n+            curr = curr.getCause();\n+        }\n     }\n     return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t.getCause());\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -8,5 +8,5 @@\n             return (JsonMappingException) curr;\n         }\n     }\n-    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n+    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t.getCause());\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n    }\n    String msg = t.getMessage();\n    if (msg == null) {\n        msg = \"Instantiation of \" + getValueTypeDesc() + \" value failed\";\n    } else {\n        msg = \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + msg;\n    }\n    return new JsonMappingException(null, msg, t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -8,5 +8,11 @@\n             return (JsonMappingException) curr;\n         }\n     }\n-    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n+    String msg = t.getMessage();\n+    if (msg == null) {\n+        msg = \"Instantiation of \" + getValueTypeDesc() + \" value failed\";\n+    } else {\n+        msg = \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + msg;\n+    }\n+    return new JsonMappingException(null, msg, t);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t.getCause(); curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -3,7 +3,7 @@\n protected JsonMappingException wrapException(Throwable t) {\n     // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n     //   does so if and until `JsonMappingException` is found.\n-    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n+    for (Throwable curr = t.getCause(); curr != null; curr = curr.getCause()) {\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null && curr.getCause() != curr; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -3,7 +3,7 @@\n protected JsonMappingException wrapException(Throwable t) {\n     // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n     //   does so if and until `JsonMappingException` is found.\n-    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n+    for (Throwable curr = t; curr != null && curr.getCause() != curr; curr = curr.getCause()) {\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        } else if (curr instanceof InvocationTargetException) {\n            // Unwrap target exception if this is an InvocationTargetException\n            Throwable targetException = ((InvocationTargetException) curr).getTargetException();\n            if (targetException != null) {\n                curr = targetException;\n            }\n        } else {\n            // Unwrap cause exception for all other types of exception\n            Throwable causeException = curr.getCause();\n            if (causeException != null) {\n                curr = causeException;\n            }\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -6,6 +6,18 @@\n     for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n+        } else if (curr instanceof InvocationTargetException) {\n+            // Unwrap target exception if this is an InvocationTargetException\n+            Throwable targetException = ((InvocationTargetException) curr).getTargetException();\n+            if (targetException != null) {\n+                curr = targetException;\n+            }\n+        } else {\n+            // Unwrap cause exception for all other types of exception\n+            Throwable causeException = curr.getCause();\n+            if (causeException != null) {\n+                curr = causeException;\n+            }\n         }\n     }\n     return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n    }\n    return new JsonMappingException(\"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -8,5 +8,5 @@\n             return (JsonMappingException) curr;\n         }\n     }\n-    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n+    return new JsonMappingException(\"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n        if (curr == curr.getCause()) { // avoid infinite loop in case of cyclic dependency\n            break;\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -7,6 +7,9 @@\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n         }\n+        if (curr == curr.getCause()) { // avoid infinite loop in case of cyclic dependency\n+            break;\n+        }\n     }\n     return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n        // add check for `JsonProcessingException` which is a superclass of `JsonMappingException`\n        if (curr instanceof JsonProcessingException) {\n            return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -7,6 +7,10 @@\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n         }\n+        // add check for `JsonProcessingException` which is a superclass of `JsonMappingException`\n+        if (curr instanceof JsonProcessingException) {\n+            return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n+        }\n     }\n     return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        } else if (curr instanceof InvocationTargetException) {\n            Throwable cause = curr.getCause();\n            if (cause != null) {\n                curr = cause;\n            }\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -6,6 +6,11 @@\n     for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n+        } else if (curr instanceof InvocationTargetException) {\n+            Throwable cause = curr.getCause();\n+            if (cause != null) {\n+                curr = cause;\n+            }\n         }\n     }\n     return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        } else if (curr instanceof InvocationTargetException) {\n            return wrapException(((InvocationTargetException) curr).getTargetException());\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -6,6 +6,8 @@\n     for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n+        } else if (curr instanceof InvocationTargetException) {\n+            return wrapException(((InvocationTargetException) curr).getTargetException());\n         }\n     }\n     return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n    }\n    return new JsonMappingException(\"Wrapped exception could not be processed properly: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -8,5 +8,5 @@\n             return (JsonMappingException) curr;\n         }\n     }\n-    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n+    return new JsonMappingException(\"Wrapped exception could not be processed properly: \" + t.getMessage(), t);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        } else if (curr instanceof InvocationTargetException) {\n            // Unwrap invocation target exception to get the original exception\n            curr = ((InvocationTargetException) curr).getTargetException();\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -6,6 +6,9 @@\n     for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n+        } else if (curr instanceof InvocationTargetException) {\n+            // Unwrap invocation target exception to get the original exception\n+            curr = ((InvocationTargetException) curr).getTargetException();\n         }\n     }\n     return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n        if (curr instanceof InvocationTargetException) {\n            // Unwrap InvocationTargetException to properly handle nested exceptions\n            curr = ((InvocationTargetException) curr).getTargetException();\n        }\n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -7,6 +7,10 @@\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n         }\n+        if (curr instanceof InvocationTargetException) {\n+            // Unwrap InvocationTargetException to properly handle nested exceptions\n+            curr = ((InvocationTargetException) curr).getTargetException();\n+        }\n     }\n     return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n    }\n    // If no JsonMappingException found, wrap the original exception in a new JsonMappingException\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -8,5 +8,6 @@\n             return (JsonMappingException) curr;\n         }\n     }\n+    // If no JsonMappingException found, wrap the original exception in a new JsonMappingException\n     return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// since 2.7\n@Deprecated\nprotected JsonMappingException wrapException(Throwable t) {\n    // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only\n    //   does so if and until `JsonMappingException` is found.\n    for (Throwable curr = t; curr != null; curr = curr.getCause()) {\n        if (curr instanceof JsonMappingException) {\n            return (JsonMappingException) curr;\n        }\n        // fix: check if it's InvocationTargetException and unwrap it\n        if (curr instanceof InvocationTargetException) {\n            curr = ((InvocationTargetException) curr).getTargetException();\n        } \n    }\n    return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n+++ com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java@wrapException\n@@ -7,6 +7,10 @@\n         if (curr instanceof JsonMappingException) {\n             return (JsonMappingException) curr;\n         }\n+        // fix: check if it's InvocationTargetException and unwrap it\n+        if (curr instanceof InvocationTargetException) {\n+            curr = ((InvocationTargetException) curr).getTargetException();\n+        } \n     }\n     return new JsonMappingException(null, \"Instantiation of \" + getValueTypeDesc() + \" value failed: \" + t.getMessage(), t);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]