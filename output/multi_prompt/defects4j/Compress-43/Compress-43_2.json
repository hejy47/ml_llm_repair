[{"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze) && ze.getCompressedSize() < ZIP_64_LIMIT && ze.getSize() < ZIP_64_LIMIT ) {\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -4,7 +4,7 @@\n     }\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n-    if (!hasZip64Extra(ze)) {\n+    if (!hasZip64Extra(ze) && ze.getCompressedSize() < ZIP_64_LIMIT && ze.getSize() < ZIP_64_LIMIT ) {\n         writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze)) {\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize().getLongValue()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize().getLongValue()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -8,7 +8,7 @@\n         writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n-        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n-        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n+        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize().getLongValue()));\n+        writeCounted(ZipEightByteInteger.getBytes(ze.getSize().getLongValue()));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze) && ze.getCompressedSize() < ZIP64_MAGICVAL && ze.getSize() < ZIP64_MAGICVAL) {\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -4,7 +4,7 @@\n     }\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n-    if (!hasZip64Extra(ze)) {\n+    if (!hasZip64Extra(ze) && ze.getCompressedSize() < ZIP64_MAGICVAL && ze.getSize() < ZIP64_MAGICVAL) {\n         writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    // Always write Zip64 data descriptor\n    writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n    writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -4,11 +4,7 @@\n     }\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n-    if (!hasZip64Extra(ze)) {\n-        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n-        writeCounted(ZipLong.getBytes(ze.getSize()));\n-    } else {\n-        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n-        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n-    }\n+    // Always write Zip64 data descriptor\n+    writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n+    writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null || !supportZip64(ze)) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n    writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n} \n\n// A new helper function is added to check if zip64 is required or not for a given entry\nprivate boolean supportZip64(final ZipArchiveEntry ze) {\n    return ze.getCompressedSize() >= ZIP64_MAGIC || ze.getSize() >= ZIP64_MAGIC;\n}\n\nNote: The fixed function checks for support of zip64 based on the sizes of compressed and uncompressed data rather than the presence of zip64 extra field. This is because it is known that if sizes exceed a certain value, zip64 is required regardless of the presence of zip64 extra field.", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -1,14 +1,9 @@\n protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n-    if (ze.getMethod() != DEFLATED || channel != null) {\n+    if (ze.getMethod() != DEFLATED || channel != null || !supportZip64(ze)) {\n         return;\n     }\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n-    if (!hasZip64Extra(ze)) {\n-        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n-        writeCounted(ZipLong.getBytes(ze.getSize()));\n-    } else {\n-        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n-        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n-    }\n+    writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n+    writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze) && ze.getCompressedSize() < ZipEightByteInteger.MAX_VALUE\n            && ze.getSize() < ZipEightByteInteger.MAX_VALUE) {\n        // Using 4-byte sizes\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        // Using 8-byte sizes\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -4,10 +4,13 @@\n     }\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n-    if (!hasZip64Extra(ze)) {\n+    if (!hasZip64Extra(ze) && ze.getCompressedSize() < ZipEightByteInteger.MAX_VALUE\n+            && ze.getSize() < ZipEightByteInteger.MAX_VALUE) {\n+        // Using 4-byte sizes\n         writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n+        // Using 8-byte sizes\n         writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze)) {\n        // calculate compressed size from the Deflater, if available\n        long size = ze.getCompressedSize();\n        if (def != null) {\n            size = def.getBytesWritten();\n        }\n        writeCounted(ZipLong.getBytes(size));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -5,7 +5,12 @@\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n     if (!hasZip64Extra(ze)) {\n-        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n+        // calculate compressed size from the Deflater, if available\n+        long size = ze.getCompressedSize();\n+        if (def != null) {\n+            size = def.getBytesWritten();\n+        }\n+        writeCounted(ZipLong.getBytes(size));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n         writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze)) {\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -10,5 +10,7 @@\n     } else {\n         writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n+        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n+        writeCounted(ZipLong.getBytes(ze.getSize()));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze) || ze.getCompressedSize() < 0 || ze.getSize() < 0) {\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -4,7 +4,7 @@\n     }\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n-    if (!hasZip64Extra(ze)) {\n+    if (!hasZip64Extra(ze) || ze.getCompressedSize() < 0 || ze.getSize() < 0) {\n         writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze)) {\n        // Use ZipLong for compressedSize and size\n        writeCounted(ZipLong.getBytes((int) ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes((int) ze.getSize()));\n    } else {\n        // Use ZipEightByteInteger for compressedSize and size\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -5,9 +5,11 @@\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n     if (!hasZip64Extra(ze)) {\n-        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n-        writeCounted(ZipLong.getBytes(ze.getSize()));\n+        // Use ZipLong for compressedSize and size\n+        writeCounted(ZipLong.getBytes((int) ze.getCompressedSize()));\n+        writeCounted(ZipLong.getBytes((int) ze.getSize()));\n     } else {\n+        // Use ZipEightByteInteger for compressedSize and size\n         writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze)) {\n        writeCounted(ZipLong.getBytes((int) ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -5,7 +5,7 @@\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n     if (!hasZip64Extra(ze)) {\n-        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n+        writeCounted(ZipLong.getBytes((int) ze.getCompressedSize()));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n         writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze) && ze.getCompressedSize() < ZIP_64_LIMIT && ze.getSize() < ZIP_64_LIMIT) {\n        // use standard 4-byte values\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        // use 8-byte values and set the ZIP64 extended information flag\n        ze.setExtra();\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -4,10 +4,13 @@\n     }\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n-    if (!hasZip64Extra(ze)) {\n+    if (!hasZip64Extra(ze) && ze.getCompressedSize() < ZIP_64_LIMIT && ze.getSize() < ZIP_64_LIMIT) {\n+        // use standard 4-byte values\n         writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n+        // use 8-byte values and set the ZIP64 extended information flag\n+        ze.setExtra();\n         writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze)) {\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        // Get the Zip64 extended information for the compressed size and size\n        Zip64ExtendedInformation zip64 = ze.getExtraField(Zip64ExtendedInformation.HEADER_ID);\n        writeCounted(zip64.getCompressedSize().getBytes());\n        writeCounted(zip64.getUncompressedSize().getBytes());\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -8,7 +8,9 @@\n         writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n-        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n-        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n+        // Get the Zip64 extended information for the compressed size and size\n+        Zip64ExtendedInformation zip64 = ze.getExtraField(Zip64ExtendedInformation.HEADER_ID);\n+        writeCounted(zip64.getCompressedSize().getBytes());\n+        writeCounted(zip64.getUncompressedSize().getBytes());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze)) {\n        writeCounted(ZipLong.getBytes((int)ze.getCompressedSize())); // cast to int to prevent overflow\n        writeCounted(ZipLong.getBytes((int)ze.getSize())); // cast to int to prevent overflow\n    } else {\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -5,8 +5,8 @@\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n     if (!hasZip64Extra(ze)) {\n-        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n-        writeCounted(ZipLong.getBytes(ze.getSize()));\n+        writeCounted(ZipLong.getBytes((int)ze.getCompressedSize())); // cast to int to prevent overflow\n+        writeCounted(ZipLong.getBytes((int)ze.getSize())); // cast to int to prevent overflow\n     } else {\n         writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze) && ze.getCompressedSize() < ZIP64_MAGIC) {\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -4,7 +4,7 @@\n     }\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n-    if (!hasZip64Extra(ze)) {\n+    if (!hasZip64Extra(ze) && ze.getCompressedSize() < ZIP64_MAGIC) {\n         writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze)) {\n        // Fix: Use the correct method to get compressed size and size\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -5,6 +5,7 @@\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n     if (!hasZip64Extra(ze)) {\n+        // Fix: Use the correct method to get compressed size and size\n         writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected void writeDataDescriptor(final ZipArchiveEntry ze) throws IOException {\n    if (ze.getMethod() != DEFLATED || channel != null) {\n        return;\n    }\n    writeCounted(DD_SIG);\n    writeCounted(ZipLong.getBytes(ze.getCrc()));\n    if (!hasZip64Extra(ze) || ze.getCompressedSize() < ZIP64_MAGIC) {\n        writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipLong.getBytes(ze.getSize()));\n    } else {\n        writeCounted(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeCounted(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n+++ org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java@writeDataDescriptor\n@@ -4,7 +4,7 @@\n     }\n     writeCounted(DD_SIG);\n     writeCounted(ZipLong.getBytes(ze.getCrc()));\n-    if (!hasZip64Extra(ze)) {\n+    if (!hasZip64Extra(ze) || ze.getCompressedSize() < ZIP64_MAGIC) {\n         writeCounted(ZipLong.getBytes(ze.getCompressedSize()));\n         writeCounted(ZipLong.getBytes(ze.getSize()));\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}]