[{"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp != null && !moduleExportsProp.isEmpty(), \n                            IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.copyInformationFrom(script);\n    script.addChildToBack(ifNode);\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,7 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp != null && !moduleExportsProp.isEmpty(), \n+                            IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.copyInformationFrom(script);\n+    script.addChildToBack(ifNode);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node assignNode = IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree());\n    Node exprResultNode = IR.exprResult(assignNode);\n    Node ifBlock = IR.block(exprResultNode);\n    Node ifNode = IR.ifNode(moduleExportsProp, ifBlock);\n    ifNode.copyInformationFromForTree(script);\n    script.addChildToBack(ifNode);\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,9 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node assignNode = IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree());\n+    Node exprResultNode = IR.exprResult(assignNode);\n+    Node ifBlock = IR.block(exprResultNode);\n+    Node ifNode = IR.ifNode(moduleExportsProp, ifBlock);\n+    ifNode.copyInformationFromForTree(script);\n+    script.addChildToBack(ifNode);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node assignNode = IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()));\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(assignNode));\n    script.addChildToBack(ifNode.copyInformationFromForTree(script));\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node assignNode = IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()));\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(assignNode));\n+    script.addChildToBack(ifNode.copyInformationFromForTree(script));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getelem(IR.name(\"module\"), IR.string(\"exports\"), IR.string(moduleName));\n    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,4 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n-    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n+    Node moduleExportsProp = IR.getelem(IR.name(\"module\"), IR.string(\"exports\"), IR.string(moduleName));\n     script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"exports\"));\n    script.addChildToBack(IR.ifNode(IR.getprop(IR.name(moduleName), IR.string(\"module\")),\n      IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,5 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n-    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"exports\"));\n+    script.addChildToBack(IR.ifNode(IR.getprop(IR.name(moduleName), IR.string(\"module\")),\n+      IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node moduleNameNode = IR.name(moduleName);\n    Node moduleExportsOverride = IR.assign(moduleNameNode, moduleExportsProp.cloneTree());\n    Node ifModuleExports = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(moduleExportsOverride)));\n    script.addChildToBack(ifModuleExports.copyInformationFromForTree(script));\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,7 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node moduleNameNode = IR.name(moduleName);\n+    Node moduleExportsOverride = IR.assign(moduleNameNode, moduleExportsProp.cloneTree());\n+    Node ifModuleExports = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(moduleExportsOverride)));\n+    script.addChildToBack(ifModuleExports.copyInformationFromForTree(script));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"exports\"));\n    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,4 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n-    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n+    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"exports\"));\n     script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = new Node(Token.IF);\n    Node block = new Node(Token.BLOCK);\n    Node expr = IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()));\n    block.addChildToBack(expr);\n    ifNode.addChildToBack(moduleExportsProp);\n    ifNode.addChildToBack(block);\n    script.addChildToBack(ifNode.copyInformationFrom(script));\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,10 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = new Node(Token.IF);\n+    Node block = new Node(Token.BLOCK);\n+    Node expr = IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()));\n+    block.addChildToBack(expr);\n+    ifNode.addChildToBack(moduleExportsProp);\n+    ifNode.addChildToBack(block);\n+    script.addChildToBack(ifNode.copyInformationFrom(script));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.setSourceLocation(script);\n    script.addChildToBack(ifNode);\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.setSourceLocation(script);\n+    script.addChildToBack(ifNode);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node assignNode = IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree());\n    Node exprResultNode = IR.exprResult(assignNode);\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(exprResultNode));\n    script.addChildToBack(ifNode);\n    ifNode.copyInformationFromForTree(script);\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,8 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node assignNode = IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree());\n+    Node exprResultNode = IR.exprResult(assignNode);\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(exprResultNode));\n+    script.addChildToBack(ifNode);\n+    ifNode.copyInformationFromForTree(script);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.copyInformationFromForTree(script);\n    script.addChildToBack(ifNode);\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.copyInformationFromForTree(script);\n+    script.addChildToBack(ifNode);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifStatement = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifStatement.copyInformationFromForTree(script);\n    script.addChildToBack(ifStatement);\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifStatement = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifStatement.copyInformationFromForTree(script);\n+    script.addChildToBack(ifStatement);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifStmt = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script);\n    script.addChildToBack(ifStmt);\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,5 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifStmt = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script);\n+    script.addChildToBack(ifStmt);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifBlock = IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())));\n    script.addChildToBack(IR.ifNode(moduleExportsProp.cloneTree(), ifBlock).copyInformationFromForTree(script));\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,5 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifBlock = IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())));\n+    script.addChildToBack(IR.ifNode(moduleExportsProp.cloneTree(), ifBlock).copyInformationFromForTree(script));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node moduleExportsCheck = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script);\n    script.addChildToBack(moduleExportsCheck);\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,5 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node moduleExportsCheck = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script);\n+    script.addChildToBack(moduleExportsCheck);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp != null && moduleExportsProp.getBooleanProp(Node.IS_CONSTANT_TRUE),\n                                     IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    script.addChildToBack(ifNode.copyInformationFromForTree(script));\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp != null && moduleExportsProp.getBooleanProp(Node.IS_CONSTANT_TRUE),\n+                                     IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    script.addChildToBack(ifNode.copyInformationFromForTree(script));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node assignment = IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())); // assign module$exports to moduleName\n    Node ifStmt = IR.ifNode(moduleExportsProp, IR.block(assignment)); // create if statement with the assignment as the true block\n    script.addChildToBack(ifStmt.copyInformationFromForTree(script)); // add the fixed if statement\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.java@emitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node assignment = IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())); // assign module$exports to moduleName\n+    Node ifStmt = IR.ifNode(moduleExportsProp, IR.block(assignment)); // create if statement with the assignment as the true block\n+    script.addChildToBack(ifStmt.copyInformationFromForTree(script)); // add the fixed if statement\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]