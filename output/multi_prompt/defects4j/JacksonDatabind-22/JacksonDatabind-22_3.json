[{"output": "protected JsonSerializer<?> buildMapSerializer(SerializationConfig config, MapType type, BeanDescription beanDesc, boolean staticTyping, JsonSerializer<Object> keySerializer, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) throws JsonMappingException {\n    JsonSerializer<?> ser = null;\n    // Order of lookups:\n    // 1. Custom serializers\n    // 2. Annotations (@JsonValue, @JsonDeserialize)\n    // 3. Defaults\n    for (Serializers serializers : customSerializers()) {\n        // (1) Custom\n        ser = serializers.findMapSerializer(config, type, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        // 08-Nov-2014, tatu: As per [databind#601], better just use default Map serializer\n        Object filterId = findFilterId(config, beanDesc);\n        AnnotationIntrospector ai = config.getAnnotationIntrospector();\n        MapSerializer mapSer = MapSerializer.construct(ai.findPropertiesToIgnore(beanDesc.getClassInfo()), type, staticTyping, elementTypeSerializer, keySerializer, elementValueSerializer, filterId);\n        Object suppressableValue = findSuppressableContentValue(config, type.getContentType(), beanDesc.getClassInfo());\n        if (suppressableValue != null) {\n            mapSer = mapSer.withContentInclusion(suppressableValue);\n        }\n        ser = mapSer;\n    }\n    // [databind#120]: Allow post-processing\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyMapSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 20}]