[{"output": "protected JsonSerializer<?> buildCollectionSerializer(SerializationConfig config, CollectionType type, BeanDescription beanDesc, boolean staticTyping, TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) throws JsonMappingException {\n    JsonSerializer<?> ser = null;\n    // Order of lookups:\n    // 1. Custom serializers\n    // 2. Annotations (@JsonValue, @JsonDeserialize)\n    // 3. Defaults\n    for (Serializers serializers : customSerializers()) {\n        // (1) Custom\n        ser = serializers.findCollectionSerializer(config, type, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        // We may also want to use serialize Collections \"as beans\", if (and only if)\n        // this is specified with `@JsonFormat(shape=Object)`\n        JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n        if (format != null && format.getShape() == JsonFormat.Shape.OBJECT) {\n            return null;\n        }\n        Class<?> raw = type.getRawClass();\n        if (EnumSet.class.isAssignableFrom(raw)) {\n            // this may or may not be available (Class doesn't; type of field/method does)\n            JavaType enumType = type.getContentType();\n            // and even if nominally there is something, only use if it really is enum\n            if (!enumType.isEnumType()) {\n                enumType = null;\n            }\n            ser = buildEnumSetSerializer(enumType);\n        } else {\n            Class<?> elementRaw = type.getContentType().getRawClass();\n            if (isIndexedList(raw)) {\n                if (elementRaw == String.class) {\n                    // [JACKSON-829] Must NOT use if we have custom serializer\n                    if (elementValueSerializer == null || elementValueSerializer.getClass().getName().startsWith(\"com.fasterxml.jackson.databind.\")) {\n                        ser = IndexedStringListSerializer.instance;\n                    }\n                } else {\n                    ser = buildIndexedListSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n                }\n            } else if (elementRaw == String.class) {\n                // [JACKSON-829] Must NOT use if we have custom serializer\n                if (elementValueSerializer == null || elementValueSerializer.getClass().getName().startsWith(\"com.fasterxml.jackson.databind.\")) {\n                    ser = StringCollectionSerializer.instance;\n                }\n            }\n            if (ser == null) {\n                ser = buildCollectionSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n            }\n        }\n    }\n    // [databind#120]: Allow post-processing\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyCollectionSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 20}]