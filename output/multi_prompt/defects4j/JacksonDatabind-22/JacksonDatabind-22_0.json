[{"output": "protected JsonSerializer<?> buildContainerSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n    final SerializationConfig config = prov.getConfig();\n        if (!staticTyping && !type.isJavaLangObject() && type.useStaticType()) {\n        staticTyping = true;\n    }\n    // Let's see what we can learn about element/content/value type, type serializer for it:\n    JavaType elementType = type.getContentType();\n    TypeSerializer elementTypeSerializer = createTypeSerializer(config, elementType);\n    // if elements have type serializer, can not force static typing:\n    if (elementTypeSerializer != null) {\n        staticTyping = false;\n    }\n    JsonSerializer<Object> elementValueSerializer = _findContentSerializer(prov, beanDesc.getClassInfo());\n    if (type.isMapLikeType()) {\n        // implements java.util.Map\n        MapLikeType mlt = (MapLikeType) type;\n                JsonSerializer<Object> keySerializer = _findKeySerializer(prov, beanDesc.getClassInfo());\n        if (mlt.isTrueMapType()) {\n            return buildMapSerializer(config, (MapType) mlt, beanDesc, staticTyping, keySerializer, elementTypeSerializer, elementValueSerializer);\n        }\n        // With Map-like, just 2 options: (1) Custom, (2) Annotations\n        JsonSerializer<?> ser = null;\n        for (Serializers serializers : customSerializers()) {\n            // (1) Custom\n            MapLikeType mlType = (MapLikeType) type;\n            ser = serializers.findMapLikeSerializer(config, mlType, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n            if (ser != null) {\n                if (_factoryConfig.hasSerializerModifiers()) {\n                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                        ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n                    }\n                }\n                return ser;\n            }\n        }\n        return null;\n    }\n    if (type.isCollectionLikeType()) {\n        CollectionLikeType clt = (CollectionLikeType) type;\n        if (clt.isTrueCollectionType()) {\n            return buildCollectionSerializer(config, (CollectionType) clt, beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer);\n        }\n        // With Collection-like, just 2 options: (1) Custom, (2) Annotations\n        JsonSerializer<?> ser = null;\n        CollectionLikeType clType = (CollectionLikeType) type;\n        for (Serializers serializers : customSerializers()) {\n            // (1) Custom\n            ser = serializers.findCollectionLikeSerializer(config, clType, beanDesc, elementTypeSerializer, elementValueSerializer);\n            if (ser != null) {\n                if (_factoryConfig.hasSerializerModifiers()) {\n                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                        ser = mod.modifyCollectionLikeSerializer(config, clType, beanDesc, ser);\n                    }\n                }\n                return ser;\n            }\n        }\n        return null;\n    }\n    if (type.isArrayType()) {\n        return buildArraySerializer(config, (ArrayType) type, beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer);\n    }\n    return null;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 20}]