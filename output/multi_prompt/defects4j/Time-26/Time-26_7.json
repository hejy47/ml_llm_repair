[{"output": "public long set(long instant, int value) {\n    // lenient needs to handle time zone chronologies\n    // so we do the calculation using local milliseconds\n    long localInstant = iBase.getZone().convertUTCToLocal(instant);\n    long difference = FieldUtils.safeSubtract(value, get(instant));\n    localInstant = getType().getField(iBase.getChronology()).add(localInstant, difference);\n    return iBase.getZone().convertLocalToUTC(localInstant, false);\n}", "diff": "--- org/joda/time/chrono/ZonedChronology.java@set\n+++ org/joda/time/chrono/ZonedChronology.java@set\n@@ -1,9 +1,8 @@\n public long set(long instant, int value) {\n-    long localInstant = iZone.convertUTCToLocal(instant);\n-    localInstant = iField.set(localInstant, value);\n-    long result = iZone.convertLocalToUTC(localInstant, false);\n-    if (get(result) != value) {\n-        throw new IllegalFieldValueException(iField.getType(), new Integer(value), \"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) + \" (\" + iZone.getID() + \")\");\n-    }\n-    return result;\n+    // lenient needs to handle time zone chronologies\n+    // so we do the calculation using local milliseconds\n+    long localInstant = iBase.getZone().convertUTCToLocal(instant);\n+    long difference = FieldUtils.safeSubtract(value, get(instant));\n+    localInstant = getType().getField(iBase.getChronology()).add(localInstant, difference);\n+    return iBase.getZone().convertLocalToUTC(localInstant, false);\n }\n--- org/joda/time/field/LenientDateTimeField.java@set\n+++ org/joda/time/field/LenientDateTimeField.java@set\n@@ -3,6 +3,6 @@\n     // so we do the calculation using local milliseconds\n     long localInstant = iBase.getZone().convertUTCToLocal(instant);\n     long difference = FieldUtils.safeSubtract(value, get(instant));\n-    localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);\n+    localInstant = getType().getField(iBase.getChronology()).add(localInstant, difference);\n     return iBase.getZone().convertLocalToUTC(localInstant, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 15}, {"output": "public long set(long instant, int value) {\n    // lenient needs to handle time zone chronologies\n    // so we do the calculation using local milliseconds\n    long localInstant = iBase.getZone().convertUTCToLocal(instant);\n    long difference = FieldUtils.safeSubtract(value, get(instant));\n    localInstant = getType().getField(iBase).add(localInstant, difference);\n    return iBase.getZone().convertLocalToUTC(localInstant, false);\n}", "diff": "--- org/joda/time/chrono/ZonedChronology.java@set\n+++ org/joda/time/chrono/ZonedChronology.java@set\n@@ -1,9 +1,8 @@\n public long set(long instant, int value) {\n-    long localInstant = iZone.convertUTCToLocal(instant);\n-    localInstant = iField.set(localInstant, value);\n-    long result = iZone.convertLocalToUTC(localInstant, false);\n-    if (get(result) != value) {\n-        throw new IllegalFieldValueException(iField.getType(), new Integer(value), \"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) + \" (\" + iZone.getID() + \")\");\n-    }\n-    return result;\n+    // lenient needs to handle time zone chronologies\n+    // so we do the calculation using local milliseconds\n+    long localInstant = iBase.getZone().convertUTCToLocal(instant);\n+    long difference = FieldUtils.safeSubtract(value, get(instant));\n+    localInstant = getType().getField(iBase).add(localInstant, difference);\n+    return iBase.getZone().convertLocalToUTC(localInstant, false);\n }\n--- org/joda/time/field/LenientDateTimeField.java@set\n+++ org/joda/time/field/LenientDateTimeField.java@set\n@@ -3,6 +3,6 @@\n     // so we do the calculation using local milliseconds\n     long localInstant = iBase.getZone().convertUTCToLocal(instant);\n     long difference = FieldUtils.safeSubtract(value, get(instant));\n-    localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);\n+    localInstant = getType().getField(iBase).add(localInstant, difference);\n     return iBase.getZone().convertLocalToUTC(localInstant, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public long set(long instant, int value) {\n    // lenient needs to handle time zone chronologies\n    // so we do the calculation using local milliseconds\n    long localInstant = iBase.getZone().convertUTCToLocal(instant);\n    long difference = FieldUtils.safeSubtract(value, get(instant));\n    localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);\n    return iBase.getZone().convertLocalToUTC(localInstant, instant);\n}", "diff": "--- org/joda/time/chrono/ZonedChronology.java@set\n+++ org/joda/time/chrono/ZonedChronology.java@set\n@@ -1,9 +1,8 @@\n public long set(long instant, int value) {\n-    long localInstant = iZone.convertUTCToLocal(instant);\n-    localInstant = iField.set(localInstant, value);\n-    long result = iZone.convertLocalToUTC(localInstant, false);\n-    if (get(result) != value) {\n-        throw new IllegalFieldValueException(iField.getType(), new Integer(value), \"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) + \" (\" + iZone.getID() + \")\");\n-    }\n-    return result;\n+    // lenient needs to handle time zone chronologies\n+    // so we do the calculation using local milliseconds\n+    long localInstant = iBase.getZone().convertUTCToLocal(instant);\n+    long difference = FieldUtils.safeSubtract(value, get(instant));\n+    localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);\n+    return iBase.getZone().convertLocalToUTC(localInstant, instant);\n }\n--- org/joda/time/field/LenientDateTimeField.java@set\n+++ org/joda/time/field/LenientDateTimeField.java@set\n@@ -4,5 +4,5 @@\n     long localInstant = iBase.getZone().convertUTCToLocal(instant);\n     long difference = FieldUtils.safeSubtract(value, get(instant));\n     localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);\n-    return iBase.getZone().convertLocalToUTC(localInstant, false);\n+    return iBase.getZone().convertLocalToUTC(localInstant, instant);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public long set(long instant, int value) {\n    // lenient needs to handle time zone chronologies\n    // so we do the calculation using local milliseconds\n    Chronology chronology = iBase.getChronology();\n    long localInstant = iBase.getZone().convertUTCToLocal(instant);\n    long difference = FieldUtils.safeSubtract(value, get(instant));\n    localInstant = getType().getField(chronology).add(localInstant, difference);\n    return iBase.getZone().convertLocalToUTC(localInstant, false);\n}", "diff": "--- org/joda/time/chrono/ZonedChronology.java@set\n+++ org/joda/time/chrono/ZonedChronology.java@set\n@@ -1,9 +1,9 @@\n public long set(long instant, int value) {\n-    long localInstant = iZone.convertUTCToLocal(instant);\n-    localInstant = iField.set(localInstant, value);\n-    long result = iZone.convertLocalToUTC(localInstant, false);\n-    if (get(result) != value) {\n-        throw new IllegalFieldValueException(iField.getType(), new Integer(value), \"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) + \" (\" + iZone.getID() + \")\");\n-    }\n-    return result;\n+    // lenient needs to handle time zone chronologies\n+    // so we do the calculation using local milliseconds\n+    Chronology chronology = iBase.getChronology();\n+    long localInstant = iBase.getZone().convertUTCToLocal(instant);\n+    long difference = FieldUtils.safeSubtract(value, get(instant));\n+    localInstant = getType().getField(chronology).add(localInstant, difference);\n+    return iBase.getZone().convertLocalToUTC(localInstant, false);\n }\n--- org/joda/time/field/LenientDateTimeField.java@set\n+++ org/joda/time/field/LenientDateTimeField.java@set\n@@ -1,8 +1,9 @@\n public long set(long instant, int value) {\n     // lenient needs to handle time zone chronologies\n     // so we do the calculation using local milliseconds\n+    Chronology chronology = iBase.getChronology();\n     long localInstant = iBase.getZone().convertUTCToLocal(instant);\n     long difference = FieldUtils.safeSubtract(value, get(instant));\n-    localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);\n+    localInstant = getType().getField(chronology).add(localInstant, difference);\n     return iBase.getZone().convertLocalToUTC(localInstant, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public long set(long instant, int value) {\n    // lenient needs to handle time zone chronologies\n    // so we do the calculation using local milliseconds\n    long localInstant = iBase.getZone().convertUTCToLocal(instant);\n    long difference = FieldUtils.safeSubtract(value, get(instant));\n    localInstant = getType().getField(iBase.getChronology()).add(localInstant, difference); // fixed typo in method call\n    return iBase.getZone().convertLocalToUTC(localInstant, false);\n}", "diff": "--- org/joda/time/chrono/ZonedChronology.java@set\n+++ org/joda/time/chrono/ZonedChronology.java@set\n@@ -1,9 +1,8 @@\n public long set(long instant, int value) {\n-    long localInstant = iZone.convertUTCToLocal(instant);\n-    localInstant = iField.set(localInstant, value);\n-    long result = iZone.convertLocalToUTC(localInstant, false);\n-    if (get(result) != value) {\n-        throw new IllegalFieldValueException(iField.getType(), new Integer(value), \"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) + \" (\" + iZone.getID() + \")\");\n-    }\n-    return result;\n+    // lenient needs to handle time zone chronologies\n+    // so we do the calculation using local milliseconds\n+    long localInstant = iBase.getZone().convertUTCToLocal(instant);\n+    long difference = FieldUtils.safeSubtract(value, get(instant));\n+    localInstant = getType().getField(iBase.getChronology()).add(localInstant, difference); // fixed typo in method call\n+    return iBase.getZone().convertLocalToUTC(localInstant, false);\n }\n--- org/joda/time/field/LenientDateTimeField.java@set\n+++ org/joda/time/field/LenientDateTimeField.java@set\n@@ -3,6 +3,6 @@\n     // so we do the calculation using local milliseconds\n     long localInstant = iBase.getZone().convertUTCToLocal(instant);\n     long difference = FieldUtils.safeSubtract(value, get(instant));\n-    localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);\n+    localInstant = getType().getField(iBase.getChronology()).add(localInstant, difference); // fixed typo in method call\n     return iBase.getZone().convertLocalToUTC(localInstant, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]