[{"output": "public Complex divide(double divisor) {\n    if (isNaN() || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        if (isZero()) {\n            return NaN;\n        } else {\n            return INF;\n        }\n    }\n    if (Double.isInfinite(divisor)) {\n        if (!isInfinite()) {\n            return ZERO;\n        } else {\n            return NaN;\n        }\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -1,13 +1,20 @@\n public Complex divide(double divisor) {\n-    if (isNaN || Double.isNaN(divisor)) {\n+    if (isNaN() || Double.isNaN(divisor)) {\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        if (isZero()) {\n+            return NaN;\n+        } else {\n+            return INF;\n+        }\n     }\n     if (Double.isInfinite(divisor)) {\n-        return !isInfinite() ? ZERO : NaN;\n+        if (!isInfinite()) {\n+            return ZERO;\n+        } else {\n+            return NaN;\n+        }\n     }\n     return createComplex(real / divisor, imaginary / divisor);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public Complex divide(double divisor) {\n    if (isNaN() || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return (isZero() && !Double.isInfinite(real)) ? NaN : INF;\n    }\n    if (Double.isInfinite(divisor)) {\n        return (Double.isInfinite(real) || Double.isInfinite(imaginary)) ? NaN : createComplex(0.0, 0.0);\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -1,13 +1,12 @@\n public Complex divide(double divisor) {\n-    if (isNaN || Double.isNaN(divisor)) {\n+    if (isNaN() || Double.isNaN(divisor)) {\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return (isZero() && !Double.isInfinite(real)) ? NaN : INF;\n     }\n     if (Double.isInfinite(divisor)) {\n-        return !isInfinite() ? ZERO : NaN;\n+        return (Double.isInfinite(real) || Double.isInfinite(imaginary)) ? NaN : createComplex(0.0, 0.0);\n     }\n     return createComplex(real / divisor, imaginary / divisor);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isZero() ? NaN : INF;\n    }\n    if (Double.isInfinite(divisor)) {\n        return isInfinite() ? NaN : ZERO;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -3,11 +3,10 @@\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return isZero() ? NaN : INF;\n     }\n     if (Double.isInfinite(divisor)) {\n-        return !isInfinite() ? ZERO : NaN;\n+        return isInfinite() ? NaN : ZERO;\n     }\n     return createComplex(real / divisor, imaginary / divisor);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN() || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return (isZero() && !isNaN()) ? INF : NaN;\n    }\n    if (Double.isInfinite(divisor)) {\n        return (!isInfinite() || isNaN()) ? ZERO : NaN;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -1,13 +1,12 @@\n public Complex divide(double divisor) {\n-    if (isNaN || Double.isNaN(divisor)) {\n+    if (isNaN() || Double.isNaN(divisor)) {\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return (isZero() && !isNaN()) ? INF : NaN;\n     }\n     if (Double.isInfinite(divisor)) {\n-        return !isInfinite() ? ZERO : NaN;\n+        return (!isInfinite() || isNaN()) ? ZERO : NaN;\n     }\n     return createComplex(real / divisor, imaginary / divisor);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isZero && !isNaN ? NaN : INF; // fixed line\n    }\n    if (Double.isInfinite(divisor)) {\n        return !isInfinite() ? ZERO : NaN;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -3,8 +3,7 @@\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return isZero && !isNaN ? NaN : INF; // fixed line\n     }\n     if (Double.isInfinite(divisor)) {\n         return !isInfinite() ? ZERO : NaN;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN() || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isZero() ? NaN : INF;\n    }\n    if (Double.isInfinite(divisor)) {\n        return isInfinite() ? NaN : ZERO;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -1,13 +1,12 @@\n public Complex divide(double divisor) {\n-    if (isNaN || Double.isNaN(divisor)) {\n+    if (isNaN() || Double.isNaN(divisor)) {\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return isZero() ? NaN : INF;\n     }\n     if (Double.isInfinite(divisor)) {\n-        return !isInfinite() ? ZERO : NaN;\n+        return isInfinite() ? NaN : ZERO;\n     }\n     return createComplex(real / divisor, imaginary / divisor);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isZero && !Double.isInfinite(real) && !Double.isInfinite(imaginary) ? NaN : INF;\n    }\n    if (Double.isInfinite(divisor)) {\n        return !isInfinite() ? ZERO : NaN;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -3,8 +3,7 @@\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return isZero && !Double.isInfinite(real) && !Double.isInfinite(imaginary) ? NaN : INF;\n     }\n     if (Double.isInfinite(divisor)) {\n         return !isInfinite() ? ZERO : NaN;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isZero ? NaN : (real >= 0 ? INF : NEG_INF);\n    }\n    if (Double.isInfinite(divisor)) {\n        return !isInfinite() ? ZERO : NaN;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -3,8 +3,7 @@\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return isZero ? NaN : (real >= 0 ? INF : NEG_INF);\n     }\n     if (Double.isInfinite(divisor)) {\n         return !isInfinite() ? ZERO : NaN;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN() || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isZero() && !isNaN() ? INF : NaN;\n    }\n    if (Double.isInfinite(divisor)) {\n        return !isInfinite() ? ZERO : NaN;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -1,10 +1,9 @@\n public Complex divide(double divisor) {\n-    if (isNaN || Double.isNaN(divisor)) {\n+    if (isNaN() || Double.isNaN(divisor)) {\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return isZero() && !isNaN() ? INF : NaN;\n     }\n     if (Double.isInfinite(divisor)) {\n         return !isInfinite() ? ZERO : NaN;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN() || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        // return isZero() ? NaN : INF; // See MATH-657\n        return isZero() && !isNaN() ? NaN : INF;\n    }\n    if (Double.isInfinite(divisor)) {\n        return !isInfinite() ? ZERO : NaN;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -1,10 +1,10 @@\n public Complex divide(double divisor) {\n-    if (isNaN || Double.isNaN(divisor)) {\n+    if (isNaN() || Double.isNaN(divisor)) {\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        // return isZero() ? NaN : INF; // See MATH-657\n+        return isZero() && !isNaN() ? NaN : INF;\n     }\n     if (Double.isInfinite(divisor)) {\n         return !isInfinite() ? ZERO : NaN;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN() || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isZero() ? NaN : INF;\n    }\n    if (Double.isInfinite(divisor)) {\n        return !isInfinite() ? ZERO : NaN;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -1,10 +1,9 @@\n public Complex divide(double divisor) {\n-    if (isNaN || Double.isNaN(divisor)) {\n+    if (isNaN() || Double.isNaN(divisor)) {\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return isZero() ? NaN : INF;\n     }\n     if (Double.isInfinite(divisor)) {\n         return !isInfinite() ? ZERO : NaN;\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public Complex divide(double divisor) {\n    if (isNaN() || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isZero() && !isNaN() ? NaN : INF;\n    }\n    if (Double.isInfinite(divisor)) {\n        return isInfinite() && !isNaN() ? NaN : ZERO;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -1,13 +1,12 @@\n public Complex divide(double divisor) {\n-    if (isNaN || Double.isNaN(divisor)) {\n+    if (isNaN() || Double.isNaN(divisor)) {\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return isZero() && !isNaN() ? NaN : INF;\n     }\n     if (Double.isInfinite(divisor)) {\n-        return !isInfinite() ? ZERO : NaN;\n+        return isInfinite() && !isNaN() ? NaN : ZERO;\n     }\n     return createComplex(real / divisor, imaginary / divisor);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isZero ? NaN : INF;\n    }\n    if (Double.isInfinite(divisor)) {\n        return !isInfinite() ? ZERO : NaN;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -3,7 +3,6 @@\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n         return isZero ? NaN : INF;\n     }\n     if (Double.isInfinite(divisor)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isZero ? NaN : (isInfinite() ? INF : createComplex(signum() == 0 ? 0d : real / divisor,\n                                                                   signum() == 0 ? 0d : imaginary / divisor));\n    }\n    if (Double.isInfinite(divisor)) {\n        return !isInfinite() ? ZERO : NaN;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -3,8 +3,8 @@\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return isZero ? NaN : (isInfinite() ? INF : createComplex(signum() == 0 ? 0d : real / divisor,\n+                                                                   signum() == 0 ? 0d : imaginary / divisor));\n     }\n     if (Double.isInfinite(divisor)) {\n         return !isInfinite() ? ZERO : NaN;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        if (isZero) {\n            return NaN;\n        } else {\n            return INF;\n        }\n    }\n    if (Double.isInfinite(divisor)) {\n        if (!isInfinite()) {\n            return ZERO;\n        } else {\n            return NaN;\n        }\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -3,11 +3,18 @@\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        if (isZero) {\n+            return NaN;\n+        } else {\n+            return INF;\n+        }\n     }\n     if (Double.isInfinite(divisor)) {\n-        return !isInfinite() ? ZERO : NaN;\n+        if (!isInfinite()) {\n+            return ZERO;\n+        } else {\n+            return NaN;\n+        }\n     }\n     return createComplex(real / divisor, imaginary / divisor);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN() || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isZero() && !isNaN() ? NaN : INF;\n    }\n    if (Double.isInfinite(divisor)) {\n        return !isInfinite() ? ZERO : NaN;\n    }\n    return createComplex(real / divisor, imaginary / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -1,10 +1,9 @@\n public Complex divide(double divisor) {\n-    if (isNaN || Double.isNaN(divisor)) {\n+    if (isNaN() || Double.isNaN(divisor)) {\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return isZero() && !isNaN() ? NaN : INF;\n     }\n     if (Double.isInfinite(divisor)) {\n         return !isInfinite() ? ZERO : NaN;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN() || Double.isNaN(divisor)) {\n        return NaN;\n    }\n    if (divisor == 0d) {\n        return isNaN() ? NaN : INF;\n    }\n    if (Double.isInfinite(divisor)) {\n        return !isInfinite() ? ZERO : NaN;\n    }\n    return createComplex(real() / divisor, imaginary() / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -1,13 +1,12 @@\n public Complex divide(double divisor) {\n-    if (isNaN || Double.isNaN(divisor)) {\n+    if (isNaN() || Double.isNaN(divisor)) {\n         return NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        return isNaN() ? NaN : INF;\n     }\n     if (Double.isInfinite(divisor)) {\n         return !isInfinite() ? ZERO : NaN;\n     }\n-    return createComplex(real / divisor, imaginary / divisor);\n+    return createComplex(real() / divisor, imaginary() / divisor);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Complex divide(double divisor) {\n    if (isNaN() || Double.isNaN(divisor)) {\n        return Complex.NaN;\n    }\n    if (divisor == 0d) {\n        // return isZero() ? NaN : INF; // See MATH-657\n        return isZero() ? Complex.NaN : Complex.INF;\n    }\n    if (Double.isInfinite(divisor)) {\n        return !isInfinite() ? Complex.ZERO : Complex.NaN;\n    }\n    return createComplex(\n        getReal() / divisor,\n        getImaginary() / divisor);\n}", "diff": "--- org/apache/commons/math/complex/Complex.java@divide1\n+++ org/apache/commons/math/complex/Complex.java@divide1\n@@ -1,13 +1,15 @@\n public Complex divide(double divisor) {\n-    if (isNaN || Double.isNaN(divisor)) {\n-        return NaN;\n+    if (isNaN() || Double.isNaN(divisor)) {\n+        return Complex.NaN;\n     }\n     if (divisor == 0d) {\n-        // return isZero ? NaN : INF; // See MATH-657\n-        return isZero ? NaN : INF;\n+        // return isZero() ? NaN : INF; // See MATH-657\n+        return isZero() ? Complex.NaN : Complex.INF;\n     }\n     if (Double.isInfinite(divisor)) {\n-        return !isInfinite() ? ZERO : NaN;\n+        return !isInfinite() ? Complex.ZERO : Complex.NaN;\n     }\n-    return createComplex(real / divisor, imaginary / divisor);\n+    return createComplex(\n+        getReal() / divisor,\n+        getImaginary() / divisor);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]