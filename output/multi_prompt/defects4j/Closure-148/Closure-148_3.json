[{"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    int startOffsetPosition = 0;\n    int endOffsetPosition = 0;\n    int offsetLine = 0;\n    if (!offsetPosition.isNull()) {\n        offsetLine = offsetPosition.getLineNumber();\n        int lastCharIndex = offsetPosition.getCharacterIndex();\n        if (lastCharIndex > 0 && offsetLine == startPosition.getLineNumber()) {\n            startOffsetPosition = lastCharIndex;\n        }\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    if (startPosition.getLineNumber() > 0) {\n        startOffsetPosition += startPosition.getCharacterIndex();\n    }\n    if (endPosition.getLineNumber() > 0) {\n        endOffsetPosition += endPosition.getCharacterIndex();\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,8 +7,7 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n@@ -22,20 +21,27 @@\n     if (originalName != null) {\n         mapping.originalName = escapeString(originalName);\n     }\n+    int startOffsetPosition = 0;\n+    int endOffsetPosition = 0;\n+    int offsetLine = 0;\n+    if (!offsetPosition.isNull()) {\n+        offsetLine = offsetPosition.getLineNumber();\n+        int lastCharIndex = offsetPosition.getCharacterIndex();\n+        if (lastCharIndex > 0 && offsetLine == startPosition.getLineNumber()) {\n+            startOffsetPosition = lastCharIndex;\n+        }\n+    }\n     // If the mapping is found on the first line, we need to offset\n     // its character position by the number of characters found on\n     // the *last* line of the source file to which the code is\n     // being generated.\n-    int offsetLine = offsetPosition.getLineNumber();\n-    int startOffsetPosition = offsetPosition.getCharacterIndex();\n-    int endOffsetPosition = offsetPosition.getCharacterIndex();\n     if (startPosition.getLineNumber() > 0) {\n-        startOffsetPosition = 0;\n+        startOffsetPosition += startPosition.getCharacterIndex();\n     }\n     if (endPosition.getLineNumber() > 0) {\n-        endOffsetPosition = 0;\n+        endOffsetPosition += endPosition.getCharacterIndex();\n     }\n-    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n-    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n+    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startOffsetPosition);\n+    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endOffsetPosition);\n     mappings.add(mapping);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() == 1) {\n        startOffsetPosition += offsetPosition.getCharacterIndex();\n    }\n    if (endPosition.getLineNumber() == 1) {\n        endOffsetPosition += offsetPosition.getCharacterIndex();\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,8 +7,7 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n@@ -29,11 +28,11 @@\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n-    if (startPosition.getLineNumber() > 0) {\n-        startOffsetPosition = 0;\n+    if (startPosition.getLineNumber() == 1) {\n+        startOffsetPosition += offsetPosition.getCharacterIndex();\n     }\n-    if (endPosition.getLineNumber() > 0) {\n-        endOffsetPosition = 0;\n+    if (endPosition.getLineNumber() == 1) {\n+        endOffsetPosition += offsetPosition.getCharacterIndex();\n     }\n     mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n     mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() == 0) {\n        startOffsetPosition = 0;\n    }\n    if (endPosition.getLineNumber() == 0) {\n        endOffsetPosition = 0;\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,8 +7,7 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n@@ -29,10 +28,10 @@\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n-    if (startPosition.getLineNumber() > 0) {\n+    if (startPosition.getLineNumber() == 0) {\n         startOffsetPosition = 0;\n     }\n-    if (endPosition.getLineNumber() > 0) {\n+    if (endPosition.getLineNumber() == 0) {\n         endOffsetPosition = 0;\n     }\n     mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n", "finish_reason": "stop", "valid": false, "num": 6}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() == 1) {\n        startOffsetPosition += offsetPosition.getCharacterIndex();\n    } else if (startPosition.getLineNumber() > 1) {\n        startOffsetPosition = 0;\n    }\n    if (endPosition.getLineNumber() == 1) {\n        endOffsetPosition += offsetPosition.getCharacterIndex();\n    } else if (endPosition.getLineNumber() > 1) {\n        endOffsetPosition = 0;\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine - 1, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine - 1, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,8 +7,7 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n@@ -29,13 +28,17 @@\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n-    if (startPosition.getLineNumber() > 0) {\n+    if (startPosition.getLineNumber() == 1) {\n+        startOffsetPosition += offsetPosition.getCharacterIndex();\n+    } else if (startPosition.getLineNumber() > 1) {\n         startOffsetPosition = 0;\n     }\n-    if (endPosition.getLineNumber() > 0) {\n+    if (endPosition.getLineNumber() == 1) {\n+        endOffsetPosition += offsetPosition.getCharacterIndex();\n+    } else if (endPosition.getLineNumber() > 1) {\n         endOffsetPosition = 0;\n     }\n-    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n-    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n+    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine - 1, startPosition.getCharacterIndex() + startOffsetPosition);\n+    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine - 1, endPosition.getCharacterIndex() + endOffsetPosition);\n     mappings.add(mapping);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) { // Use .equals() method to compare strings\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() > 0) {\n        startOffsetPosition = 0;\n    }\n    if (endPosition.getLineNumber() > 0) {\n        endOffsetPosition = 0;\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,8 +7,7 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) { // Use .equals() method to compare strings\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null && !originalName.isEmpty()) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() > 0) {\n        startOffsetPosition = 0;\n    }\n    if (endPosition.getLineNumber() > 0) {\n        endOffsetPosition = 0;\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,8 +7,7 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n@@ -19,7 +18,7 @@\n     mapping.sourceFile = escapedSourceFile;\n     mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n     String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n-    if (originalName != null) {\n+    if (originalName != null && !originalName.isEmpty()) {\n         mapping.originalName = escapeString(originalName);\n     }\n     // If the mapping is found on the first line, we need to offset\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() == 0) { // fixed condition\n        startOffsetPosition = 0;\n    }\n    if (endPosition.getLineNumber() == 0) { // fixed condition\n        endOffsetPosition = 0;\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,21 +7,23 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n     escapedSourceFile = lastSourceFileEscaped;\n+\n     // Create the new mapping.\n     Mapping mapping = new Mapping();\n     mapping.id = mappings.size();\n     mapping.sourceFile = escapedSourceFile;\n     mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n+\n     String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n     if (originalName != null) {\n         mapping.originalName = escapeString(originalName);\n     }\n+\n     // If the mapping is found on the first line, we need to offset\n     // its character position by the number of characters found on\n     // the *last* line of the source file to which the code is\n@@ -29,10 +31,10 @@\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n-    if (startPosition.getLineNumber() > 0) {\n+    if (startPosition.getLineNumber() == 0) { // fixed condition\n         startOffsetPosition = 0;\n     }\n-    if (endPosition.getLineNumber() > 0) {\n+    if (endPosition.getLineNumber() == 0) { // fixed condition\n         endOffsetPosition = 0;\n     }\n     mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        // compare strings using equals() instead of !=\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() == 0) {\n        startOffsetPosition = 0;\n    }\n    if (endPosition.getLineNumber() == 0) {\n        endOffsetPosition = 0;\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,8 +7,8 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n+        // compare strings using equals() instead of !=\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n@@ -29,10 +29,10 @@\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n-    if (startPosition.getLineNumber() > 0) {\n+    if (startPosition.getLineNumber() == 0) {\n         startOffsetPosition = 0;\n     }\n-    if (endPosition.getLineNumber() > 0) {\n+    if (endPosition.getLineNumber() == 0) {\n         endOffsetPosition = 0;\n     }\n     mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getSourceFileName() == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() > 1) {\n        startOffsetPosition = 0;\n    } else {\n        startOffsetPosition += offsetPosition.getCharacterIndex();\n    }\n    if (endPosition.getLineNumber() > 1) {\n        endOffsetPosition = 0;\n    } else {\n        endOffsetPosition += offsetPosition.getCharacterIndex();\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine - 1, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine - 1, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -3,12 +3,11 @@\n     // If the node does not have an associated source file or\n     // its line number is -1, then the node does not have sufficient\n     // information for a mapping to be useful.\n-    if (sourceFile == null || node.getLineno() < 0) {\n+    if (sourceFile == null || node.getSourceFileName() == null || node.getLineno() < 0) {\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n@@ -29,13 +28,17 @@\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n-    if (startPosition.getLineNumber() > 0) {\n+    if (startPosition.getLineNumber() > 1) {\n         startOffsetPosition = 0;\n+    } else {\n+        startOffsetPosition += offsetPosition.getCharacterIndex();\n     }\n-    if (endPosition.getLineNumber() > 0) {\n+    if (endPosition.getLineNumber() > 1) {\n         endOffsetPosition = 0;\n+    } else {\n+        endOffsetPosition += offsetPosition.getCharacterIndex();\n     }\n-    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n-    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n+    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine - 1, startPosition.getCharacterIndex() + startOffsetPosition);\n+    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine - 1, endPosition.getCharacterIndex() + endOffsetPosition);\n     mappings.add(mapping);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() == 0 && offsetLine > 0) {\n        // The mapping is found on the first line of the current file\n        // and there was a previous file, so we need to offset by the\n        // number of characters on the last line of the previous file.\n        String lastMappedSourceFile = mappings.get(mappings.size() - 1).sourceFile;\n        if (!lastMappedSourceFile.equals(escapedSourceFile)) {\n            int lastMappedFileLineCount = fileLineCounts.get(lastMappedSourceFile);\n            String lastMappedFileText = fileTexts.get(lastMappedSourceFile);\n            int lastMappedFileLineIndex = lastMappedFileText.lastIndexOf('\\n');\n            int lastMappedFileLineOffset = lastMappedFileLineIndex >= 0 ? lastMappedFileText.length() - lastMappedFileLineIndex - 1 : 0;\n            startOffsetPosition += lastMappedFileLineOffset;\n            endOffsetPosition += lastMappedFileLineOffset;\n        }\n    }\n    if (startPosition.getLineNumber() > 0) {\n        startOffsetPosition = 0;\n    }\n    if (endPosition.getLineNumber() > 0) {\n        endOffsetPosition = 0;\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,8 +7,7 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n@@ -29,6 +28,20 @@\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n+    if (startPosition.getLineNumber() == 0 && offsetLine > 0) {\n+        // The mapping is found on the first line of the current file\n+        // and there was a previous file, so we need to offset by the\n+        // number of characters on the last line of the previous file.\n+        String lastMappedSourceFile = mappings.get(mappings.size() - 1).sourceFile;\n+        if (!lastMappedSourceFile.equals(escapedSourceFile)) {\n+            int lastMappedFileLineCount = fileLineCounts.get(lastMappedSourceFile);\n+            String lastMappedFileText = fileTexts.get(lastMappedSourceFile);\n+            int lastMappedFileLineIndex = lastMappedFileText.lastIndexOf('\\n');\n+            int lastMappedFileLineOffset = lastMappedFileLineIndex >= 0 ? lastMappedFileText.length() - lastMappedFileLineIndex - 1 : 0;\n+            startOffsetPosition += lastMappedFileLineOffset;\n+            endOffsetPosition += lastMappedFileLineOffset;\n+        }\n+    }\n     if (startPosition.getLineNumber() > 0) {\n         startOffsetPosition = 0;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() == 0) {\n        startOffsetPosition = 0;\n    }\n    if (endPosition.getLineNumber() == 0) {\n        endOffsetPosition = 0;\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,13 +7,11 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n     escapedSourceFile = lastSourceFileEscaped;\n-    // Create the new mapping.\n     Mapping mapping = new Mapping();\n     mapping.id = mappings.size();\n     mapping.sourceFile = escapedSourceFile;\n@@ -22,17 +20,13 @@\n     if (originalName != null) {\n         mapping.originalName = escapeString(originalName);\n     }\n-    // If the mapping is found on the first line, we need to offset\n-    // its character position by the number of characters found on\n-    // the *last* line of the source file to which the code is\n-    // being generated.\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n-    if (startPosition.getLineNumber() > 0) {\n+    if (startPosition.getLineNumber() == 0) {\n         startOffsetPosition = 0;\n     }\n-    if (endPosition.getLineNumber() > 0) {\n+    if (endPosition.getLineNumber() == 0) {\n         endOffsetPosition = 0;\n     }\n     mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() == 1) {\n        if (offsetLine > 0) {\n            String lastLine = offsetPosition.getLine();\n            startOffsetPosition += lastLine.length() - 1;\n        }\n    }\n    if (endPosition.getLineNumber() == 1) {\n        if (offsetLine > 0) {\n            String lastLine = offsetPosition.getLine();\n            endOffsetPosition += lastLine.length() - 1;\n        }\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,8 +7,7 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n@@ -29,11 +28,17 @@\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n-    if (startPosition.getLineNumber() > 0) {\n-        startOffsetPosition = 0;\n+    if (startPosition.getLineNumber() == 1) {\n+        if (offsetLine > 0) {\n+            String lastLine = offsetPosition.getLine();\n+            startOffsetPosition += lastLine.length() - 1;\n+        }\n     }\n-    if (endPosition.getLineNumber() > 0) {\n-        endOffsetPosition = 0;\n+    if (endPosition.getLineNumber() == 1) {\n+        if (offsetLine > 0) {\n+            String lastLine = offsetPosition.getLine();\n+            endOffsetPosition += lastLine.length() - 1;\n+        }\n     }\n     mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n     mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) { // check for string equality using .equals() instead of !=\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() == 0) { // check if start position is on the first line\n        startOffsetPosition = node.getCharno(); // offset by the character position of the current node\n    }\n    if (endPosition.getLineNumber() == 0) { // check if end position is on the first line\n        endOffsetPosition = node.getCharno() + (endPosition.getCharacterIndex() - startPosition.getCharacterIndex()); // offset by the character position difference between start and end positions\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,8 +7,7 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) { // check for string equality using .equals() instead of !=\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n@@ -29,11 +28,11 @@\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n-    if (startPosition.getLineNumber() > 0) {\n-        startOffsetPosition = 0;\n+    if (startPosition.getLineNumber() == 0) { // check if start position is on the first line\n+        startOffsetPosition = node.getCharno(); // offset by the character position of the current node\n     }\n-    if (endPosition.getLineNumber() > 0) {\n-        endOffsetPosition = 0;\n+    if (endPosition.getLineNumber() == 0) { // check if end position is on the first line\n+        endOffsetPosition = node.getCharno() + (endPosition.getCharacterIndex() - startPosition.getCharacterIndex()); // offset by the character position difference between start and end positions\n     }\n     mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n     mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(sourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() == 1) {\n        startOffsetPosition += offsetPosition.getCharacterIndex();\n    }\n    if (endPosition.getLineNumber() == 1) {\n        endOffsetPosition += offsetPosition.getCharacterIndex();\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine - 1, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine - 1, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,8 +7,7 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n         lastSourceFileEscaped = escapeString(sourceFile);\n     }\n@@ -29,13 +28,13 @@\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n-    if (startPosition.getLineNumber() > 0) {\n-        startOffsetPosition = 0;\n+    if (startPosition.getLineNumber() == 1) {\n+        startOffsetPosition += offsetPosition.getCharacterIndex();\n     }\n-    if (endPosition.getLineNumber() > 0) {\n-        endOffsetPosition = 0;\n+    if (endPosition.getLineNumber() == 1) {\n+        endOffsetPosition += offsetPosition.getCharacterIndex();\n     }\n-    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n-    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n+    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine - 1, startPosition.getCharacterIndex() + startOffsetPosition);\n+    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine - 1, endPosition.getCharacterIndex() + endOffsetPosition);\n     mappings.add(mapping);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void addMapping(Node node, Position startPosition, Position endPosition) {\n    String sourceFile = (String) node.getProp(Node.SOURCEFILE_PROP);\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n        return;\n    }\n    String escapedSourceFile;\n    if (!sourceFile.equals(lastSourceFile)) {\n        lastSourceFile = sourceFile;\n        lastSourceFileEscaped = escapeString(lastSourceFile);\n    }\n    escapedSourceFile = lastSourceFileEscaped;\n    // Create the new mapping.\n    Mapping mapping = new Mapping();\n    mapping.id = mappings.size();\n    mapping.sourceFile = escapedSourceFile;\n    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n    if (originalName != null) {\n        mapping.originalName = escapeString(originalName);\n    }\n    // If the mapping is found on the first line, we need to offset\n    // its character position by the number of characters found on\n    // the *last* line of the source file to which the code is\n    // being generated.\n    int offsetLine = offsetPosition.getLineNumber();\n    int startOffsetPosition = offsetPosition.getCharacterIndex();\n    int endOffsetPosition = offsetPosition.getCharacterIndex();\n    if (startPosition.getLineNumber() == 1) {\n        startOffsetPosition = 0;\n    }\n    if (endPosition.getLineNumber() == 1) {\n        endOffsetPosition = 0;\n    }\n    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine - 1, startPosition.getCharacterIndex() + startOffsetPosition);\n    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine - 1, endPosition.getCharacterIndex() + endOffsetPosition);\n    mappings.add(mapping);\n}", "diff": "--- com/google/javascript/jscomp/SourceMap.java@addMapping\n+++ com/google/javascript/jscomp/SourceMap.java@addMapping\n@@ -7,10 +7,9 @@\n         return;\n     }\n     String escapedSourceFile;\n-    if (lastSourceFile != sourceFile) {\n-        // yes, \"s1 != s2\" not \"!s1.equals(s2)\"\n+    if (!sourceFile.equals(lastSourceFile)) {\n         lastSourceFile = sourceFile;\n-        lastSourceFileEscaped = escapeString(sourceFile);\n+        lastSourceFileEscaped = escapeString(lastSourceFile);\n     }\n     escapedSourceFile = lastSourceFileEscaped;\n     // Create the new mapping.\n@@ -29,13 +28,13 @@\n     int offsetLine = offsetPosition.getLineNumber();\n     int startOffsetPosition = offsetPosition.getCharacterIndex();\n     int endOffsetPosition = offsetPosition.getCharacterIndex();\n-    if (startPosition.getLineNumber() > 0) {\n+    if (startPosition.getLineNumber() == 1) {\n         startOffsetPosition = 0;\n     }\n-    if (endPosition.getLineNumber() > 0) {\n+    if (endPosition.getLineNumber() == 1) {\n         endOffsetPosition = 0;\n     }\n-    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine, startPosition.getCharacterIndex() + startOffsetPosition);\n-    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine, endPosition.getCharacterIndex() + endOffsetPosition);\n+    mapping.startPosition = new Position(startPosition.getLineNumber() + offsetLine - 1, startPosition.getCharacterIndex() + startOffsetPosition);\n+    mapping.endPosition = new Position(endPosition.getLineNumber() + offsetLine - 1, endPosition.getCharacterIndex() + endOffsetPosition);\n     mappings.add(mapping);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]