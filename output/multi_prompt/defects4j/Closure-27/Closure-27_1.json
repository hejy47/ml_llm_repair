[{"output": "public static Node tryCatch(Node tryBody, Node catchNode) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = catchNode.getLastChild(); // get last child, which should be the catch block\n    catchBody.copyInformationFrom(catchNode);\n    return new Node(Token.TRY, tryBody, catchBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryCatch\n+++ com/google/javascript/rhino/IR.java@tryCatch\n@@ -1,6 +1,7 @@\n public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n-    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n+    Node catchBody = catchNode.getLastChild(); // get last child, which should be the catch block\n+    catchBody.copyInformationFrom(catchNode);\n     return new Node(Token.TRY, tryBody, catchBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryCatch(Node tryBody, Node catchNode) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = block(catchNode.getLastChild()).copyInformationFrom(catchNode.getLastChild());\n    return new Node(Token.TRY, tryBody, catchBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryCatch\n+++ com/google/javascript/rhino/IR.java@tryCatch\n@@ -1,6 +1,6 @@\n public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n-    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n+    Node catchBody = block(catchNode.getLastChild()).copyInformationFrom(catchNode.getLastChild());\n     return new Node(Token.TRY, tryBody, catchBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public static Node tryCatch(Node tryBody, Node catchNode) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = catchNode.getLastChild();\n    return new Node(Token.TRY, tryBody, catchBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryCatch\n+++ com/google/javascript/rhino/IR.java@tryCatch\n@@ -1,6 +1,6 @@\n public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n-    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n+    Node catchBody = catchNode.getLastChild();\n     return new Node(Token.TRY, tryBody, catchBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "public static Node tryCatch(Node tryBody, Node catchNode) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = catchNode.getLastChild().copyInformationFrom(catchNode);\n    return new Node(Token.TRY, tryBody, catchBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryCatch\n+++ com/google/javascript/rhino/IR.java@tryCatch\n@@ -1,6 +1,6 @@\n public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n-    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n+    Node catchBody = catchNode.getLastChild().copyInformationFrom(catchNode);\n     return new Node(Token.TRY, tryBody, catchBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 6}, {"output": "public static Node tryCatch(Node tryBody, Node catchNode) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = catchNode.getFirstChild();\n    Node finallyBody = catchNode.getNext();\n    if (finallyBody != null) {\n        Preconditions.checkState(finallyBody.isBlock());\n        return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n    } else {\n        return new Node(Token.TRY, tryBody, catchBody);\n    }\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryCatch\n+++ com/google/javascript/rhino/IR.java@tryCatch\n@@ -1,6 +1,12 @@\n public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n-    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n-    return new Node(Token.TRY, tryBody, catchBody);\n+    Node catchBody = catchNode.getFirstChild();\n+    Node finallyBody = catchNode.getNext();\n+    if (finallyBody != null) {\n+        Preconditions.checkState(finallyBody.isBlock());\n+        return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n+    } else {\n+        return new Node(Token.TRY, tryBody, catchBody);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryCatch(Node tryBody, Node catchNode) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = catchNode.getLastChild().detach(); // change here\n    return new Node(Token.TRY, tryBody, catchBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryCatch\n+++ com/google/javascript/rhino/IR.java@tryCatch\n@@ -1,6 +1,6 @@\n public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n-    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n+    Node catchBody = catchNode.getLastChild().detach(); // change here\n     return new Node(Token.TRY, tryBody, catchBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryCatch(Node tryBody, Node catchNode) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = block(catchNode.getLastChild()).copyInformationFrom(catchNode);\n    return new Node(Token.TRY, tryBody, catchBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryCatch\n+++ com/google/javascript/rhino/IR.java@tryCatch\n@@ -1,6 +1,6 @@\n public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n-    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n+    Node catchBody = block(catchNode.getLastChild()).copyInformationFrom(catchNode);\n     return new Node(Token.TRY, tryBody, catchBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public static Node tryCatch(Node tryBody, Node catchNode) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = catchNode.getFirstChild().copyInformationFrom(catchNode.getFirstChild());\n    return new Node(Token.TRY, tryBody, catchBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryCatch\n+++ com/google/javascript/rhino/IR.java@tryCatch\n@@ -1,6 +1,6 @@\n public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n-    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n+    Node catchBody = catchNode.getFirstChild().copyInformationFrom(catchNode.getFirstChild());\n     return new Node(Token.TRY, tryBody, catchBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryCatch(Node tryBody, Node catchNode) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = catchNode.getLastChild().detach();\n    catchBody.setToken(Token.BLOCK);\n    catchBody.copyInformationFrom(catchNode);\n    return new Node(Token.TRY, tryBody, catchBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryCatch\n+++ com/google/javascript/rhino/IR.java@tryCatch\n@@ -1,6 +1,8 @@\n public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n-    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n+    Node catchBody = catchNode.getLastChild().detach();\n+    catchBody.setToken(Token.BLOCK);\n+    catchBody.copyInformationFrom(catchNode);\n     return new Node(Token.TRY, tryBody, catchBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryCatch(Node tryBody, Node catchNode) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(catchNode.isCatch());\n    Node catchBody = catchNode.getLastChild().copyInformationFrom(catchNode); // get catch block from last child node\n    return new Node(Token.TRY, tryBody, catchBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryCatch\n+++ com/google/javascript/rhino/IR.java@tryCatch\n@@ -1,6 +1,6 @@\n public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n-    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n+    Node catchBody = catchNode.getLastChild().copyInformationFrom(catchNode); // get catch block from last child node\n     return new Node(Token.TRY, tryBody, catchBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]