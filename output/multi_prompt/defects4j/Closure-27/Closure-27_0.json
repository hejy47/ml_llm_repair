[{"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock() || tryBody.isExpression());\n    Preconditions.checkState(finallyBody.isBlock() || finallyBody.isExpression());\n    Node catchBody = block().copyInformationFrom(tryBody);\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n+    Preconditions.checkState(tryBody.isBlock() || tryBody.isExpression());\n+    Preconditions.checkState(finallyBody.isBlock() || finallyBody.isExpression());\n     Node catchBody = block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock(), \"tryBody must be a block\");\n    Preconditions.checkState(finallyBody.isBlock(), \"finallyBody must be a block\");\n    Node catchBody = IR.block().copyInformationFrom(tryBody);\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n+    Preconditions.checkState(tryBody.isBlock(), \"tryBody must be a block\");\n+    Preconditions.checkState(finallyBody.isBlock(), \"finallyBody must be a block\");\n+    Node catchBody = IR.block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock() || tryBody.isLabelName());\n    Preconditions.checkState(finallyBody.isBlock() || finallyBody.isLabelName());\n    Node catchBody = block().copyInformationFrom(tryBody);\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n+    Preconditions.checkState(tryBody.isBlock() || tryBody.isLabelName());\n+    Preconditions.checkState(finallyBody.isBlock() || finallyBody.isLabelName());\n     Node catchBody = block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(finallyBody.isBlock());\n    Node catchBody = IR.block().copyInformationFrom(tryBody);\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n+    Preconditions.checkState(tryBody.isBlock());\n+    Preconditions.checkState(finallyBody.isBlock());\n+    Node catchBody = IR.block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock() || tryBody.isExpression());\n    Preconditions.checkState(finallyBody.isBlock());\n    Node catchBody = block();\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n+    Preconditions.checkState(tryBody.isBlock() || tryBody.isExpression());\n+    Preconditions.checkState(finallyBody.isBlock());\n+    Node catchBody = block();\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(finallyBody.isBlock());\n    Node tryNode = new Node(Token.TRY, tryBody);\n    Node catchNode = new Node(Token.CATCH, new Node(Token.NAME, new Identifier(\"e\")), block());\n    Node finallyNode = new Node(Token.BLOCK, finallyBody);\n    return new Node(Token.BLOCK, tryNode, catchNode, finallyNode);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,8 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n-    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n+    Preconditions.checkState(tryBody.isBlock());\n+    Preconditions.checkState(finallyBody.isBlock());\n+    Node tryNode = new Node(Token.TRY, tryBody);\n+    Node catchNode = new Node(Token.CATCH, new Node(Token.NAME, new Identifier(\"e\")), block());\n+    Node finallyNode = new Node(Token.BLOCK, finallyBody);\n+    return new Node(Token.BLOCK, tryNode, catchNode, finallyNode);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.matchesQualifiedName(Node.LABEL_NAME));\n    Preconditions.checkState(finallyBody.matchesQualifiedName(Node.LABEL_NAME));\n    Node catchBody = IR.block().copyInformationFrom(tryBody);\n    return IR.tryCatch(tryBody, catchBody).finallyBlock(finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n-    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n+    Preconditions.checkState(tryBody.matchesQualifiedName(Node.LABEL_NAME));\n+    Preconditions.checkState(finallyBody.matchesQualifiedName(Node.LABEL_NAME));\n+    Node catchBody = IR.block().copyInformationFrom(tryBody);\n+    return IR.tryCatch(tryBody, catchBody).finallyBlock(finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.getToken() == Token.BLOCK);\n    Preconditions.checkState(finallyBody.getToken() == Token.BLOCK);\n    Node catchBody = IR.block().copyInformationFrom(tryBody);\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n+    Preconditions.checkState(tryBody.getToken() == Token.BLOCK);\n+    Preconditions.checkState(finallyBody.getToken() == Token.BLOCK);\n+    Node catchBody = IR.block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock() || tryBody.isLabelName());\n    Preconditions.checkState(finallyBody.isBlock() || finallyBody.isLabelName());\n    Node catchBody = null;\n    if (tryBody.isBlock()) {\n        catchBody = tryBody.getLastChild().detach();\n    } else {\n        catchBody = block().copyInformationFrom(tryBody);\n    }\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,11 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n+    Preconditions.checkState(tryBody.isBlock() || tryBody.isLabelName());\n+    Preconditions.checkState(finallyBody.isBlock() || finallyBody.isLabelName());\n+    Node catchBody = null;\n+    if (tryBody.isBlock()) {\n+        catchBody = tryBody.getLastChild().detach();\n+    } else {\n+        catchBody = block().copyInformationFrom(tryBody);\n+    }\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(!finallyBody.isLabelName()); // Check that finallyBody is not a label name\n    Node catchBody = block().copyInformationFrom(tryBody);\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,5 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n+    Preconditions.checkState(!finallyBody.isLabelName()); // Check that finallyBody is not a label name\n     Node catchBody = block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(finallyBody.isBlock());\n    Node catchBody = new Node(Token.BLOCK);\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n+    Preconditions.checkState(tryBody.isBlock());\n+    Preconditions.checkState(finallyBody.isBlock());\n+    Node catchBody = new Node(Token.BLOCK);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock() || tryBody.isEmpty());\n    Preconditions.checkState(finallyBody.isBlock() || finallyBody.isEmpty());\n    Node catchBody = block();\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n+    Preconditions.checkState(tryBody.isBlock() || tryBody.isEmpty());\n+    Preconditions.checkState(finallyBody.isBlock() || finallyBody.isEmpty());\n+    Node catchBody = block();\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(finallyBody.isBlock());\n    Node catchBody = block();\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n+    Preconditions.checkState(tryBody.isBlock());\n+    Preconditions.checkState(finallyBody.isBlock());\n+    Node catchBody = block();\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock() || tryBody.isEmpty());\n    Preconditions.checkState(finallyBody.isBlock() || finallyBody.isEmpty());\n    Node catchBody = block().copyInformationFrom(tryBody);\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n+    Preconditions.checkState(tryBody.isBlock() || tryBody.isEmpty());\n+    Preconditions.checkState(finallyBody.isBlock() || finallyBody.isEmpty());\n     Node catchBody = block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(finallyBody.isBlock());\n    Node catchBody = new Block().copyInformationFrom(tryBody);\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n+    Preconditions.checkState(tryBody.isBlock());\n+    Preconditions.checkState(finallyBody.isBlock());\n+    Node catchBody = new Block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.isBlock());\n    Preconditions.checkState(finallyBody.isBlock());\n    Node catchBody = block().copyInformationFrom(tryBody);\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n+    Preconditions.checkState(tryBody.isBlock());\n+    Preconditions.checkState(finallyBody.isBlock());\n     Node catchBody = block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public static Node tryFinally(Node tryBody, Node finallyBody) {\n    Preconditions.checkState(tryBody.getFirstChild().isBlock());\n    Preconditions.checkState(finallyBody.getFirstChild().isBlock());\n    Node catchBody = IR.block().copyInformationFrom(tryBody.getFirstChild());\n    return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n}", "diff": "--- com/google/javascript/rhino/IR.java@tryFinally\n+++ com/google/javascript/rhino/IR.java@tryFinally\n@@ -1,6 +1,6 @@\n public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isLabelName());\n-    Preconditions.checkState(finallyBody.isLabelName());\n-    Node catchBody = block().copyInformationFrom(tryBody);\n+    Preconditions.checkState(tryBody.getFirstChild().isBlock());\n+    Preconditions.checkState(finallyBody.getFirstChild().isBlock());\n+    Node catchBody = IR.block().copyInformationFrom(tryBody.getFirstChild());\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]