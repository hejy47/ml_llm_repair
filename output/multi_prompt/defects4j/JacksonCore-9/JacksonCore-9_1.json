[{"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n        return getText();\n    }\n    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n        return defaultValue;\n    }\n    return getText();\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,10 @@\n @Override\n-public String getValueAsString() throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n         return getText();\n     }\n-    return getValueAsString(null);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    }\n+    return getText();\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,6 +1,6 @@\n @Override\n public String getValueAsString(String defaultValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n         return getText();\n     }\n     if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    }\n+    return getText();\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    }\n+    return getText();\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        return getText();\n    }\n    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n        return defaultValue;\n    }\n    if (_currToken.isScalarValue()) {\n        return getText();\n    }\n    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a scalar value\");\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,13 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n     }\n-    return getValueAsString(null);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a scalar value\");\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -3,8 +3,11 @@\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n         return defaultValue;\n     }\n-    return getText();\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a scalar value\");\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,13 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a scalar value\");\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,13 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a scalar value\");\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        return getText();\n    }\n    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n        return defaultValue;\n    }\n    if (_currToken.isScalarValue()) {\n        return getText();\n    }\n    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a string or null value\");\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,13 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n     }\n-    return getValueAsString(null);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a string or null value\");\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -3,8 +3,11 @@\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n         return defaultValue;\n     }\n-    return getText();\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a string or null value\");\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,13 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a string or null value\");\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,13 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a string or null value\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n        return defaultValue;\n    }\n    if (_currToken.isScalarValue()) {\n        return getText();\n    }\n    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a string value\");\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,10 @@\n @Override\n-public String getValueAsString() throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n         return getText();\n     }\n-    return getValueAsString(null);\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a string value\");\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,10 @@\n @Override\n public String getValueAsString(String defaultValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n         return getText();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a string value\");\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a string value\");\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new IllegalStateException(\"Current token (\" + _currToken + \") not a string value\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken != null && _currToken.isScalarValue()) {\n        return getText();\n    }\n    return defaultValue;\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,7 @@\n @Override\n-public String getValueAsString() throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken != null && _currToken.isScalarValue()) {\n         return getText();\n     }\n-    return getValueAsString(null);\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,7 @@\n @Override\n public String getValueAsString(String defaultValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+    if (_currToken != null && _currToken.isScalarValue()) {\n         return getText();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,7 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken != null && _currToken.isScalarValue()) {\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,7 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken != null && _currToken.isScalarValue()) {\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    return defaultValue;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        return getText();\n    }\n    if (_currToken != null && _currToken.isScalarValue()) {\n        return getText();\n    }\n    return defaultValue;\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,10 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n     }\n-    return getValueAsString(null);\n+    if (_currToken != null && _currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -3,8 +3,8 @@\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n+    if (_currToken != null && _currToken.isScalarValue()) {\n+        return getText();\n     }\n-    return getText();\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken != null && _currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken != null && _currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    return defaultValue;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        return getText();\n    } else if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n        return defaultValue;\n    } else {\n        return super.getValueAsString(defaultValue);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,10 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n+    } else if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    } else {\n+        return super.getValueAsString(defaultValue);\n     }\n-    return getValueAsString(null);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -2,9 +2,9 @@\n public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n+    } else if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    } else {\n+        return super.getValueAsString(defaultValue);\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n+    } else if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    } else {\n+        return super.getValueAsString(defaultValue);\n     }\n-    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n+    } else if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    } else {\n+        return super.getValueAsString(defaultValue);\n     }\n-    return super.getValueAsString(defValue);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n        return defaultValue;\n    }\n    if (_currToken.isScalarValue()) {\n        return getText();\n    }\n    throw new UnsupportedOperationException(\"Token type not supported\");\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,10 @@\n @Override\n-public String getValueAsString() throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n         return getText();\n     }\n-    return getValueAsString(null);\n+    throw new UnsupportedOperationException(\"Token type not supported\");\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,10 @@\n @Override\n public String getValueAsString(String defaultValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n         return getText();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    throw new UnsupportedOperationException(\"Token type not supported\");\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new UnsupportedOperationException(\"Token type not supported\");\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new UnsupportedOperationException(\"Token type not supported\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        return getText();\n    } else if (_currToken != null && _currToken.isScalarValue()) {\n        return getText();\n    }\n    return defaultValue;\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,9 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n+    } else if (_currToken != null && _currToken.isScalarValue()) {\n+        return getText();\n     }\n-    return getValueAsString(null);\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -2,9 +2,8 @@\n public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n+    } else if (_currToken != null && _currToken.isScalarValue()) {\n+        return getText();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,9 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n+    } else if (_currToken != null && _currToken.isScalarValue()) {\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,9 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n+    } else if (_currToken != null && _currToken.isScalarValue()) {\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    return defaultValue;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING || _currToken == null || _currToken == JsonToken.VALUE_NULL) {\n        return getText();\n    }\n    if (_currToken.isScalarValue()) {\n        return getText();\n    }\n    return defaultValue;\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,10 @@\n @Override\n-public String getValueAsString() throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == null || _currToken == JsonToken.VALUE_NULL) {\n         return getText();\n     }\n-    return getValueAsString(null);\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,10 @@\n @Override\n public String getValueAsString(String defaultValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == null || _currToken == JsonToken.VALUE_NULL) {\n         return getText();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n     }\n-    return getText();\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    return defaultValue;\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    return defaultValue;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        return getText();\n    }\n    if (_currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n        return defaultValue;\n    }\n    return getText();\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,10 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n     }\n-    return getValueAsString(null);\n+    if (_currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    }\n+    return getText();\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -3,7 +3,7 @@\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+    if (_currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n         return defaultValue;\n     }\n     return getText();\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    }\n+    return getText();\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    }\n+    return getText();\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n        return getText();\n    }\n    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n        return defaultValue;\n    }\n    // handle numeric values as strings\n    return getText();\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,11 @@\n @Override\n-public String getValueAsString() throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n         return getText();\n     }\n-    return getValueAsString(null);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    }\n+    // handle numeric values as strings\n+    return getText();\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,11 @@\n @Override\n public String getValueAsString(String defaultValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n         return getText();\n     }\n     if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n         return defaultValue;\n     }\n+    // handle numeric values as strings\n     return getText();\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,11 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    }\n+    // handle numeric values as strings\n+    return getText();\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,11 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+public String getValueAsString(String defaultValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+        return defaultValue;\n+    }\n+    // handle numeric values as strings\n+    return getText();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defaultValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        return getText();\n    }\n    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n        return defaultValue;\n    }\n    if (_currToken.isScalarValue()) {\n        return getText();\n    }\n    throw new UnsupportedOperationException(\"Cannot get value as string for non-scalar value\");\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,13 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n     }\n-    return getValueAsString(null);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new UnsupportedOperationException(\"Cannot get value as string for non-scalar value\");\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -3,8 +3,11 @@\n     if (_currToken == JsonToken.VALUE_STRING) {\n         return getText();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n         return defaultValue;\n     }\n-    return getText();\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new UnsupportedOperationException(\"Cannot get value as string for non-scalar value\");\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,13 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new UnsupportedOperationException(\"Cannot get value as string for non-scalar value\");\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,13 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defaultValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n-        }\n-        return _textBuffer.contentsAsString();\n+        return getText();\n     }\n-    return super.getValueAsString(defValue);\n+    if (_currToken == null || _currToken == JsonToken.VALUE_NULL) {\n+        return defaultValue;\n+    }\n+    if (_currToken.isScalarValue()) {\n+        return getText();\n+    }\n+    throw new UnsupportedOperationException(\"Cannot get value as string for non-scalar value\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]