[{"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            if (!_streamReadContext.inRoot()) {\n                throw _constructError(\"JSON String value has invalid escape sequence\");\n            }\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            _finishString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,15 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) {\n+                throw _constructError(\"JSON String value has invalid escape sequence\");\n+            }\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,15 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) {\n+                throw _constructError(\"JSON String value has invalid escape sequence\");\n+            }\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -2,6 +2,9 @@\n public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) {\n+                throw _constructError(\"JSON String value has invalid escape sequence\");\n+            }\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n             _finishString();\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,13 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) {\n+                throw _constructError(\"JSON String value has invalid escape sequence\");\n+            }\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            _finishToken();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,12 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishToken();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishToken();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -4,7 +4,7 @@\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            _finishToken();\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishToken();\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            if (!_inputData.isEndOfInput()) {\n                _finishString();\n            } else {\n                _reportInvalidEOF(\" in a string value\");\n            }\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,14 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_inputData.isEndOfInput()) {\n+                _finishString();\n+            } else {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_inputData.isEndOfInput()) {\n+                _finishString();\n+            } else {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -2,9 +2,11 @@\n public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n+            if (!_inputData.isEndOfInput()) {\n+                _finishString();\n+            } else {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n+            if (!_inputData.isEndOfInput()) {\n+                _finishString();\n+            } else {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_NULL) {\n        return defValue;\n    }\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            _finishString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,15 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    }\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,15 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    }\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,5 +1,8 @@\n @Override\n public final String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    }\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,13 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    }\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            if (!_streamReadContext.inArray()) {\n                _reportError(\"Current token not a Json Array, but incomplete string\");\n            }\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            _finishString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,15 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_streamReadContext.inArray()) {\n+                _reportError(\"Current token not a Json Array, but incomplete string\");\n+            }\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,15 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_streamReadContext.inArray()) {\n+                _reportError(\"Current token not a Json Array, but incomplete string\");\n+            }\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -2,6 +2,9 @@\n public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (!_streamReadContext.inArray()) {\n+                _reportError(\"Current token not a Json Array, but incomplete string\");\n+            }\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n             _finishString();\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,13 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (!_streamReadContext.inArray()) {\n+                _reportError(\"Current token not a Json Array, but incomplete string\");\n+            }\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            // check if it's a string before completing\n            if (_currToken.isScalarValue()) {\n                _tokenIncomplete = false;\n                _finishString();\n            }\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,14 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            // check if it's a string before completing\n+            if (_currToken.isScalarValue()) {\n+                _tokenIncomplete = false;\n+                _finishString();\n+            }\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            // check if it's a string before completing\n+            if (_currToken.isScalarValue()) {\n+                _tokenIncomplete = false;\n+                _finishString();\n+            }\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -2,9 +2,11 @@\n public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n+            // check if it's a string before completing\n+            if (_currToken.isScalarValue()) {\n+                _tokenIncomplete = false;\n+                _finishString();\n+            }\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n+            // check if it's a string before completing\n+            if (_currToken.isScalarValue()) {\n+                _tokenIncomplete = false;\n+                _finishString();\n+            }\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            if (!_streamReadContext.inArray()) {\n                throw new JsonParseException(this, \"JSON String not properly terminated\");\n            }\n            _tokenIncomplete = false;\n            _finishString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,14 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_streamReadContext.inArray()) {\n+                throw new JsonParseException(this, \"JSON String not properly terminated\");\n+            }\n+            _tokenIncomplete = false;\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_streamReadContext.inArray()) {\n+                throw new JsonParseException(this, \"JSON String not properly terminated\");\n+            }\n+            _tokenIncomplete = false;\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -2,8 +2,10 @@\n public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (!_streamReadContext.inArray()) {\n+                throw new JsonParseException(this, \"JSON String not properly terminated\");\n+            }\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n             _finishString();\n         }\n         return _textBuffer.contentsAsString();\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (!_streamReadContext.inArray()) {\n+                throw new JsonParseException(this, \"JSON String not properly terminated\");\n+            }\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            _finishToken();\n            return _textBuffer.contentsAsString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,13 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishToken();\n+            return _textBuffer.contentsAsString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,13 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishToken();\n+            return _textBuffer.contentsAsString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -4,7 +4,8 @@\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            _finishToken();\n+            return _textBuffer.contentsAsString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,11 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishToken();\n+            return _textBuffer.contentsAsString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            _finishString();\n        }\n        return _textBuffer.contentsAsString();\n    } else if (_currToken == null) {\n        return defValue;\n    } else {\n        return super.getValueAsString(defValue);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,15 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n+    } else {\n+        return super.getValueAsString(defValue);\n     }\n-    return getValueAsString(null);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,15 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n+    } else {\n+        return super.getValueAsString(defValue);\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -7,6 +7,9 @@\n             _finishString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n+    } else {\n+        return super.getValueAsString(defValue);\n     }\n-    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,15 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n+    } else {\n+        return super.getValueAsString(defValue);\n     }\n-    return super.getValueAsString(defValue);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            // Fix: Set _tokenIncomplete to true before calling _finishString()\n            _tokenIncomplete = false;\n            _finishString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,12 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            // Fix: Set _tokenIncomplete to true before calling _finishString()\n+            _tokenIncomplete = false;\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            // Fix: Set _tokenIncomplete to true before calling _finishString()\n+            _tokenIncomplete = false;\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -2,8 +2,8 @@\n public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            // Fix: Set _tokenIncomplete to true before calling _finishString()\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n             _finishString();\n         }\n         return _textBuffer.contentsAsString();\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            // Fix: Set _tokenIncomplete to true before calling _finishString()\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            if (!_streamReadContext.inRoot()) {\n                // Only strings in root context can be incomplete\n                throw _constructError(\"Current context not Root, had \"+_streamReadContext.getTypeDesc()+\" token incomplete\");\n            }\n            _tokenIncomplete = false;\n            _finishString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,15 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) {\n+                // Only strings in root context can be incomplete\n+                throw _constructError(\"Current context not Root, had \"+_streamReadContext.getTypeDesc()+\" token incomplete\");\n+            }\n+            _tokenIncomplete = false;\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,15 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) {\n+                // Only strings in root context can be incomplete\n+                throw _constructError(\"Current context not Root, had \"+_streamReadContext.getTypeDesc()+\" token incomplete\");\n+            }\n+            _tokenIncomplete = false;\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -2,8 +2,11 @@\n public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) {\n+                // Only strings in root context can be incomplete\n+                throw _constructError(\"Current context not Root, had \"+_streamReadContext.getTypeDesc()+\" token incomplete\");\n+            }\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n             _finishString();\n         }\n         return _textBuffer.contentsAsString();\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,13 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) {\n+                // Only strings in root context can be incomplete\n+                throw _constructError(\"Current context not Root, had \"+_streamReadContext.getTypeDesc()+\" token incomplete\");\n+            }\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            _finishString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,12 @@\n @Override\n-public String getValueAsString() throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+public final String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+public final String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,6 +1,6 @@\n @Override\n public final String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+public final String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            _finishString();\n        }\n        return _textBuffer.contentsAsString();\n    } else if (_currToken == null) {\n        return defValue;\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,14 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -7,6 +7,8 @@\n             _finishString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n     }\n     return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,14 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n     }\n     return super.getValueAsString(defValue);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            _finishIncompleteString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}\n\n// Added method to finish incomplete strings\nprivate void _finishIncompleteString() throws IOException {\n    // Copy whatever data we have so far to the text buffer\n    _textBuffer._append(_ioContext.getStreamReadBuffer(), 0, _inputPtr);\n    // Read until we find the end of the string\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            _loadMoreGuaranteed();\n        }\n        char c = (char) _inputBuffer[_inputPtr++];\n        if (c == '\"') {\n            _textBuffer.finishBuffer();\n            return;\n        }\n        if (c == '\\\\') {\n            _decodeEscaped();\n        } else if (c < ' ') {\n            _throwUnquotedSpace(c, \"string value\");\n        }\n        _textBuffer.append(c);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,12 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishIncompleteString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishIncompleteString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -4,7 +4,7 @@\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            _finishIncompleteString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishIncompleteString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            _finishToken();\n            if (_currToken == JsonToken.VALUE_STRING) { // check if token is still a string\n                return _textBuffer.contentsAsString();\n            } else {\n                throw new JsonParseException(\"Unexpected token type. Expected VALUE_STRING\", getCurrentLocation());\n            }\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,17 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishToken();\n+            if (_currToken == JsonToken.VALUE_STRING) { // check if token is still a string\n+                return _textBuffer.contentsAsString();\n+            } else {\n+                throw new JsonParseException(\"Unexpected token type. Expected VALUE_STRING\", getCurrentLocation());\n+            }\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,17 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishToken();\n+            if (_currToken == JsonToken.VALUE_STRING) { // check if token is still a string\n+                return _textBuffer.contentsAsString();\n+            } else {\n+                throw new JsonParseException(\"Unexpected token type. Expected VALUE_STRING\", getCurrentLocation());\n+            }\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -4,7 +4,12 @@\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            _finishToken();\n+            if (_currToken == JsonToken.VALUE_STRING) { // check if token is still a string\n+                return _textBuffer.contentsAsString();\n+            } else {\n+                throw new JsonParseException(\"Unexpected token type. Expected VALUE_STRING\", getCurrentLocation());\n+            }\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,15 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishToken();\n+            if (_currToken == JsonToken.VALUE_STRING) { // check if token is still a string\n+                return _textBuffer.contentsAsString();\n+            } else {\n+                throw new JsonParseException(\"Unexpected token type. Expected VALUE_STRING\", getCurrentLocation());\n+            }\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            //only strings can be incomplete\n            _finishString();\n            _tokenIncomplete = false; //fix: _tokenIncomplete should be set to false after _finishString() call\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,12 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            //only strings can be incomplete\n+            _finishString();\n+            _tokenIncomplete = false; //fix: _tokenIncomplete should be set to false after _finishString() call\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            //only strings can be incomplete\n+            _finishString();\n+            _tokenIncomplete = false; //fix: _tokenIncomplete should be set to false after _finishString() call\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -2,9 +2,9 @@\n public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n+            //only strings can be incomplete\n             _finishString();\n+            _tokenIncomplete = false; //fix: _tokenIncomplete should be set to false after _finishString() call\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n+            //only strings can be incomplete\n+            _finishString();\n+            _tokenIncomplete = false; //fix: _tokenIncomplete should be set to false after _finishString() call\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic final String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            _finishToken(); // fixed line - using _finishToken() instead of _finishString()\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,12 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishToken(); // fixed line - using _finishToken() instead of _finishString()\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            _finishToken(); // fixed line - using _finishToken() instead of _finishString()\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -4,7 +4,7 @@\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            _finishToken(); // fixed line - using _finishToken() instead of _finishString()\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,10 +1,10 @@\n @Override\n-public String getValueAsString(String defValue) throws IOException {\n+public final String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            _finishToken(); // fixed line - using _finishToken() instead of _finishString()\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]