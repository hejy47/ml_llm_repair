[{"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            // Check if value is incomplete before returning\n            _tokenIncomplete = false;\n            if (_inputEnd) {\n                _reportInvalidEOF(\" in a string value\");\n            }\n            _loadMore();\n            if (_inputPtr >= _inputEnd) {\n                _reportInvalidEOF(\" in a string value\");\n            }\n            if (_inputBuffer[_inputPtr] == '\"' || _inputBuffer[_inputPtr] == '\\\\') {\n                _textBuffer.resetWithShared(_inputBuffer, _inputPtr, _inputLen - _inputPtr);\n                return _finishAndReturnString();\n            }\n            // if not, continue with parsing\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,23 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            // Check if value is incomplete before returning\n+            _tokenIncomplete = false;\n+            if (_inputEnd) {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n+            _loadMore();\n+            if (_inputPtr >= _inputEnd) {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n+            if (_inputBuffer[_inputPtr] == '\"' || _inputBuffer[_inputPtr] == '\\\\') {\n+                _textBuffer.resetWithShared(_inputBuffer, _inputPtr, _inputLen - _inputPtr);\n+                return _finishAndReturnString();\n+            }\n+            // if not, continue with parsing\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,23 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            // Check if value is incomplete before returning\n+            _tokenIncomplete = false;\n+            if (_inputEnd) {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n+            _loadMore();\n+            if (_inputPtr >= _inputEnd) {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n+            if (_inputBuffer[_inputPtr] == '\"' || _inputBuffer[_inputPtr] == '\\\\') {\n+                _textBuffer.resetWithShared(_inputBuffer, _inputPtr, _inputLen - _inputPtr);\n+                return _finishAndReturnString();\n+            }\n+            // if not, continue with parsing\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,10 +1,21 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            // Check if value is incomplete before returning\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n+            if (_inputEnd) {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n+            _loadMore();\n+            if (_inputPtr >= _inputEnd) {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n+            if (_inputBuffer[_inputPtr] == '\"' || _inputBuffer[_inputPtr] == '\\\\') {\n+                _textBuffer.resetWithShared(_inputBuffer, _inputPtr, _inputLen - _inputPtr);\n+                return _finishAndReturnString();\n+            }\n+            // if not, continue with parsing\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -2,9 +2,20 @@\n public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            // Check if value is incomplete before returning\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n+            if (_inputEnd) {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n+            _loadMore();\n+            if (_inputPtr >= _inputEnd) {\n+                _reportInvalidEOF(\" in a string value\");\n+            }\n+            if (_inputBuffer[_inputPtr] == '\"' || _inputBuffer[_inputPtr] == '\\\\') {\n+                _textBuffer.resetWithShared(_inputBuffer, _inputPtr, _inputLen - _inputPtr);\n+                return _finishAndReturnString();\n+            }\n+            // if not, continue with parsing\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            // Only strings can be incomplete\n            _tokenIncomplete = false;\n            return _finishAndReturnString();\n        }\n        // Clear text buffer before returning its content\n        _textBuffer.contentsToWriter(_writer);\n        return _writer.toString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,14 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            // Only strings can be incomplete\n+            _tokenIncomplete = false;\n+            return _finishAndReturnString();\n+        }\n+        // Clear text buffer before returning its content\n+        _textBuffer.contentsToWriter(_writer);\n+        return _writer.toString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            // Only strings can be incomplete\n+            _tokenIncomplete = false;\n+            return _finishAndReturnString();\n+        }\n+        // Clear text buffer before returning its content\n+        _textBuffer.contentsToWriter(_writer);\n+        return _writer.toString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,14 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            // Only strings can be incomplete\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n-        return _textBuffer.contentsAsString();\n+        // Clear text buffer before returning its content\n+        _textBuffer.contentsToWriter(_writer);\n+        return _writer.toString();\n     }\n     return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -2,11 +2,13 @@\n public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            // Only strings can be incomplete\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n             return _finishAndReturnString();\n         }\n-        return _textBuffer.contentsAsString();\n+        // Clear text buffer before returning its content\n+        _textBuffer.contentsToWriter(_writer);\n+        return _writer.toString();\n     }\n     return super.getValueAsString(defValue);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return _finishAndReturnString();\n        }\n        return _textBuffer.contentsAsString();\n    } else if (_currToken == null) {\n        return defValue;\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,14 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,14 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n     }\n     return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -7,6 +7,8 @@\n             return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) {\n+        return defValue;\n     }\n     return super.getValueAsString(defValue);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // check if the token is still incomplete\n            if (_streamReadContext.inArray() || _streamReadContext.inObject()) {\n                // throw exception if incomplete string is found in an array or object\n                _reportError(\"Incomplete string value\");\n            }\n            return _finishAndReturnString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,16 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // check if the token is still incomplete\n+            if (_streamReadContext.inArray() || _streamReadContext.inObject()) {\n+                // throw exception if incomplete string is found in an array or object\n+                _reportError(\"Incomplete string value\");\n+            }\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,16 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // check if the token is still incomplete\n+            if (_streamReadContext.inArray() || _streamReadContext.inObject()) {\n+                // throw exception if incomplete string is found in an array or object\n+                _reportError(\"Incomplete string value\");\n+            }\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n+            // check if the token is still incomplete\n+            if (_streamReadContext.inArray() || _streamReadContext.inObject()) {\n+                // throw exception if incomplete string is found in an array or object\n+                _reportError(\"Incomplete string value\");\n+            }\n+            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -3,7 +3,11 @@\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n+            // check if the token is still incomplete\n+            if (_streamReadContext.inArray() || _streamReadContext.inObject()) {\n+                // throw exception if incomplete string is found in an array or object\n+                _reportError(\"Incomplete string value\");\n+            }\n             return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return _finishAndReturnString();\n        }\n        return getText(); // Return the text of the current token instead\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,12 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return getText(); // Return the text of the current token instead\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return getText(); // Return the text of the current token instead\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,12 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n-        return _textBuffer.contentsAsString();\n+        return getText(); // Return the text of the current token instead\n     }\n     return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -6,7 +6,7 @@\n             // only strings can be incomplete\n             return _finishAndReturnString();\n         }\n-        return _textBuffer.contentsAsString();\n+        return getText(); // Return the text of the current token instead\n     }\n     return super.getValueAsString(defValue);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_NULL) {\n        return defValue;\n    } else if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return _finishAndReturnString();\n        }\n        return _textBuffer.contentsAsString();\n    } else if (_currToken == JsonToken.START_ARRAY) {\n        return _elementReader().nextToken().getValueAsString(defValue);\n    } else {\n        return super.getValueAsString(defValue);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,17 @@\n @Override\n-public String getValueAsString() throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+public String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    } else if (_currToken == JsonToken.VALUE_STRING) {\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if (_currToken == JsonToken.START_ARRAY) {\n+        return _elementReader().nextToken().getValueAsString(defValue);\n+    } else {\n+        return super.getValueAsString(defValue);\n     }\n-    return getValueAsString(null);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,17 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+public String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    } else if (_currToken == JsonToken.VALUE_STRING) {\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if (_currToken == JsonToken.START_ARRAY) {\n+        return _elementReader().nextToken().getValueAsString(defValue);\n+    } else {\n+        return super.getValueAsString(defValue);\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,17 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+public String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    } else if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if (_currToken == JsonToken.START_ARRAY) {\n+        return _elementReader().nextToken().getValueAsString(defValue);\n+    } else {\n+        return super.getValueAsString(defValue);\n     }\n-    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,12 +1,17 @@\n @Override\n public String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    } else if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n             return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if (_currToken == JsonToken.START_ARRAY) {\n+        return _elementReader().nextToken().getValueAsString(defValue);\n+    } else {\n+        return super.getValueAsString(defValue);\n     }\n-    return super.getValueAsString(defValue);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            String value = _finishAndReturnString();\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return value;\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,13 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            String value = _finishAndReturnString();\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return value;\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,13 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            String value = _finishAndReturnString();\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return value;\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,10 +1,11 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            String value = _finishAndReturnString();\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return value;\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -2,9 +2,10 @@\n public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            String value = _finishAndReturnString();\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n+            return value;\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            if (_streamReadContext.inArray()) {\n                return \"\";\n            } else {\n                _tokenIncomplete = false;\n                // only strings can be incomplete\n                return _finishAndReturnString();\n            }\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,16 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (_streamReadContext.inArray()) {\n+                return \"\";\n+            } else {\n+                _tokenIncomplete = false;\n+                // only strings can be incomplete\n+                return _finishAndReturnString();\n+            }\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,16 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (_streamReadContext.inArray()) {\n+                return \"\";\n+            } else {\n+                _tokenIncomplete = false;\n+                // only strings can be incomplete\n+                return _finishAndReturnString();\n+            }\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n+            if (_streamReadContext.inArray()) {\n+                return \"\";\n+            } else {\n+                _tokenIncomplete = false;\n+                // only strings can be incomplete\n+                return _finishAndReturnString();\n+            }\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -2,9 +2,13 @@\n public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n+            if (_streamReadContext.inArray()) {\n+                return \"\";\n+            } else {\n+                _tokenIncomplete = false;\n+                // only strings can be incomplete\n+                return _finishAndReturnString();\n+            }\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            if (_streamReadContext.inArray()) {\n                _reportError(\"Unexpected end-of-input within/between \" + _streamReadContext.typeDesc() + \" entries\");\n            }\n            _tokenIncomplete = false;\n            return _finishAndReturnString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,14 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (_streamReadContext.inArray()) {\n+                _reportError(\"Unexpected end-of-input within/between \" + _streamReadContext.typeDesc() + \" entries\");\n+            }\n+            _tokenIncomplete = false;\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (_streamReadContext.inArray()) {\n+                _reportError(\"Unexpected end-of-input within/between \" + _streamReadContext.typeDesc() + \" entries\");\n+            }\n+            _tokenIncomplete = false;\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (_streamReadContext.inArray()) {\n+                _reportError(\"Unexpected end-of-input within/between \" + _streamReadContext.typeDesc() + \" entries\");\n+            }\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -2,8 +2,10 @@\n public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (_streamReadContext.inArray()) {\n+                _reportError(\"Unexpected end-of-input within/between \" + _streamReadContext.typeDesc() + \" entries\");\n+            }\n             _tokenIncomplete = false;\n-            // only strings can be incomplete\n             return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,11 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,11 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,10 +1,9 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -4,7 +4,6 @@\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return _finishAndReturnString();\n        }\n        return _textBuffer.contentsAsString();\n    } else if (_currToken == null) { // check for null token\n        return defValue;\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,14 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) { // check for null token\n+        return defValue;\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) { // check for null token\n+        return defValue;\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,14 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) { // check for null token\n+        return defValue;\n     }\n     return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -7,6 +7,8 @@\n             return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if (_currToken == null) { // check for null token\n+        return defValue;\n     }\n     return super.getValueAsString(defValue);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return _finishAndReturnString();\n        }\n        if (_textBuffer != null) {\n            return _textBuffer.contentsAsString();\n        } else {\n            return null;\n        }\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,16 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        if (_textBuffer != null) {\n+            return _textBuffer.contentsAsString();\n+        } else {\n+            return null;\n+        }\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,16 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        if (_textBuffer != null) {\n+            return _textBuffer.contentsAsString();\n+        } else {\n+            return null;\n+        }\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,16 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n-        return _textBuffer.contentsAsString();\n+        if (_textBuffer != null) {\n+            return _textBuffer.contentsAsString();\n+        } else {\n+            return null;\n+        }\n     }\n     return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -6,7 +6,11 @@\n             // only strings can be incomplete\n             return _finishAndReturnString();\n         }\n-        return _textBuffer.contentsAsString();\n+        if (_textBuffer != null) {\n+            return _textBuffer.contentsAsString();\n+        } else {\n+            return null;\n+        }\n     }\n     return super.getValueAsString(defValue);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            if (!_streamReadContext.inRoot()) { // check if incomplete string is in root context\n                throw new JsonParseException(this, \"Unexpected end-of-input within/between \" + _streamReadContext.typeDesc());\n            }\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return _finishAndReturnString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,15 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) { // check if incomplete string is in root context\n+                throw new JsonParseException(this, \"Unexpected end-of-input within/between \" + _streamReadContext.typeDesc());\n+            }\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,15 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) { // check if incomplete string is in root context\n+                throw new JsonParseException(this, \"Unexpected end-of-input within/between \" + _streamReadContext.typeDesc());\n+            }\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,10 +1,13 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) { // check if incomplete string is in root context\n+                throw new JsonParseException(this, \"Unexpected end-of-input within/between \" + _streamReadContext.typeDesc());\n+            }\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -2,6 +2,9 @@\n public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            if (!_streamReadContext.inRoot()) { // check if incomplete string is in root context\n+                throw new JsonParseException(this, \"Unexpected end-of-input within/between \" + _streamReadContext.typeDesc());\n+            }\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n             return _finishAndReturnString();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return _finishAndReturnString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    if (_currToken == null) {\n        return defValue;\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,15 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    if (_currToken == null) {\n+        return defValue;\n+    }\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,15 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n+    if (_currToken == null) {\n+        return defValue;\n     }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,15 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n+    if (_currToken == null) {\n+        return defValue;\n+    }\n     return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -8,5 +8,8 @@\n         }\n         return _textBuffer.contentsAsString();\n     }\n+    if (_currToken == null) {\n+        return defValue;\n+    }\n     return super.getValueAsString(defValue);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            if (_reader.getRemaining() > 0) { // Add check for remaining characters\n                _tokenIncomplete = false;\n                // only strings can be incomplete\n                return _finishAndReturnString();\n            } else {\n                throw new JsonParseException(_reader, \"Unexpected end-of-input while parsing string value\");\n            }\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,16 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (_reader.getRemaining() > 0) { // Add check for remaining characters\n+                _tokenIncomplete = false;\n+                // only strings can be incomplete\n+                return _finishAndReturnString();\n+            } else {\n+                throw new JsonParseException(_reader, \"Unexpected end-of-input while parsing string value\");\n+            }\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,16 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            if (_reader.getRemaining() > 0) { // Add check for remaining characters\n+                _tokenIncomplete = false;\n+                // only strings can be incomplete\n+                return _finishAndReturnString();\n+            } else {\n+                throw new JsonParseException(_reader, \"Unexpected end-of-input while parsing string value\");\n+            }\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            _finishString();\n+            if (_reader.getRemaining() > 0) { // Add check for remaining characters\n+                _tokenIncomplete = false;\n+                // only strings can be incomplete\n+                return _finishAndReturnString();\n+            } else {\n+                throw new JsonParseException(_reader, \"Unexpected end-of-input while parsing string value\");\n+            }\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -2,9 +2,13 @@\n public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n-            _tokenIncomplete = false;\n-            // only strings can be incomplete\n-            return _finishAndReturnString();\n+            if (_reader.getRemaining() > 0) { // Add check for remaining characters\n+                _tokenIncomplete = false;\n+                // only strings can be incomplete\n+                return _finishAndReturnString();\n+            } else {\n+                throw new JsonParseException(_reader, \"Unexpected end-of-input while parsing string value\");\n+            }\n         }\n         return _textBuffer.contentsAsString();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return _finishAndReturnString();\n        }\n        return _textBuffer.contentsAsString();\n    } else if(_currToken == JsonToken.VALUE_NULL){\n        return defValue;\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,14 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if(_currToken == JsonToken.VALUE_NULL){\n+        return defValue;\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n+    } else if(_currToken == JsonToken.VALUE_NULL){\n+        return defValue;\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,12 +1,14 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if(_currToken == JsonToken.VALUE_NULL){\n+        return defValue;\n     }\n     return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -7,6 +7,8 @@\n             return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n+    } else if(_currToken == JsonToken.VALUE_NULL){\n+        return defValue;\n     }\n     return super.getValueAsString(defValue);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_NULL) {\n        return defValue;\n    }\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return _finishAndReturnString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,15 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    }\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,15 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    }\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,10 +1,13 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    }\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,5 +1,8 @@\n @Override\n public String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_NULL) {\n+        return defValue;\n+    }\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n        if (_tokenIncomplete) {\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return _finishAndReturnString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,12 @@\n @Override\n-public String getValueAsString() throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+public String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,12 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+public String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n+        if (_tokenIncomplete) {\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,10 +1,10 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+public String getValueAsString(String defValue) throws IOException {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -1,6 +1,6 @@\n @Override\n public String getValueAsString(String defValue) throws IOException {\n-    if (_currToken == JsonToken.VALUE_STRING) {\n+    if (_currToken == JsonToken.VALUE_STRING || _currToken == JsonToken.FIELD_NAME) {\n         if (_tokenIncomplete) {\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic String getValueAsString(String defValue) throws IOException {\n    if (_currToken == JsonToken.VALUE_STRING) {\n        if (_tokenIncomplete) {\n            // fix: initialize the '_textBuffer' if it is null\n            if (_textBuffer == null) {\n                _allocateTextBuffer();\n            }\n            _tokenIncomplete = false;\n            // only strings can be incomplete\n            return _finishAndReturnString();\n        }\n        return _textBuffer.contentsAsString();\n    }\n    return super.getValueAsString(defValue);\n}", "diff": "--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString\n@@ -1,7 +1,16 @@\n @Override\n-public String getValueAsString() throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            // fix: initialize the '_textBuffer' if it is null\n+            if (_textBuffer == null) {\n+                _allocateTextBuffer();\n+            }\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    return getValueAsString(null);\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n+++ com/fasterxml/jackson/core/base/ParserMinimalBase.java@getValueAsString1\n@@ -1,10 +1,16 @@\n @Override\n-public String getValueAsString(String defaultValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n-        return getText();\n+        if (_tokenIncomplete) {\n+            // fix: initialize the '_textBuffer' if it is null\n+            if (_textBuffer == null) {\n+                _allocateTextBuffer();\n+            }\n+            _tokenIncomplete = false;\n+            // only strings can be incomplete\n+            return _finishAndReturnString();\n+        }\n+        return _textBuffer.contentsAsString();\n     }\n-    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-        return defaultValue;\n-    }\n-    return getText();\n+    return super.getValueAsString(defValue);\n }\n--- com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java@getValueAsString1\n@@ -1,10 +1,14 @@\n @Override\n-public final String getValueAsString(String defValue) throws IOException {\n+public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            // fix: initialize the '_textBuffer' if it is null\n+            if (_textBuffer == null) {\n+                _allocateTextBuffer();\n+            }\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n-            _finishString();\n+            return _finishAndReturnString();\n         }\n         return _textBuffer.contentsAsString();\n     }\n--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@getValueAsString1\n@@ -2,6 +2,10 @@\n public String getValueAsString(String defValue) throws IOException {\n     if (_currToken == JsonToken.VALUE_STRING) {\n         if (_tokenIncomplete) {\n+            // fix: initialize the '_textBuffer' if it is null\n+            if (_textBuffer == null) {\n+                _allocateTextBuffer();\n+            }\n             _tokenIncomplete = false;\n             // only strings can be incomplete\n             return _finishAndReturnString();\n", "finish_reason": "stop", "valid": false, "num": 1}]