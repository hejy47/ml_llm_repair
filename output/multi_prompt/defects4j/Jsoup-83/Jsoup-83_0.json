[{"output": "String consumeTagName() {\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<')\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}\n\nThe fix involves adding the condition `c == '<'` to the while loop so that if the encountered character is `<`, the loop will break and the current position of `bufPos` will be returned.", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -1,13 +1,11 @@\n String consumeTagName() {\n-    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n-    // NOTE: out of spec, added '<' to fix common author bugs\n     bufferUp();\n     final int start = bufPos;\n     final int remaining = bufLength;\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<')\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added '<' to fix the bug\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,7 +7,7 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added '<' to fix the bug\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added '<'\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,7 +7,7 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added '<'\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n            break;\n        bufPos++;\n    }\n    // Check if the first character is a digit, in which case return an empty string\n    if (start < bufPos && Character.isDigit(val[start])) {\n        return \"\";\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -11,5 +11,9 @@\n             break;\n         bufPos++;\n     }\n+    // Check if the first character is a digit, in which case return an empty string\n+    if (start < bufPos && Character.isDigit(val[start])) {\n+        return \"\";\n+    }\n     return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added '<' to fix common author bugs\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -1,13 +1,11 @@\n String consumeTagName() {\n-    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n-    // NOTE: out of spec, added '<' to fix common author bugs\n     bufferUp();\n     final int start = bufPos;\n     final int remaining = bufLength;\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added '<' to fix common author bugs\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // Fix: Added '<' to the list of tag name breakers\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,7 +7,7 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // Fix: Added '<' to the list of tag name breakers\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // fixed here\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,7 +7,7 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // fixed here\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added c == '<' to fix common author bugs\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,7 +7,7 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added c == '<' to fix common author bugs\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<')\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,7 +7,7 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<')\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n            break;\n        bufPos++;\n    }\n    // check for empty tag names\n    if (bufPos == start) {\n        return \"\";\n    }\n    return cacheString(charBuf, stringCache, start, bufPos - start);\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -11,5 +11,9 @@\n             break;\n         bufPos++;\n     }\n-    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n+    // check for empty tag names\n+    if (bufPos == start) {\n+        return \"\";\n+    }\n+    return cacheString(charBuf, stringCache, start, bufPos - start);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || Character.isWhitespace(c) || c == '/' || c == '>' || c == TokeniserState.nullChar)\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,7 +7,7 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || Character.isWhitespace(c) || c == '/' || c == '>' || c == TokeniserState.nullChar)\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added c=='<'\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,7 +7,7 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added c=='<'\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added '<' to fix common author bugs\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,7 +7,7 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // added '<' to fix common author bugs\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // Fixed line: added '<'\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,7 +7,7 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // Fixed line: added '<'\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // Fixed by adding the '<' condition\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,7 +7,7 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar || c == '<') // Fixed by adding the '<' condition\n             break;\n         bufPos++;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n            break;\n        bufPos++;\n    }\n    // check if tag name is not empty after consuming\n    if (bufPos > start) {\n        return cacheString(charBuf, stringCache, start, bufPos - start);\n    } else {\n        // fix: return an empty string instead of throwing an exception\n        return \"\";\n    }\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -11,5 +11,11 @@\n             break;\n         bufPos++;\n     }\n-    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n+    // check if tag name is not empty after consuming\n+    if (bufPos > start) {\n+        return cacheString(charBuf, stringCache, start, bufPos - start);\n+    } else {\n+        // fix: return an empty string instead of throwing an exception\n+        return \"\";\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar) {\n            break;\n        } else {\n            bufPos++;\n        }\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "diff": "--- org/jsoup/parser/CharacterReader.java@consumeTagName\n+++ org/jsoup/parser/CharacterReader.java@consumeTagName\n@@ -7,9 +7,11 @@\n     final char[] val = charBuf;\n     while (bufPos < remaining) {\n         final char c = val[bufPos];\n-        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n+        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar) {\n             break;\n-        bufPos++;\n+        } else {\n+            bufPos++;\n+        }\n     }\n     return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]