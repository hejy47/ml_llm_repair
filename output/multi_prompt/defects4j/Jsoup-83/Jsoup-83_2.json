[{"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.nullChar:\n            t.error(this);\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n            break;\n        case CharacterReader.eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,39 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n+        case CharacterReader.nullChar:\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n             break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.eof:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,13 +16,13 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n+        case CharacterReader.nullChar:\n             t.error(this);\n             t.tagPending.newAttribute();\n             r.unconsume();\n             t.transition(AttributeName);\n             break;\n-        case eof:\n+        case CharacterReader.eof:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n            break;\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,34 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n-            break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n+            break;\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,13 +16,7 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n-            t.error(this);\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n-            break;\n-        case eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n@@ -40,5 +34,6 @@\n             t.tagPending.newAttribute();\n             r.unconsume();\n             t.transition(AttributeName);\n+            break;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.nullChar:\n            t.error(this);\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n            break;\n        case CharacterReader.eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\\\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,36 +1,44 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n-    switch(c) {\n+    switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n+        case CharacterReader.nullChar:\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n             break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.eof:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\\\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -1,6 +1,6 @@\n void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n-    switch(c) {\n+    switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n@@ -16,17 +16,17 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n+        case CharacterReader.nullChar:\n             t.error(this);\n             t.tagPending.newAttribute();\n             r.unconsume();\n             t.transition(AttributeName);\n             break;\n-        case eof:\n+        case CharacterReader.eof:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n-        case '\"':\n+        case '\\\"':\n         case '\\'':\n         case '<':\n         case '=':\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            break;\n        case '\\\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,32 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n+        case CharacterReader.EOF:\n+            t.eofError(this);\n             break;\n-        case // should emit pending tag?\n-        eof:\n-            t.eofError(this);\n-            t.transition(Data);\n+        case '\\\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n             break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,17 +16,10 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n-            t.error(this);\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n+        case CharacterReader.EOF:\n+            t.eofError(this);\n             break;\n-        case eof:\n-            t.eofError(this);\n-            t.transition(Data);\n-            break;\n-        case '\"':\n+        case '\\\"':\n         case '\\'':\n         case '<':\n         case '=':\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            if (c == NULL) {\n                t.error(this);\n                t.tagPending.newAttribute();\n                r.unconsume();\n                t.transition(AttributeName);\n            } else {\n                // A-Z, anything else\n                t.tagPending.newAttribute();\n                r.unconsume();\n                t.transition(AttributeName);\n            }\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,40 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n-            break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            if (c == NULL) {\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                r.unconsume();\n+                t.transition(AttributeName);\n+            } else {\n+                // A-Z, anything else\n+                t.tagPending.newAttribute();\n+                r.unconsume();\n+                t.transition(AttributeName);\n+            }\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,13 +16,7 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n-            t.error(this);\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n-            break;\n-        case eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n@@ -36,9 +30,16 @@\n             t.transition(AttributeName);\n             break;\n         default:\n-            // A-Z, anything else\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n+            if (c == NULL) {\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                r.unconsume();\n+                t.transition(AttributeName);\n+            } else {\n+                // A-Z, anything else\n+                t.tagPending.newAttribute();\n+                r.unconsume();\n+                t.transition(AttributeName);\n+            }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,33 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n-            break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,13 +16,7 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n-            t.error(this);\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n-            break;\n-        case eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case 0:\n            t.error(this);\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,39 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n+        case 0:\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n             break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,13 +16,13 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n+        case 0:\n             t.error(this);\n             t.tagPending.newAttribute();\n             r.unconsume();\n             t.transition(AttributeName);\n             break;\n-        case eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            r.unconsume();\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,34 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n-            break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n+            r.unconsume();\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,14 +16,9 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n-            t.error(this);\n-            t.tagPending.newAttribute();\n+        case CharacterReader.EOF:\n+            t.eofError(this);\n             r.unconsume();\n-            t.transition(AttributeName);\n-            break;\n-        case eof:\n-            t.eofError(this);\n             t.transition(Data);\n             break;\n         case '\"':\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c;\n    while (true) {\n        c = r.consume();\n        switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\r':\n            case '\\f':\n            case ' ':\n                // ignore whitespace\n                break;\n            case '/':\n                t.transition(SelfClosingStartTag);\n                return;\n            case '>':\n                t.emitTagPending();\n                t.transition(Data);\n                return;\n            case 0:\n                t.error(this);\n                t.tagPending.newAttribute();\n                t.tagPending.appendAttributeName((char) TokeniserState.replacementChar);\n                return;\n            case TokeniserState.EOF:\n                t.eofError(this);\n                t.transition(Data);\n                return;\n            case '\"':\n            case '\\'':\n            case '<':\n            case '=':\n                t.error(this);\n                t.tagPending.newAttribute();\n                t.tagPending.appendAttributeName(c);\n                t.transition(AttributeName);\n                return;\n            default:\n                if (c >= 'A' && c <= 'Z') c += ('a'-'A'); // ASCII lowercasing\n                t.tagPending.newAttribute();\n                r.unconsume();\n                t.transition(AttributeName);\n                return;\n        }\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,36 +1,46 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n-    char c = r.consume();\n-    switch(c) {\n-        case '\\t':\n-        case '\\n':\n-        case '\\r':\n-        case '\\f':\n-        case ' ':\n-            t.transition(BeforeAttributeName);\n-            break;\n-        case '/':\n-            t.transition(SelfClosingStartTag);\n-            break;\n-        // intended fall through to next >\n-        case '>':\n-            t.emitTagPending();\n-            t.transition(Data);\n-            break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n-            break;\n-        case // should emit pending tag?\n-        eof:\n-            t.eofError(this);\n-            t.transition(Data);\n-            break;\n-        default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+    char c;\n+    while (true) {\n+        c = r.consume();\n+        switch (c) {\n+            case '\\t':\n+            case '\\n':\n+            case '\\r':\n+            case '\\f':\n+            case ' ':\n+                // ignore whitespace\n+                break;\n+            case '/':\n+                t.transition(SelfClosingStartTag);\n+                return;\n+            case '>':\n+                t.emitTagPending();\n+                t.transition(Data);\n+                return;\n+            case 0:\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                t.tagPending.appendAttributeName((char) TokeniserState.replacementChar);\n+                return;\n+            case TokeniserState.EOF:\n+                t.eofError(this);\n+                t.transition(Data);\n+                return;\n+            case '\"':\n+            case '\\'':\n+            case '<':\n+            case '=':\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                t.tagPending.appendAttributeName(c);\n+                t.transition(AttributeName);\n+                return;\n+            default:\n+                if (c >= 'A' && c <= 'Z') c += ('a'-'A'); // ASCII lowercasing\n+                t.tagPending.newAttribute();\n+                r.unconsume();\n+                t.transition(AttributeName);\n+                return;\n+        }\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -1,44 +1,46 @@\n void read(Tokeniser t, CharacterReader r) {\n-    char c = r.consume();\n-    switch(c) {\n-        case '\\t':\n-        case '\\n':\n-        case '\\r':\n-        case '\\f':\n-        case ' ':\n-            // ignore whitespace\n-            break;\n-        case '/':\n-            t.transition(SelfClosingStartTag);\n-            break;\n-        // intended fall through as if >\n-        case '>':\n-            t.emitTagPending();\n-            t.transition(Data);\n-            break;\n-        case nullChar:\n-            t.error(this);\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n-            break;\n-        case eof:\n-            t.eofError(this);\n-            t.transition(Data);\n-            break;\n-        case '\"':\n-        case '\\'':\n-        case '<':\n-        case '=':\n-            t.error(this);\n-            t.tagPending.newAttribute();\n-            t.tagPending.appendAttributeName(c);\n-            t.transition(AttributeName);\n-            break;\n-        default:\n-            // A-Z, anything else\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n+    char c;\n+    while (true) {\n+        c = r.consume();\n+        switch (c) {\n+            case '\\t':\n+            case '\\n':\n+            case '\\r':\n+            case '\\f':\n+            case ' ':\n+                // ignore whitespace\n+                break;\n+            case '/':\n+                t.transition(SelfClosingStartTag);\n+                return;\n+            case '>':\n+                t.emitTagPending();\n+                t.transition(Data);\n+                return;\n+            case 0:\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                t.tagPending.appendAttributeName((char) TokeniserState.replacementChar);\n+                return;\n+            case TokeniserState.EOF:\n+                t.eofError(this);\n+                t.transition(Data);\n+                return;\n+            case '\"':\n+            case '\\'':\n+            case '<':\n+            case '=':\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                t.tagPending.appendAttributeName(c);\n+                t.transition(AttributeName);\n+                return;\n+            default:\n+                if (c >= 'A' && c <= 'Z') c += ('a'-'A'); // ASCII lowercasing\n+                t.tagPending.newAttribute();\n+                r.unconsume();\n+                t.transition(AttributeName);\n+                return;\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.nullChar:\n            t.error(this);\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n            break;\n        case CharacterReader.eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.tagPending.appendAttributeName(Character.toString(c));\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,40 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n+        case CharacterReader.nullChar:\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n             break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.eof:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.tagPending.appendAttributeName(Character.toString(c));\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,13 +16,13 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n+        case CharacterReader.nullChar:\n             t.error(this);\n             t.tagPending.newAttribute();\n             r.unconsume();\n             t.transition(AttributeName);\n             break;\n-        case eof:\n+        case CharacterReader.eof:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n@@ -39,6 +39,7 @@\n             // A-Z, anything else\n             t.tagPending.newAttribute();\n             r.unconsume();\n+            t.tagPending.appendAttributeName(Character.toString(c));\n             t.transition(AttributeName);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c;\n    while((c = r.consume()) != CharacterReader.EOF) {\n        switch(c) {\n            case '\\t':\n            case '\\n':\n            case '\\r':\n            case '\\f':\n            case ' ':\n                // ignore whitespace\n                break;\n            case '/':\n                t.transition(SelfClosingStartTag);\n                return;\n            case '>':\n                t.emitTagPending();\n                t.transition(Data);\n                return;\n            case '\\0':\n                t.error(this);\n                t.tagPending.newAttribute();\n                t.tagPending.appendAttributeName('\\uFFFD'); // replace nullChar with replacement character\n                t.transition(AttributeName);\n                return;\n            case '\"':\n            case '\\'':\n            case '<':\n            case '=':\n                t.error(this);\n                t.tagPending.newAttribute();\n                t.tagPending.appendAttributeName(c);\n                t.transition(AttributeName);\n                return;\n            default:\n                if (c >= 'A' && c <= 'Z') {\n                    c += 'a' - 'A'; // convert uppercase letters to lowercase for valid HTML\n                }\n                t.tagPending.newAttribute();\n                r.unconsume();\n                t.transition(AttributeName);\n                return;\n        }\n    }\n    t.eofError(this);\n    t.transition(Data);\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,36 +1,46 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n-    char c = r.consume();\n-    switch(c) {\n-        case '\\t':\n-        case '\\n':\n-        case '\\r':\n-        case '\\f':\n-        case ' ':\n-            t.transition(BeforeAttributeName);\n-            break;\n-        case '/':\n-            t.transition(SelfClosingStartTag);\n-            break;\n-        // intended fall through to next >\n-        case '>':\n-            t.emitTagPending();\n-            t.transition(Data);\n-            break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n-            break;\n-        case // should emit pending tag?\n-        eof:\n-            t.eofError(this);\n-            t.transition(Data);\n-            break;\n-        default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+    char c;\n+    while((c = r.consume()) != CharacterReader.EOF) {\n+        switch(c) {\n+            case '\\t':\n+            case '\\n':\n+            case '\\r':\n+            case '\\f':\n+            case ' ':\n+                // ignore whitespace\n+                break;\n+            case '/':\n+                t.transition(SelfClosingStartTag);\n+                return;\n+            case '>':\n+                t.emitTagPending();\n+                t.transition(Data);\n+                return;\n+            case '\\0':\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                t.tagPending.appendAttributeName('\\uFFFD'); // replace nullChar with replacement character\n+                t.transition(AttributeName);\n+                return;\n+            case '\"':\n+            case '\\'':\n+            case '<':\n+            case '=':\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                t.tagPending.appendAttributeName(c);\n+                t.transition(AttributeName);\n+                return;\n+            default:\n+                if (c >= 'A' && c <= 'Z') {\n+                    c += 'a' - 'A'; // convert uppercase letters to lowercase for valid HTML\n+                }\n+                t.tagPending.newAttribute();\n+                r.unconsume();\n+                t.transition(AttributeName);\n+                return;\n+        }\n     }\n+    t.eofError(this);\n+    t.transition(Data);\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -1,44 +1,46 @@\n void read(Tokeniser t, CharacterReader r) {\n-    char c = r.consume();\n-    switch(c) {\n-        case '\\t':\n-        case '\\n':\n-        case '\\r':\n-        case '\\f':\n-        case ' ':\n-            // ignore whitespace\n-            break;\n-        case '/':\n-            t.transition(SelfClosingStartTag);\n-            break;\n-        // intended fall through as if >\n-        case '>':\n-            t.emitTagPending();\n-            t.transition(Data);\n-            break;\n-        case nullChar:\n-            t.error(this);\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n-            break;\n-        case eof:\n-            t.eofError(this);\n-            t.transition(Data);\n-            break;\n-        case '\"':\n-        case '\\'':\n-        case '<':\n-        case '=':\n-            t.error(this);\n-            t.tagPending.newAttribute();\n-            t.tagPending.appendAttributeName(c);\n-            t.transition(AttributeName);\n-            break;\n-        default:\n-            // A-Z, anything else\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n+    char c;\n+    while((c = r.consume()) != CharacterReader.EOF) {\n+        switch(c) {\n+            case '\\t':\n+            case '\\n':\n+            case '\\r':\n+            case '\\f':\n+            case ' ':\n+                // ignore whitespace\n+                break;\n+            case '/':\n+                t.transition(SelfClosingStartTag);\n+                return;\n+            case '>':\n+                t.emitTagPending();\n+                t.transition(Data);\n+                return;\n+            case '\\0':\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                t.tagPending.appendAttributeName('\\uFFFD'); // replace nullChar with replacement character\n+                t.transition(AttributeName);\n+                return;\n+            case '\"':\n+            case '\\'':\n+            case '<':\n+            case '=':\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                t.tagPending.appendAttributeName(c);\n+                t.transition(AttributeName);\n+                return;\n+            default:\n+                if (c >= 'A' && c <= 'Z') {\n+                    c += 'a' - 'A'; // convert uppercase letters to lowercase for valid HTML\n+                }\n+                t.tagPending.newAttribute();\n+                r.unconsume();\n+                t.transition(AttributeName);\n+                return;\n+        }\n     }\n+    t.eofError(this);\n+    t.transition(Data);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch (c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.NULL:\n            t.error(this);\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,36 +1,44 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n-    switch(c) {\n+    switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n+        case CharacterReader.NULL:\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n             break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -1,6 +1,6 @@\n void read(Tokeniser t, CharacterReader r) {\n     char c = r.consume();\n-    switch(c) {\n+    switch (c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n@@ -16,13 +16,13 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n+        case CharacterReader.NULL:\n             t.error(this);\n             t.tagPending.newAttribute();\n             r.unconsume();\n             t.transition(AttributeName);\n             break;\n-        case eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\\0':\n            t.error(this);\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,39 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n-            break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\\0':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n+            break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,15 +16,15 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n+        case CharacterReader.EOF:\n+            t.eofError(this);\n+            t.transition(Data);\n+            break;\n+        case '\\0':\n             t.error(this);\n             t.tagPending.newAttribute();\n             r.unconsume();\n             t.transition(AttributeName);\n-            break;\n-        case eof:\n-            t.eofError(this);\n-            t.transition(Data);\n             break;\n         case '\"':\n         case '\\'':\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case 0:\n            t.error(this);\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,39 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n-            break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case 0:\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n+            break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,15 +16,15 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n+        case CharacterReader.EOF:\n+            t.eofError(this);\n+            t.transition(Data);\n+            break;\n+        case 0:\n             t.error(this);\n             t.tagPending.newAttribute();\n             r.unconsume();\n             t.transition(AttributeName);\n-            break;\n-        case eof:\n-            t.eofError(this);\n-            t.transition(Data);\n             break;\n         case '\"':\n         case '\\'':\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.nullChar:\n            t.error(this);\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,39 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n+        case CharacterReader.nullChar:\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n             break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,13 +16,13 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n+        case CharacterReader.nullChar:\n             t.error(this);\n             t.tagPending.newAttribute();\n             r.unconsume();\n             t.transition(AttributeName);\n             break;\n-        case eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.current();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            r.advance();\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            r.advance();\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            r.advance();\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            r.advance();\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            t.transition(AttributeName);\n            break;\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,36 +1,42 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n-    char c = r.consume();\n+    char c = r.current();\n     switch(c) {\n         case '\\t':\n         case '\\n':\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n+            r.advance();\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n+            r.advance();\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n+            r.advance();\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n-            break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            r.advance();\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            t.transition(AttributeName);\n+            break;\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -1,5 +1,5 @@\n void read(Tokeniser t, CharacterReader r) {\n-    char c = r.consume();\n+    char c = r.current();\n     switch(c) {\n         case '\\t':\n         case '\\n':\n@@ -7,22 +7,19 @@\n         case '\\f':\n         case ' ':\n             // ignore whitespace\n+            r.advance();\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n+            r.advance();\n             break;\n         // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n+            r.advance();\n             break;\n-        case nullChar:\n-            t.error(this);\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n-            break;\n-        case eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n@@ -34,11 +31,12 @@\n             t.tagPending.newAttribute();\n             t.tagPending.appendAttributeName(c);\n             t.transition(AttributeName);\n+            r.advance();\n             break;\n         default:\n             // A-Z, anything else\n             t.tagPending.newAttribute();\n-            r.unconsume();\n             t.transition(AttributeName);\n+            break;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            if (c == 0xFFFD) {\n                t.error(this);\n                break;\n            }\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,37 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n-            break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            if (c == 0xFFFD) {\n+                t.error(this);\n+                break;\n+            }\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,13 +16,7 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n-            t.error(this);\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n-            break;\n-        case eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n@@ -36,6 +30,10 @@\n             t.transition(AttributeName);\n             break;\n         default:\n+            if (c == 0xFFFD) {\n+                t.error(this);\n+                break;\n+            }\n             // A-Z, anything else\n             t.tagPending.newAttribute();\n             r.unconsume();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.EOF:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            if (c == '\\u0000') {\n                t.error(this);\n                t.tagPending.newAttribute();\n                t.tagPending.appendAttributeName('\\ufffd');\n                t.transition(AttributeName);\n                break;\n            }\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,40 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n-            break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            if (c == '\\u0000') {\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                t.tagPending.appendAttributeName('\\ufffd');\n+                t.transition(AttributeName);\n+                break;\n+            }\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,13 +16,7 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n-            t.error(this);\n-            t.tagPending.newAttribute();\n-            r.unconsume();\n-            t.transition(AttributeName);\n-            break;\n-        case eof:\n+        case CharacterReader.EOF:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n@@ -36,6 +30,13 @@\n             t.transition(AttributeName);\n             break;\n         default:\n+            if (c == '\\u0000') {\n+                t.error(this);\n+                t.tagPending.newAttribute();\n+                t.tagPending.appendAttributeName('\\ufffd');\n+                t.transition(AttributeName);\n+                break;\n+            }\n             // A-Z, anything else\n             t.tagPending.newAttribute();\n             r.unconsume();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case CharacterReader.nullChar:\n            t.error(this);\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n            break;\n        case CharacterReader.eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\\\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n    }\n}", "diff": "--- org/jsoup/parser/TokeniserState.java@read\n+++ org/jsoup/parser/TokeniserState.java@read\n@@ -1,8 +1,4 @@\n void read(Tokeniser t, CharacterReader r) {\n-    // previous TagOpen state did NOT consume, will have a letter char in current\n-    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n-    String tagName = r.consumeTagName();\n-    t.tagPending.appendTagName(tagName);\n     char c = r.consume();\n     switch(c) {\n         case '\\t':\n@@ -10,27 +6,40 @@\n         case '\\r':\n         case '\\f':\n         case ' ':\n-            t.transition(BeforeAttributeName);\n+            // ignore whitespace\n             break;\n         case '/':\n             t.transition(SelfClosingStartTag);\n             break;\n-        // intended fall through to next >\n+        // intended fall through as if >\n         case '>':\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case // replacement\n-        nullChar:\n-            t.tagPending.appendTagName(replacementStr);\n+        case CharacterReader.nullChar:\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.transition(AttributeName);\n             break;\n-        case // should emit pending tag?\n-        eof:\n+        case CharacterReader.eof:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n+        case '\\\"':\n+        case '\\'':\n+        case '<':\n+        case '=':\n+            t.error(this);\n+            t.tagPending.newAttribute();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n+            break;\n         default:\n-            // buffer underrun\n-            t.tagPending.appendTagName(c);\n+            // A-Z, anything else\n+            t.tagPending.newAttribute();\n+            r.unconsume();\n+            t.tagPending.appendAttributeName(c);\n+            t.transition(AttributeName);\n     }\n }\n--- org/jsoup/parser/TokeniserState.java@read1\n+++ org/jsoup/parser/TokeniserState.java@read1\n@@ -16,17 +16,17 @@\n             t.emitTagPending();\n             t.transition(Data);\n             break;\n-        case nullChar:\n+        case CharacterReader.nullChar:\n             t.error(this);\n             t.tagPending.newAttribute();\n             r.unconsume();\n             t.transition(AttributeName);\n             break;\n-        case eof:\n+        case CharacterReader.eof:\n             t.eofError(this);\n             t.transition(Data);\n             break;\n-        case '\"':\n+        case '\\\"':\n         case '\\'':\n         case '<':\n         case '=':\n@@ -39,6 +39,7 @@\n             // A-Z, anything else\n             t.tagPending.newAttribute();\n             r.unconsume();\n+            t.tagPending.appendAttributeName(c);\n             t.transition(AttributeName);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]