[{"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockTypeMatches = new ArrayList<Object>();\n    for (Object mock : mocks) {\n        if (field.getType().isInstance(mock)) {\n            mockTypeMatches.add(mock);\n        }\n    }\n    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -1,12 +1,9 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockNameMatches = new ArrayList<Object>();\n-    if (mocks.size() > 1) {\n-        for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n-                mockNameMatches.add(mock);\n-            }\n+    List<Object> mockTypeMatches = new ArrayList<Object>();\n+    for (Object mock : mocks) {\n+        if (field.getType().isInstance(mock)) {\n+            mockTypeMatches.add(mock);\n         }\n-        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n-    return next.filterCandidate(mocks, field, fieldInstance);\n+    }\n+    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,7 +1,7 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n     List<Object> mockTypeMatches = new ArrayList<Object>();\n     for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n+        if (field.getType().isInstance(mock)) {\n             mockTypeMatches.add(mock);\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 14}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockTypeMatches = new ArrayList<Object>();\n    for (Object mock : mocks) {\n        if (mock != null && field.getType().isAssignableFrom(mock.getClass())) {\n            mockTypeMatches.add(mock);\n        }\n    }\n    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -1,12 +1,9 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockNameMatches = new ArrayList<Object>();\n-    if (mocks.size() > 1) {\n-        for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n-                mockNameMatches.add(mock);\n-            }\n+    List<Object> mockTypeMatches = new ArrayList<Object>();\n+    for (Object mock : mocks) {\n+        if (mock != null && field.getType().isAssignableFrom(mock.getClass())) {\n+            mockTypeMatches.add(mock);\n         }\n-        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n-    return next.filterCandidate(mocks, field, fieldInstance);\n+    }\n+    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,7 +1,7 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n     List<Object> mockTypeMatches = new ArrayList<Object>();\n     for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n+        if (mock != null && field.getType().isAssignableFrom(mock.getClass())) {\n             mockTypeMatches.add(mock);\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockTypeMatches = new ArrayList<Object>();\n    for (Object mock : mocks) {\n        if (field.getType().isInstance(mock)) { // check if mock is an instance of field type\n            mockTypeMatches.add(mock);\n        }\n    }\n    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -1,12 +1,9 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockNameMatches = new ArrayList<Object>();\n-    if (mocks.size() > 1) {\n-        for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n-                mockNameMatches.add(mock);\n-            }\n+    List<Object> mockTypeMatches = new ArrayList<Object>();\n+    for (Object mock : mocks) {\n+        if (field.getType().isInstance(mock)) { // check if mock is an instance of field type\n+            mockTypeMatches.add(mock);\n         }\n-        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n-    return next.filterCandidate(mocks, field, fieldInstance);\n+    }\n+    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,7 +1,7 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n     List<Object> mockTypeMatches = new ArrayList<Object>();\n     for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n+        if (field.getType().isInstance(mock)) { // check if mock is an instance of field type\n             mockTypeMatches.add(mock);\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockTypeMatches = new ArrayList<Object>();\n    for (Object mock : mocks) {\n        if (field.getType().isInstance(mock)) { //use isInstance instead of isAssignableFrom\n            mockTypeMatches.add(mock);\n        }\n    }\n    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -1,12 +1,9 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockNameMatches = new ArrayList<Object>();\n-    if (mocks.size() > 1) {\n-        for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n-                mockNameMatches.add(mock);\n-            }\n+    List<Object> mockTypeMatches = new ArrayList<Object>();\n+    for (Object mock : mocks) {\n+        if (field.getType().isInstance(mock)) { //use isInstance instead of isAssignableFrom\n+            mockTypeMatches.add(mock);\n         }\n-        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n-    return next.filterCandidate(mocks, field, fieldInstance);\n+    }\n+    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,7 +1,7 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n     List<Object> mockTypeMatches = new ArrayList<Object>();\n     for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n+        if (field.getType().isInstance(mock)) { //use isInstance instead of isAssignableFrom\n             mockTypeMatches.add(mock);\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockTypeMatches = new ArrayList<>();\n    for (Object mock : mocks) {\n        if (field.getType().isInstance(mock)) {\n            mockTypeMatches.add(mock);\n        }\n    }\n    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -1,12 +1,9 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockNameMatches = new ArrayList<Object>();\n-    if (mocks.size() > 1) {\n-        for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n-                mockNameMatches.add(mock);\n-            }\n+    List<Object> mockTypeMatches = new ArrayList<>();\n+    for (Object mock : mocks) {\n+        if (field.getType().isInstance(mock)) {\n+            mockTypeMatches.add(mock);\n         }\n-        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n-    return next.filterCandidate(mocks, field, fieldInstance);\n+    }\n+    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,7 +1,7 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockTypeMatches = new ArrayList<Object>();\n+    List<Object> mockTypeMatches = new ArrayList<>();\n     for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n+        if (field.getType().isInstance(mock)) {\n             mockTypeMatches.add(mock);\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]