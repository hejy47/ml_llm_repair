[{"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockNameMatches = new ArrayList<Object>();\n    if (mocks.size() > 1) {\n        for (Object mock : mocks) {\n            if (mockUtil.getMockName(mock).toString().equals(field.getName())) {\n                mockNameMatches.add(mock);\n            }\n        }\n        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n    }\n    return next.filterCandidate(mocks, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -2,11 +2,11 @@\n     List<Object> mockNameMatches = new ArrayList<Object>();\n     if (mocks.size() > 1) {\n         for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n+            if (mockUtil.getMockName(mock).toString().equals(field.getName())) {\n                 mockNameMatches.add(mock);\n             }\n         }\n         return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n+    }\n     return next.filterCandidate(mocks, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,9 +1,12 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockTypeMatches = new ArrayList<Object>();\n-    for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n-            mockTypeMatches.add(mock);\n+    List<Object> mockNameMatches = new ArrayList<Object>();\n+    if (mocks.size() > 1) {\n+        for (Object mock : mocks) {\n+            if (mockUtil.getMockName(mock).toString().equals(field.getName())) {\n+                mockNameMatches.add(mock);\n+            }\n         }\n+        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n     }\n-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n+    return next.filterCandidate(mocks, field, fieldInstance);\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockNameMatches = new ArrayList<Object>();\n    if (mocks.size() > 1) {\n        for (Object mock : mocks) {\n            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n                mockNameMatches.add(mock);\n            }\n        }\n        if (!mockNameMatches.isEmpty()) {\n            return next.filterCandidate(mockNameMatches, field, fieldInstance);\n        }\n    }\n    return next.filterCandidate(mocks, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -6,7 +6,9 @@\n                 mockNameMatches.add(mock);\n             }\n         }\n-        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n+        if (!mockNameMatches.isEmpty()) {\n+            return next.filterCandidate(mockNameMatches, field, fieldInstance);\n+        }\n+    }\n     return next.filterCandidate(mocks, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,9 +1,14 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockTypeMatches = new ArrayList<Object>();\n-    for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n-            mockTypeMatches.add(mock);\n+    List<Object> mockNameMatches = new ArrayList<Object>();\n+    if (mocks.size() > 1) {\n+        for (Object mock : mocks) {\n+            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n+                mockNameMatches.add(mock);\n+            }\n+        }\n+        if (!mockNameMatches.isEmpty()) {\n+            return next.filterCandidate(mockNameMatches, field, fieldInstance);\n         }\n     }\n-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n+    return next.filterCandidate(mocks, field, fieldInstance);\n }\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockNameMatches = new ArrayList<Object>();\n    if (mocks.size() > 1) {\n        for (Object mock : mocks) {\n            if (mockUtil.getMockName(mock).equals(field.getName())) { // correct comparison order\n                mockNameMatches.add(mock);\n            }\n        }\n        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n    }\n    return next.filterCandidate(mocks, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -2,11 +2,11 @@\n     List<Object> mockNameMatches = new ArrayList<Object>();\n     if (mocks.size() > 1) {\n         for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n+            if (mockUtil.getMockName(mock).equals(field.getName())) { // correct comparison order\n                 mockNameMatches.add(mock);\n             }\n         }\n         return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n+    }\n     return next.filterCandidate(mocks, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,9 +1,12 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockTypeMatches = new ArrayList<Object>();\n-    for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n-            mockTypeMatches.add(mock);\n+    List<Object> mockNameMatches = new ArrayList<Object>();\n+    if (mocks.size() > 1) {\n+        for (Object mock : mocks) {\n+            if (mockUtil.getMockName(mock).equals(field.getName())) { // correct comparison order\n+                mockNameMatches.add(mock);\n+            }\n         }\n+        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n     }\n-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n+    return next.filterCandidate(mocks, field, fieldInstance);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockNameMatches = new ArrayList<Object>();\n    if (mocks.size() > 1) {\n        for (Object mock : mocks) {\n            if (mockUtil.getMockName(mock).asString().equals(field.getName())) {\n                mockNameMatches.add(mock);\n            }\n        }\n        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n    }\n    return next.filterCandidate(mocks, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -2,11 +2,11 @@\n     List<Object> mockNameMatches = new ArrayList<Object>();\n     if (mocks.size() > 1) {\n         for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n+            if (mockUtil.getMockName(mock).asString().equals(field.getName())) {\n                 mockNameMatches.add(mock);\n             }\n         }\n         return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n+    }\n     return next.filterCandidate(mocks, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,9 +1,12 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockTypeMatches = new ArrayList<Object>();\n-    for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n-            mockTypeMatches.add(mock);\n+    List<Object> mockNameMatches = new ArrayList<Object>();\n+    if (mocks.size() > 1) {\n+        for (Object mock : mocks) {\n+            if (mockUtil.getMockName(mock).asString().equals(field.getName())) {\n+                mockNameMatches.add(mock);\n+            }\n         }\n+        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n     }\n-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n+    return next.filterCandidate(mocks, field, fieldInstance);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockNameMatches = new ArrayList<Object>();\n    if (mocks.size() > 1) {\n        for (Object mock : mocks) {\n            if (mockUtil.getMockName(mock).equals(field.getName())) {\n                mockNameMatches.add(mock);\n            }\n        }\n        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n    }\n    return next.filterCandidate(mocks, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -2,11 +2,11 @@\n     List<Object> mockNameMatches = new ArrayList<Object>();\n     if (mocks.size() > 1) {\n         for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n+            if (mockUtil.getMockName(mock).equals(field.getName())) {\n                 mockNameMatches.add(mock);\n             }\n         }\n         return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n+    }\n     return next.filterCandidate(mocks, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,9 +1,12 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockTypeMatches = new ArrayList<Object>();\n-    for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n-            mockTypeMatches.add(mock);\n+    List<Object> mockNameMatches = new ArrayList<Object>();\n+    if (mocks.size() > 1) {\n+        for (Object mock : mocks) {\n+            if (mockUtil.getMockName(mock).equals(field.getName())) {\n+                mockNameMatches.add(mock);\n+            }\n         }\n+        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n     }\n-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n+    return next.filterCandidate(mocks, field, fieldInstance);\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockNameMatches = new ArrayList<Object>();\n    if (mocks.size() > 1) {\n        for (Object mock : mocks) {\n            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n                mockNameMatches.add(mock);\n            }\n        }\n        if (mockNameMatches.size() > 0) {\n            return next.filterCandidate(mockNameMatches, field, fieldInstance);\n        }\n    }\n    return next.filterCandidate(mocks, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -6,7 +6,9 @@\n                 mockNameMatches.add(mock);\n             }\n         }\n-        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n+        if (mockNameMatches.size() > 0) {\n+            return next.filterCandidate(mockNameMatches, field, fieldInstance);\n+        }\n+    }\n     return next.filterCandidate(mocks, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,9 +1,14 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockTypeMatches = new ArrayList<Object>();\n-    for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n-            mockTypeMatches.add(mock);\n+    List<Object> mockNameMatches = new ArrayList<Object>();\n+    if (mocks.size() > 1) {\n+        for (Object mock : mocks) {\n+            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n+                mockNameMatches.add(mock);\n+            }\n+        }\n+        if (mockNameMatches.size() > 0) {\n+            return next.filterCandidate(mockNameMatches, field, fieldInstance);\n         }\n     }\n-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n+    return next.filterCandidate(mocks, field, fieldInstance);\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockNameMatches = new ArrayList<Object>();\n    if (mocks.size() > 1) {\n        for (Object mock : mocks) {\n            String mockName = mockUtil.getMockName(mock).toString();\n            if (field.getName().equals(mockName)) {\n                mockNameMatches.add(mock);\n            }\n        }\n        if (mockNameMatches.size() > 0) {\n            return next.filterCandidate(mockNameMatches, field, fieldInstance);\n        }\n    }\n    return next.filterCandidate(mocks, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -2,11 +2,14 @@\n     List<Object> mockNameMatches = new ArrayList<Object>();\n     if (mocks.size() > 1) {\n         for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n+            String mockName = mockUtil.getMockName(mock).toString();\n+            if (field.getName().equals(mockName)) {\n                 mockNameMatches.add(mock);\n             }\n         }\n-        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n+        if (mockNameMatches.size() > 0) {\n+            return next.filterCandidate(mockNameMatches, field, fieldInstance);\n+        }\n+    }\n     return next.filterCandidate(mocks, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,9 +1,15 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockTypeMatches = new ArrayList<Object>();\n-    for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n-            mockTypeMatches.add(mock);\n+    List<Object> mockNameMatches = new ArrayList<Object>();\n+    if (mocks.size() > 1) {\n+        for (Object mock : mocks) {\n+            String mockName = mockUtil.getMockName(mock).toString();\n+            if (field.getName().equals(mockName)) {\n+                mockNameMatches.add(mock);\n+            }\n+        }\n+        if (mockNameMatches.size() > 0) {\n+            return next.filterCandidate(mockNameMatches, field, fieldInstance);\n         }\n     }\n-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n+    return next.filterCandidate(mocks, field, fieldInstance);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockNameMatches = new ArrayList<Object>();\n    String fieldName = field.getName();  // get field name outside of loop\n    if (mocks.size() > 1) {\n        for (Object mock : mocks) {\n            if (fieldName.equals(mockUtil.getMockName(mock).toString())) {  // compare with the field name\n                mockNameMatches.add(mock);\n            }\n        }\n        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n    }\n    return next.filterCandidate(mocks, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -1,12 +1,13 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n     List<Object> mockNameMatches = new ArrayList<Object>();\n+    String fieldName = field.getName();  // get field name outside of loop\n     if (mocks.size() > 1) {\n         for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n+            if (fieldName.equals(mockUtil.getMockName(mock).toString())) {  // compare with the field name\n                 mockNameMatches.add(mock);\n             }\n         }\n         return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n+    }\n     return next.filterCandidate(mocks, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,9 +1,13 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockTypeMatches = new ArrayList<Object>();\n-    for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n-            mockTypeMatches.add(mock);\n+    List<Object> mockNameMatches = new ArrayList<Object>();\n+    String fieldName = field.getName();  // get field name outside of loop\n+    if (mocks.size() > 1) {\n+        for (Object mock : mocks) {\n+            if (fieldName.equals(mockUtil.getMockName(mock).toString())) {  // compare with the field name\n+                mockNameMatches.add(mock);\n+            }\n         }\n+        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n     }\n-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n+    return next.filterCandidate(mocks, field, fieldInstance);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockNameMatches = new ArrayList<Object>();\n    if (mocks.size() > 1) {\n        for (Object mock : mocks) {\n            if (field.getName().equals(MockUtil.getMockName(mock).toString())) {\n                mockNameMatches.add(mock);\n            }\n        }\n        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n    }\n    return next.filterCandidate(mocks, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -2,11 +2,11 @@\n     List<Object> mockNameMatches = new ArrayList<Object>();\n     if (mocks.size() > 1) {\n         for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n+            if (field.getName().equals(MockUtil.getMockName(mock).toString())) {\n                 mockNameMatches.add(mock);\n             }\n         }\n         return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n+    }\n     return next.filterCandidate(mocks, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,9 +1,12 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockTypeMatches = new ArrayList<Object>();\n-    for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n-            mockTypeMatches.add(mock);\n+    List<Object> mockNameMatches = new ArrayList<Object>();\n+    if (mocks.size() > 1) {\n+        for (Object mock : mocks) {\n+            if (field.getName().equals(MockUtil.getMockName(mock).toString())) {\n+                mockNameMatches.add(mock);\n+            }\n         }\n+        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n     }\n-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n+    return next.filterCandidate(mocks, field, fieldInstance);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n    List<Object> mockNameMatches = new ArrayList<Object>();\n    for (Object mock : mocks) {\n        if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n            mockNameMatches.add(mock);\n        }\n    }\n    if (mockNameMatches.size() > 1) {\n        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n    }\n    return next.filterCandidate(mocks, field, fieldInstance);\n}", "diff": "--- org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java@filterCandidate\n@@ -1,12 +1,12 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n     List<Object> mockNameMatches = new ArrayList<Object>();\n-    if (mocks.size() > 1) {\n-        for (Object mock : mocks) {\n-            if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n-                mockNameMatches.add(mock);\n-            }\n+    for (Object mock : mocks) {\n+        if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n+            mockNameMatches.add(mock);\n         }\n+    }\n+    if (mockNameMatches.size() > 1) {\n         return next.filterCandidate(mockNameMatches, field, fieldInstance);\n-            }\n+    }\n     return next.filterCandidate(mocks, field, fieldInstance);\n }\n--- org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n+++ org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java@filterCandidate\n@@ -1,9 +1,12 @@\n public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {\n-    List<Object> mockTypeMatches = new ArrayList<Object>();\n+    List<Object> mockNameMatches = new ArrayList<Object>();\n     for (Object mock : mocks) {\n-        if (field.getType().isAssignableFrom(mock.getClass())) {\n-            mockTypeMatches.add(mock);\n+        if (field.getName().equals(mockUtil.getMockName(mock).toString())) {\n+            mockNameMatches.add(mock);\n         }\n     }\n-    return next.filterCandidate(mockTypeMatches, field, fieldInstance);\n+    if (mockNameMatches.size() > 1) {\n+        return next.filterCandidate(mockNameMatches, field, fieldInstance);\n+    }\n+    return next.filterCandidate(mocks, field, fieldInstance);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]