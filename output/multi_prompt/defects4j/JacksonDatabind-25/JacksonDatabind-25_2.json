[{"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        synchronized (this) { // add synchronized block to avoid race condition\n            deser = _deserializers.get(typeId); // double check the map\n            if (deser == null) {\n                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n                if (type == null) {\n                    deser = _findDefaultImplDeserializer(ctxt);\n                    if (deser == null) {\n                        deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                    }\n                } else {\n                    if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                        type = _baseType.narrowBy(type.getRawClass());\n                    }\n                    deser = ctxt.findContextualValueDeserializer(type, _property);\n                }\n                _deserializers.put(typeId, deser);\n            }\n        }\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,20 +1,24 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n+        synchronized (this) { // add synchronized block to avoid race condition\n+            deser = _deserializers.get(typeId); // double check the map\n+            if (deser == null) {\n                 JavaType type = _idResolver.typeFromId(ctxt, typeId);\n-        if (type == null) {\n-            // As per [JACKSON-614], use the default impl if no type id available:\n-            deser = _findDefaultImplDeserializer(ctxt);\n-            if (deser == null) {\n-                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n+                if (type == null) {\n+                    deser = _findDefaultImplDeserializer(ctxt);\n+                    if (deser == null) {\n+                        deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n+                    }\n+                } else {\n+                    if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n+                        type = _baseType.narrowBy(type.getRawClass());\n+                    }\n+                    deser = ctxt.findContextualValueDeserializer(type, _property);\n+                }\n+                _deserializers.put(typeId, deser);\n             }\n-        } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n-            }\n-            deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n-        _deserializers.put(typeId, deser);\n     }\n     return deser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType == null) || !_baseType.getClass().equals(type.getClass())) {\n                _baseType = type;\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,8 +9,8 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType == null) || !_baseType.getClass().equals(type.getClass())) {\n+                _baseType = type;\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) { // fixed this line\n                type = _baseType.narrowBy(type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,8 +9,8 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) { // fixed this line\n+                type = _baseType.narrowBy(type.getRawClass());\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n                type = _baseType.narrowBy(type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        if (deser != null) { // added null check\n            _deserializers.put(typeId, deser);\n        }\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,12 +9,14 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n+                type = _baseType.narrowBy(type.getRawClass());\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n-        _deserializers.put(typeId, deser);\n+        if (deser != null) { // added null check\n+            _deserializers.put(typeId, deser);\n+        }\n     }\n     return deser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass() == type.getClass() &&\n                    !_baseType.hasGenericTypes()) {\n                // note: unlike with serialization, can not force update as it may skip handlers\n                type = ctxt.constructSpecializedType(_baseType, type);\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,8 +9,10 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass() == type.getClass() &&\n+                    !_baseType.hasGenericTypes()) {\n+                // note: unlike with serialization, can not force update as it may skip handlers\n+                type = ctxt.constructSpecializedType(_baseType, type);\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    // Check for cached deserializer\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser != null) {\n        return deser;\n    }\n    // Try resolving type from id\n    JavaType type = _idResolver.typeFromId(ctxt, typeId);\n    if (type != null) {\n        // Check for base type and narrow if necessary\n        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n            type = _baseType.narrowBy(type.getRawClass());\n        }\n        // Find and cache contextual deserializer\n        deser = ctxt.findContextualValueDeserializer(type, _property);\n        _deserializers.put(typeId, deser);\n        return deser;\n    }\n    // Use default impl or handle unknown type id\n    deser = _findDefaultImplDeserializer(ctxt);\n    if (deser == null) {\n        deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n    }\n    _deserializers.put(typeId, deser);\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,20 +1,26 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n+    // Check for cached deserializer\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n+    if (deser != null) {\n+        return deser;\n+    }\n+    // Try resolving type from id\n+    JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+    if (type != null) {\n+        // Check for base type and narrow if necessary\n+        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n+            type = _baseType.narrowBy(type.getRawClass());\n+        }\n+        // Find and cache contextual deserializer\n+        deser = ctxt.findContextualValueDeserializer(type, _property);\n+        _deserializers.put(typeId, deser);\n+        return deser;\n+    }\n+    // Use default impl or handle unknown type id\n+    deser = _findDefaultImplDeserializer(ctxt);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n-        if (type == null) {\n-            // As per [JACKSON-614], use the default impl if no type id available:\n-            deser = _findDefaultImplDeserializer(ctxt);\n-            if (deser == null) {\n-                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n-            }\n-        } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n-            }\n-            deser = ctxt.findContextualValueDeserializer(type, _property);\n-        }\n-        _deserializers.put(typeId, deser);\n+        deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n     }\n+    _deserializers.put(typeId, deser);\n     return deser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n                type = _baseType.narrowBy(type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,8 +9,8 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n+                type = _baseType.narrowBy(type.getRawClass());\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        synchronized (this) {\n            deser = _deserializers.get(typeId);\n            if (deser == null) {\n                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n                if (type == null) {\n                    // As per [JACKSON-614], use the default impl if no type id available:\n                    deser = _findDefaultImplDeserializer(ctxt);\n                    if (deser == null) {\n                        deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                    }\n                } else {\n                    if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                        type = _baseType.narrowBy(type.getRawClass());\n                    }\n                    deser = ctxt.findContextualValueDeserializer(type, _property);\n                }\n                _deserializers.put(typeId, deser);\n            }\n        }\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,20 +1,25 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n+        synchronized (this) {\n+            deser = _deserializers.get(typeId);\n+            if (deser == null) {\n                 JavaType type = _idResolver.typeFromId(ctxt, typeId);\n-        if (type == null) {\n-            // As per [JACKSON-614], use the default impl if no type id available:\n-            deser = _findDefaultImplDeserializer(ctxt);\n-            if (deser == null) {\n-                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n+                if (type == null) {\n+                    // As per [JACKSON-614], use the default impl if no type id available:\n+                    deser = _findDefaultImplDeserializer(ctxt);\n+                    if (deser == null) {\n+                        deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n+                    }\n+                } else {\n+                    if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n+                        type = _baseType.narrowBy(type.getRawClass());\n+                    }\n+                    deser = ctxt.findContextualValueDeserializer(type, _property);\n+                }\n+                _deserializers.put(typeId, deser);\n             }\n-        } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n-            }\n-            deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n-        _deserializers.put(typeId, deser);\n     }\n     return deser;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n                type = _baseType.narrowBy(type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        if (deser != null) {\n            _deserializers.put(typeId, deser); // add the deserializer to cache only after it is resolved\n        }\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,12 +9,14 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n+                type = _baseType.narrowBy(type.getRawClass());\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n-        _deserializers.put(typeId, deser);\n+        if (deser != null) {\n+            _deserializers.put(typeId, deser); // add the deserializer to cache only after it is resolved\n+        }\n     }\n     return deser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) { // changed comparison from == to equals()\n                type = _baseType.narrowBy(type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,8 +9,8 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) { // changed comparison from == to equals()\n+                type = _baseType.narrowBy(type.getRawClass());\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if (_baseType != null && _baseType.getClass() == type.getClass() && !_baseType.hasGenericTypes()) {\n                type = type.withHandlers(_baseType.getHandlerInstantiator());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,8 +9,8 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if (_baseType != null && _baseType.getClass() == type.getClass() && !_baseType.hasGenericTypes()) {\n+                type = type.withHandlers(_baseType.getHandlerInstantiator());\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                return ctxt.handleUnknownTypeId(_baseType, typeId, _idResolver, \"no such class found\");\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                type = _baseType.narrowBy(type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,16 +1,16 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n             if (deser == null) {\n-                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n+                return ctxt.handleUnknownTypeId(_baseType, typeId, _idResolver, \"no such class found\");\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n+                type = _baseType.narrowBy(type.getRawClass());\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n                type = _baseType.narrowBy(type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n            if (deser != null) {\n                _deserializers.put(typeId, deser);\n            }\n        }\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,12 +9,14 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n+                type = _baseType.narrowBy(type.getRawClass());\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n+            if (deser != null) {\n+                _deserializers.put(typeId, deser);\n+            }\n         }\n-        _deserializers.put(typeId, deser);\n     }\n     return deser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                type = _baseType.narrowBy(type.getRawClass());\n            }\n            // Fix: pass ctxt.getConfig() instead of ctxt\n            deser = ctxt.getConfig().findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,10 +9,11 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n+                type = _baseType.narrowBy(type.getRawClass());\n             }\n-            deser = ctxt.findContextualValueDeserializer(type, _property);\n+            // Fix: pass ctxt.getConfig() instead of ctxt\n+            deser = ctxt.getConfig().findContextualValueDeserializer(type, _property);\n         }\n         _deserializers.put(typeId, deser);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) { // compare the classes instead of the objects\n                type = _baseType.narrowBy(type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,8 +9,8 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) { // compare the classes instead of the objects\n+                type = _baseType.narrowBy(type.getRawClass());\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            return _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n        }\n        if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n            type = _baseType.narrowBy(type.getRawClass());\n        }\n        deser = ctxt.findContextualValueDeserializer(type, _property);\n        if (deser != null) {\n            _deserializers.put(typeId, deser);\n        }\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,20 +1,18 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n-            deser = _findDefaultImplDeserializer(ctxt);\n-            if (deser == null) {\n-                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n-            }\n-        } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n-            }\n-            deser = ctxt.findContextualValueDeserializer(type, _property);\n+            return _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n         }\n-        _deserializers.put(typeId, deser);\n+        if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n+            type = _baseType.narrowBy(type.getRawClass());\n+        }\n+        deser = ctxt.findContextualValueDeserializer(type, _property);\n+        if (deser != null) {\n+            _deserializers.put(typeId, deser);\n+        }\n     }\n     return deser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        synchronized (this) { // Fix: add synchronized block to make the function thread-safe\n            deser = _deserializers.get(typeId); // Double check after acquiring the lock\n            if (deser == null) {\n                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n                if (type == null) {\n                    deser = _findDefaultImplDeserializer(ctxt);\n                    if (deser == null) {\n                        deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                    }\n                } else {\n                    if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                        type = _baseType.narrowBy(type.getRawClass());\n                    }\n                    deser = ctxt.findContextualValueDeserializer(type, _property);\n                }\n                _deserializers.put(typeId, deser);\n            }\n        }\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,20 +1,24 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n+        synchronized (this) { // Fix: add synchronized block to make the function thread-safe\n+            deser = _deserializers.get(typeId); // Double check after acquiring the lock\n+            if (deser == null) {\n                 JavaType type = _idResolver.typeFromId(ctxt, typeId);\n-        if (type == null) {\n-            // As per [JACKSON-614], use the default impl if no type id available:\n-            deser = _findDefaultImplDeserializer(ctxt);\n-            if (deser == null) {\n-                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n+                if (type == null) {\n+                    deser = _findDefaultImplDeserializer(ctxt);\n+                    if (deser == null) {\n+                        deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n+                    }\n+                } else {\n+                    if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n+                        type = _baseType.narrowBy(type.getRawClass());\n+                    }\n+                    deser = ctxt.findContextualValueDeserializer(type, _property);\n+                }\n+                _deserializers.put(typeId, deser);\n             }\n-        } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n-            }\n-            deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n-        _deserializers.put(typeId, deser);\n     }\n     return deser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n                type = _baseType.narrowBy(type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers = _deserializers.newWithKeyValue(typeId, deser);\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,12 +9,12 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n+                type = _baseType.narrowBy(type.getRawClass());\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n-        _deserializers.put(typeId, deser);\n+        _deserializers = _deserializers.newWithKeyValue(typeId, deser);\n     }\n     return deser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n            }\n        } else {\n            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n                type = _baseType.narrowBy(type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        if (deser != null) {\n            _deserializers.put(typeId, deser);\n        }\n    }\n    return deser;\n}", "diff": "--- com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n+++ com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java@_findDeserializer\n@@ -1,7 +1,7 @@\n protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException {\n     JsonDeserializer<Object> deser = _deserializers.get(typeId);\n     if (deser == null) {\n-                JavaType type = _idResolver.typeFromId(ctxt, typeId);\n+        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n         if (type == null) {\n             // As per [JACKSON-614], use the default impl if no type id available:\n             deser = _findDefaultImplDeserializer(ctxt);\n@@ -9,12 +9,14 @@\n                 deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n             }\n         } else {\n-                        if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n-                                type = _baseType.narrowBy(type.getRawClass());\n+            if ((_baseType != null) && _baseType.getClass().equals(type.getClass())) {\n+                type = _baseType.narrowBy(type.getRawClass());\n             }\n             deser = ctxt.findContextualValueDeserializer(type, _property);\n         }\n-        _deserializers.put(typeId, deser);\n+        if (deser != null) {\n+            _deserializers.put(typeId, deser);\n+        }\n     }\n     return deser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]