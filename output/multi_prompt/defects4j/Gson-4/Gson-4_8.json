[{"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string;\n    if (value instanceof Double && ((Double) value).isInfinite()) {\n        string = \"null\";\n    } else if (value instanceof Float && ((Float) value).isInfinite()) {\n        string = \"null\";\n    } else if (value instanceof Double && ((Double) value).isNaN()) {\n        string = \"null\";\n    } else if (value instanceof Float && ((Float) value).isNaN()) {\n        string = \"null\";\n    } else {\n        string = value.toString();\n        if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n        }\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -3,9 +3,20 @@\n         return nullValue();\n     }\n     writeDeferredName();\n-    String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n-        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    String string;\n+    if (value instanceof Double && ((Double) value).isInfinite()) {\n+        string = \"null\";\n+    } else if (value instanceof Float && ((Float) value).isInfinite()) {\n+        string = \"null\";\n+    } else if (value instanceof Double && ((Double) value).isNaN()) {\n+        string = \"null\";\n+    } else if (value instanceof Float && ((Float) value).isNaN()) {\n+        string = \"null\";\n+    } else {\n+        string = value.toString();\n+        if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n+            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+        }\n     }\n     beforeValue(false);\n     out.append(string);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string;\n    if (value instanceof Double && ((Double) value).isInfinite() || ((Double) value).isNaN()\n            || value instanceof Float && ((Float) value).isInfinite() || ((Float) value).isNaN()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    string = value.toString();\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -3,10 +3,12 @@\n         return nullValue();\n     }\n     writeDeferredName();\n-    String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n+    String string;\n+    if (value instanceof Double && ((Double) value).isInfinite() || ((Double) value).isNaN()\n+            || value instanceof Float && ((Float) value).isInfinite() || ((Float) value).isNaN()) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n+    string = value.toString();\n     beforeValue(false);\n     out.append(string);\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string = value.toString();\n    if (!lenient && (Double.isInfinite(value.doubleValue()) || Double.isNaN(value.doubleValue()))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -4,7 +4,7 @@\n     }\n     writeDeferredName();\n     String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n+    if (!lenient && (Double.isInfinite(value.doubleValue()) || Double.isNaN(value.doubleValue()))) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n     beforeValue(false);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    // Change to BigDecimal to check for Infinity and NaN\n    BigDecimal bigValue = new BigDecimal(value.toString());\n    if (!lenient && (bigValue.equals(BigDecimal.valueOf(Double.POSITIVE_INFINITY))\n                  || bigValue.equals(BigDecimal.valueOf(Double.NEGATIVE_INFINITY))\n                  || bigValue.equals(BigDecimal.valueOf(Double.NaN)))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(bigValue.toString()); // Output the BigDecimal instead of the original string value\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -3,11 +3,14 @@\n         return nullValue();\n     }\n     writeDeferredName();\n-    String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n+    // Change to BigDecimal to check for Infinity and NaN\n+    BigDecimal bigValue = new BigDecimal(value.toString());\n+    if (!lenient && (bigValue.equals(BigDecimal.valueOf(Double.POSITIVE_INFINITY))\n+                  || bigValue.equals(BigDecimal.valueOf(Double.NEGATIVE_INFINITY))\n+                  || bigValue.equals(BigDecimal.valueOf(Double.NaN)))) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n     beforeValue(false);\n-    out.append(string);\n+    out.append(bigValue.toString()); // Output the BigDecimal instead of the original string value\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string = value.toString();\n    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    if (string.endsWith(\".0\")) {\n        string = string.substring(0, string.length() - 2);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -7,6 +7,9 @@\n     if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n+    if (string.endsWith(\".0\")) {\n+        string = string.substring(0, string.length() - 2);\n+    }\n     beforeValue(false);\n     out.append(string);\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string = value.toString();\n    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\") || string.matches(\"-?\\\\d+\\\\.\\\\d+E-?\\\\d+\"))) {\n        // Add check for scientific notation\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -4,7 +4,8 @@\n     }\n     writeDeferredName();\n     String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n+    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\") || string.matches(\"-?\\\\d+\\\\.\\\\d+E-?\\\\d+\"))) {\n+        // Add check for scientific notation\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n     beforeValue(false);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string;\n    if (value instanceof Double || value instanceof Float) {\n        // check for special floating point values\n        double doubleValue = value.doubleValue();\n        if (Double.isNaN(doubleValue) || Double.isInfinite(doubleValue)) {\n            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n        }\n        string = Double.toString(doubleValue);\n    } else {\n        string = value.toString();\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -3,9 +3,16 @@\n         return nullValue();\n     }\n     writeDeferredName();\n-    String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n-        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    String string;\n+    if (value instanceof Double || value instanceof Float) {\n+        // check for special floating point values\n+        double doubleValue = value.doubleValue();\n+        if (Double.isNaN(doubleValue) || Double.isInfinite(doubleValue)) {\n+            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+        }\n+        string = Double.toString(doubleValue);\n+    } else {\n+        string = value.toString();\n     }\n     beforeValue(false);\n     out.append(string);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string = value.toString();\n    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    if (value instanceof Float && ((Float) value).isNaN()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    if (value instanceof Double && ((Double) value).isNaN()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -7,6 +7,12 @@\n     if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n+    if (value instanceof Float && ((Float) value).isNaN()) {\n+        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    }\n+    if (value instanceof Double && ((Double) value).isNaN()) {\n+        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    }\n     beforeValue(false);\n     out.append(string);\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string;\n    if (value instanceof Double || value instanceof Float) {\n        if (Double.isNaN(value.doubleValue()) || Double.isInfinite(value.doubleValue())) {\n            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n        }\n        string = DecimalFormat.getInstance(Locale.US).format(value);\n        if (string.indexOf('.') > 0 && string.indexOf('E') < 0 && string.indexOf('e') < 0) {\n            while (string.endsWith(\"0\")) {\n                string = string.substring(0, string.length() - 1);\n            }\n            if (string.endsWith(\".\")) {\n                string = string.substring(0, string.length() - 1);\n            }\n        }\n    } else {\n        string = value.toString();\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -3,9 +3,22 @@\n         return nullValue();\n     }\n     writeDeferredName();\n-    String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n-        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    String string;\n+    if (value instanceof Double || value instanceof Float) {\n+        if (Double.isNaN(value.doubleValue()) || Double.isInfinite(value.doubleValue())) {\n+            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+        }\n+        string = DecimalFormat.getInstance(Locale.US).format(value);\n+        if (string.indexOf('.') > 0 && string.indexOf('E') < 0 && string.indexOf('e') < 0) {\n+            while (string.endsWith(\"0\")) {\n+                string = string.substring(0, string.length() - 1);\n+            }\n+            if (string.endsWith(\".\")) {\n+                string = string.substring(0, string.length() - 1);\n+            }\n+        }\n+    } else {\n+        string = value.toString();\n     }\n     beforeValue(false);\n     out.append(string);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    if (value instanceof Double && ((Double) value).isInfinite()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    if (value instanceof Float && ((Float) value).isInfinite()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    if (value instanceof Double && ((Double) value).isNaN()) {\n        throw new IllegalArgumentException(\"Numeric value must not be NaN\");\n    }\n    if (value instanceof Float && ((Float) value).isNaN()) {\n        throw new IllegalArgumentException(\"Numeric value must not be NaN\");\n    }\n    beforeValue(false);\n    out.append(value.toString());\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -3,11 +3,19 @@\n         return nullValue();\n     }\n     writeDeferredName();\n-    String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n+    if (value instanceof Double && ((Double) value).isInfinite()) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n+    if (value instanceof Float && ((Float) value).isInfinite()) {\n+        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    }\n+    if (value instanceof Double && ((Double) value).isNaN()) {\n+        throw new IllegalArgumentException(\"Numeric value must not be NaN\");\n+    }\n+    if (value instanceof Float && ((Float) value).isNaN()) {\n+        throw new IllegalArgumentException(\"Numeric value must not be NaN\");\n+    }\n     beforeValue(false);\n-    out.append(string);\n+    out.append(value.toString());\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string;\n    if (value instanceof Double || value instanceof Float) {\n        if (value.doubleValue() == Double.POSITIVE_INFINITY || value.doubleValue() == Double.NEGATIVE_INFINITY || Double.isNaN(value.doubleValue())) {\n            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n        }\n        string = Double.toString(value.doubleValue());\n    } else {\n        string = value.toString();\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -3,9 +3,14 @@\n         return nullValue();\n     }\n     writeDeferredName();\n-    String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n-        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    String string;\n+    if (value instanceof Double || value instanceof Float) {\n+        if (value.doubleValue() == Double.POSITIVE_INFINITY || value.doubleValue() == Double.NEGATIVE_INFINITY || Double.isNaN(value.doubleValue())) {\n+            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+        }\n+        string = Double.toString(value.doubleValue());\n+    } else {\n+        string = value.toString();\n     }\n     beforeValue(false);\n     out.append(string);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string = value.toString();\n    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\") || \n        string.toLowerCase().equals(\"nan\") || string.toLowerCase().equals(\"-nan(ind)\") || \n        string.toLowerCase().equals(\"nan(ind)\"))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -4,7 +4,9 @@\n     }\n     writeDeferredName();\n     String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n+    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\") || \n+        string.toLowerCase().equals(\"nan\") || string.toLowerCase().equals(\"-nan(ind)\") || \n+        string.toLowerCase().equals(\"nan(ind)\"))) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n     beforeValue(false);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string = value.toString();\n    if (!lenient) {\n        if (Double.isNaN(value.doubleValue()) || Double.isInfinite(value.doubleValue())) {\n                throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n        }\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -4,8 +4,10 @@\n     }\n     writeDeferredName();\n     String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n-        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    if (!lenient) {\n+        if (Double.isNaN(value.doubleValue()) || Double.isInfinite(value.doubleValue())) {\n+                throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+        }\n     }\n     beforeValue(false);\n     out.append(string);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string = value.toString();\n    if (!lenient) {\n        if (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\")) {\n            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n        }\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -4,8 +4,10 @@\n     }\n     writeDeferredName();\n     String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n-        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    if (!lenient) {\n+        if (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\")) {\n+            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+        }\n     }\n     beforeValue(false);\n     out.append(string);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string = value.toString();\n    double doubleValue = value.doubleValue();\n    if (!lenient && (Double.isNaN(doubleValue) || Double.isInfinite(doubleValue))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -4,7 +4,8 @@\n     }\n     writeDeferredName();\n     String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n+    double doubleValue = value.doubleValue();\n+    if (!lenient && (Double.isNaN(doubleValue) || Double.isInfinite(doubleValue))) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n     beforeValue(false);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string = value.toString();\n    if (!lenient) {\n        // Check if the value is finite\n        if (value instanceof Double && (((Double)value).isInfinite() || ((Double)value).isNaN())) {\n            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n        } else if (value instanceof Float && (((Float)value).isInfinite() || ((Float)value).isNaN())) {\n            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n        }\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -4,8 +4,13 @@\n     }\n     writeDeferredName();\n     String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n-        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    if (!lenient) {\n+        // Check if the value is finite\n+        if (value instanceof Double && (((Double)value).isInfinite() || ((Double)value).isNaN())) {\n+            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+        } else if (value instanceof Float && (((Float)value).isInfinite() || ((Float)value).isNaN())) {\n+            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+        }\n     }\n     beforeValue(false);\n     out.append(string);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string;\n    if(value instanceof Double || value instanceof Float){\n        if(((Double)value).isInfinite() || ((Double)value).isNaN()){\n            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n        }\n        string = Double.toString(((Double)value));\n    }else{\n        string = value.toString();\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -3,9 +3,14 @@\n         return nullValue();\n     }\n     writeDeferredName();\n-    String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n-        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    String string;\n+    if(value instanceof Double || value instanceof Float){\n+        if(((Double)value).isInfinite() || ((Double)value).isNaN()){\n+            throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+        }\n+        string = Double.toString(((Double)value));\n+    }else{\n+        string = value.toString();\n     }\n     beforeValue(false);\n     out.append(string);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    if (value instanceof Double && ((Double)value).isInfinite()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    if (value instanceof Float && ((Float)value).isInfinite()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    if (value instanceof Double && ((Double)value).isNaN()) {\n        throw new IllegalArgumentException(\"Numeric value must not be NaN\");\n    }\n    if (value instanceof Float && ((Float)value).isNaN()) {\n        throw new IllegalArgumentException(\"Numeric value must not be NaN\");\n    }\n    beforeValue(false);\n    out.append(value.toString());\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -3,11 +3,19 @@\n         return nullValue();\n     }\n     writeDeferredName();\n-    String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n+    if (value instanceof Double && ((Double)value).isInfinite()) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n+    if (value instanceof Float && ((Float)value).isInfinite()) {\n+        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    }\n+    if (value instanceof Double && ((Double)value).isNaN()) {\n+        throw new IllegalArgumentException(\"Numeric value must not be NaN\");\n+    }\n+    if (value instanceof Float && ((Float)value).isNaN()) {\n+        throw new IllegalArgumentException(\"Numeric value must not be NaN\");\n+    }\n     beforeValue(false);\n-    out.append(string);\n+    out.append(value.toString());\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    if (value instanceof Double && ((Double) value).isNaN()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was NaN\");\n    }\n    if (value instanceof Double && ((Double) value).isInfinite()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    if (value instanceof Float && ((Float) value).isNaN()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was NaN\");\n    }\n    if (value instanceof Float && ((Float) value).isInfinite()) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    String string = value.toString();\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -3,10 +3,19 @@\n         return nullValue();\n     }\n     writeDeferredName();\n-    String string = value.toString();\n-    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n+    if (value instanceof Double && ((Double) value).isNaN()) {\n+        throw new IllegalArgumentException(\"Numeric values must be finite, but was NaN\");\n+    }\n+    if (value instanceof Double && ((Double) value).isInfinite()) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n+    if (value instanceof Float && ((Float) value).isNaN()) {\n+        throw new IllegalArgumentException(\"Numeric values must be finite, but was NaN\");\n+    }\n+    if (value instanceof Float && ((Float) value).isInfinite()) {\n+        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    }\n+    String string = value.toString();\n     beforeValue(false);\n     out.append(string);\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string;\n    if (value instanceof Double || value instanceof Float) {\n        string = Gson.numberToString(value.doubleValue());\n    } else {\n        string = value.toString();\n    }\n    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value7\n+++ com/google/gson/stream/JsonWriter.java@value7\n@@ -3,7 +3,12 @@\n         return nullValue();\n     }\n     writeDeferredName();\n-    String string = value.toString();\n+    String string;\n+    if (value instanceof Double || value instanceof Float) {\n+        string = Gson.numberToString(value.doubleValue());\n+    } else {\n+        string = value.toString();\n+    }\n     if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]