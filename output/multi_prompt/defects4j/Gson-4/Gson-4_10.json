[{"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            break; // added break statement\n        case EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -5,26 +5,22 @@\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+            break; // added break statement\n+        case EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            break;\n        case // first in document\n        EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case // first in array\n        EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case // another in array\n        NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case // value for name\n        DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -5,7 +5,7 @@\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n+            break;\n         case // first in document\n         EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            // fall-through intentionally removed to fix the bug\n        case EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -5,26 +5,22 @@\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+            // fall-through intentionally removed to fix the bug\n+        case EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            // fall-through\n        case EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -5,26 +5,22 @@\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+            // fall-through\n+        case EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            break; // break added to avoid fall-through\n        case EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -5,26 +5,22 @@\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+            break; // break added to avoid fall-through\n+        case EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            break; // fix: add break statement to prevent fall-through\n        case EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -5,26 +5,22 @@\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+            break; // fix: add break statement to prevent fall-through\n+        case EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    int context = peek();\n    switch(context) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            break;\n        // fall-through\n        case EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -1,30 +1,27 @@\n @SuppressWarnings(\"fallthrough\")\n private void beforeValue(boolean root) throws IOException {\n-    switch(peek()) {\n+    int context = peek();\n+    switch(context) {\n         case NONEMPTY_DOCUMENT:\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n+            break;\n         // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+        case EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n-            newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            // fall-through\n        case EMPTY_DOCUMENT: \n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -5,26 +5,22 @@\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+            // fall-through\n+        case EMPTY_DOCUMENT: \n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            break; // fix: break after throwing exception\n        case EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -5,26 +5,22 @@\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+            break; // fix: break after throwing exception\n+        case EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            break; // fix: add break statement\n        case EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -5,26 +5,22 @@\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+            break; // fix: add break statement\n+        case EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    int peek = peek();\n    \n    switch(peek) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            // fall-through\n        case EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -1,30 +1,28 @@\n @SuppressWarnings(\"fallthrough\")\n private void beforeValue(boolean root) throws IOException {\n-    switch(peek()) {\n+    int peek = peek();\n+    \n+    switch(peek) {\n         case NONEMPTY_DOCUMENT:\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+            // fall-through\n+        case EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            // fall-through intentional\n        case EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -5,26 +5,22 @@\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+            // fall-through intentional\n+        case EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n            break; // need to break to avoid fall-through\n        case EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@beforeValue\n+++ com/google/gson/stream/JsonWriter.java@beforeValue\n@@ -5,26 +5,22 @@\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n-        // fall-through\n-        case // first in document\n-        EMPTY_DOCUMENT:\n+            break; // need to break to avoid fall-through\n+        case EMPTY_DOCUMENT:\n             if (!lenient && !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n-        case // first in array\n-        EMPTY_ARRAY:\n+        case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n-        case // another in array\n-        NONEMPTY_ARRAY:\n+        case NONEMPTY_ARRAY:\n             out.append(',');\n             newline();\n             break;\n-        case // value for name\n-        DANGLING_NAME:\n+        case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n", "finish_reason": "stop", "valid": false, "num": 1}]