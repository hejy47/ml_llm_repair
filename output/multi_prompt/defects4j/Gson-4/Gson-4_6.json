[{"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    out.value(value); // use the out.value() method instead of appending the double as a string\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -4,6 +4,6 @@\n     }\n     writeDeferredName();\n     beforeValue(false);\n-    out.append(Double.toString(value));\n+    out.value(value); // use the out.value() method instead of appending the double as a string\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        // Fixed: Throw a JsonIOException instead of IllegalArgumentException to reflect that it is a JSON-related error.\n        throw new JsonIOException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    out.append(Double.toString(value));\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -1,6 +1,7 @@\n public JsonWriter value(double value) throws IOException {\n     if (Double.isNaN(value) || Double.isInfinite(value)) {\n-        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+        // Fixed: Throw a JsonIOException instead of IllegalArgumentException to reflect that it is a JSON-related error.\n+        throw new JsonIOException(\"Numeric values must be finite, but was \" + value);\n     }\n     writeDeferredName();\n     beforeValue(false);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    out.value(value);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -4,6 +4,6 @@\n     }\n     writeDeferredName();\n     beforeValue(false);\n-    out.append(Double.toString(value));\n+    out.value(value);\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 6}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    out.value(value); // Changed to use out.value() method instead of appending string\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -4,6 +4,6 @@\n     }\n     writeDeferredName();\n     beforeValue(false);\n-    out.append(Double.toString(value));\n+    out.value(value); // Changed to use out.value() method instead of appending string\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    if (this.lenient || (!Double.isNaN(value) && !Double.isInfinite(value))) {\n        writeDeferredName();\n        beforeValue(false);\n        out.append(Double.toString(value));\n        return this;\n    } else {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -2,8 +2,12 @@\n     if (Double.isNaN(value) || Double.isInfinite(value)) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n-    writeDeferredName();\n-    beforeValue(false);\n-    out.append(Double.toString(value));\n-    return this;\n+    if (this.lenient || (!Double.isNaN(value) && !Double.isInfinite(value))) {\n+        writeDeferredName();\n+        beforeValue(false);\n+        out.append(Double.toString(value));\n+        return this;\n+    } else {\n+        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue();\n    out.value(value);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -3,7 +3,7 @@\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n     writeDeferredName();\n-    beforeValue(false);\n-    out.append(Double.toString(value));\n+    beforeValue();\n+    out.value(value);\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    } else { // add else statement to fix issue\n        writeDeferredName();\n        beforeValue(false);\n        out.append(Double.toString(value));\n    }\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -1,9 +1,10 @@\n public JsonWriter value(double value) throws IOException {\n     if (Double.isNaN(value) || Double.isInfinite(value)) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    } else { // add else statement to fix issue\n+        writeDeferredName();\n+        beforeValue(false);\n+        out.append(Double.toString(value));\n     }\n-    writeDeferredName();\n-    beforeValue(false);\n-    out.append(Double.toString(value));\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    String doubleAsString = new BigDecimal(value).stripTrailingZeros().toPlainString();\n    out.append(doubleAsString);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -4,6 +4,7 @@\n     }\n     writeDeferredName();\n     beforeValue(false);\n-    out.append(Double.toString(value));\n+    String doubleAsString = new BigDecimal(value).stripTrailingZeros().toPlainString();\n+    out.append(doubleAsString);\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    out.value(value); // Use out.value() instead of appending value as string\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -4,6 +4,6 @@\n     }\n     writeDeferredName();\n     beforeValue(false);\n-    out.append(Double.toString(value));\n+    out.value(value); // Use out.value() instead of appending value as string\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    String doubleString = String.format(Locale.US, \"%.16g\", value);\n    out.append(doubleString);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -4,6 +4,7 @@\n     }\n     writeDeferredName();\n     beforeValue(false);\n-    out.append(Double.toString(value));\n+    String doubleString = String.format(Locale.US, \"%.16g\", value);\n+    out.append(doubleString);\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    // Fix: Use String.format() to ensure proper formatting of the double value\n    out.append(String.format(Locale.US, \"%.1f\", value));\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -4,6 +4,7 @@\n     }\n     writeDeferredName();\n     beforeValue(false);\n-    out.append(Double.toString(value));\n+    // Fix: Use String.format() to ensure proper formatting of the double value\n+    out.append(String.format(Locale.US, \"%.1f\", value));\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    // Use String.format() to ensure locale-independent formatting of double value\n    out.append(String.format(Locale.US, \"%.1f\", value));\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -4,6 +4,7 @@\n     }\n     writeDeferredName();\n     beforeValue(false);\n-    out.append(Double.toString(value));\n+    // Use String.format() to ensure locale-independent formatting of double value\n+    out.append(String.format(Locale.US, \"%.1f\", value));\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    // Use NumberUtils method to avoid precision issues when converting double to String\n    out.append(NumberUtils.toString(value));\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -4,6 +4,7 @@\n     }\n     writeDeferredName();\n     beforeValue(false);\n-    out.append(Double.toString(value));\n+    // Use NumberUtils method to avoid precision issues when converting double to String\n+    out.append(NumberUtils.toString(value));\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    String stringVal = Double.toString(value);\n    if (stringVal.endsWith(\".0\")) {\n        stringVal = stringVal.substring(0, stringVal.length() - 2);\n    }\n    out.append(stringVal);\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -4,6 +4,10 @@\n     }\n     writeDeferredName();\n     beforeValue(false);\n-    out.append(Double.toString(value));\n+    String stringVal = Double.toString(value);\n+    if (stringVal.endsWith(\".0\")) {\n+        stringVal = stringVal.substring(0, stringVal.length() - 2);\n+    }\n+    out.append(stringVal);\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    // Use a DecimalFormat object to ensure locale-independent formatting\n    DecimalFormat df = new DecimalFormat(\"0\", DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n    df.setMaximumFractionDigits(340); // Set the maximum number of decimal digits\n    out.append(df.format(value));\n    return this;\n}", "diff": "--- com/google/gson/stream/JsonWriter.java@value5\n+++ com/google/gson/stream/JsonWriter.java@value5\n@@ -4,6 +4,9 @@\n     }\n     writeDeferredName();\n     beforeValue(false);\n-    out.append(Double.toString(value));\n+    // Use a DecimalFormat object to ensure locale-independent formatting\n+    DecimalFormat df = new DecimalFormat(\"0\", DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n+    df.setMaximumFractionDigits(340); // Set the maximum number of decimal digits\n+    out.append(df.format(value));\n     return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]