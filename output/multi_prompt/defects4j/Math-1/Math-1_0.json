[{"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Long.MAX_VALUE; // changed from Integer.MAX_VALUE\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((p2 > overflow) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            throw new FractionConversionException(value, p2, q2);\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -1,5 +1,5 @@\n private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n-    long overflow = Integer.MAX_VALUE;\n+    long overflow = Long.MAX_VALUE; // changed from Integer.MAX_VALUE\n     double r0 = value;\n     long a0 = (long) FastMath.floor(r0);\n     if (a0 > overflow) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Integer.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((p2 > overflow) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            throw new FractionConversionException(value, p2, q2);\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1; \n            // The value of r0 must be updated here to reflect the current value for a0\n            r0 = 1.0 / (r1 - a1);\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -37,8 +37,9 @@\n             p1 = p2;\n             q0 = q1;\n             q1 = q2;\n-            a0 = a1;\n-            r0 = r1;\n+            a0 = a1; \n+            // The value of r0 must be updated here to reflect the current value for a0\n+            r0 = 1.0 / (r1 - a1);\n         } else {\n             stop = true;\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    final long overflow = Integer.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        final long p2old = p2;\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((p2 > overflow) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            if (maxDenominator != Integer.MAX_VALUE) {\n                numerator = BigInteger.valueOf(p1);\n                denominator = BigInteger.valueOf(q1);\n                return;\n            } else {\n                throw new FractionConversionException(value, p2old, q2);\n            }\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    numerator = BigInteger.valueOf(p2);\n    denominator = BigInteger.valueOf(q2);\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -1,5 +1,5 @@\n private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n-    long overflow = Integer.MAX_VALUE;\n+    final long overflow = Integer.MAX_VALUE;\n     double r0 = value;\n     long a0 = (long) FastMath.floor(r0);\n     if (a0 > overflow) {\n@@ -24,12 +24,19 @@\n         ++n;\n         final double r1 = 1.0 / (r0 - a0);\n         final long a1 = (long) FastMath.floor(r1);\n+        final long p2old = p2;\n         p2 = (a1 * p1) + p0;\n         q2 = (a1 * q1) + q0;\n         if ((p2 > overflow) || (q2 > overflow)) {\n             // in maxDenominator mode, if the last fraction was very close to the actual value\n             // q2 may overflow in the next iteration; in this case return the last one.\n-            throw new FractionConversionException(value, p2, q2);\n+            if (maxDenominator != Integer.MAX_VALUE) {\n+                numerator = BigInteger.valueOf(p1);\n+                denominator = BigInteger.valueOf(q1);\n+                return;\n+            } else {\n+                throw new FractionConversionException(value, p2old, q2);\n+            }\n         }\n         final double convergent = (double) p2 / (double) q2;\n         if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n@@ -46,11 +53,6 @@\n     if (n >= maxIterations) {\n         throw new FractionConversionException(value, maxIterations);\n     }\n-    if (q2 < maxDenominator) {\n-        numerator = BigInteger.valueOf(p2);\n-        denominator = BigInteger.valueOf(q2);\n-    } else {\n-        numerator = BigInteger.valueOf(p1);\n-        denominator = BigInteger.valueOf(q1);\n-    }\n+    numerator = BigInteger.valueOf(p2);\n+    denominator = BigInteger.valueOf(q2);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Integer.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((p2 > overflow) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            if (q1 > maxDenominator) {\n                numerator = BigInteger.valueOf(p1);\n                denominator = BigInteger.valueOf(q1);\n            } else {\n                numerator = BigInteger.valueOf(p2);\n                denominator = BigInteger.valueOf(q2);\n            }\n            return;\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -29,7 +29,14 @@\n         if ((p2 > overflow) || (q2 > overflow)) {\n             // in maxDenominator mode, if the last fraction was very close to the actual value\n             // q2 may overflow in the next iteration; in this case return the last one.\n-            throw new FractionConversionException(value, p2, q2);\n+            if (q1 > maxDenominator) {\n+                numerator = BigInteger.valueOf(p1);\n+                denominator = BigInteger.valueOf(q1);\n+            } else {\n+                numerator = BigInteger.valueOf(p2);\n+                denominator = BigInteger.valueOf(q2);\n+            }\n+            return;\n         }\n         final double convergent = (double) p2 / (double) q2;\n         if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Long.MAX_VALUE; // Changed from Integer.MAX_VALUE to Long.MAX_VALUE\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n\n        // Check for overflow of numerator or denominator\n        if ((p2 > overflow) || (q2 > overflow)) {\n            if(maxDenominator >= q1) { // Check if maxDenominator is smaller than q1\n                numerator = BigInteger.valueOf(p1);\n                denominator = BigInteger.valueOf(q1);\n                return;\n            }\n            throw new FractionConversionException(value, p2, q2);\n        }\n\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -1,5 +1,5 @@\n private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n-    long overflow = Integer.MAX_VALUE;\n+    long overflow = Long.MAX_VALUE; // Changed from Integer.MAX_VALUE to Long.MAX_VALUE\n     double r0 = value;\n     long a0 = (long) FastMath.floor(r0);\n     if (a0 > overflow) {\n@@ -26,11 +26,17 @@\n         final long a1 = (long) FastMath.floor(r1);\n         p2 = (a1 * p1) + p0;\n         q2 = (a1 * q1) + q0;\n+\n+        // Check for overflow of numerator or denominator\n         if ((p2 > overflow) || (q2 > overflow)) {\n-            // in maxDenominator mode, if the last fraction was very close to the actual value\n-            // q2 may overflow in the next iteration; in this case return the last one.\n+            if(maxDenominator >= q1) { // Check if maxDenominator is smaller than q1\n+                numerator = BigInteger.valueOf(p1);\n+                denominator = BigInteger.valueOf(q1);\n+                return;\n+            }\n             throw new FractionConversionException(value, p2, q2);\n         }\n+\n         final double convergent = (double) p2 / (double) q2;\n         if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n             p0 = p1;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "To fix the Math project's buggy function, we need to change the line:\n\nlong overflow = Integer.MAX_VALUE;\n\nto:\n\nlong overflow = Long.MAX_VALUE;\n\nThis will ensure that we're not accidentally overflowing when dealing with large values.", "diff": "", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Long.MAX_VALUE; // fix overflow issue\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((p2 > overflow) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            if (q1 >= maxDenominator) {\n                numerator = BigInteger.valueOf(p1);\n                denominator = BigInteger.valueOf(q1);\n                return;\n            } else {\n                throw new FractionConversionException(value, p2, q2);\n            }\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    numerator = BigInteger.valueOf(p1);\n    denominator = BigInteger.valueOf(q1);\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -1,5 +1,5 @@\n private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n-    long overflow = Integer.MAX_VALUE;\n+    long overflow = Long.MAX_VALUE; // fix overflow issue\n     double r0 = value;\n     long a0 = (long) FastMath.floor(r0);\n     if (a0 > overflow) {\n@@ -29,7 +29,13 @@\n         if ((p2 > overflow) || (q2 > overflow)) {\n             // in maxDenominator mode, if the last fraction was very close to the actual value\n             // q2 may overflow in the next iteration; in this case return the last one.\n-            throw new FractionConversionException(value, p2, q2);\n+            if (q1 >= maxDenominator) {\n+                numerator = BigInteger.valueOf(p1);\n+                denominator = BigInteger.valueOf(q1);\n+                return;\n+            } else {\n+                throw new FractionConversionException(value, p2, q2);\n+            }\n         }\n         final double convergent = (double) p2 / (double) q2;\n         if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n@@ -46,11 +52,6 @@\n     if (n >= maxIterations) {\n         throw new FractionConversionException(value, maxIterations);\n     }\n-    if (q2 < maxDenominator) {\n-        numerator = BigInteger.valueOf(p2);\n-        denominator = BigInteger.valueOf(q2);\n-    } else {\n-        numerator = BigInteger.valueOf(p1);\n-        denominator = BigInteger.valueOf(q1);\n-    }\n+    numerator = BigInteger.valueOf(p1);\n+    denominator = BigInteger.valueOf(q1);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Integer.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2;\n    long q2;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((q2 <= 0) || (p2 > overflow / q2) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            throw new FractionConversionException(value, p2, q2);\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -16,8 +16,8 @@\n     long q0 = 0;\n     long p1 = a0;\n     long q1 = 1;\n-    long p2 = 0;\n-    long q2 = 1;\n+    long p2;\n+    long q2;\n     int n = 0;\n     boolean stop = false;\n     do {\n@@ -26,7 +26,7 @@\n         final long a1 = (long) FastMath.floor(r1);\n         p2 = (a1 * p1) + p0;\n         q2 = (a1 * q1) + q0;\n-        if ((p2 > overflow) || (q2 > overflow)) {\n+        if ((q2 <= 0) || (p2 > overflow / q2) || (q2 > overflow)) {\n             // in maxDenominator mode, if the last fraction was very close to the actual value\n             // q2 may overflow in the next iteration; in this case return the last one.\n             throw new FractionConversionException(value, p2, q2);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    BigInteger overflow = BigInteger.valueOf(Integer.MAX_VALUE);\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (BigInteger.valueOf(a0).compareTo(overflow) > 0) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    BigInteger p0 = BigInteger.ONE;\n    BigInteger q0 = BigInteger.ZERO;\n    BigInteger p1 = BigInteger.valueOf(a0);\n    BigInteger q1 = BigInteger.ONE;\n    BigInteger p2 = BigInteger.ZERO;\n    BigInteger q2 = BigInteger.ONE;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = BigInteger.valueOf(a1).multiply(p1).add(p0);\n        q2 = BigInteger.valueOf(a1).multiply(q1).add(q0);\n        if (p2.compareTo(overflow) > 0 || q2.compareTo(overflow) > 0) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            throw new FractionConversionException(value, p2, q2);\n        }\n        final double convergent = p2.doubleValue() / q2.doubleValue();\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2.longValue() < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2.longValue() < maxDenominator) {\n        numerator = p2;\n        denominator = q2;\n    } else {\n        numerator = p1;\n        denominator = q1;\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -1,8 +1,8 @@\n private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n-    long overflow = Integer.MAX_VALUE;\n+    BigInteger overflow = BigInteger.valueOf(Integer.MAX_VALUE);\n     double r0 = value;\n     long a0 = (long) FastMath.floor(r0);\n-    if (a0 > overflow) {\n+    if (BigInteger.valueOf(a0).compareTo(overflow) > 0) {\n         throw new FractionConversionException(value, a0, 1l);\n     }\n     // check for (almost) integer arguments, which should not go\n@@ -12,27 +12,27 @@\n         denominator = BigInteger.ONE;\n         return;\n     }\n-    long p0 = 1;\n-    long q0 = 0;\n-    long p1 = a0;\n-    long q1 = 1;\n-    long p2 = 0;\n-    long q2 = 1;\n+    BigInteger p0 = BigInteger.ONE;\n+    BigInteger q0 = BigInteger.ZERO;\n+    BigInteger p1 = BigInteger.valueOf(a0);\n+    BigInteger q1 = BigInteger.ONE;\n+    BigInteger p2 = BigInteger.ZERO;\n+    BigInteger q2 = BigInteger.ONE;\n     int n = 0;\n     boolean stop = false;\n     do {\n         ++n;\n         final double r1 = 1.0 / (r0 - a0);\n         final long a1 = (long) FastMath.floor(r1);\n-        p2 = (a1 * p1) + p0;\n-        q2 = (a1 * q1) + q0;\n-        if ((p2 > overflow) || (q2 > overflow)) {\n+        p2 = BigInteger.valueOf(a1).multiply(p1).add(p0);\n+        q2 = BigInteger.valueOf(a1).multiply(q1).add(q0);\n+        if (p2.compareTo(overflow) > 0 || q2.compareTo(overflow) > 0) {\n             // in maxDenominator mode, if the last fraction was very close to the actual value\n             // q2 may overflow in the next iteration; in this case return the last one.\n             throw new FractionConversionException(value, p2, q2);\n         }\n-        final double convergent = (double) p2 / (double) q2;\n-        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n+        final double convergent = p2.doubleValue() / q2.doubleValue();\n+        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2.longValue() < maxDenominator)) {\n             p0 = p1;\n             p1 = p2;\n             q0 = q1;\n@@ -46,11 +46,11 @@\n     if (n >= maxIterations) {\n         throw new FractionConversionException(value, maxIterations);\n     }\n-    if (q2 < maxDenominator) {\n-        numerator = BigInteger.valueOf(p2);\n-        denominator = BigInteger.valueOf(q2);\n+    if (q2.longValue() < maxDenominator) {\n+        numerator = p2;\n+        denominator = q2;\n     } else {\n-        numerator = BigInteger.valueOf(p1);\n-        denominator = BigInteger.valueOf(q1);\n+        numerator = p1;\n+        denominator = q1;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    double overflow = Long.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((p2 > overflow) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            throw new FractionConversionException(value, p2, q2);\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -1,5 +1,5 @@\n private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n-    long overflow = Integer.MAX_VALUE;\n+    double overflow = Long.MAX_VALUE;\n     double r0 = value;\n     long a0 = (long) FastMath.floor(r0);\n     if (a0 > overflow) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Integer.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((p2 > overflow) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            throw new FractionConversionException(value, p2, q2);\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2 <= maxDenominator) { // < changed to <=\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -46,7 +46,7 @@\n     if (n >= maxIterations) {\n         throw new FractionConversionException(value, maxIterations);\n     }\n-    if (q2 < maxDenominator) {\n+    if (q2 <= maxDenominator) { // < changed to <=\n         numerator = BigInteger.valueOf(p2);\n         denominator = BigInteger.valueOf(q2);\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Integer.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((p2 > overflow) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            throw new FractionConversionException(value, p2, q2);\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, n);\n    }\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -44,7 +44,7 @@\n         }\n     } while (!stop);\n     if (n >= maxIterations) {\n-        throw new FractionConversionException(value, maxIterations);\n+        throw new FractionConversionException(value, n);\n     }\n     if (q2 < maxDenominator) {\n         numerator = BigInteger.valueOf(p2);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Integer.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((q2 > overflow) || (q1 == maxDenominator)) {\n            // the algorithm is not able to continue\n            if (q1 != maxDenominator ||                    // No approximation was computed\n                FastMath.abs(r1*p1 - p2) > FastMath.abs(p1)*epsilon || // The approximation went bad\n                FastMath.abs(q2) == overflow || // We overflowed and there is no obvious reason\n                n == maxIterations)              // We have reached the maximum number of allowed iterations\n            {\n                throw new FractionConversionException(value, maxIterations);\n            }\n            numerator = BigInteger.valueOf(p1);\n            denominator = BigInteger.valueOf(q1);\n            return ;\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    numerator = BigInteger.valueOf(p2);\n    denominator = BigInteger.valueOf(q2);\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -26,13 +26,21 @@\n         final long a1 = (long) FastMath.floor(r1);\n         p2 = (a1 * p1) + p0;\n         q2 = (a1 * q1) + q0;\n-        if ((p2 > overflow) || (q2 > overflow)) {\n-            // in maxDenominator mode, if the last fraction was very close to the actual value\n-            // q2 may overflow in the next iteration; in this case return the last one.\n-            throw new FractionConversionException(value, p2, q2);\n+        if ((q2 > overflow) || (q1 == maxDenominator)) {\n+            // the algorithm is not able to continue\n+            if (q1 != maxDenominator ||                    // No approximation was computed\n+                FastMath.abs(r1*p1 - p2) > FastMath.abs(p1)*epsilon || // The approximation went bad\n+                FastMath.abs(q2) == overflow || // We overflowed and there is no obvious reason\n+                n == maxIterations)              // We have reached the maximum number of allowed iterations\n+            {\n+                throw new FractionConversionException(value, maxIterations);\n+            }\n+            numerator = BigInteger.valueOf(p1);\n+            denominator = BigInteger.valueOf(q1);\n+            return ;\n         }\n         final double convergent = (double) p2 / (double) q2;\n-        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n+        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon)) {\n             p0 = p1;\n             p1 = p2;\n             q0 = q1;\n@@ -43,14 +51,6 @@\n             stop = true;\n         }\n     } while (!stop);\n-    if (n >= maxIterations) {\n-        throw new FractionConversionException(value, maxIterations);\n-    }\n-    if (q2 < maxDenominator) {\n-        numerator = BigInteger.valueOf(p2);\n-        denominator = BigInteger.valueOf(q2);\n-    } else {\n-        numerator = BigInteger.valueOf(p1);\n-        denominator = BigInteger.valueOf(q1);\n-    }\n+    numerator = BigInteger.valueOf(p2);\n+    denominator = BigInteger.valueOf(q2);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Integer.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = a1 * p1 + p0;\n        q2 = a1 * q1 + q0;\n        if ((p2 > overflow) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            if (q1 < maxDenominator) {\n                numerator = BigInteger.valueOf(p1);\n                denominator = BigInteger.valueOf(q1);\n            } else {\n                numerator = BigInteger.valueOf(p0);\n                denominator = BigInteger.valueOf(q0);\n            }\n            return;\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -24,12 +24,19 @@\n         ++n;\n         final double r1 = 1.0 / (r0 - a0);\n         final long a1 = (long) FastMath.floor(r1);\n-        p2 = (a1 * p1) + p0;\n-        q2 = (a1 * q1) + q0;\n+        p2 = a1 * p1 + p0;\n+        q2 = a1 * q1 + q0;\n         if ((p2 > overflow) || (q2 > overflow)) {\n             // in maxDenominator mode, if the last fraction was very close to the actual value\n             // q2 may overflow in the next iteration; in this case return the last one.\n-            throw new FractionConversionException(value, p2, q2);\n+            if (q1 < maxDenominator) {\n+                numerator = BigInteger.valueOf(p1);\n+                denominator = BigInteger.valueOf(q1);\n+            } else {\n+                numerator = BigInteger.valueOf(p0);\n+                denominator = BigInteger.valueOf(q0);\n+            }\n+            return;\n         }\n         final double convergent = (double) p2 / (double) q2;\n         if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n@@ -43,9 +50,6 @@\n             stop = true;\n         }\n     } while (!stop);\n-    if (n >= maxIterations) {\n-        throw new FractionConversionException(value, maxIterations);\n-    }\n     if (q2 < maxDenominator) {\n         numerator = BigInteger.valueOf(p2);\n         denominator = BigInteger.valueOf(q2);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Integer.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if (((double) p2 / (double) q2) - value > 0 && n == 1) {\n            numerator = BigInteger.valueOf(a0);\n            denominator = BigInteger.ONE;\n            return;\n        }\n        if ((p2 > overflow) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            throw new FractionConversionException(value, p2, q2);\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -26,6 +26,11 @@\n         final long a1 = (long) FastMath.floor(r1);\n         p2 = (a1 * p1) + p0;\n         q2 = (a1 * q1) + q0;\n+        if (((double) p2 / (double) q2) - value > 0 && n == 1) {\n+            numerator = BigInteger.valueOf(a0);\n+            denominator = BigInteger.ONE;\n+            return;\n+        }\n         if ((p2 > overflow) || (q2 > overflow)) {\n             // in maxDenominator mode, if the last fraction was very close to the actual value\n             // q2 may overflow in the next iteration; in this case return the last one.\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Long.MAX_VALUE; // fixed to use Long.MAX_VALUE instead of Integer.MAX_VALUE\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((p2 > overflow) || (q2 > overflow)) {\n            // in maxDenominator mode, if the last fraction was very close to the actual value\n            // q2 may overflow in the next iteration; in this case return the last one.\n            throw new FractionConversionException(value, p2, q2);\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -1,5 +1,5 @@\n private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n-    long overflow = Integer.MAX_VALUE;\n+    long overflow = Long.MAX_VALUE; // fixed to use Long.MAX_VALUE instead of Integer.MAX_VALUE\n     double r0 = value;\n     long a0 = (long) FastMath.floor(r0);\n     if (a0 > overflow) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Long.MAX_VALUE; // changed to Long to avoid overflow\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if ((p2 > overflow) || (q2 > overflow)) {\n            throw new FractionConversionException(value, p2, q2);\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -1,5 +1,5 @@\n private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n-    long overflow = Integer.MAX_VALUE;\n+    long overflow = Long.MAX_VALUE; // changed to Long to avoid overflow\n     double r0 = value;\n     long a0 = (long) FastMath.floor(r0);\n     if (a0 > overflow) {\n@@ -27,8 +27,6 @@\n         p2 = (a1 * p1) + p0;\n         q2 = (a1 * q1) + q0;\n         if ((p2 > overflow) || (q2 > overflow)) {\n-            // in maxDenominator mode, if the last fraction was very close to the actual value\n-            // q2 may overflow in the next iteration; in this case return the last one.\n             throw new FractionConversionException(value, p2, q2);\n         }\n         final double convergent = (double) p2 / (double) q2;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations) throws FractionConversionException {\n    long overflow = Integer.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    if (a0 > overflow) {\n        throw new FractionConversionException(value, a0, 1l);\n    }\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        numerator = BigInteger.valueOf(a0);\n        denominator = BigInteger.ONE;\n        return;\n    }\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n    long p2 = 0;\n    long q2 = 1;\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        final double r1 = 1.0 / (r0 - a0);\n        final long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        if (((p2 > overflow) || (q2 > overflow)) && (maxIterations == 1)) {\n            // If maxIterations = 1 and either p2 or q2 overflow,\n            // return the best possible fraction\n            throw new FractionConversionException(value, p1, q1);\n        }\n        final double convergent = (double) p2 / (double) q2;\n        if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n    if (q2 < maxDenominator) {\n        numerator = BigInteger.valueOf(p2);\n        denominator = BigInteger.valueOf(q2);\n    } else {\n        numerator = BigInteger.valueOf(p1);\n        denominator = BigInteger.valueOf(q1);\n    }\n}", "diff": "--- org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n+++ org/apache/commons/math3/fraction/BigFraction.java@BigFraction\n@@ -26,10 +26,10 @@\n         final long a1 = (long) FastMath.floor(r1);\n         p2 = (a1 * p1) + p0;\n         q2 = (a1 * q1) + q0;\n-        if ((p2 > overflow) || (q2 > overflow)) {\n-            // in maxDenominator mode, if the last fraction was very close to the actual value\n-            // q2 may overflow in the next iteration; in this case return the last one.\n-            throw new FractionConversionException(value, p2, q2);\n+        if (((p2 > overflow) || (q2 > overflow)) && (maxIterations == 1)) {\n+            // If maxIterations = 1 and either p2 or q2 overflow,\n+            // return the best possible fraction\n+            throw new FractionConversionException(value, p1, q1);\n         }\n         final double convergent = (double) p2 / (double) q2;\n         if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) {\n", "finish_reason": "stop", "valid": false, "num": 1}]