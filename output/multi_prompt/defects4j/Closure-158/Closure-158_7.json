[{"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs);\n        // For contains --flagfile flag\n        if (!\"\".equals(flags.flag_file)) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n        return;\n    }\n    CommandLineConfig commandLineConfig = getCommandLineConfig();\n    commandLineConfig.setPrintTree(flags.print_tree)\n                    .setComputePhaseOrdering(flags.compute_phase_ordering)\n                    .setPrintAst(flags.print_ast)\n                    .setPrintPassGraph(flags.print_pass_graph)\n                    .setJscompDevMode(flags.jscomp_dev_mode)\n                    .setLoggingLevel(flags.logging_level)\n                    .setExterns(flags.externs)\n                    .setJs(flags.js)\n                    .setJsOutputFile(flags.js_output_file)\n                    .setModule(flags.module)\n                    .setVariableMapInputFile(flags.variable_map_input_file)\n                    .setPropertyMapInputFile(flags.property_map_input_file)\n                    .setVariableMapOutputFile(flags.variable_map_output_file)\n                    .setCreateNameMapFiles(flags.create_name_map_files)\n                    .setPropertyMapOutputFile(flags.property_map_output_file)\n                    .setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention())\n                    .setSummaryDetailLevel(flags.summary_detail_level)\n                    .setOutputWrapper(flags.output_wrapper)\n                    .setModuleWrapper(flags.module_wrapper)\n                    .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n                    .setCreateSourceMap(flags.create_source_map)\n                    .setJscompError(flags.jscomp_error)\n                    .setJscompWarning(flags.jscomp_warning)\n                    .setJscompOff(flags.jscomp_off)\n                    .setDefine(flags.define)\n                    .setCharset(flags.charset)\n                    .setManageClosureDependencies(flags.manage_closure_dependencies)\n                    .setClosureEntryPoints(flags.closure_entry_point)\n                    .setOutputManifest(flags.output_manifest)\n                    .setAcceptConstKeyword(flags.accept_const_keyword)\n                    .setLanguageIn(flags.language_in);\n    setCommandLineConfig(commandLineConfig);\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -3,9 +3,9 @@\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n-        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        parser.parseArgument(processedArgs);\n         // For contains --flagfile flag\n-        if (!flags.flag_file.equals(\"\")) {\n+        if (!\"\".equals(flags.flag_file)) {\n             processFlagFile(err);\n         }\n     } catch (CmdLineException e) {\n@@ -23,7 +23,39 @@\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid = false;\n         parser.printUsage(err);\n-    } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        return;\n     }\n+    CommandLineConfig commandLineConfig = getCommandLineConfig();\n+    commandLineConfig.setPrintTree(flags.print_tree)\n+                    .setComputePhaseOrdering(flags.compute_phase_ordering)\n+                    .setPrintAst(flags.print_ast)\n+                    .setPrintPassGraph(flags.print_pass_graph)\n+                    .setJscompDevMode(flags.jscomp_dev_mode)\n+                    .setLoggingLevel(flags.logging_level)\n+                    .setExterns(flags.externs)\n+                    .setJs(flags.js)\n+                    .setJsOutputFile(flags.js_output_file)\n+                    .setModule(flags.module)\n+                    .setVariableMapInputFile(flags.variable_map_input_file)\n+                    .setPropertyMapInputFile(flags.property_map_input_file)\n+                    .setVariableMapOutputFile(flags.variable_map_output_file)\n+                    .setCreateNameMapFiles(flags.create_name_map_files)\n+                    .setPropertyMapOutputFile(flags.property_map_output_file)\n+                    .setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention())\n+                    .setSummaryDetailLevel(flags.summary_detail_level)\n+                    .setOutputWrapper(flags.output_wrapper)\n+                    .setModuleWrapper(flags.module_wrapper)\n+                    .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n+                    .setCreateSourceMap(flags.create_source_map)\n+                    .setJscompError(flags.jscomp_error)\n+                    .setJscompWarning(flags.jscomp_warning)\n+                    .setJscompOff(flags.jscomp_off)\n+                    .setDefine(flags.define)\n+                    .setCharset(flags.charset)\n+                    .setManageClosureDependencies(flags.manage_closure_dependencies)\n+                    .setClosureEntryPoints(flags.closure_entry_point)\n+                    .setOutputManifest(flags.output_manifest)\n+                    .setAcceptConstKeyword(flags.accept_const_keyword)\n+                    .setLanguageIn(flags.language_in);\n+    setCommandLineConfig(commandLineConfig);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setLanguageOut(flags.language_out);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setLanguageOut(flags.language_out);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setWarningLevel(flags.warning_level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setWarningLevel(flags.warning_level);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs);\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.coding_convention).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguage(flags.language_in);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -3,7 +3,7 @@\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n-        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        parser.parseArgument(processedArgs);\n         // For contains --flagfile flag\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.coding_convention).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguage(flags.language_in);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        CommandLineConfig commandLineConfig = getCommandLineConfig();\n        commandLineConfig.setPrintTree(flags.print_tree);\n        commandLineConfig.setComputePhaseOrdering(flags.compute_phase_ordering);\n        commandLineConfig.setPrintAst(flags.print_ast);\n        commandLineConfig.setPrintPassGraph(flags.print_pass_graph);\n        commandLineConfig.setJscompDevMode(flags.jscomp_dev_mode);\n        commandLineConfig.setLoggingLevel(flags.logging_level);\n        commandLineConfig.setExterns(flags.externs);\n        commandLineConfig.setJs(flags.js);\n        commandLineConfig.setJsOutputFile(flags.js_output_file);\n        commandLineConfig.setModule(flags.module);\n        commandLineConfig.setVariableMapInputFile(flags.variable_map_input_file);\n        commandLineConfig.setPropertyMapInputFile(flags.property_map_input_file);\n        commandLineConfig.setVariableMapOutputFile(flags.variable_map_output_file);\n        commandLineConfig.setCreateNameMapFiles(flags.create_name_map_files);\n        commandLineConfig.setPropertyMapOutputFile(flags.property_map_output_file);\n        if (flags.third_party) {\n            commandLineConfig.setCodingConvention(new DefaultCodingConvention());\n        } else {\n            commandLineConfig.setCodingConvention(new ClosureCodingConvention());\n        }\n        commandLineConfig.setSummaryDetailLevel(flags.summary_detail_level);\n        commandLineConfig.setOutputWrapper(flags.output_wrapper);\n        commandLineConfig.setModuleWrapper(flags.module_wrapper);\n        commandLineConfig.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n        commandLineConfig.setCreateSourceMap(flags.create_source_map);\n        commandLineConfig.setJscompError(flags.jscomp_error);\n        commandLineConfig.setJscompWarning(flags.jscomp_warning);\n        commandLineConfig.setJscompOff(flags.jscomp_off);\n        commandLineConfig.setDefine(flags.define);\n        commandLineConfig.setCharset(flags.charset);\n        commandLineConfig.setManageClosureDependencies(flags.manage_closure_dependencies);\n        commandLineConfig.setClosureEntryPoints(flags.closure_entry_point);\n        commandLineConfig.setOutputManifest(flags.output_manifest);\n        commandLineConfig.setAcceptConstKeyword(flags.accept_const_keyword);\n        commandLineConfig.setLanguageIn(flags.language_in);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,41 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        CommandLineConfig commandLineConfig = getCommandLineConfig();\n+        commandLineConfig.setPrintTree(flags.print_tree);\n+        commandLineConfig.setComputePhaseOrdering(flags.compute_phase_ordering);\n+        commandLineConfig.setPrintAst(flags.print_ast);\n+        commandLineConfig.setPrintPassGraph(flags.print_pass_graph);\n+        commandLineConfig.setJscompDevMode(flags.jscomp_dev_mode);\n+        commandLineConfig.setLoggingLevel(flags.logging_level);\n+        commandLineConfig.setExterns(flags.externs);\n+        commandLineConfig.setJs(flags.js);\n+        commandLineConfig.setJsOutputFile(flags.js_output_file);\n+        commandLineConfig.setModule(flags.module);\n+        commandLineConfig.setVariableMapInputFile(flags.variable_map_input_file);\n+        commandLineConfig.setPropertyMapInputFile(flags.property_map_input_file);\n+        commandLineConfig.setVariableMapOutputFile(flags.variable_map_output_file);\n+        commandLineConfig.setCreateNameMapFiles(flags.create_name_map_files);\n+        commandLineConfig.setPropertyMapOutputFile(flags.property_map_output_file);\n+        if (flags.third_party) {\n+            commandLineConfig.setCodingConvention(new DefaultCodingConvention());\n+        } else {\n+            commandLineConfig.setCodingConvention(new ClosureCodingConvention());\n+        }\n+        commandLineConfig.setSummaryDetailLevel(flags.summary_detail_level);\n+        commandLineConfig.setOutputWrapper(flags.output_wrapper);\n+        commandLineConfig.setModuleWrapper(flags.module_wrapper);\n+        commandLineConfig.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n+        commandLineConfig.setCreateSourceMap(flags.create_source_map);\n+        commandLineConfig.setJscompError(flags.jscomp_error);\n+        commandLineConfig.setJscompWarning(flags.jscomp_warning);\n+        commandLineConfig.setJscompOff(flags.jscomp_off);\n+        commandLineConfig.setDefine(flags.define);\n+        commandLineConfig.setCharset(flags.charset);\n+        commandLineConfig.setManageClosureDependencies(flags.manage_closure_dependencies);\n+        commandLineConfig.setClosureEntryPoints(flags.closure_entry_point);\n+        commandLineConfig.setOutputManifest(flags.output_manifest);\n+        commandLineConfig.setAcceptConstKeyword(flags.accept_const_keyword);\n+        commandLineConfig.setLanguageIn(flags.language_in);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[0]));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setLanguageOut(flags.language_out);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -3,7 +3,7 @@\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n-        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        parser.parseArgument(processedArgs.toArray(new String[0]));\n         // For contains --flagfile flag\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n@@ -24,6 +24,6 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in).setLanguageOut(flags.language_out);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        CommandLineConfig.Builder builder = getCommandLineConfig().builder()\n        builder.setPrintTree(flags.print_tree)\n        .setComputePhaseOrdering(flags.compute_phase_ordering)\n        .setPrintAst(flags.print_ast)\n        .setPrintPassGraph(flags.print_pass_graph)\n        .setJscompDevMode(flags.jscomp_dev_mode)\n        .setLoggingLevel(flags.logging_level)\n        .setExterns(flags.externs).setJs(flags.js)\n        .setJsOutputFile(flags.js_output_file)\n        .setModule(flags.module)\n        .setVariableMapInputFile(flags.variable_map_input_file)\n        .setPropertyMapInputFile(flags.property_map_input_file)\n        .setVariableMapOutputFile(flags.variable_map_output_file)\n        .setCreateNameMapFiles(flags.create_name_map_files)\n        .setPropertyMapOutputFile(flags.property_map_output_file)\n        .setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention())\n        .setSummaryDetailLevel(flags.summary_detail_level)\n        .setOutputWrapper(flags.output_wrapper)\n        .setModuleWrapper(flags.module_wrapper)\n        .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n        .setCreateSourceMap(flags.create_source_map)\n        .setAcceptConstKeyword(flags.accept_const_keyword)\n        .setLanguageIn(flags.language_in);\n        if (flags.jscomp_error != null) {\n            builder.addWarningGroup(flags.jscomp_error, CheckLevel.ERROR);\n        }\n        if (flags.jscomp_warning != null) {\n            builder.addWarningGroup(flags.jscomp_warning, CheckLevel.WARNING);\n        }\n        if (flags.jscomp_off != null) {\n            builder.addWarningGroup(flags.jscomp_off, CheckLevel.OFF);\n        }\n        if(flags.define != null) {\n            for (String defineValue : flags.define) {\n                int index = defineValue.indexOf('=');\n                if (index == -1) {\n                    builder.addDefine(defineValue);\n                } else {\n                    builder.addDefine(defineValue.substring(0, index), defineValue.substring(index + 1));\n                }\n            }\n        }\n        getCommandLineConfig().setManageClosureDependencies(flags.manage_closure_dependencies)\n        .setClosureEntryPoints(flags.closure_entry_point)\n        .setOutputManifest(flags.output_manifest).setCharset(flags.charset)\n        .apply(builder.build());\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,51 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        CommandLineConfig.Builder builder = getCommandLineConfig().builder()\n+        builder.setPrintTree(flags.print_tree)\n+        .setComputePhaseOrdering(flags.compute_phase_ordering)\n+        .setPrintAst(flags.print_ast)\n+        .setPrintPassGraph(flags.print_pass_graph)\n+        .setJscompDevMode(flags.jscomp_dev_mode)\n+        .setLoggingLevel(flags.logging_level)\n+        .setExterns(flags.externs).setJs(flags.js)\n+        .setJsOutputFile(flags.js_output_file)\n+        .setModule(flags.module)\n+        .setVariableMapInputFile(flags.variable_map_input_file)\n+        .setPropertyMapInputFile(flags.property_map_input_file)\n+        .setVariableMapOutputFile(flags.variable_map_output_file)\n+        .setCreateNameMapFiles(flags.create_name_map_files)\n+        .setPropertyMapOutputFile(flags.property_map_output_file)\n+        .setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention())\n+        .setSummaryDetailLevel(flags.summary_detail_level)\n+        .setOutputWrapper(flags.output_wrapper)\n+        .setModuleWrapper(flags.module_wrapper)\n+        .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n+        .setCreateSourceMap(flags.create_source_map)\n+        .setAcceptConstKeyword(flags.accept_const_keyword)\n+        .setLanguageIn(flags.language_in);\n+        if (flags.jscomp_error != null) {\n+            builder.addWarningGroup(flags.jscomp_error, CheckLevel.ERROR);\n+        }\n+        if (flags.jscomp_warning != null) {\n+            builder.addWarningGroup(flags.jscomp_warning, CheckLevel.WARNING);\n+        }\n+        if (flags.jscomp_off != null) {\n+            builder.addWarningGroup(flags.jscomp_off, CheckLevel.OFF);\n+        }\n+        if(flags.define != null) {\n+            for (String defineValue : flags.define) {\n+                int index = defineValue.indexOf('=');\n+                if (index == -1) {\n+                    builder.addDefine(defineValue);\n+                } else {\n+                    builder.addDefine(defineValue.substring(0, index), defineValue.substring(index + 1));\n+                }\n+            }\n+        }\n+        getCommandLineConfig().setManageClosureDependencies(flags.manage_closure_dependencies)\n+        .setClosureEntryPoints(flags.closure_entry_point)\n+        .setOutputManifest(flags.output_manifest).setCharset(flags.charset)\n+        .apply(builder.build());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n        return;\n    } \n    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -23,7 +23,7 @@\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid = false;\n         parser.printUsage(err);\n-    } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n-    }\n+        return;\n+    } \n+    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        parser.printUsage(err);\n        isConfigValid = false;\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -21,8 +21,8 @@\n         err.flush();\n     }\n     if (!isConfigValid || flags.display_help) {\n+        parser.printUsage(err);\n         isConfigValid = false;\n-        parser.printUsage(err);\n     } else {\n         getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        // new instance of ClosureCodingConvention is created\n        // and assigned to codingConvention variable\n        CodingConvention codingConvention = flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention();\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(codingConvention).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,9 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        // new instance of ClosureCodingConvention is created\n+        // and assigned to codingConvention variable\n+        CodingConvention codingConvention = flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention();\n+        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(codingConvention).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        CommandLineConfig commandLineConfig = getCommandLineConfig();\n        commandLineConfig.setPrintTree(flags.print_tree)\n            .setComputePhaseOrdering(flags.compute_phase_ordering)\n            .setPrintAst(flags.print_ast)\n            .setPrintPassGraph(flags.print_pass_graph)\n            .setJscompDevMode(flags.jscomp_dev_mode)\n            .setLoggingLevel(flags.logging_level)\n            .setExterns(flags.externs)\n            .setJs(flags.js)\n            .setJsOutputFile(flags.js_output_file)\n            .setModule(flags.module)\n            .setVariableMapInputFile(flags.variable_map_input_file)\n            .setPropertyMapInputFile(flags.property_map_input_file)\n            .setVariableMapOutputFile(flags.variable_map_output_file)\n            .setCreateNameMapFiles(flags.create_name_map_files)\n            .setPropertyMapOutputFile(flags.property_map_output_file)\n            .setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention())\n            .setSummaryDetailLevel(flags.summary_detail_level)\n            .setOutputWrapper(flags.output_wrapper)\n            .setModuleWrapper(flags.module_wrapper)\n            .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n            .setCreateSourceMap(flags.create_source_map)\n            .setJscompError(flags.jscomp_error)\n            .setJscompWarning(flags.jscomp_warning)\n            .setJscompOff(flags.jscomp_off)\n            .setDefine(flags.define)\n            .setCharset(flags.charset)\n            .setManageClosureDependencies(flags.manage_closure_dependencies)\n            .setClosureEntryPoints(flags.closure_entry_point)\n            .setOutputManifest(flags.output_manifest)\n            .setAcceptConstKeyword(flags.accept_const_keyword)\n            .setLanguageIn(flags.language_in);\n        setCommandLineConfig(commandLineConfig);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,38 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        CommandLineConfig commandLineConfig = getCommandLineConfig();\n+        commandLineConfig.setPrintTree(flags.print_tree)\n+            .setComputePhaseOrdering(flags.compute_phase_ordering)\n+            .setPrintAst(flags.print_ast)\n+            .setPrintPassGraph(flags.print_pass_graph)\n+            .setJscompDevMode(flags.jscomp_dev_mode)\n+            .setLoggingLevel(flags.logging_level)\n+            .setExterns(flags.externs)\n+            .setJs(flags.js)\n+            .setJsOutputFile(flags.js_output_file)\n+            .setModule(flags.module)\n+            .setVariableMapInputFile(flags.variable_map_input_file)\n+            .setPropertyMapInputFile(flags.property_map_input_file)\n+            .setVariableMapOutputFile(flags.variable_map_output_file)\n+            .setCreateNameMapFiles(flags.create_name_map_files)\n+            .setPropertyMapOutputFile(flags.property_map_output_file)\n+            .setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention())\n+            .setSummaryDetailLevel(flags.summary_detail_level)\n+            .setOutputWrapper(flags.output_wrapper)\n+            .setModuleWrapper(flags.module_wrapper)\n+            .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n+            .setCreateSourceMap(flags.create_source_map)\n+            .setJscompError(flags.jscomp_error)\n+            .setJscompWarning(flags.jscomp_warning)\n+            .setJscompOff(flags.jscomp_off)\n+            .setDefine(flags.define)\n+            .setCharset(flags.charset)\n+            .setManageClosureDependencies(flags.manage_closure_dependencies)\n+            .setClosureEntryPoints(flags.closure_entry_point)\n+            .setOutputManifest(flags.output_manifest)\n+            .setAcceptConstKeyword(flags.accept_const_keyword)\n+            .setLanguageIn(flags.language_in);\n+        setCommandLineConfig(commandLineConfig);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs);\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -3,7 +3,7 @@\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n-        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        parser.parseArgument(processedArgs);\n         // For contains --flagfile flag\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs);\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        try {\n            parser.printUsage(err);\n        } catch (IOException e) {\n            err.println(\"Error while printing usage: \" + e.getMessage());\n        }\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -3,7 +3,7 @@\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n-        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        parser.parseArgument(processedArgs);\n         // For contains --flagfile flag\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n@@ -22,7 +22,11 @@\n     }\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid = false;\n-        parser.printUsage(err);\n+        try {\n+            parser.printUsage(err);\n+        } catch (IOException e) {\n+            err.println(\"Error while printing usage: \" + e.getMessage());\n+        }\n     } else {\n         getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n        return; // exit function if config is invalid or help is displayed\n    }\n    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -23,7 +23,7 @@\n     if (!isConfigValid || flags.display_help) {\n         isConfigValid = false;\n         parser.printUsage(err);\n-    } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        return; // exit function if config is invalid or help is displayed\n     }\n+    getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        CommandLineConfig cmdLineConfig = getCommandLineConfig();\n        cmdLineConfig.setVariableMapOutputFile(flags.variable_map_output_file);\n        cmdLineConfig.setPropertyMapOutputFile(flags.property_map_output_file);\n        cmdLineConfig.setPropertyMapInputFile(flags.property_map_input_file);\n        cmdLineConfig.setVariableMapInputFile(flags.variable_map_input_file);\n        cmdLineConfig.setSummaryDetailLevel(flags.summary_detail_level);\n        cmdLineConfig.setOutputManifest(flags.output_manifest);\n        cmdLineConfig.setAcceptConstKeyword(flags.accept_const_keyword);\n        cmdLineConfig.setLanguageIn(flags.language_in);\n        cmdLineConfig.setOutputWrapper(flags.output_wrapper);\n        cmdLineConfig.setModuleWrapper(flags.module_wrapper);\n        cmdLineConfig.setComputePhaseOrdering(flags.compute_phase_ordering);\n        cmdLineConfig.setPrintAst(flags.print_ast);\n        cmdLineConfig.setPrintPassGraph(flags.print_pass_graph);\n        cmdLineConfig.setJscompDevMode(flags.jscomp_dev_mode);\n        cmdLineConfig.setLoggingLevel(flags.logging_level);\n        cmdLineConfig.setManageClosureDependencies(flags.manage_closure_dependencies);\n        cmdLineConfig.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n        cmdLineConfig.setJscompWarning(flags.jscomp_warning);\n        cmdLineConfig.setExterns(flags.externs);\n        cmdLineConfig.setJs(flags.js);\n        cmdLineConfig.setModule(flags.module);\n        cmdLineConfig.setClosureEntryPoints(flags.closure_entry_point);\n        cmdLineConfig.setJscompOff(flags.jscomp_off);\n        cmdLineConfig.setJsOutputFile(flags.js_output_file);\n        cmdLineConfig.setCreateNameMapFiles(flags.create_name_map_files);\n        cmdLineConfig.setDefine(flags.define);\n        cmdLineConfig.setCreateSourceMap(flags.create_source_map);\n        cmdLineConfig.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,34 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        CommandLineConfig cmdLineConfig = getCommandLineConfig();\n+        cmdLineConfig.setVariableMapOutputFile(flags.variable_map_output_file);\n+        cmdLineConfig.setPropertyMapOutputFile(flags.property_map_output_file);\n+        cmdLineConfig.setPropertyMapInputFile(flags.property_map_input_file);\n+        cmdLineConfig.setVariableMapInputFile(flags.variable_map_input_file);\n+        cmdLineConfig.setSummaryDetailLevel(flags.summary_detail_level);\n+        cmdLineConfig.setOutputManifest(flags.output_manifest);\n+        cmdLineConfig.setAcceptConstKeyword(flags.accept_const_keyword);\n+        cmdLineConfig.setLanguageIn(flags.language_in);\n+        cmdLineConfig.setOutputWrapper(flags.output_wrapper);\n+        cmdLineConfig.setModuleWrapper(flags.module_wrapper);\n+        cmdLineConfig.setComputePhaseOrdering(flags.compute_phase_ordering);\n+        cmdLineConfig.setPrintAst(flags.print_ast);\n+        cmdLineConfig.setPrintPassGraph(flags.print_pass_graph);\n+        cmdLineConfig.setJscompDevMode(flags.jscomp_dev_mode);\n+        cmdLineConfig.setLoggingLevel(flags.logging_level);\n+        cmdLineConfig.setManageClosureDependencies(flags.manage_closure_dependencies);\n+        cmdLineConfig.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n+        cmdLineConfig.setJscompWarning(flags.jscomp_warning);\n+        cmdLineConfig.setExterns(flags.externs);\n+        cmdLineConfig.setJs(flags.js);\n+        cmdLineConfig.setModule(flags.module);\n+        cmdLineConfig.setClosureEntryPoints(flags.closure_entry_point);\n+        cmdLineConfig.setJscompOff(flags.jscomp_off);\n+        cmdLineConfig.setJsOutputFile(flags.js_output_file);\n+        cmdLineConfig.setCreateNameMapFiles(flags.create_name_map_files);\n+        cmdLineConfig.setDefine(flags.define);\n+        cmdLineConfig.setCreateSourceMap(flags.create_source_map);\n+        cmdLineConfig.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        CommandLineConfig config = getCommandLineConfig();\n        config.setPrintTree(flags.print_tree);\n        config.setComputePhaseOrdering(flags.compute_phase_ordering);\n        config.setPrintAst(flags.print_ast);\n        config.setPrintPassGraph(flags.print_pass_graph);\n        config.setJscompDevMode(flags.jscomp_dev_mode);\n        config.setLoggingLevel(flags.logging_level);\n        config.setExterns(flags.externs);\n        config.setJs(flags.js);\n        config.setJsOutputFile(flags.js_output_file);\n        config.setModule(flags.module);\n        config.setVariableMapInputFile(flags.variable_map_input_file);\n        config.setPropertyMapInputFile(flags.property_map_input_file);\n        config.setVariableMapOutputFile(flags.variable_map_output_file);\n        config.setCreateNameMapFiles(flags.create_name_map_files);\n        config.setPropertyMapOutputFile(flags.property_map_output_file);\n        config.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n        config.setSummaryDetailLevel(flags.summary_detail_level);\n        config.setOutputWrapper(flags.output_wrapper);\n        config.setModuleWrapper(flags.module_wrapper);\n        config.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n        config.setCreateSourceMap(flags.create_source_map);\n        config.setJscompError(flags.jscomp_error);\n        config.setJscompWarning(flags.jscomp_warning);\n        config.setJscompOff(flags.jscomp_off);\n        config.setDefine(flags.define);\n        config.setCharset(flags.charset);\n        config.setManageClosureDependencies(flags.manage_closure_dependencies);\n        config.setClosureEntryPoints(flags.closure_entry_point);\n        config.setOutputManifest(flags.output_manifest);\n        config.setAcceptConstKeyword(flags.accept_const_keyword);\n        config.setLanguageIn(flags.language_in);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -24,6 +24,37 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        CommandLineConfig config = getCommandLineConfig();\n+        config.setPrintTree(flags.print_tree);\n+        config.setComputePhaseOrdering(flags.compute_phase_ordering);\n+        config.setPrintAst(flags.print_ast);\n+        config.setPrintPassGraph(flags.print_pass_graph);\n+        config.setJscompDevMode(flags.jscomp_dev_mode);\n+        config.setLoggingLevel(flags.logging_level);\n+        config.setExterns(flags.externs);\n+        config.setJs(flags.js);\n+        config.setJsOutputFile(flags.js_output_file);\n+        config.setModule(flags.module);\n+        config.setVariableMapInputFile(flags.variable_map_input_file);\n+        config.setPropertyMapInputFile(flags.property_map_input_file);\n+        config.setVariableMapOutputFile(flags.variable_map_output_file);\n+        config.setCreateNameMapFiles(flags.create_name_map_files);\n+        config.setPropertyMapOutputFile(flags.property_map_output_file);\n+        config.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n+        config.setSummaryDetailLevel(flags.summary_detail_level);\n+        config.setOutputWrapper(flags.output_wrapper);\n+        config.setModuleWrapper(flags.module_wrapper);\n+        config.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n+        config.setCreateSourceMap(flags.create_source_map);\n+        config.setJscompError(flags.jscomp_error);\n+        config.setJscompWarning(flags.jscomp_warning);\n+        config.setJscompOff(flags.jscomp_off);\n+        config.setDefine(flags.define);\n+        config.setCharset(flags.charset);\n+        config.setManageClosureDependencies(flags.manage_closure_dependencies);\n+        config.setClosureEntryPoints(flags.closure_entry_point);\n+        config.setOutputManifest(flags.output_manifest);\n+        config.setAcceptConstKeyword(flags.accept_const_keyword);\n+        config.setLanguageIn(flags.language_in);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[processedArgs.size()]));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        CommandLineConfig options = getCommandLineConfig();\n        options.setPrintTree(flags.print_tree)\n                .setComputePhaseOrdering(flags.compute_phase_ordering)\n                .setPrintAst(flags.print_ast)\n                .setPrintPassGraph(flags.print_pass_graph)\n                .setJscompDevMode(flags.jscomp_dev_mode)\n                .setLoggingLevel(flags.logging_level)\n                .setExterns(flags.externs)\n                .setJs(flags.js)\n                .setJsOutputFile(flags.js_output_file)\n                .setModule(flags.module)\n                .setVariableMapInputFile(flags.variable_map_input_file)\n                .setPropertyMapInputFile(flags.property_map_input_file)\n                .setVariableMapOutputFile(flags.variable_map_output_file)\n                .setCreateNameMapFiles(flags.create_name_map_files)\n                .setPropertyMapOutputFile(flags.property_map_output_file)\n                .setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention())\n                .setSummaryDetailLevel(flags.summary_detail_level)\n                .setOutputWrapper(flags.output_wrapper)\n                .setModuleWrapper(flags.module_wrapper)\n                .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n                .setCreateSourceMap(flags.create_source_map)\n                .setJscompError(flags.jscomp_error)\n                .setJscompWarning(flags.jscomp_warning)\n                .setJscompOff(flags.jscomp_off)\n                .setDefine(flags.define)\n                .setCharset(flags.charset)\n                .setManageClosureDependencies(flags.manage_closure_dependencies)\n                .setClosureEntryPoints(flags.closure_entry_point)\n                .setOutputManifest(flags.output_manifest)\n                .setAcceptConstKeyword(flags.accept_const_keyword)\n                .setLanguageIn(flags.language_in);\n        setCommandLineConfig(options);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -3,7 +3,7 @@\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n-        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        parser.parseArgument(processedArgs.toArray(new String[processedArgs.size()]));\n         // For contains --flagfile flag\n         if (!flags.flag_file.equals(\"\")) {\n             processFlagFile(err);\n@@ -24,6 +24,38 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        CommandLineConfig options = getCommandLineConfig();\n+        options.setPrintTree(flags.print_tree)\n+                .setComputePhaseOrdering(flags.compute_phase_ordering)\n+                .setPrintAst(flags.print_ast)\n+                .setPrintPassGraph(flags.print_pass_graph)\n+                .setJscompDevMode(flags.jscomp_dev_mode)\n+                .setLoggingLevel(flags.logging_level)\n+                .setExterns(flags.externs)\n+                .setJs(flags.js)\n+                .setJsOutputFile(flags.js_output_file)\n+                .setModule(flags.module)\n+                .setVariableMapInputFile(flags.variable_map_input_file)\n+                .setPropertyMapInputFile(flags.property_map_input_file)\n+                .setVariableMapOutputFile(flags.variable_map_output_file)\n+                .setCreateNameMapFiles(flags.create_name_map_files)\n+                .setPropertyMapOutputFile(flags.property_map_output_file)\n+                .setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention())\n+                .setSummaryDetailLevel(flags.summary_detail_level)\n+                .setOutputWrapper(flags.output_wrapper)\n+                .setModuleWrapper(flags.module_wrapper)\n+                .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n+                .setCreateSourceMap(flags.create_source_map)\n+                .setJscompError(flags.jscomp_error)\n+                .setJscompWarning(flags.jscomp_warning)\n+                .setJscompOff(flags.jscomp_off)\n+                .setDefine(flags.define)\n+                .setCharset(flags.charset)\n+                .setManageClosureDependencies(flags.manage_closure_dependencies)\n+                .setClosureEntryPoints(flags.closure_entry_point)\n+                .setOutputManifest(flags.output_manifest)\n+                .setAcceptConstKeyword(flags.accept_const_keyword)\n+                .setLanguageIn(flags.language_in);\n+        setCommandLineConfig(options);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs);\n        // For contains --flagfile flag\n        if (!flags.flag_file.isEmpty()) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        CommandLineConfig commandLineConfig = getCommandLineConfig();\n        commandLineConfig.setPrintTree(flags.print_tree);\n        commandLineConfig.setComputePhaseOrdering(flags.compute_phase_ordering);\n        commandLineConfig.setPrintAst(flags.print_ast);\n        commandLineConfig.setPrintPassGraph(flags.print_pass_graph);\n        commandLineConfig.setJscompDevMode(flags.jscomp_dev_mode);\n        commandLineConfig.setLoggingLevel(flags.logging_level);\n        commandLineConfig.setExterns(flags.externs);\n        commandLineConfig.setJs(flags.js);\n        commandLineConfig.setJsOutputFile(flags.js_output_file);\n        commandLineConfig.setModule(flags.module);\n        commandLineConfig.setVariableMapInputFile(flags.variable_map_input_file);\n        commandLineConfig.setPropertyMapInputFile(flags.property_map_input_file);\n        commandLineConfig.setVariableMapOutputFile(flags.variable_map_output_file);\n        commandLineConfig.setCreateNameMapFiles(flags.create_name_map_files);\n        commandLineConfig.setPropertyMapOutputFile(flags.property_map_output_file);\n        commandLineConfig.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n        commandLineConfig.setSummaryDetailLevel(flags.summary_detail_level);\n        commandLineConfig.setOutputWrapper(flags.output_wrapper);\n        commandLineConfig.setModuleWrapper(flags.module_wrapper);\n        commandLineConfig.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n        commandLineConfig.setCreateSourceMap(flags.create_source_map);\n        commandLineConfig.setJscompError(flags.jscomp_error);\n        commandLineConfig.setJscompWarning(flags.jscomp_warning);\n        commandLineConfig.setJscompOff(flags.jscomp_off);\n        commandLineConfig.setDefine(flags.define);\n        commandLineConfig.setCharset(flags.charset);\n        commandLineConfig.setManageClosureDependencies(flags.manage_closure_dependencies);\n        commandLineConfig.setClosureEntryPoints(flags.closure_entry_point);\n        commandLineConfig.setOutputManifest(flags.output_manifest);\n        commandLineConfig.setAcceptConstKeyword(flags.accept_const_keyword);\n        commandLineConfig.setLanguageIn(flags.language_in);\n    }\n}", "diff": "--- com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n+++ com/google/javascript/jscomp/CommandLineRunner.java@initConfigFromFlags\n@@ -3,9 +3,9 @@\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n-        parser.parseArgument(processedArgs.toArray(new String[] {}));\n+        parser.parseArgument(processedArgs);\n         // For contains --flagfile flag\n-        if (!flags.flag_file.equals(\"\")) {\n+        if (!flags.flag_file.isEmpty()) {\n             processFlagFile(err);\n         }\n     } catch (CmdLineException e) {\n@@ -24,6 +24,37 @@\n         isConfigValid = false;\n         parser.printUsage(err);\n     } else {\n-        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n+        CommandLineConfig commandLineConfig = getCommandLineConfig();\n+        commandLineConfig.setPrintTree(flags.print_tree);\n+        commandLineConfig.setComputePhaseOrdering(flags.compute_phase_ordering);\n+        commandLineConfig.setPrintAst(flags.print_ast);\n+        commandLineConfig.setPrintPassGraph(flags.print_pass_graph);\n+        commandLineConfig.setJscompDevMode(flags.jscomp_dev_mode);\n+        commandLineConfig.setLoggingLevel(flags.logging_level);\n+        commandLineConfig.setExterns(flags.externs);\n+        commandLineConfig.setJs(flags.js);\n+        commandLineConfig.setJsOutputFile(flags.js_output_file);\n+        commandLineConfig.setModule(flags.module);\n+        commandLineConfig.setVariableMapInputFile(flags.variable_map_input_file);\n+        commandLineConfig.setPropertyMapInputFile(flags.property_map_input_file);\n+        commandLineConfig.setVariableMapOutputFile(flags.variable_map_output_file);\n+        commandLineConfig.setCreateNameMapFiles(flags.create_name_map_files);\n+        commandLineConfig.setPropertyMapOutputFile(flags.property_map_output_file);\n+        commandLineConfig.setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention());\n+        commandLineConfig.setSummaryDetailLevel(flags.summary_detail_level);\n+        commandLineConfig.setOutputWrapper(flags.output_wrapper);\n+        commandLineConfig.setModuleWrapper(flags.module_wrapper);\n+        commandLineConfig.setModuleOutputPathPrefix(flags.module_output_path_prefix);\n+        commandLineConfig.setCreateSourceMap(flags.create_source_map);\n+        commandLineConfig.setJscompError(flags.jscomp_error);\n+        commandLineConfig.setJscompWarning(flags.jscomp_warning);\n+        commandLineConfig.setJscompOff(flags.jscomp_off);\n+        commandLineConfig.setDefine(flags.define);\n+        commandLineConfig.setCharset(flags.charset);\n+        commandLineConfig.setManageClosureDependencies(flags.manage_closure_dependencies);\n+        commandLineConfig.setClosureEntryPoints(flags.closure_entry_point);\n+        commandLineConfig.setOutputManifest(flags.output_manifest);\n+        commandLineConfig.setAcceptConstKeyword(flags.accept_const_keyword);\n+        commandLineConfig.setLanguageIn(flags.language_in);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]