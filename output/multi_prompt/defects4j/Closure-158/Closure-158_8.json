[{"output": "void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = DiagnosticGroups.forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,6 +1,6 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n     for (String name : diagnosticGroups) {\n-        DiagnosticGroup group = forName(name);\n+        DiagnosticGroup group = DiagnosticGroups.forName(name);\n         Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n         options.setWarningLevel(group, level);\n     }\n", "finish_reason": "stop", "valid": false, "num": 11}, {"output": "void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = DiagnosticGroups.forName(name);\n        checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,7 +1,7 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n     for (String name : diagnosticGroups) {\n-        DiagnosticGroup group = forName(name);\n-        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n+        DiagnosticGroup group = DiagnosticGroups.forName(name);\n+        checkNotNull(group, \"No warning class for name: \" + name);\n         options.setWarningLevel(group, level);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        if(group == null){\n            throw new NullPointerException(\"No warning class for name: \" + name);\n        }\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,7 +1,9 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n     for (String name : diagnosticGroups) {\n         DiagnosticGroup group = forName(name);\n-        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n+        if(group == null){\n+            throw new NullPointerException(\"No warning class for name: \" + name);\n+        }\n         options.setWarningLevel(group, level);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = DiagnosticGroups.forName(name);\n        if (group == null) {\n            throw new IllegalStateException(\"No warning class for name: \" + name);\n        }\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,7 +1,9 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n     for (String name : diagnosticGroups) {\n-        DiagnosticGroup group = forName(name);\n-        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n+        DiagnosticGroup group = DiagnosticGroups.forName(name);\n+        if (group == null) {\n+            throw new IllegalStateException(\"No warning class for name: \" + name);\n+        }\n         options.setWarningLevel(group, level);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = DiagnosticGroups.forName(name);\n        if(group != null){\n            options.setWarningLevel(group, level);\n        }else{\n            throw new IllegalArgumentException(\"No warning class for name: \" + name);\n        }\n    }\n}", "diff": "--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,7 +1,10 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n     for (String name : diagnosticGroups) {\n-        DiagnosticGroup group = forName(name);\n-        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-        options.setWarningLevel(group, level);\n+        DiagnosticGroup group = DiagnosticGroups.forName(name);\n+        if(group != null){\n+            options.setWarningLevel(group, level);\n+        }else{\n+            throw new IllegalArgumentException(\"No warning class for name: \" + name);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        if(group != null){\n            options.setWarningLevel(group, level);\n        } else {\n            throw new IllegalArgumentException(\"No warning class for name: \" + name);\n        }\n    }\n}", "diff": "--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,7 +1,10 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n     for (String name : diagnosticGroups) {\n         DiagnosticGroup group = forName(name);\n-        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-        options.setWarningLevel(group, level);\n+        if(group != null){\n+            options.setWarningLevel(group, level);\n+        } else {\n+            throw new IllegalArgumentException(\"No warning class for name: \" + name);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroups groups = new DiagnosticGroups();\n        DiagnosticGroup group = groups.forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,6 +1,7 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n     for (String name : diagnosticGroups) {\n-        DiagnosticGroup group = forName(name);\n+        DiagnosticGroups groups = new DiagnosticGroups();\n+        DiagnosticGroup group = groups.forName(name);\n         Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n         options.setWarningLevel(group, level);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        if (group == null) {\n            throw new IllegalArgumentException(\"No warning class for name: \" + name);\n        }\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,7 +1,9 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n     for (String name : diagnosticGroups) {\n         DiagnosticGroup group = forName(name);\n-        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n+        if (group == null) {\n+            throw new IllegalArgumentException(\"No warning class for name: \" + name);\n+        }\n         options.setWarningLevel(group, level);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        if (group == null) {\n            throw new NullPointerException(\"No warning class for name: \" + name);\n        }\n        options.setWarningLevel(group, level);\n    }\n}", "diff": "--- com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n+++ com/google/javascript/jscomp/DiagnosticGroups.java@setWarningLevels\n@@ -1,7 +1,9 @@\n void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n     for (String name : diagnosticGroups) {\n         DiagnosticGroup group = forName(name);\n-        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n+        if (group == null) {\n+            throw new NullPointerException(\"No warning class for name: \" + name);\n+        }\n         options.setWarningLevel(group, level);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]