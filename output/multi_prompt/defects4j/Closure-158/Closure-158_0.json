[{"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setClosureEntryPointPass(config.closureEntryPoints);\n    }\n    options.setLanguageOut(config.jscompOutputType);\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n\n    options.setSourceMapDetailLevel(SourceMap.DetailLevel.ALL);\n    options.setSourceMapFormat(SourceMap.Format.V3);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,21 +8,23 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setClosureEntryPointPass(config.closureEntryPoints);\n     }\n+    options.setLanguageOut(config.jscompOutputType);\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+\n+    options.setSourceMapDetailLevel(SourceMap.DetailLevel.ALL);\n+    options.setSourceMapFormat(SourceMap.Format.V3);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +33,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(ImmutableList.of(new DependencyOptions().setEntryPoints(config.closureEntryPoints)));\n    }\n    options.setLanguageIn(config.languageIn); // Instead of using multiple if-else statements\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFeature(Feature.VARIABLE_OUTPUT, true);\n        options.setRewritePolyfills(false);\n        options.setOutputJs(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,37 +8,29 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(ImmutableList.of(new DependencyOptions().setEntryPoints(config.closureEntryPoints)));\n     }\n+    options.setLanguageIn(config.languageIn); // Instead of using multiple if-else statements\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputFeature(Feature.VARIABLE_OUTPUT, true);\n+        options.setRewritePolyfills(false);\n+        options.setOutputJs(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n     options.acceptConstKeyword = config.acceptConstKeyword;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.dependencyOrder(config.closureEntryPoints));\n    }\n    options.setLanguageOut(config.languageOut);\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,21 +8,22 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.dependencyOrder(config.closureEntryPoints));\n     }\n+    options.setLanguageOut(config.languageOut);\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +32,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +41,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setDependencyOptions(DependencyOptions.preferStableNames());\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.sortOnly());\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.setNewTypeInference(config.jscompNewTypeInferring);\n    options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT6_TYPED);\n    options.setLanguageOut(CompilerOptions.LanguageMode.NO_TRANSPILE);\n    CompilationLevel level = config.getCompilationLevel();\n    level.setOptionsForCompilationLevel(options);\n    if (config.warningGuardianRatio > 0) {\n        options.addWarningsGuardian(config.warningGuardianRatio);\n    }\n    if (config.severity != null) {\n        options.setWarnings(config.severity);\n    }\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setCheckGlobalThisLevel(CheckLevel.WARNING);\n        options.setOutputFeature(CompilerOptions.OutputFeature.CLOSURE_FRAGMENTS);\n        options.setSplittingMode(SplittingMode.OUT);\n        options.jsOutputFile = config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    options.sourceMapFormat = config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -6,16 +6,31 @@\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setDependencyOptions(DependencyOptions.preferStableNames());\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n     if (config.closureEntryPoints.size() > 0) {\n+        options.setDependencyOptions(DependencyOptions.sortOnly());\n         options.setManageClosureDependencies(config.closureEntryPoints);\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setNewTypeInference(config.jscompNewTypeInferring);\n+    options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT6_TYPED);\n+    options.setLanguageOut(CompilerOptions.LanguageMode.NO_TRANSPILE);\n+    CompilationLevel level = config.getCompilationLevel();\n+    level.setOptionsForCompilationLevel(options);\n+    if (config.warningGuardianRatio > 0) {\n+        options.addWarningsGuardian(config.warningGuardianRatio);\n+    }\n+    if (config.severity != null) {\n+        options.setWarnings(config.severity);\n+    }\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n+        options.setCheckGlobalThisLevel(CheckLevel.WARNING);\n+        options.setOutputFeature(CompilerOptions.OutputFeature.CLOSURE_FRAGMENTS);\n+        options.setSplittingMode(SplittingMode.OUT);\n         options.jsOutputFile = config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() > 0) {\n@@ -29,16 +44,5 @@\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n     options.acceptConstKeyword = config.acceptConstKeyword;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setDependencyOptions(DependencyOptions.pruneLegacyForEntryPoints(config.closureEntryPoints));\n    options.setDependencyOptions(DependencyOptions.sortOnly());\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    options.setLanguageIn(config.languageIn);\n    options.setLanguageOut(config.languageOut);\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -6,39 +6,32 @@\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n+    options.setDependencyOptions(DependencyOptions.pruneLegacyForEntryPoints(config.closureEntryPoints));\n+    options.setDependencyOptions(DependencyOptions.sortOnly());\n     options.manageClosureDependencies = config.manageClosureDependencies;\n-    if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n-    }\n+    options.setLanguageIn(config.languageIn);\n+    options.setLanguageOut(config.languageOut);\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n+\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n+\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.closureEntryPoints));\n    }\n    options.setLanguageOut(config.jsLanguageOut);\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputPath(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,21 +8,22 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.closureEntryPoints));\n     }\n+    options.setLanguageOut(config.jsLanguageOut);\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputPath(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +32,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +41,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setDependencyOptions(DependencyOptions.pruneLegacyJsModules(config.manageClosureDependencies));\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.entryPoints(\n            ImmutableList.copyOf(config.closureEntryPoints), /* processCommonJsModules= */ true));\n    }\n    options.setLanguageIn(config.languageIn);\n    options.setDevMode(config.jscompDevMode);\n    if (!Strings.isNullOrEmpty(config.jsOutputFile)) {\n        options.setOutputPath(config.jsOutputFile);\n    }\n    if (!Strings.isNullOrEmpty(config.createSourceMap)) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapIncludeSources(config.sourceMapIncludeSources);\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n    options.setCodingConvention(config.codingConvention);\n\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -6,39 +6,32 @@\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setDependencyOptions(DependencyOptions.pruneLegacyJsModules(config.manageClosureDependencies));\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.entryPoints(\n+            ImmutableList.copyOf(config.closureEntryPoints), /* processCommonJsModules= */ true));\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setLanguageIn(config.languageIn);\n+    options.setDevMode(config.jscompDevMode);\n+    if (!Strings.isNullOrEmpty(config.jsOutputFile)) {\n+        options.setOutputPath(config.jsOutputFile);\n+    }\n+    if (!Strings.isNullOrEmpty(config.createSourceMap)) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n+    }\n+    options.setSourceMapIncludeSources(config.sourceMapIncludeSources);\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n     options.setCodingConvention(config.codingConvention);\n-    options.setSummaryDetailLevel(config.summaryDetailLevel);\n+\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n-    }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n-    }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setSummaryDetailLevel(config.summaryDetailLevel);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.pruneForEntryPoint(config.closureEntryPoints));\n    }\n    options.setLanguageIn(convertLanguageMode(config.languageIn));\n    options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);\n    options.acceptConstKeyword = config.acceptConstKeyword;\n    options.setCodingConvention(config.getCodingConvention());\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap =\n            VariableMap.load(config.variableMapInputFile, options.getOutputCharset());\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap =\n            VariableMap.load(config.propertyMapInputFile, options.getOutputCharset());\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,37 +8,29 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.pruneForEntryPoint(config.closureEntryPoints));\n     }\n-    options.devMode = config.jscompDevMode;\n-    options.setCodingConvention(config.codingConvention);\n+    options.setLanguageIn(convertLanguageMode(config.languageIn));\n+    options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setCodingConvention(config.getCodingConvention());\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMap =\n+            VariableMap.load(config.variableMapInputFile, options.getOutputCharset());\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMap =\n+            VariableMap.load(config.propertyMapInputFile, options.getOutputCharset());\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.manageClosureDependencies));\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(options.getDependencyOptions().entryPoints(config.closureEntryPoints));\n    }\n    options.setLanguageIn(toLanguageMode(config.languageIn, FlagUsageMode.ERROR));\n    options.setLanguageOut(toLanguageMode(config.languageOut, FlagUsageMode.WARNING));\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    options.setSourceMapFormat(SourceMap.Format.valueOf(config.sourceMapFormat));\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -6,39 +6,29 @@\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.manageClosureDependencies));\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(options.getDependencyOptions().entryPoints(config.closureEntryPoints));\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setLanguageIn(toLanguageMode(config.languageIn, FlagUsageMode.ERROR));\n+    options.setLanguageOut(toLanguageMode(config.languageOut, FlagUsageMode.WARNING));\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n     options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapFormat(SourceMap.Format.valueOf(config.sourceMapFormat));\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n     options.acceptConstKeyword = config.acceptConstKeyword;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setDependencyOptions(new CompilerOptions.DependencyOptions(config.manageClosureDependencies, null));\n    if (config.closureEntryPoints.size() > 0) {\n        options.getDependencyOptions().setEntryPointRegistry(\n        new SortedEntryIdCollection<>(\n            config.closureEntryPoints));\n    }\n    options.setIdeMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailedness(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFeature(CompilerOptions.OutputFeature.SEPARATE_MODE, true);\n        options.setSingleExecutableOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapOutputFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -6,32 +6,35 @@\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setDependencyOptions(new CompilerOptions.DependencyOptions(config.manageClosureDependencies, null));\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.getDependencyOptions().setEntryPointRegistry(\n+        new SortedEntryIdCollection<>(\n+            config.closureEntryPoints));\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setIdeMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n-    options.setSummaryDetailLevel(config.summaryDetailLevel);\n+    options.setSummaryDetailedness(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputFeature(CompilerOptions.OutputFeature.SEPARATE_MODE, true);\n+        options.setSingleExecutableOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapOutputFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +43,6 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(options.dependencyOptions.toBuilder()\n                .setEntryPoints(config.closureEntryPoints)\n                .build());\n    }\n    options.setLanguageIn(toLanguageMode(config.languageIn));\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setBundleOutputPath(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(SourceMap.Format.valueOf(config.sourceMapFormat));\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setVariableMapInput(new VariableMap(loadVariableMap(config.variableMapInputFile)));\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setPropertyMapInput(new VariableMap(loadVariableMap(config.propertyMapInputFile)));\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,37 +8,29 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(options.dependencyOptions.toBuilder()\n+                .setEntryPoints(config.closureEntryPoints)\n+                .build());\n     }\n+    options.setLanguageIn(toLanguageMode(config.languageIn));\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setBundleOutputPath(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(SourceMap.Format.valueOf(config.sourceMapFormat));\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setVariableMapInput(new VariableMap(loadVariableMap(config.variableMapInputFile)));\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setPropertyMapInput(new VariableMap(loadVariableMap(config.propertyMapInputFile)));\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(\n            options.getDependencyOptions().toBuilder()\n                .setEntryPoints(config.closureEntryPoints)\n                .setDependencySorting(config.dependencySorting)\n                .setWarningLevel(DiagnosticGroups.MISSING_PROVIDE, CheckLevel.WARNING)\n                .setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.WARNING)\n                .build());\n    }\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        String inputName = config.jsOutputFile.length() > 0\n            ? config.jsOutputFile\n            : config.srcs.iterator().next().relativeTo(config.getWorkingDirectory()).getPathString();\n        options.setSourceMapOutputPath(config.createSourceMap);\n        options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n        options.setSourceMapFormat(config.sourceMapFormat);\n        if (config.sourceMapIncludeSourcesContent) {\n            options.setSourceMapDetailLevel(SourceMap.DetailLevel.ALL);\n            options.setSourceMapIncludeSourcesContent(true);\n            options.setSourceMapLocationMappings(\n                Collections.singletonList(\n                    new SourceMap.LocationMapping(\n                        config.getBasePath().getPathString() + \"/\",\n                        ImmutableList.of(new SourceMap.UrlAndContent(inputName, Charset.defaultCharset()))))));\n        }\n    }\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setInputVariableMapSerialized(Files.toByteArray(new File(config.variableMapInputFile)));\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setInputPropertyMapSerialized(Files.toByteArray(new File(config.propertyMapInputFile)));\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,26 +8,44 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(\n+            options.getDependencyOptions().toBuilder()\n+                .setEntryPoints(config.closureEntryPoints)\n+                .setDependencySorting(config.dependencySorting)\n+                .setWarningLevel(DiagnosticGroups.MISSING_PROVIDE, CheckLevel.WARNING)\n+                .setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.WARNING)\n+                .build());\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        String inputName = config.jsOutputFile.length() > 0\n+            ? config.jsOutputFile\n+            : config.srcs.iterator().next().relativeTo(config.getWorkingDirectory()).getPathString();\n+        options.setSourceMapOutputPath(config.createSourceMap);\n+        options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+        options.setSourceMapFormat(config.sourceMapFormat);\n+        if (config.sourceMapIncludeSourcesContent) {\n+            options.setSourceMapDetailLevel(SourceMap.DetailLevel.ALL);\n+            options.setSourceMapIncludeSourcesContent(true);\n+            options.setSourceMapLocationMappings(\n+                Collections.singletonList(\n+                    new SourceMap.LocationMapping(\n+                        config.getBasePath().getPathString() + \"/\",\n+                        ImmutableList.of(new SourceMap.UrlAndContent(inputName, Charset.defaultCharset()))))));\n+        }\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setInputVariableMapSerialized(Files.toByteArray(new File(config.variableMapInputFile)));\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setInputPropertyMapSerialized(Files.toByteArray(new File(config.propertyMapInputFile)));\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n@@ -40,5 +58,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(ImmutableSet.copyOf(config.closureEntryPoints)));\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,7 +8,7 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(ImmutableSet.copyOf(config.closureEntryPoints)));\n     }\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n@@ -16,13 +16,13 @@\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +31,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.closureEntryPoints));\n    }\n    options.setLanguageMode(config.languageIn.toLanguageMode());\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,44 +1,33 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.closureEntryPoints));\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setLanguageMode(config.languageIn.toLanguageMode());\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setEntryPoints(config.closureEntryPoints);\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,7 +8,7 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setEntryPoints(config.closureEntryPoints);\n     }\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n@@ -16,13 +16,13 @@\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +31,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.pruneFor(config.closureEntryPoints));\n    }\n    options.setLanguageIn(CheckLevel.ERROR);\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFeature(CompilerOptions.OutputFeature.STRICT_MODE);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -8,21 +8,21 @@\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.pruneFor(config.closureEntryPoints));\n     }\n+    options.setLanguageIn(CheckLevel.ERROR);\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputFeature(CompilerOptions.OutputFeature.STRICT_MODE);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +31,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +40,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.closureEntryPoints));\n    }\n    options.setLanguage(options.getLanguageByName(config.languageIn));\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFeature(Feature.MODULES, true);\n        options.setOutputModuleResolution(CompilerOptions.ModuleResolutionMode.WEBPACK);\n        options.setChunkOutputPath(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    options.setInputVariableMapSerialized(loadVariableMap(config.variableMapInputFile));\n    options.setInputPropertyMapSerialized(loadVariableMap(config.propertyMapInputFile));\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,44 +1,31 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.closureEntryPoints));\n     }\n-    options.devMode = config.jscompDevMode;\n+    options.setLanguage(options.getLanguageByName(config.languageIn));\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputFeature(Feature.MODULES, true);\n+        options.setOutputModuleResolution(CompilerOptions.ModuleResolutionMode.WEBPACK);\n+        options.setChunkOutputPath(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n-    }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n-    }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n+    options.setInputVariableMapSerialized(loadVariableMap(config.variableMapInputFile));\n+    options.setInputPropertyMapSerialized(loadVariableMap(config.propertyMapInputFile));\n     options.acceptConstKeyword = config.acceptConstKeyword;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setDependencyOptions(DependencyOptions.pruneLegacyExports());\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.generateJson(), config.closureEntryPoints);\n    }\n    options.setSourceMapOutputPath(config.createSourceMap);\n    options.setSummaryDetailLevel(FlagConverter.summaryDetailLevelFromString(config.summaryDetailLevel));\n    options.setOutputCharset(getOutputCharset());\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputJs(config.jsOutputFile);\n    }\n    if (!config.createSourceMap.equals(\"\")) {\n        options.setSourceMapDetailLevel(FlagConverter.sourceMapDetailLevelFromString(config.sourceMapDetailLevel));\n        options.setSourceMapFormat(FlagConverter.sourceMapFormatFromString(config.sourceMapFormat));\n    }\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setInputVariableMap(VariableMap.load(config.variableMapInputFile));\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setInputPropertyMap(VariableMap.load(config.propertyMapInputFile));\n    }\n    if (config.languageIn.length() > 0) {\n        switch (config.languageIn) {\n            case \"ECMASCRIPT3\":\n            case \"ES3\":\n                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n                break;\n            case \"ECMASCRIPT5\":\n            case \"ES5\":\n                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n                break;\n            case \"ECMASCRIPT5_STRICT\":\n            case \"ES5_STRICT\":\n                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n                break;\n            case \"ECMASCRIPT6\":\n            case \"ES6\":\n                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT6);\n                break;\n            case \"ECMASCRIPT6_STRICT\":\n            case \"ES6_STRICT\":\n                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT6_STRICT);\n                break;\n            default:\n                throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -6,39 +6,53 @@\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setDependencyOptions(DependencyOptions.pruneLegacyExports());\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.generateJson(), config.closureEntryPoints);\n     }\n-    options.devMode = config.jscompDevMode;\n-    options.setCodingConvention(config.codingConvention);\n-    options.setSummaryDetailLevel(config.summaryDetailLevel);\n-    outputCharset = options.outputCharset = getOutputCharset();\n+    options.setSourceMapOutputPath(config.createSourceMap);\n+    options.setSummaryDetailLevel(FlagConverter.summaryDetailLevelFromString(config.summaryDetailLevel));\n+    options.setOutputCharset(getOutputCharset());\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputJs(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (!config.createSourceMap.equals(\"\")) {\n+        options.setSourceMapDetailLevel(FlagConverter.sourceMapDetailLevelFromString(config.sourceMapDetailLevel));\n+        options.setSourceMapFormat(FlagConverter.sourceMapFormatFromString(config.sourceMapFormat));\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setInputVariableMap(VariableMap.load(config.variableMapInputFile));\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setInputPropertyMap(VariableMap.load(config.propertyMapInputFile));\n     }\n     if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n+        switch (config.languageIn) {\n+            case \"ECMASCRIPT3\":\n+            case \"ES3\":\n+                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n+                break;\n+            case \"ECMASCRIPT5\":\n+            case \"ES5\":\n+                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+                break;\n+            case \"ECMASCRIPT5_STRICT\":\n+            case \"ES5_STRICT\":\n+                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n+                break;\n+            case \"ECMASCRIPT6\":\n+            case \"ES6\":\n+                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT6);\n+                break;\n+            case \"ECMASCRIPT6_STRICT\":\n+            case \"ES6_STRICT\":\n+                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT6_STRICT);\n+                break;\n+            default:\n+                throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setDependencyOptions(DependencyOptions.pruneForClosureDependencies(config.manageClosureDependencies));\n    if (config.closureEntryPoints.size() > 0) {\n        options.setDependencyOptions(DependencyOptions.setClosureEntryPoint(config.closureEntryPoints));\n    }\n    options.setProcessCommonJSModules(config.commonJsEntryModule != null);\n    options.setLanguageMode(config.languageIn);\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    options.setSourceMapFormat(config.sourceMapFormat);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -6,39 +6,30 @@\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n+    options.setDependencyOptions(DependencyOptions.pruneForClosureDependencies(config.manageClosureDependencies));\n     if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n+        options.setDependencyOptions(DependencyOptions.setClosureEntryPoint(config.closureEntryPoints));\n     }\n+    options.setProcessCommonJSModules(config.commonJsEntryModule != null);\n+    options.setLanguageMode(config.languageIn);\n     options.devMode = config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    options.setSourceMapFormat(config.sourceMapFormat);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    if (config.languageIn.length() > 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n-        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n-        } else {\n-            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n-        }\n-    }\n     options.acceptConstKeyword = config.acceptConstKeyword;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.manageClosureDependencies, ImmutableList.copyOf(config.closureEntryPoints)));\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n        options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n        options.setSourceMapFormat(config.sourceMapFormat);\n    }\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.setAcceptConstKeyword(config.acceptConstKeyword);\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -6,23 +6,20 @@\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    if (config.closureEntryPoints.size() > 0) {\n-        options.setManageClosureDependencies(config.closureEntryPoints);\n-    }\n-    options.devMode = config.jscompDevMode;\n+    options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.manageClosureDependencies, ImmutableList.copyOf(config.closureEntryPoints)));\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n+        options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+        options.setSourceMapFormat(config.sourceMapFormat);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    options.sourceMapFormat = config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n@@ -31,7 +28,7 @@\n     }\n     if (config.languageIn.length() > 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n@@ -40,5 +37,5 @@\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n         }\n     }\n-    options.acceptConstKeyword = config.acceptConstKeyword;\n+    options.setAcceptConstKeyword(config.acceptConstKeyword);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]