[{"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n                doc = parser.parseInput(docData, baseUri);\n                doc.outputSettings().charset(charsetName);\n                return doc;\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n        return doc;\n    }\n    // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n    // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n    // into head mode\n    if (docData.length() > 0 && docData.charAt(0) == 65279)\n        docData = docData.substring(1);\n    doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -22,21 +22,25 @@\n                 byteData.rewind();\n                 docData = Charset.forName(foundCharset).decode(byteData).toString();\n                 doc = null;\n+                doc = parser.parseInput(docData, baseUri);\n+                doc.outputSettings().charset(charsetName);\n+                return doc;\n             }\n         }\n     } else {\n         // specified by content type header (or by user on file load)\n         Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n         docData = Charset.forName(charsetName).decode(byteData).toString();\n-    }\n-    if (doc == null) {\n-        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n-        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n-        // into head mode\n-        if (docData.length() > 0 && docData.charAt(0) == 65279)\n-            docData = docData.substring(1);\n         doc = parser.parseInput(docData, baseUri);\n         doc.outputSettings().charset(charsetName);\n+        return doc;\n     }\n+    // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n+    // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n+    // into head mode\n+    if (docData.length() > 0 && docData.charAt(0) == 65279)\n+        docData = docData.substring(1);\n+    doc = parser.parseInput(docData, baseUri);\n+    doc.outputSettings().charset(charsetName);\n     return doc;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n        // into head mode\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF')\n            docData = docData.substring(1);\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -33,7 +33,7 @@\n         // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n         // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n         // into head mode\n-        if (docData.length() > 0 && docData.charAt(0) == 65279)\n+        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF')\n             docData = docData.substring(1);\n         doc = parser.parseInput(docData, baseUri);\n         doc.outputSettings().charset(charsetName);\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                Charset charset = null;\n                try {\n                  charset = Charset.forName(foundCharset);\n                } catch (UnsupportedCharsetException ex) {\n                  // Handle exception\n                }\n                if (charset != null) {\n                  docData = charset.decode(byteData).toString();\n                  doc = null;\n                }\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        Charset charset = null;\n        try {\n          charset = Charset.forName(charsetName);\n        } catch (UnsupportedCharsetException ex) {\n          // Handle exception\n        }\n        if (charset != null) {\n          docData = charset.decode(byteData).toString();\n          doc = parser.parseInput(docData, baseUri);\n        }\n    }\n    if (doc == null) {\n        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n        // into head mode\n        if (docData.length() > 0 && docData.charAt(0) == 65279)\n            docData = docData.substring(1);\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -20,14 +20,31 @@\n                 // need to re-decode\n                 charsetName = foundCharset;\n                 byteData.rewind();\n-                docData = Charset.forName(foundCharset).decode(byteData).toString();\n-                doc = null;\n+                Charset charset = null;\n+                try {\n+                  charset = Charset.forName(foundCharset);\n+                } catch (UnsupportedCharsetException ex) {\n+                  // Handle exception\n+                }\n+                if (charset != null) {\n+                  docData = charset.decode(byteData).toString();\n+                  doc = null;\n+                }\n             }\n         }\n     } else {\n         // specified by content type header (or by user on file load)\n         Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n-        docData = Charset.forName(charsetName).decode(byteData).toString();\n+        Charset charset = null;\n+        try {\n+          charset = Charset.forName(charsetName);\n+        } catch (UnsupportedCharsetException ex) {\n+          // Handle exception\n+        }\n+        if (charset != null) {\n+          docData = charset.decode(byteData).toString();\n+          doc = parser.parseInput(docData, baseUri);\n+        }\n     }\n     if (doc == null) {\n         // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n                doc = parser.parseInput(docData, baseUri);\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n    }\n    // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight into head mode\n    if (docData.length() > 0 && docData.charAt(0) == 65279)\n        docData = docData.substring(1);\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -22,21 +22,18 @@\n                 byteData.rewind();\n                 docData = Charset.forName(foundCharset).decode(byteData).toString();\n                 doc = null;\n+                doc = parser.parseInput(docData, baseUri);\n             }\n         }\n     } else {\n         // specified by content type header (or by user on file load)\n         Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n         docData = Charset.forName(charsetName).decode(byteData).toString();\n+        doc = parser.parseInput(docData, baseUri);\n     }\n-    if (doc == null) {\n-        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n-        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n-        // into head mode\n-        if (docData.length() > 0 && docData.charAt(0) == 65279)\n-            docData = docData.substring(1);\n-        doc = parser.parseInput(docData, baseUri);\n-        doc.outputSettings().charset(charsetName);\n-    }\n+    // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight into head mode\n+    if (docData.length() > 0 && docData.charAt(0) == 65279)\n+        docData = docData.substring(1);\n+    doc.outputSettings().charset(charsetName);\n     return doc;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n                doc = parser.parseInput(docData, baseUri);\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n    }\n    if (doc == null) {\n        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n        // into head mode\n        if (docData.length() > 0 && docData.charAt(0) == 65279)\n            docData = docData.substring(1);\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -22,12 +22,14 @@\n                 byteData.rewind();\n                 docData = Charset.forName(foundCharset).decode(byteData).toString();\n                 doc = null;\n+                doc = parser.parseInput(docData, baseUri);\n             }\n         }\n     } else {\n         // specified by content type header (or by user on file load)\n         Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n         docData = Charset.forName(charsetName).decode(byteData).toString();\n+        doc = parser.parseInput(docData, baseUri);\n     }\n     if (doc == null) {\n         // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n    }\n    if (doc != null) {\n        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n        // into head mode\n        if (docData.length() > 0 && docData.charAt(0) == 65279)\n            docData = docData.substring(1);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -21,21 +21,21 @@\n                 charsetName = foundCharset;\n                 byteData.rewind();\n                 docData = Charset.forName(foundCharset).decode(byteData).toString();\n-                doc = null;\n+                doc = parser.parseInput(docData, baseUri);\n             }\n         }\n     } else {\n         // specified by content type header (or by user on file load)\n         Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n         docData = Charset.forName(charsetName).decode(byteData).toString();\n+        doc = parser.parseInput(docData, baseUri);\n     }\n-    if (doc == null) {\n+    if (doc != null) {\n         // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n         // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n         // into head mode\n         if (docData.length() > 0 && docData.charAt(0) == 65279)\n             docData = docData.substring(1);\n-        doc = parser.parseInput(docData, baseUri);\n         doc.outputSettings().charset(charsetName);\n     }\n     return doc;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n    }\n    if (docData.length() > 0 && docData.charAt(0) == 65279)\n        docData = docData.substring(1);\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -21,22 +21,17 @@\n                 charsetName = foundCharset;\n                 byteData.rewind();\n                 docData = Charset.forName(foundCharset).decode(byteData).toString();\n-                doc = null;\n+                doc = parser.parseInput(docData, baseUri);\n             }\n         }\n     } else {\n         // specified by content type header (or by user on file load)\n         Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n         docData = Charset.forName(charsetName).decode(byteData).toString();\n+        doc = parser.parseInput(docData, baseUri);\n     }\n-    if (doc == null) {\n-        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n-        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n-        // into head mode\n-        if (docData.length() > 0 && docData.charAt(0) == 65279)\n-            docData = docData.substring(1);\n-        doc = parser.parseInput(docData, baseUri);\n-        doc.outputSettings().charset(charsetName);\n-    }\n+    if (docData.length() > 0 && docData.charAt(0) == 65279)\n+        docData = docData.substring(1);\n+    doc.outputSettings().charset(charsetName);\n     return doc;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n                doc = parser.parseInput(docData, baseUri);\n                doc.outputSettings().charset(charsetName);\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    if (docData.length() > 0 && docData.charAt(0) == 65279) {\n        docData = docData.substring(1);\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -22,19 +22,19 @@\n                 byteData.rewind();\n                 docData = Charset.forName(foundCharset).decode(byteData).toString();\n                 doc = null;\n+                doc = parser.parseInput(docData, baseUri);\n+                doc.outputSettings().charset(charsetName);\n             }\n         }\n     } else {\n         // specified by content type header (or by user on file load)\n         Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n         docData = Charset.forName(charsetName).decode(byteData).toString();\n+        doc = parser.parseInput(docData, baseUri);\n+        doc.outputSettings().charset(charsetName);\n     }\n-    if (doc == null) {\n-        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n-        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n-        // into head mode\n-        if (docData.length() > 0 && docData.charAt(0) == 65279)\n-            docData = docData.substring(1);\n+    if (docData.length() > 0 && docData.charAt(0) == 65279) {\n+        docData = docData.substring(1);\n         doc = parser.parseInput(docData, baseUri);\n         doc.outputSettings().charset(charsetName);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n        // into head mode\n        if (docData.length() > 0 && docData.codePointAt(0) == 65279)\n            docData = docData.substring(1);\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -33,7 +33,7 @@\n         // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n         // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n         // into head mode\n-        if (docData.length() > 0 && docData.charAt(0) == 65279)\n+        if (docData.length() > 0 && docData.codePointAt(0) == 65279)\n             docData = docData.substring(1);\n         doc = parser.parseInput(docData, baseUri);\n         doc.outputSettings().charset(charsetName);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n    }\n    if (doc != null) {\n        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n        // into head mode\n        if (docData.length() > 0 && docData.charAt(0) == 65279)\n            doc.outputSettings().charset(charsetName).escapeMode(Entities.EscapeMode.xhtml);\n    }\n    return doc;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.selectFirst(\"meta[http-equiv=content-type], meta[charset]\");\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n        // into head mode\n        if (docData.length() > 0 && docData.charAt(0) == 65279)\n            docData = docData.substring(1);\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -7,7 +7,7 @@\n         // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n         docData = Charset.forName(defaultCharset).decode(byteData).toString();\n         doc = parser.parseInput(docData, baseUri);\n-        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n+        Element meta = doc.selectFirst(\"meta[http-equiv=content-type], meta[charset]\");\n         if (meta != null) {\n             // if not found, will keep utf-8 as best attempt\n             String foundCharset;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n        // into head mode\n        if (docData.length() > 0 && docData.charAt(0) == 65279)\n            docData = docData.substring(1);\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -16,7 +16,7 @@\n             } else {\n                 foundCharset = meta.attr(\"charset\");\n             }\n-            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                 // need to re-decode\n                 charsetName = foundCharset;\n                 byteData.rewind();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");\n        for (Element meta : metaElements) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n                break;\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n        // into head mode\n        if (docData.length() > 0 && docData.charAt(0) == 65279)\n            docData = docData.substring(1);\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -7,8 +7,8 @@\n         // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n         docData = Charset.forName(defaultCharset).decode(byteData).toString();\n         doc = parser.parseInput(docData, baseUri);\n-        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n-        if (meta != null) {\n+        Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");\n+        for (Element meta : metaElements) {\n             // if not found, will keep utf-8 as best attempt\n             String foundCharset;\n             if (meta.hasAttr(\"http-equiv\")) {\n@@ -22,6 +22,7 @@\n                 byteData.rewind();\n                 docData = Charset.forName(foundCharset).decode(byteData).toString();\n                 doc = null;\n+                break;\n             }\n         }\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n                doc = parser.parseInput(docData, baseUri);\n                doc.outputSettings().charset(charsetName);\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName); // set the parsed document's charset\n    }\n\n    // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n    // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n    // into head mode\n    if (docData.length() > 0 && docData.charAt(0) == 65279)\n        docData = docData.substring(1);\n\n    if (doc == null) {\n        // if parser is null, parse after removing BOM\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -22,21 +22,29 @@\n                 byteData.rewind();\n                 docData = Charset.forName(foundCharset).decode(byteData).toString();\n                 doc = null;\n+                doc = parser.parseInput(docData, baseUri);\n+                doc.outputSettings().charset(charsetName);\n             }\n         }\n     } else {\n         // specified by content type header (or by user on file load)\n         Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n         docData = Charset.forName(charsetName).decode(byteData).toString();\n+        doc = parser.parseInput(docData, baseUri);\n+        doc.outputSettings().charset(charsetName); // set the parsed document's charset\n     }\n+\n+    // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n+    // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n+    // into head mode\n+    if (docData.length() > 0 && docData.charAt(0) == 65279)\n+        docData = docData.substring(1);\n+\n     if (doc == null) {\n-        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n-        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n-        // into head mode\n-        if (docData.length() > 0 && docData.charAt(0) == 65279)\n-            docData = docData.substring(1);\n+        // if parser is null, parse after removing BOM\n         doc = parser.parseInput(docData, baseUri);\n         doc.outputSettings().charset(charsetName);\n     }\n+\n     return doc;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n                doc = parser.parseInput(docData, baseUri);\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n    }\n    if (docData.length() > 0 && docData.charAt(0) == 65279)\n        docData = docData.substring(1);\n    if (doc != null) {\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -22,20 +22,18 @@\n                 byteData.rewind();\n                 docData = Charset.forName(foundCharset).decode(byteData).toString();\n                 doc = null;\n+                doc = parser.parseInput(docData, baseUri);\n             }\n         }\n     } else {\n         // specified by content type header (or by user on file load)\n         Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n         docData = Charset.forName(charsetName).decode(byteData).toString();\n+        doc = parser.parseInput(docData, baseUri);\n     }\n-    if (doc == null) {\n-        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n-        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n-        // into head mode\n-        if (docData.length() > 0 && docData.charAt(0) == 65279)\n-            docData = docData.substring(1);\n-        doc = parser.parseInput(docData, baseUri);\n+    if (docData.length() > 0 && docData.charAt(0) == 65279)\n+        docData = docData.substring(1);\n+    if (doc != null) {\n         doc.outputSettings().charset(charsetName);\n     }\n     return doc;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n    }\n    if (docData.length() > 0 && docData.charAt(0) == 65279) {\n        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n        // into head mode\n        docData = docData.substring(1);\n        doc = parser.parseInput(docData, baseUri);\n    }\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -21,22 +21,22 @@\n                 charsetName = foundCharset;\n                 byteData.rewind();\n                 docData = Charset.forName(foundCharset).decode(byteData).toString();\n-                doc = null;\n+                doc = parser.parseInput(docData, baseUri);\n             }\n         }\n     } else {\n         // specified by content type header (or by user on file load)\n         Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n         docData = Charset.forName(charsetName).decode(byteData).toString();\n+        doc = parser.parseInput(docData, baseUri);\n     }\n-    if (doc == null) {\n+    if (docData.length() > 0 && docData.charAt(0) == 65279) {\n         // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n         // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n         // into head mode\n-        if (docData.length() > 0 && docData.charAt(0) == 65279)\n-            docData = docData.substring(1);\n+        docData = docData.substring(1);\n         doc = parser.parseInput(docData, baseUri);\n-        doc.outputSettings().charset(charsetName);\n     }\n+    doc.outputSettings().charset(charsetName);\n     return doc;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.selectFirst(\"meta[http-equiv=content-type], meta[charset]\");  // Replaced doc.select(\"meta[http-equiv=content-type], meta[charset]\").first() with doc.selectFirst() \n        if (meta != null) {\n            // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present\n        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight\n        // into head mode\n        if (docData.length() > 0 && docData.charAt(0) == 65279)\n            docData = docData.substring(1);\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "diff": "--- org/jsoup/helper/DataUtil.java@parseByteData\n+++ org/jsoup/helper/DataUtil.java@parseByteData\n@@ -7,7 +7,7 @@\n         // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n         docData = Charset.forName(defaultCharset).decode(byteData).toString();\n         doc = parser.parseInput(docData, baseUri);\n-        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n+        Element meta = doc.selectFirst(\"meta[http-equiv=content-type], meta[charset]\");  // Replaced doc.select(\"meta[http-equiv=content-type], meta[charset]\").first() with doc.selectFirst() \n         if (meta != null) {\n             // if not found, will keep utf-8 as best attempt\n             String foundCharset;\n", "finish_reason": "stop", "valid": false, "num": 1}]