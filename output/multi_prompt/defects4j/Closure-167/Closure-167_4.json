[{"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null) {\n        JSType restrictedType = type.restrictByBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        declareNameInScope(informed, name, restrictedType);\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -1,7 +1,7 @@\n private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n     JSType type = getTypeIfRefinable(name, blindScope);\n     if (type != null) {\n-        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n+        JSType restrictedType = type.restrictByBooleanOutcome(outcome);\n         FlowScope informed = blindScope.createChildFlowScope();\n         declareNameInScope(informed, name, restrictedType);\n         return informed;\n", "finish_reason": "stop", "valid": false, "num": 7}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null && type.isSubtypeOf(getNativeType(BOOLEAN_TYPE))) {\n        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        declareNameInScope(informed, name, restrictedType);\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -1,6 +1,6 @@\n private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n     JSType type = getTypeIfRefinable(name, blindScope);\n-    if (type != null) {\n+    if (type != null && type.isSubtypeOf(getNativeType(BOOLEAN_TYPE))) {\n         JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n         FlowScope informed = blindScope.createChildFlowScope();\n         declareNameInScope(informed, name, restrictedType);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null) {\n        JSType restrictedType = type.autobox().getRestrictedTypeGivenToBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        declareNameInScope(informed, name, restrictedType);\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -1,7 +1,7 @@\n private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n     JSType type = getTypeIfRefinable(name, blindScope);\n     if (type != null) {\n-        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n+        JSType restrictedType = type.autobox().getRestrictedTypeGivenToBooleanOutcome(outcome);\n         FlowScope informed = blindScope.createChildFlowScope();\n         declareNameInScope(informed, name, restrictedType);\n         return informed;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null) {\n        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n        FlowScope informed = blindScope.inferSlotType(name.getString(), restrictedType, true,\n                                                      false, blindScope);\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -2,8 +2,8 @@\n     JSType type = getTypeIfRefinable(name, blindScope);\n     if (type != null) {\n         JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n-        FlowScope informed = blindScope.createChildFlowScope();\n-        declareNameInScope(informed, name, restrictedType);\n+        FlowScope informed = blindScope.inferSlotType(name.getString(), restrictedType, true,\n+                                                      false, blindScope);\n         return informed;\n     }\n     return blindScope;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null) {\n        JSType restrictedType = type.getRestrictedTypeGivenBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        informed.declare(name.getString(), restrictedType);\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -1,9 +1,9 @@\n private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n     JSType type = getTypeIfRefinable(name, blindScope);\n     if (type != null) {\n-        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n+        JSType restrictedType = type.getRestrictedTypeGivenBooleanOutcome(outcome);\n         FlowScope informed = blindScope.createChildFlowScope();\n-        declareNameInScope(informed, name, restrictedType);\n+        informed.declare(name.getString(), restrictedType);\n         return informed;\n     }\n     return blindScope;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null) {\n        JSType restrictedType = type.getRestrictedTypeGivenBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        declareNameInScope(informed, name.getString(), restrictedType); // fixed\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -1,9 +1,9 @@\n private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n     JSType type = getTypeIfRefinable(name, blindScope);\n     if (type != null) {\n-        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n+        JSType restrictedType = type.getRestrictedTypeGivenBooleanOutcome(outcome);\n         FlowScope informed = blindScope.createChildFlowScope();\n-        declareNameInScope(informed, name, restrictedType);\n+        declareNameInScope(informed, name.getString(), restrictedType); // fixed\n         return informed;\n     }\n     return blindScope;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null) {\n        JSType restrictedType = type.getRestrictedTypeGivenBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        declareNameInScope(informed, name, restrictedType);\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -1,7 +1,7 @@\n private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n     JSType type = getTypeIfRefinable(name, blindScope);\n     if (type != null) {\n-        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n+        JSType restrictedType = type.getRestrictedTypeGivenBooleanOutcome(outcome);\n         FlowScope informed = blindScope.createChildFlowScope();\n         declareNameInScope(informed, name, restrictedType);\n         return informed;\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null && type.isSubtypeOf(getNativeType(BOOLEAN_TYPE))) { // added null check and type check\n        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        declareNameInScope(informed, name, restrictedType);\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -1,6 +1,6 @@\n private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n     JSType type = getTypeIfRefinable(name, blindScope);\n-    if (type != null) {\n+    if (type != null && type.isSubtypeOf(getNativeType(BOOLEAN_TYPE))) { // added null check and type check\n         JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n         FlowScope informed = blindScope.createChildFlowScope();\n         declareNameInScope(informed, name, restrictedType);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null) {\n        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n        if (restrictedType != null) {\n            FlowScope informed = blindScope.createChildFlowScope();\n            declareNameInScope(informed, name, restrictedType);\n            return informed;\n        }\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -2,9 +2,11 @@\n     JSType type = getTypeIfRefinable(name, blindScope);\n     if (type != null) {\n         JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n-        FlowScope informed = blindScope.createChildFlowScope();\n-        declareNameInScope(informed, name, restrictedType);\n-        return informed;\n+        if (restrictedType != null) {\n+            FlowScope informed = blindScope.createChildFlowScope();\n+            declareNameInScope(informed, name, restrictedType);\n+            return informed;\n+        }\n     }\n     return blindScope;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null) {\n        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        informed = declareNameInScope(informed, name, restrictedType); // Fix: assign the result of declareNameInScope to informed\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -3,7 +3,7 @@\n     if (type != null) {\n         JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n         FlowScope informed = blindScope.createChildFlowScope();\n-        declareNameInScope(informed, name, restrictedType);\n+        informed = declareNameInScope(informed, name, restrictedType); // Fix: assign the result of declareNameInScope to informed\n         return informed;\n     }\n     return blindScope;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null) {\n        JSType restrictedType = type.getRestrictedTypeGivenBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        declareNameInScope(informed, name.getString(), restrictedType);\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -1,9 +1,9 @@\n private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n     JSType type = getTypeIfRefinable(name, blindScope);\n     if (type != null) {\n-        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n+        JSType restrictedType = type.getRestrictedTypeGivenBooleanOutcome(outcome);\n         FlowScope informed = blindScope.createChildFlowScope();\n-        declareNameInScope(informed, name, restrictedType);\n+        declareNameInScope(informed, name.getString(), restrictedType);\n         return informed;\n     }\n     return blindScope;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null && !type.isUnknownType()) { // Add check to make sure type is not unknown\n        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        declareNameInScope(informed, name, restrictedType);\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -1,6 +1,6 @@\n private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n     JSType type = getTypeIfRefinable(name, blindScope);\n-    if (type != null) {\n+    if (type != null && !type.isUnknownType()) { // Add check to make sure type is not unknown\n         JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n         FlowScope informed = blindScope.createChildFlowScope();\n         declareNameInScope(informed, name, restrictedType);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null) {\n        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        informed.inferSlotType(name, restrictedType);\n        return informed;\n    }\n    return blindScope;\n}", "diff": "--- com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n+++ com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java@caseNameOrGetProp\n@@ -3,7 +3,7 @@\n     if (type != null) {\n         JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n         FlowScope informed = blindScope.createChildFlowScope();\n-        declareNameInScope(informed, name, restrictedType);\n+        informed.inferSlotType(name, restrictedType);\n         return informed;\n     }\n     return blindScope;\n", "finish_reason": "stop", "valid": false, "num": 1}]