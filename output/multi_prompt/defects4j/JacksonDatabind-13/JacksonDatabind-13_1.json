[{"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    // null checks added\n    if (instance == null){\n        throw new JsonMappingException(\"Instance cannot be null\");\n    }\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if (id == null) {\n        throw new JsonMappingException(\"Id cannot be null\");\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    if (roid == null) {\n        throw new JsonMappingException(\"ReadableObjectId cannot be null\");\n    }\n    roid.bindItem(instance);\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,21 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    // null checks added\n+    if (instance == null){\n+        throw new JsonMappingException(\"Instance cannot be null\");\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id == null) {\n+        throw new JsonMappingException(\"Id cannot be null\");\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (roid == null) {\n+        throw new JsonMappingException(\"ReadableObjectId cannot be null\");\n     }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    roid.bindItem(instance);\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id);\n+    }\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,10 +1,18 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n+    // null checks added\n+    if (instance == null){\n+        throw new JsonMappingException(\"Instance cannot be null\");\n+    }\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (id == null) {\n+        throw new JsonMappingException(\"Id cannot be null\");\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (roid == null) {\n+        throw new JsonMappingException(\"ReadableObjectId cannot be null\");\n+    }\n     roid.bindItem(instance);\n-    // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n     if (idProp != null) {\n         return idProp.setAndReturn(instance, id);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    // null checks added to handle null values\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if (id == null) {\n        return null;\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    if (roid == null) {\n        throw new JsonMappingException(\"Could not resolve Object Id\");\n    }\n    roid.bindItem(instance);\n    // also: may need to set a property value as well\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,19 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    // null checks added to handle null values\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id == null) {\n+        return null;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (roid == null) {\n+        throw new JsonMappingException(\"Could not resolve Object Id\");\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n+    roid.bindItem(instance);\n+    // also: may need to set a property value as well\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id);\n     }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,8 +1,14 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n+    // null checks added to handle null values\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (id == null) {\n+        return null;\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (roid == null) {\n+        throw new JsonMappingException(\"Could not resolve Object Id\");\n+    }\n     roid.bindItem(instance);\n     // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if (id == null) {\n        return null;\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,14 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id == null) {\n+        return null;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        idProp.setAndReturn(instance, id);\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,13 +1,14 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (id == null) {\n+        return null;\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n-    // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n     if (idProp != null) {\n-        return idProp.setAndReturn(instance, id);\n+        idProp.setAndReturn(instance, id);\n     }\n     return instance;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if(id == null){\n        return instance;\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,14 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if(id == null){\n+        return instance;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id);\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,10 +1,11 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if(id == null){\n+        return instance;\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n-    // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n     if (idProp != null) {\n         return idProp.setAndReturn(instance, id);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if(id == null) {\n        return null;\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id); \n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,14 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if(id == null) {\n+        return null;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id); \n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,13 +1,14 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if(id == null) {\n+        return null;\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n-    // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n     if (idProp != null) {\n-        return idProp.setAndReturn(instance, id);\n+        return idProp.setAndReturn(instance, id); \n     }\n     return instance;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    // null check for _valueDeserializer\n    if (_valueDeserializer == null) {\n        throw ctxt.mappingException(\"Missing value deserializer\");\n    }\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    // null check for _objectIdReader\n    if (_objectIdReader == null) {\n        throw ctxt.mappingException(\"Missing object id reader\");\n    }\n    // null check for roid\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    if (roid == null) {\n        throw ctxt.mappingException(\"No readable object id found\");\n    }\n    roid.bindItem(instance);\n    // also: may need to set a property value as well\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,24 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    // null check for _valueDeserializer\n+    if (_valueDeserializer == null) {\n+        throw ctxt.mappingException(\"Missing value deserializer\");\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    // null check for _objectIdReader\n+    if (_objectIdReader == null) {\n+        throw ctxt.mappingException(\"Missing object id reader\");\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n+    // null check for roid\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (roid == null) {\n+        throw ctxt.mappingException(\"No readable object id found\");\n     }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    roid.bindItem(instance);\n+    // also: may need to set a property value as well\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id);\n+    }\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,8 +1,19 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n+    // null check for _valueDeserializer\n+    if (_valueDeserializer == null) {\n+        throw ctxt.mappingException(\"Missing value deserializer\");\n+    }\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    // null check for _objectIdReader\n+    if (_objectIdReader == null) {\n+        throw ctxt.mappingException(\"Missing object id reader\");\n+    }\n+    // null check for roid\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (roid == null) {\n+        throw ctxt.mappingException(\"No readable object id found\");\n+    }\n     roid.bindItem(instance);\n     // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if (id == null) {\n        return null;\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,14 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id == null) {\n+        return null;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id);\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,10 +1,11 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (id == null) {\n+        return null;\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n-    // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n     if (idProp != null) {\n         return idProp.setAndReturn(instance, id);\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if (id != null) {\n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n        roid.bindItem(instance);\n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp != null) {\n            return idProp.setAndReturn(instance, id);\n        }\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,13 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id != null) {\n+        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+        roid.bindItem(instance);\n+        SettableBeanProperty idProp = _objectIdReader.idProperty;\n+        if (idProp != null) {\n+            return idProp.setAndReturn(instance, id);\n         }\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n-    }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,13 +1,13 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id != null) {\n         ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n-    roid.bindItem(instance);\n-    // also: may need to set a property value as well\n-    SettableBeanProperty idProp = _objectIdReader.idProperty;\n-    if (idProp != null) {\n-        return idProp.setAndReturn(instance, id);\n+        roid.bindItem(instance);\n+        SettableBeanProperty idProp = _objectIdReader.idProperty;\n+        if (idProp != null) {\n+            return idProp.setAndReturn(instance, id);\n+        }\n     }\n     return instance;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if (id == null) { // added null check\n        return null;\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,14 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id == null) { // added null check\n+        return null;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id);\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,10 +1,11 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (id == null) { // added null check\n+        return null;\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n-    // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n     if (idProp != null) {\n         return idProp.setAndReturn(instance, id);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    // check for null\n    if (instance == null) {\n        instance = _valueInstantiator.createUsingDefault(ctxt);\n    }\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    // also: may need to set a property value as well\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,16 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    // check for null\n+    if (instance == null) {\n+        instance = _valueInstantiator.createUsingDefault(ctxt);\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    // also: may need to set a property value as well\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id);\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,8 +1,11 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n+    // check for null\n+    if (instance == null) {\n+        instance = _valueInstantiator.createUsingDefault(ctxt);\n+    }\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n     // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    // adding null check for _valueDeserializer\n    if (_valueDeserializer != null) {\n        Object id = _valueDeserializer.deserialize(jp, ctxt);\n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n        roid.bindItem(instance);\n        // also: may need to set a property value as well\n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp != null) {\n            return idProp.setAndReturn(instance, id);\n        }\n        return instance;\n    }\n    else {\n        //return null if _valueDeserializer is null\n        return null;\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,19 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    // adding null check for _valueDeserializer\n+    if (_valueDeserializer != null) {\n+        Object id = _valueDeserializer.deserialize(jp, ctxt);\n+        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+        roid.bindItem(instance);\n+        // also: may need to set a property value as well\n+        SettableBeanProperty idProp = _objectIdReader.idProperty;\n+        if (idProp != null) {\n+            return idProp.setAndReturn(instance, id);\n         }\n+        return instance;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    else {\n+        //return null if _valueDeserializer is null\n+        return null;\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,13 +1,19 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n-    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    // adding null check for _valueDeserializer\n+    if (_valueDeserializer != null) {\n+        Object id = _valueDeserializer.deserialize(jp, ctxt);\n         ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n-    roid.bindItem(instance);\n-    // also: may need to set a property value as well\n-    SettableBeanProperty idProp = _objectIdReader.idProperty;\n-    if (idProp != null) {\n-        return idProp.setAndReturn(instance, id);\n+        roid.bindItem(instance);\n+        // also: may need to set a property value as well\n+        SettableBeanProperty idProp = _objectIdReader.idProperty;\n+        if (idProp != null) {\n+            return idProp.setAndReturn(instance, id);\n+        }\n+        return instance;\n     }\n-    return instance;\n+    else {\n+        //return null if _valueDeserializer is null\n+        return null;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    if (instance == null) { // add null check\n        return null;\n    }\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        try {\n            return idProp.setAndReturn(instance, id);\n        } catch (Exception e) { // catch possible exception\n            throw ctxt.wrapAndThrow(e, instance, idProp.getName());\n        }\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,18 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    if (instance == null) { // add null check\n+        return null;\n+    }\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        try {\n+            return idProp.setAndReturn(instance, id);\n+        } catch (Exception e) { // catch possible exception\n+            throw ctxt.wrapAndThrow(e, instance, idProp.getName());\n         }\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n-    }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,13 +1,18 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n+    if (instance == null) { // add null check\n+        return null;\n+    }\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n-    // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n     if (idProp != null) {\n-        return idProp.setAndReturn(instance, id);\n+        try {\n+            return idProp.setAndReturn(instance, id);\n+        } catch (Exception e) { // catch possible exception\n+            throw ctxt.wrapAndThrow(e, instance, idProp.getName());\n+        }\n     }\n     return instance;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    // check for null deserializer\n    if (_valueDeserializer == null) {\n        return instance;\n    }\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if (id == null) {\n        return null;\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    // check for null id property\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp == null) {\n        return instance;\n    }\n    return idProp.setAndReturn(instance, id);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,19 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    // check for null deserializer\n+    if (_valueDeserializer == null) {\n+        return instance;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id == null) {\n+        return null;\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    // check for null id property\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp == null) {\n+        return instance;\n     }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return idProp.setAndReturn(instance, id);\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,13 +1,19 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n+    // check for null deserializer\n+    if (_valueDeserializer == null) {\n+        return instance;\n+    }\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (id == null) {\n+        return null;\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n-    // also: may need to set a property value as well\n+    // check for null id property\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n-    if (idProp != null) {\n-        return idProp.setAndReturn(instance, id);\n+    if (idProp == null) {\n+        return instance;\n     }\n-    return instance;\n+    return idProp.setAndReturn(instance, id);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    // check for null values\n    if (instance == null) {\n        return null;\n    }\n    // deserializer fails if null id found\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if (id == null) {\n        throw new JsonMappingException(\"Cannot deserialize Set with null id\");\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    // set property value as well\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,20 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    // check for null values\n+    if (instance == null) {\n+        return null;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    // deserializer fails if null id found\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id == null) {\n+        throw new JsonMappingException(\"Cannot deserialize Set with null id\");\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    // set property value as well\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        idProp.setAndReturn(instance, id);\n     }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,13 +1,20 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n+    // check for null values\n+    if (instance == null) {\n+        return null;\n+    }\n+    // deserializer fails if null id found\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (id == null) {\n+        throw new JsonMappingException(\"Cannot deserialize Set with null id\");\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n-    // also: may need to set a property value as well\n+    // set property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n     if (idProp != null) {\n-        return idProp.setAndReturn(instance, id);\n+        idProp.setAndReturn(instance, id);\n     }\n     return instance;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    // check for null value\n    if(instance == null) {\n        throw new IllegalArgumentException(\"instance cannot be null\");\n    }\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    // also: may need to set a property value as well\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,16 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    // check for null value\n+    if(instance == null) {\n+        throw new IllegalArgumentException(\"instance cannot be null\");\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    // also: may need to set a property value as well\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id);\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,6 +1,9 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n+    // check for null value\n+    if(instance == null) {\n+        throw new IllegalArgumentException(\"instance cannot be null\");\n+    }\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n         ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    if (instance == null) {\n        return null;\n    }\n    // note: add null checks before deserialization\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if (id == null) {\n        return null;\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    // also: may need to set a property value as well\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,19 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    if (instance == null) {\n+        return null;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    // note: add null checks before deserialization\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id == null) {\n+        return null;\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    // also: may need to set a property value as well\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id);\n     }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,8 +1,14 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n+    if (instance == null) {\n+        return null;\n+    }\n+    // note: add null checks before deserialization\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (id == null) {\n+        return null;\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n     // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if (id == null) {\n        return null;\n    }\n    else {\n        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n        roid.bindItem(instance);\n        SettableBeanProperty idProp = _objectIdReader.idProperty;\n        if (idProp != null) {\n            return idProp.setAndReturn(instance, id);\n        }\n        return instance;\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,16 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id == null) {\n+        return null;\n+    }\n+    else {\n+        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+        roid.bindItem(instance);\n+        SettableBeanProperty idProp = _objectIdReader.idProperty;\n+        if (idProp != null) {\n+            return idProp.setAndReturn(instance, id);\n         }\n+        return instance;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n-    }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,13 +1,16 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id == null) {\n+        return null;\n+    }\n+    else {\n         ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n-    roid.bindItem(instance);\n-    // also: may need to set a property value as well\n-    SettableBeanProperty idProp = _objectIdReader.idProperty;\n-    if (idProp != null) {\n-        return idProp.setAndReturn(instance, id);\n+        roid.bindItem(instance);\n+        SettableBeanProperty idProp = _objectIdReader.idProperty;\n+        if (idProp != null) {\n+            return idProp.setAndReturn(instance, id);\n+        }\n+        return instance;\n     }\n-    return instance;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    // add null check for _valueDeserializer\n    if (_valueDeserializer == null) {\n        return instance;\n    }\n    // add null check for id\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if (id == null) {\n        return instance;\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    // also: may need to set a property value as well\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,20 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    // add null check for _valueDeserializer\n+    if (_valueDeserializer == null) {\n+        return instance;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    // add null check for id\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if (id == null) {\n+        return instance;\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    // also: may need to set a property value as well\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id);\n     }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,8 +1,15 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n+    // add null check for _valueDeserializer\n+    if (_valueDeserializer == null) {\n+        return instance;\n+    }\n+    // add null check for id\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if (id == null) {\n+        return instance;\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n     // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n    Object id = _valueDeserializer.deserialize(jp, ctxt);\n    if(id == null) {\n        return instance;\n    }\n    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n    roid.bindItem(instance);\n    SettableBeanProperty idProp = _objectIdReader.idProperty;\n    if (idProp != null) {\n        return idProp.setAndReturn(instance, id);\n    }\n    return instance;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n+++ com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java@findObjectId\n@@ -1,36 +1,14 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) {\n-        final ObjectIdGenerator.IdKey key = gen.key(id);\n-    if (_objectIds == null) {\n-        _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId>();\n-    } else {\n-        ReadableObjectId entry = _objectIds.get(key);\n-        if (entry != null) {\n-            return entry;\n-        }\n+public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n+    Object id = _valueDeserializer.deserialize(jp, ctxt);\n+    if(id == null) {\n+        return instance;\n     }\n-    // Not seen yet, must create entry and configure resolver.\n-    ObjectIdResolver resolver = null;\n-    if (_objectIdResolvers == null) {\n-        _objectIdResolvers = new ArrayList<ObjectIdResolver>(8);\n-    } else {\n-        for (ObjectIdResolver res : _objectIdResolvers) {\n-            if (res.canUseFor(resolverType)) {\n-                resolver = res;\n-                break;\n-            }\n-        }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    roid.bindItem(instance);\n+    SettableBeanProperty idProp = _objectIdReader.idProperty;\n+    if (idProp != null) {\n+        return idProp.setAndReturn(instance, id);\n     }\n-    if (resolver == null) {\n-        resolver = resolverType.newForDeserialization(this);\n-        // 19-Dec-2014, tatu: For final 2.5.0, remove temporary (2.4.x) work-around\n-        //   needed to clear state between calls.\n-        // !!! 18-Jun-2014, pgelinas: Temporary fix for [#490] until real\n-        //    fix (for jackson-annotations, SimpleObjectIdResolver) can be added.\n-                _objectIdResolvers.add(resolver);\n-    }\n-    ReadableObjectId entry = new ReadableObjectId(key);\n-    entry.setResolver(resolver);\n-    _objectIds.put(key, entry);\n-    return entry;\n+    return instance;\n }\n--- com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n+++ com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java@deserializeSetAndReturn\n@@ -1,10 +1,11 @@\n @Override\n public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {\n-    // note: no null checks (unlike usually); deserializer should fail if one found\n     Object id = _valueDeserializer.deserialize(jp, ctxt);\n-        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n+    if(id == null) {\n+        return instance;\n+    }\n+    ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);\n     roid.bindItem(instance);\n-    // also: may need to set a property value as well\n     SettableBeanProperty idProp = _objectIdReader.idProperty;\n     if (idProp != null) {\n         return idProp.setAndReturn(instance, id);\n", "finish_reason": "stop", "valid": false, "num": 1}]