[{"output": "public static <T> T[] add(T[] array, int index, T element) {\n    Class<?> clss = null;\n    if (array != null) {\n        clss = array.getClass().getComponentType();\n    } else if (element != null) {\n        clss = element.getClass();\n    } else {\n        return (T[]) new Object[] { null };\n    }\n    // the add method creates an array of type clss, which is type T\n    @SuppressWarnings(\"unchecked\")\n    final T[] newArray = (T[]) Array.newInstance(clss, array.length + 1);\n    System.arraycopy(array, 0, newArray, 0, index);\n    newArray[index] = element;\n    System.arraycopy(array, index, newArray, index + 1, array.length - index);\n    return newArray;\n}", "diff": "--- org/apache/commons/lang3/ArrayUtils.java@add1\n+++ org/apache/commons/lang3/ArrayUtils.java@add1\n@@ -9,6 +9,9 @@\n     }\n     // the add method creates an array of type clss, which is type T\n     @SuppressWarnings(\"unchecked\")\n-    final T[] newArray = (T[]) add(array, index, element, clss);\n+    final T[] newArray = (T[]) Array.newInstance(clss, array.length + 1);\n+    System.arraycopy(array, 0, newArray, 0, index);\n+    newArray[index] = element;\n+    System.arraycopy(array, index, newArray, index + 1, array.length - index);\n     return newArray;\n }\n", "finish_reason": "stop", "valid": false, "num": 11}, {"output": "public static <T> T[] add(T[] array, int index, T element) {\n    Class<?> clss = null;\n    if (array != null) {\n        clss = array.getClass().getComponentType();\n    } else if (element != null) {\n        clss = element.getClass();\n    } else {\n        return (T[]) new Object[] { null };\n    }\n    // creates a new array with length + 1\n    final T[] newArray = Arrays.copyOf(array, array.length + 1);\n    //shifts the elements of newArray to the right from the given index\n    System.arraycopy(newArray, index, newArray, index + 1, newArray.length - 1 - index);\n    //sets the new element to the given index\n    newArray[index] = element;\n    return newArray;\n}", "diff": "--- org/apache/commons/lang3/ArrayUtils.java@add1\n+++ org/apache/commons/lang3/ArrayUtils.java@add1\n@@ -7,8 +7,11 @@\n     } else {\n         return (T[]) new Object[] { null };\n     }\n-    // the add method creates an array of type clss, which is type T\n-    @SuppressWarnings(\"unchecked\")\n-    final T[] newArray = (T[]) add(array, index, element, clss);\n+    // creates a new array with length + 1\n+    final T[] newArray = Arrays.copyOf(array, array.length + 1);\n+    //shifts the elements of newArray to the right from the given index\n+    System.arraycopy(newArray, index, newArray, index + 1, newArray.length - 1 - index);\n+    //sets the new element to the given index\n+    newArray[index] = element;\n     return newArray;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static <T> T[] add(T[] array, int index, T element) {\n    Class<?> clss = null;\n    if (array != null) {\n        clss = array.getClass().getComponentType();\n    } else if (element != null) {\n        clss = element.getClass();\n    } else {\n        return (T[]) new Object[] { null };\n    }\n    // call the overloaded add method with a new array of type clss, which is type T\n    return add(array, index, element, clss);\n}\n\nprivate static Object[] add(Object[] array, int index, Object element, Class<?> clss) {\n    final int length = array != null ? array.length : 0;\n    if (index < 0 || index > length) {\n        throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n    }\n    final Object[] newArray = (Object[]) Array.newInstance(clss, length + 1); // create new array of type clss\n    System.arraycopy(array, 0, newArray, 0, index);\n    newArray[index] = element;\n    if (index < length) {\n        System.arraycopy(array, index, newArray, index + 1, length - index);\n    }\n    return newArray;\n}", "diff": "--- org/apache/commons/lang3/ArrayUtils.java@add1\n+++ org/apache/commons/lang3/ArrayUtils.java@add1\n@@ -7,8 +7,6 @@\n     } else {\n         return (T[]) new Object[] { null };\n     }\n-    // the add method creates an array of type clss, which is type T\n-    @SuppressWarnings(\"unchecked\")\n-    final T[] newArray = (T[]) add(array, index, element, clss);\n-    return newArray;\n+    // call the overloaded add method with a new array of type clss, which is type T\n+    return add(array, index, element, clss);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static <T> T[] add(T[] array, int index, T element) {\n    Class<?> clss = null;\n    if (array != null) {\n        clss = array.getClass().getComponentType();\n    } else if (element != null) {\n        clss = element.getClass();\n    } else {\n        return (T[]) new Object[] { null };\n    }\n    // the add method creates an array of type clss, which is type T\n    @SuppressWarnings(\"unchecked\")\n    final T[] newArray = (T[]) Array.newInstance(clss, array != null ? array.length + 1 : 1);\n    for (int i = 0, j = 0; i < newArray.length; i++, j++) {\n        if (i == index) {\n            newArray[i] = element;\n            j--;\n            continue;\n        }\n        if (array != null && j < array.length) {\n            newArray[i] = array[j];\n        }\n    }\n    return newArray;\n}", "diff": "--- org/apache/commons/lang3/ArrayUtils.java@add1\n+++ org/apache/commons/lang3/ArrayUtils.java@add1\n@@ -9,6 +9,16 @@\n     }\n     // the add method creates an array of type clss, which is type T\n     @SuppressWarnings(\"unchecked\")\n-    final T[] newArray = (T[]) add(array, index, element, clss);\n+    final T[] newArray = (T[]) Array.newInstance(clss, array != null ? array.length + 1 : 1);\n+    for (int i = 0, j = 0; i < newArray.length; i++, j++) {\n+        if (i == index) {\n+            newArray[i] = element;\n+            j--;\n+            continue;\n+        }\n+        if (array != null && j < array.length) {\n+            newArray[i] = array[j];\n+        }\n+    }\n     return newArray;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static <T> T[] add(T[] array, int index, T element) {\n    Class<?> clss;\n    if (array != null && array.getClass().getComponentType() == element.getClass()) {\n        // check if array and element have same component type\n        clss = array.getClass().getComponentType();\n    } else if (array != null) {\n        clss = array.getClass().getComponentType();\n        // need to create a new array with the correct component type\n        T[] newArray = (T[]) Array.newInstance(clss, array.length+1);\n        // copy elements before index\n        System.arraycopy(array, 0, newArray, 0, index);\n        // insert element at index\n        newArray[index] = element;\n        // copy elements after index\n        System.arraycopy(array, index, newArray, index+1, array.length-index);\n        return newArray;\n    } else if (element != null) {\n        clss = element.getClass();\n        // create a new array with length 1\n        T[] newArray = (T[]) Array.newInstance(clss, 1);\n        newArray[0] = element;\n        return newArray;\n    } else {\n        return null;\n    }\n    // the add method creates an array of type clss, which is type T\n    @SuppressWarnings(\"unchecked\")\n    final T[] newArray = (T[]) add(array, index, element, clss);\n    return newArray;\n}", "diff": "--- org/apache/commons/lang3/ArrayUtils.java@add1\n+++ org/apache/commons/lang3/ArrayUtils.java@add1\n@@ -1,11 +1,27 @@\n public static <T> T[] add(T[] array, int index, T element) {\n-    Class<?> clss = null;\n-    if (array != null) {\n+    Class<?> clss;\n+    if (array != null && array.getClass().getComponentType() == element.getClass()) {\n+        // check if array and element have same component type\n         clss = array.getClass().getComponentType();\n+    } else if (array != null) {\n+        clss = array.getClass().getComponentType();\n+        // need to create a new array with the correct component type\n+        T[] newArray = (T[]) Array.newInstance(clss, array.length+1);\n+        // copy elements before index\n+        System.arraycopy(array, 0, newArray, 0, index);\n+        // insert element at index\n+        newArray[index] = element;\n+        // copy elements after index\n+        System.arraycopy(array, index, newArray, index+1, array.length-index);\n+        return newArray;\n     } else if (element != null) {\n         clss = element.getClass();\n+        // create a new array with length 1\n+        T[] newArray = (T[]) Array.newInstance(clss, 1);\n+        newArray[0] = element;\n+        return newArray;\n     } else {\n-        return (T[]) new Object[] { null };\n+        return null;\n     }\n     // the add method creates an array of type clss, which is type T\n     @SuppressWarnings(\"unchecked\")\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static <T> T[] add(T[] array, int index, T element) {\n    Class<?> clss = null;\n    if (array != null) {\n        clss = array.getClass().getComponentType();\n    } else if (element != null) {\n        clss = element.getClass();\n    } else {\n        return (T[]) new Object[] { null };\n    }\n    // the add method creates an array of type clss, which is type T\n    @SuppressWarnings(\"unchecked\")\n    final T[] newArray = (T[]) Array.newInstance(clss, array.length+1);\n    System.arraycopy(array,0,newArray,0,index);\n    newArray[index] = element;\n    System.arraycopy(array,index,newArray,index+1,array.length-index);\n    return newArray;\n}", "diff": "--- org/apache/commons/lang3/ArrayUtils.java@add1\n+++ org/apache/commons/lang3/ArrayUtils.java@add1\n@@ -9,6 +9,9 @@\n     }\n     // the add method creates an array of type clss, which is type T\n     @SuppressWarnings(\"unchecked\")\n-    final T[] newArray = (T[]) add(array, index, element, clss);\n+    final T[] newArray = (T[]) Array.newInstance(clss, array.length+1);\n+    System.arraycopy(array,0,newArray,0,index);\n+    newArray[index] = element;\n+    System.arraycopy(array,index,newArray,index+1,array.length-index);\n     return newArray;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static <T> T[] add(T[] array, int index, T element) {\n    Class<?> clss = null;\n    if (array != null) {\n        clss = array.getClass().getComponentType();\n    } else if (element != null) {\n        clss = element.getClass();\n    } else {\n        return (T[]) new Object[] { null };\n    }\n    // the add method creates an array of type clss, which is type T\n    final T[] newArray = (T[]) Array.newInstance(clss, array.length + 1);\n    System.arraycopy(array, 0, newArray, 0, index);\n    newArray[index] = element;\n    System.arraycopy(array, index, newArray, index + 1, array.length - index);\n    return newArray;\n}", "diff": "--- org/apache/commons/lang3/ArrayUtils.java@add1\n+++ org/apache/commons/lang3/ArrayUtils.java@add1\n@@ -8,7 +8,9 @@\n         return (T[]) new Object[] { null };\n     }\n     // the add method creates an array of type clss, which is type T\n-    @SuppressWarnings(\"unchecked\")\n-    final T[] newArray = (T[]) add(array, index, element, clss);\n+    final T[] newArray = (T[]) Array.newInstance(clss, array.length + 1);\n+    System.arraycopy(array, 0, newArray, 0, index);\n+    newArray[index] = element;\n+    System.arraycopy(array, index, newArray, index + 1, array.length - index);\n     return newArray;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static <T> T[] add(T[] array, int index, T element) {\n    Class<?> clss = null;\n    if (array != null) {\n        clss = array.getClass().getComponentType();\n    } else if (element != null) {\n        clss = element.getClass();\n    } else {\n        return (T[]) new Object[] { null };\n    }\n    // the add method creates an array of type clss, which is type T\n    @SuppressWarnings(\"unchecked\")\n    final T[] newArray = (T[]) Array.newInstance(clss, array.length + 1);\n    for (int i = 0, j = 0; i < newArray.length; i++) {\n        if (i == index) {\n            newArray[i] = element;\n        } else {\n            newArray[i] = array[j++];\n        }\n    }\n    return newArray;\n}", "diff": "--- org/apache/commons/lang3/ArrayUtils.java@add1\n+++ org/apache/commons/lang3/ArrayUtils.java@add1\n@@ -9,6 +9,13 @@\n     }\n     // the add method creates an array of type clss, which is type T\n     @SuppressWarnings(\"unchecked\")\n-    final T[] newArray = (T[]) add(array, index, element, clss);\n+    final T[] newArray = (T[]) Array.newInstance(clss, array.length + 1);\n+    for (int i = 0, j = 0; i < newArray.length; i++) {\n+        if (i == index) {\n+            newArray[i] = element;\n+        } else {\n+            newArray[i] = array[j++];\n+        }\n+    }\n     return newArray;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static <T> T[] add(T[] array, int index, T element) {\n    Class<?> clss = null;\n    if (array != null) {\n        clss = array.getClass().getComponentType();\n    } else if (element != null) {\n        clss = element.getClass();\n    } else {\n        return (T[]) new Object[] { null };\n    }\n    // the add method creates an array of type clss, which is type T\n    @SuppressWarnings(\"unchecked\")\n    final T[] newArray = (T[]) Array.newInstance(clss, array.length + 1);\n    for (int i = 0, j = 0; i < newArray.length; i++, j++) {\n        if (i == index) {\n            newArray[i] = element;\n            j--;\n        } else {\n            newArray[i] = array[j];\n        }\n    }\n    return newArray;\n}", "diff": "--- org/apache/commons/lang3/ArrayUtils.java@add1\n+++ org/apache/commons/lang3/ArrayUtils.java@add1\n@@ -9,6 +9,14 @@\n     }\n     // the add method creates an array of type clss, which is type T\n     @SuppressWarnings(\"unchecked\")\n-    final T[] newArray = (T[]) add(array, index, element, clss);\n+    final T[] newArray = (T[]) Array.newInstance(clss, array.length + 1);\n+    for (int i = 0, j = 0; i < newArray.length; i++, j++) {\n+        if (i == index) {\n+            newArray[i] = element;\n+            j--;\n+        } else {\n+            newArray[i] = array[j];\n+        }\n+    }\n     return newArray;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static <T> T[] add(T[] array, int index, T element) {\n    Class<?> clss = null;\n    if (array != null) {\n        clss = array.getClass().getComponentType();\n    } else if (element != null) {\n        clss = element.getClass();\n    } else {\n        return (T[]) new Object[] { null };\n    }\n    // the add method creates an array of type clss, which is type T\n    @SuppressWarnings(\"unchecked\")\n    final T[] newArray = (T[]) Array.newInstance(clss, array == null ? 1 : array.length + 1);\n    if (array != null) {\n        System.arraycopy(array, 0, newArray, 0, index);\n        System.arraycopy(array, index, newArray, index + 1, array.length - index);\n    }\n    newArray[index] = element;\n    return newArray;\n}", "diff": "--- org/apache/commons/lang3/ArrayUtils.java@add1\n+++ org/apache/commons/lang3/ArrayUtils.java@add1\n@@ -9,6 +9,11 @@\n     }\n     // the add method creates an array of type clss, which is type T\n     @SuppressWarnings(\"unchecked\")\n-    final T[] newArray = (T[]) add(array, index, element, clss);\n+    final T[] newArray = (T[]) Array.newInstance(clss, array == null ? 1 : array.length + 1);\n+    if (array != null) {\n+        System.arraycopy(array, 0, newArray, 0, index);\n+        System.arraycopy(array, index, newArray, index + 1, array.length - index);\n+    }\n+    newArray[index] = element;\n     return newArray;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]