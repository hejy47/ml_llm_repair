[{"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        _writeNumeric(value);\n    }\n}\n\nNote: The fixed function replaces `writeRaw(_asString(value))` with `_writeNumeric(value)` which writes the BigDecimal value directly as a numeric value without converting it to a string first.", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,11 +5,11 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+    } else if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _writeNumeric(value);\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,11 +5,11 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _writeNumeric(value);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n            writeRaw(value.toPlainString());\n        } else {\n            String raw = _asString(value);\n            _writeQuotedString(raw);\n        }\n    } else {\n        if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n            writeRaw(value.toPlainString());\n        } else {\n            _writeRawValue(value);\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,20 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+        if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            writeRaw(value.toPlainString());\n+        } else {\n+            String raw = _asString(value);\n+            _writeQuotedString(raw);\n+        }\n     } else {\n-        writeRaw(_asString(value));\n+        if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            writeRaw(value.toPlainString());\n+        } else {\n+            _writeRawValue(value);\n+        }\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,20 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            writeRaw(value.toPlainString());\n+        } else {\n+            String raw = _asString(value);\n+            _writeQuotedString(raw);\n+        }\n     } else {\n-        writeRaw(_asString(value));\n+        if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            writeRaw(value.toPlainString());\n+        } else {\n+            _writeRawValue(value);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else {\n        BigDecimal scaled = value.stripTrailingZeros();\n        if (scaled.scale() <= 0) {\n            writeRaw(scaled.toBigInteger().toString());\n        } else {\n            writeRaw(scaled.toPlainString());\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,17 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        BigDecimal scaled = value.stripTrailingZeros();\n+        if (scaled.scale() <= 0) {\n+            writeRaw(scaled.toBigInteger().toString());\n+        } else {\n+            writeRaw(scaled.toPlainString());\n+        }\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,17 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n         String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        BigDecimal scaled = value.stripTrailingZeros();\n+        if (scaled.scale() <= 0) {\n+            writeRaw(scaled.toBigInteger().toString());\n+        } else {\n+            writeRaw(scaled.toPlainString());\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        // Use toString instead of toPlainString to avoid trailing zeros\n        writeRaw(value.toString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,14 +1,14 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+        // Use toString instead of toPlainString to avoid trailing zeros\n+        writeRaw(value.toString());\n     } else {\n         writeRaw(_asString(value));\n     }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,6 +1,5 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n@@ -8,7 +7,8 @@\n         String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        // Use toString instead of toPlainString to avoid trailing zeros\n+        writeRaw(value.toString());\n     } else {\n         writeRaw(_asString(value));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n            // use toPlainString() for better performance and to avoid scientific notation\n            _writeQuotedString(value.toPlainString());\n        } else {\n            // use toString() to preserve formatting\n            _writeQuotedString(value.toString());\n        }\n    } else {\n        // always write BigDecimal as a number\n        writeRaw(value.toPlainString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,18 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+        if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            // use toPlainString() for better performance and to avoid scientific notation\n+            _writeQuotedString(value.toPlainString());\n+        } else {\n+            // use toString() to preserve formatting\n+            _writeQuotedString(value.toString());\n+        }\n+    } else {\n+        // always write BigDecimal as a number\n         writeRaw(value.toPlainString());\n-    } else {\n-        writeRaw(_asString(value));\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,18 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+        if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            // use toPlainString() for better performance and to avoid scientific notation\n+            _writeQuotedString(value.toPlainString());\n+        } else {\n+            // use toString() to preserve formatting\n+            _writeQuotedString(value.toString());\n+        }\n+    } else {\n+        // always write BigDecimal as a number\n         writeRaw(value.toPlainString());\n-    } else {\n-        writeRaw(_asString(value));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        _writeSimpleValue(value);\n    }\n}\n\n(Note: This fix assumes that the _writeSimpleValue() method already handles BigDecimal values correctly, which seems to be the case based on the context.) \n\nThe fix involves changing the else branch that handles non-string, non-plains decimal values. The original code called a private _asString() method on the BigDecimal value, which does not handle large values properly (it may throw NumberFormatException or return incorrect results). The fixed code uses another private method, _writeSimpleValue(), to write the BigDecimal value directly as a number. This should work correctly for all valid BigDecimal values.", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,14 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _writeSimpleValue(value);\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,14 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _writeSimpleValue(value);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        _verifyValueWrite(WRITE_NUMBER);\n        writeRaw(value.toPlainString());\n    } else {\n        _verifyValueWrite(WRITE_NUMBER);\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,11 +5,13 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+        _verifyValueWrite(WRITE_NUMBER);\n         writeRaw(value.toPlainString());\n     } else {\n+        _verifyValueWrite(WRITE_NUMBER);\n         writeRaw(_asString(value));\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -8,8 +8,10 @@\n         String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+        _verifyValueWrite(WRITE_NUMBER);\n         writeRaw(value.toPlainString());\n     } else {\n+        _verifyValueWrite(WRITE_NUMBER);\n         writeRaw(_asString(value));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        _verifyValueWrite(WRITE_NUMBER);\n        String raw = value.toPlainString();\n        final int length = raw.length();\n        if (length <= MAX_BIG_DECIMAL_SCALE_LENGTH) {\n            writeRaw(raw);\n        } else {\n            // Values longer than configured length is written as a string\n            _writeQuotedRaw(raw);\n        }\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,10 +5,18 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+        _verifyValueWrite(WRITE_NUMBER);\n+        String raw = value.toPlainString();\n+        final int length = raw.length();\n+        if (length <= MAX_BIG_DECIMAL_SCALE_LENGTH) {\n+            writeRaw(raw);\n+        } else {\n+            // Values longer than configured length is written as a string\n+            _writeQuotedRaw(raw);\n+        }\n     } else {\n         writeRaw(_asString(value));\n     }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -8,7 +8,15 @@\n         String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        _verifyValueWrite(WRITE_NUMBER);\n+        String raw = value.toPlainString();\n+        final int length = raw.length();\n+        if (length <= MAX_BIG_DECIMAL_SCALE_LENGTH) {\n+            writeRaw(raw);\n+        } else {\n+            // Values longer than configured length is written as a string\n+            _writeQuotedRaw(raw);\n+        }\n     } else {\n         writeRaw(_asString(value));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        // Convert BigDecimal to string using toString() instead of toPlainString()\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toString() : _asString(value);\n        _writeQuotedRaw(raw); \n    } else {\n        // Always write BigDecimal as string using _asString() method\n        _asString(value);\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,14 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+        // Convert BigDecimal to string using toString() instead of toPlainString()\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toString() : _asString(value);\n+        _writeQuotedRaw(raw); \n     } else {\n-        writeRaw(_asString(value));\n+        // Always write BigDecimal as string using _asString() method\n+        _asString(value);\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,14 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        // Convert BigDecimal to string using toString() instead of toPlainString()\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toString() : _asString(value);\n+        _writeQuotedRaw(raw); \n     } else {\n-        writeRaw(_asString(value));\n+        // Always write BigDecimal as string using _asString() method\n+        _asString(value);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else {\n        if (_cfgNumbersAsStrings) {\n            String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n            _writeQuotedRaw(raw);\n        } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n            writeRaw(value.toPlainString());\n        } else {\n            // use toString() instead of _asString() to handle scientific notation\n            // and negative zero correctly\n            writeRaw(value.toString());\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,18 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n-    } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        if (_cfgNumbersAsStrings) {\n+            String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n+            _writeQuotedRaw(raw);\n+        } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            writeRaw(value.toPlainString());\n+        } else {\n+            // use toString() instead of _asString() to handle scientific notation\n+            // and negative zero correctly\n+            writeRaw(value.toString());\n+        }\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,18 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n-    } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        if (_cfgNumbersAsStrings) {\n+            String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n+            _writeQuotedRaw(raw);\n+        } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            writeRaw(value.toPlainString());\n+        } else {\n+            // use toString() instead of _asString() to handle scientific notation\n+            // and negative zero correctly\n+            writeRaw(value.toString());\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else {\n        _writeSimpleNumber(value);\n    }\n}\n\nprivate final static int MAX_BIG_DECIMAL_SCALE = BigDecimal.valueOf(Long.MAX_VALUE).scale();\n\nprivate void _writeSimpleNumber(BigDecimal value) throws IOException {\n    if (value.scale() > MAX_BIG_DECIMAL_SCALE) {\n        throw new IOException(\"Number too large: \" + value);\n    }\n    if (value.compareTo(BigDecimal.ZERO) == 0) { // scale doesn't matter for 0\n        _writeChar('0');\n        return;\n    }\n    String str = value.stripTrailingZeros().toPlainString(); // removes trailing zeros\n    if (str.charAt(0) == '-') {\n        _writeChar('-');\n        str = str.substring(1);\n    }\n    int len = str.length();\n    if (len <= 18) { // range [-10^18, 10^18]\n        _writeAscii(str);\n        return;\n    }\n    // Fine, let's write it as segments\n    int segLen = len / 3;\n    int mod = len % 3;\n    if (mod != 0) {\n        _writeAscii(str, 0, mod);\n        if (segLen > 0) {\n            _writeChar(_cfgNumbersAsJSON ? ',' : '.');\n        }\n    }\n    int i = mod;\n    for (; segLen > 0; --segLen) {\n        _writeAscii(str, i, i + 3);\n        i += 3;\n        if (segLen > 1) {\n            _writeChar(_cfgNumbersAsJSON ? ',' : '.');\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _writeSimpleNumber(value);\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _writeSimpleNumber(value);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedString(raw); // Fixed function: changed _writeQuotedRaw to _writeQuotedString\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,13 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        _writeQuotedString(raw); // Fixed function: changed _writeQuotedRaw to _writeQuotedString\n+    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,12 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n         String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n+        _writeQuotedString(raw); // Fixed function: changed _writeQuotedRaw to _writeQuotedString\n     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,13 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,11 +1,10 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        _writeQuotedRaw(value.toString());\n    } else {\n        writeRaw(value.stripTrailingZeros().toPlainString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+        _writeQuotedRaw(value.toString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.stripTrailingZeros().toPlainString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        _writeQuotedRaw(value.toString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.stripTrailingZeros().toPlainString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else {\n        // use scientific notation by default\n        writeRaw(value.toEngineeringString()); \n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,13 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        // use scientific notation by default\n+        writeRaw(value.toEngineeringString()); \n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,13 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n         String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        // use scientific notation by default\n+        writeRaw(value.toEngineeringString()); \n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        _writeQuotedRaw(value.toString());\n    } else {\n        writeRaw(value.toPlainString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+        _writeQuotedRaw(value.toString());\n+    } else {\n         writeRaw(value.toPlainString());\n-    } else {\n-        writeRaw(_asString(value));\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+        _writeQuotedRaw(value.toString());\n+    } else {\n         writeRaw(value.toPlainString());\n-    } else {\n-        writeRaw(_asString(value));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        _writeQuotedRaw(value.toString());\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(value.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,13 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+        _writeQuotedRaw(value.toString());\n+    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,13 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n+        _writeQuotedRaw(value.toString());\n     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        String raw = value.toPlainString();\n        if (!_verifyBigDecimalRange(raw)) {\n            throw _constructError(\"Numeric value (\"+raw+\") out of range of Java int\");\n        }\n        writeRaw(raw);\n    } else {\n        writeRaw(_asString(value));\n    }\n}\n\n// new method added for verification of BigDecimal range\nprivate boolean _verifyBigDecimalRange(String rawValue) {\n    if (rawValue.charAt(0) == '-') {\n        rawValue = rawValue.substring(1);\n    }\n    if (rawValue.length() < 10) { // no chance of overflow\n        return true;\n    }\n    if (rawValue.length() > 10) { // definitely overflow\n        return false;\n    }\n    if (rawValue.compareTo(\"2147483647\") <= 0) {\n        return true;\n    }\n    return false;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,14 +1,17 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+        String raw = value.toPlainString();\n+        if (!_verifyBigDecimalRange(raw)) {\n+            throw _constructError(\"Numeric value (\"+raw+\") out of range of Java int\");\n+        }\n+        writeRaw(raw);\n     } else {\n         writeRaw(_asString(value));\n     }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,14 +1,17 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        String raw = value.toPlainString();\n+        if (!_verifyBigDecimalRange(raw)) {\n+            throw _constructError(\"Numeric value (\"+raw+\") out of range of Java int\");\n+        }\n+        writeRaw(raw);\n     } else {\n         writeRaw(_asString(value));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        // Always use toPlainString() instead of toString()\n        // Also, limit precision to maximum of 34 digits\n        String raw = value.setScale(34, RoundingMode.HALF_UP).toPlainString();\n        _writeQuotedRaw(raw);\n    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,13 +1,14 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        // Always use toPlainString() instead of toString()\n+        // Also, limit precision to maximum of 34 digits\n+        String raw = value.setScale(34, RoundingMode.HALF_UP).toPlainString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,11 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        // Always use toPlainString() instead of toString()\n+        // Also, limit precision to maximum of 34 digits\n+        String raw = value.setScale(34, RoundingMode.HALF_UP).toPlainString();\n         _writeQuotedRaw(raw);\n     } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n         writeRaw(value.toPlainString());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else {\n        // Use toString instead of _asString to write out scientific notation\n        writeRaw(isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,13 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        // Use toString instead of _asString to write out scientific notation\n+        writeRaw(isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,13 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        // Use toString instead of _asString to write out scientific notation\n+        writeRaw(isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]