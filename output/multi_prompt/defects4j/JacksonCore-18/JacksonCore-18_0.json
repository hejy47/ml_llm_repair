[{"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() <= 0 || value.stripTrailingZeros().scale() <= 0) {\n        return value.setScale(0).toString();\n    } else {\n        return value.toString();\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,8 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.scale() <= 0 || value.stripTrailingZeros().scale() <= 0) {\n+        return value.setScale(0).toString();\n+    } else {\n+        return value.toString();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() <= 0) {\n        return value.toString();\n    } else {\n        return value.stripTrailingZeros().toPlainString();\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,8 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.scale() <= 0) {\n+        return value.toString();\n+    } else {\n+        return value.stripTrailingZeros().toPlainString();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.compareTo(BigDecimal.ZERO) == 0) {\n        return \"0\"; // Handle special case of zero separately to prevent possible DoS vector\n    }\n    return value.toString();\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,7 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n+    if (value.compareTo(BigDecimal.ZERO) == 0) {\n+        return \"0\"; // Handle special case of zero separately to prevent possible DoS vector\n+    }\n     return value.toString();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() <= 0 || value.stripTrailingZeros().scale() <= 0) {\n        return value.toBigInteger().toString();\n    }\n    return value.toString();\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,7 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n+    if (value.scale() <= 0 || value.stripTrailingZeros().scale() <= 0) {\n+        return value.toBigInteger().toString();\n+    }\n     return value.toString();\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() <= 0) {\n        return value.unscaledValue().toString();\n    } else if (value.scale() <= JsonGenerator.PRECISION) {\n        return value.stripTrailingZeros().toPlainString();\n    } else {\n        return value.toString();\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,10 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.scale() <= 0) {\n+        return value.unscaledValue().toString();\n+    } else if (value.scale() <= JsonGenerator.PRECISION) {\n+        return value.stripTrailingZeros().toPlainString();\n+    } else {\n+        return value.toString();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() <= 0) {\n        return value.setScale(0).toString();\n    } else {\n        return value.stripTrailingZeros().toPlainString();\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,8 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.scale() <= 0) {\n+        return value.setScale(0).toString();\n+    } else {\n+        return value.stripTrailingZeros().toPlainString();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() <= 0) {\n        return value.setScale(0).toString();\n    }\n    return value.stripTrailingZeros().toPlainString();\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,7 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.scale() <= 0) {\n+        return value.setScale(0).toString();\n+    }\n+    return value.stripTrailingZeros().toPlainString();\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    return value.toPlainString();\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,4 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    return value.toPlainString();\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() <= 0) {\n        return value.toPlainString();\n    } else { \n        return value.toString();\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,8 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.scale() <= 0) {\n+        return value.toPlainString();\n+    } else { \n+        return value.toString();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() < 0) {\n        value = value.setScale(0, RoundingMode.UNNECESSARY);\n    } else if (value.stripTrailingZeros().scale() <= 0) {\n        value = value.setScale(0);\n    }\n    return value.toString();\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,9 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n+    if (value.scale() < 0) {\n+        value = value.setScale(0, RoundingMode.UNNECESSARY);\n+    } else if (value.stripTrailingZeros().scale() <= 0) {\n+        value = value.setScale(0);\n+    }\n     return value.toString();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.compareTo(BigDecimal.ZERO) == 0) { // check if value is zero\n        return \"0\";\n    }\n    String strValue = value.stripTrailingZeros().toPlainString(); // remove unnecessary trailing zeros\n    if (strValue.contains(\".\")) { // check if the number contains a decimal point\n        int index = strValue.length() - 1;\n        while (strValue.charAt(index) == '0') { // remove insignificant trailing zeros after the decimal point\n            index--;\n        }\n        if (strValue.charAt(index) == '.') { // remove the decimal point if it doesn't have any significant fractional digits\n            index--;\n        }\n        strValue = strValue.substring(0, index + 1);\n    }\n    return strValue;\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,18 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.compareTo(BigDecimal.ZERO) == 0) { // check if value is zero\n+        return \"0\";\n+    }\n+    String strValue = value.stripTrailingZeros().toPlainString(); // remove unnecessary trailing zeros\n+    if (strValue.contains(\".\")) { // check if the number contains a decimal point\n+        int index = strValue.length() - 1;\n+        while (strValue.charAt(index) == '0') { // remove insignificant trailing zeros after the decimal point\n+            index--;\n+        }\n+        if (strValue.charAt(index) == '.') { // remove the decimal point if it doesn't have any significant fractional digits\n+            index--;\n+        }\n+        strValue = strValue.substring(0, index + 1);\n+    }\n+    return strValue;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() <= 0) {\n        return value.setScale(0, RoundingMode.UNNECESSARY).toString();\n    } else {\n        return value.stripTrailingZeros().toPlainString();\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,8 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.scale() <= 0) {\n+        return value.setScale(0, RoundingMode.UNNECESSARY).toString();\n+    } else {\n+        return value.stripTrailingZeros().toPlainString();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.compareTo(BigDecimal.ZERO) == 0) {\n        // zero doesn't have a scale, so prevent possible divide-by-zero exception\n        return \"0\";\n    } else if (value.scale() <= 0) {\n        // prevent possible overflow when adding leading/trailing zeroes\n        return value.toBigInteger().toString();\n    } else {\n        return value.toString();\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,12 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.compareTo(BigDecimal.ZERO) == 0) {\n+        // zero doesn't have a scale, so prevent possible divide-by-zero exception\n+        return \"0\";\n+    } else if (value.scale() <= 0) {\n+        // prevent possible overflow when adding leading/trailing zeroes\n+        return value.toBigInteger().toString();\n+    } else {\n+        return value.toString();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.compareTo(BigDecimal.ZERO) == 0) {\n        return \"0\";\n    }\n    return value.stripTrailingZeros().toPlainString();\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,7 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.compareTo(BigDecimal.ZERO) == 0) {\n+        return \"0\";\n+    }\n+    return value.stripTrailingZeros().toPlainString();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.compareTo(BigDecimal.ZERO) == 0) {\n        return \"0\";\n    } else if (value.scale() <= 0) {\n        return value.unscaledValue().toString();\n    } else {\n        return value.stripTrailingZeros().toPlainString();\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,10 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.compareTo(BigDecimal.ZERO) == 0) {\n+        return \"0\";\n+    } else if (value.scale() <= 0) {\n+        return value.unscaledValue().toString();\n+    } else {\n+        return value.stripTrailingZeros().toPlainString();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    return value.toPlainString(); // safely converts BigDecimal to a plain number string\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,4 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    return value.toPlainString(); // safely converts BigDecimal to a plain number string\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected String _asString(BigDecimal value) throws IOException {\n    // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n    if (value.scale() <= 0) {\n        return value.setScale(0).toString();\n    } else if (value.stripTrailingZeros().scale() <= 0) {\n        return value.stripTrailingZeros().toPlainString();\n    } else {\n        return value.toString();\n    }\n}", "diff": "--- com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n+++ com/fasterxml/jackson/core/base/GeneratorBase.java@_asString\n@@ -1,4 +1,10 @@\n protected String _asString(BigDecimal value) throws IOException {\n     // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector\n-    return value.toString();\n+    if (value.scale() <= 0) {\n+        return value.setScale(0).toString();\n+    } else if (value.stripTrailingZeros().scale() <= 0) {\n+        return value.stripTrailingZeros().toPlainString();\n+    } else {\n+        return value.toString();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]