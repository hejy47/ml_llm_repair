[{"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        _asString(value); // Not used so removing it\n        writeRaw(value.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,11 +5,12 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _asString(value); // Not used so removing it\n+        writeRaw(value.toString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,11 +5,12 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        _asString(value); // Not used so removing it\n+        writeRaw(value.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        _writeQuotedRaw(value.toString());\n    } else {\n        writeRaw(value.stripTrailingZeros().toPlainString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+        _writeQuotedRaw(value.toString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.stripTrailingZeros().toPlainString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        _writeQuotedRaw(value.toString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.stripTrailingZeros().toPlainString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else {\n        writeRaw(value.toPlainString()); // simply write value as string\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n         String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toPlainString()); // simply write value as string\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.toPlainString()); // simply write value as string\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,11 +1,10 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,13 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        _writeQuotedString(value.setScale(0, RoundingMode.DOWN).toString());\n    } else {\n        writeRaw(value.setScale(0, RoundingMode.DOWN).toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+        _writeQuotedString(value.setScale(0, RoundingMode.DOWN).toString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.setScale(0, RoundingMode.DOWN).toString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        _writeQuotedString(value.setScale(0, RoundingMode.DOWN).toString());\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.setScale(0, RoundingMode.DOWN).toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else {\n        String raw;\n        if (_cfgNumbersAsStrings || value.precision() > 18) {\n            raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n            _writeQuotedRaw(raw);\n        } else {\n            raw = _asString(value);\n            if (raw.indexOf('.') < 0) { // not already a floating-point number\n                raw += \".0\"; // add zero decimal to end\n            }\n            writeRaw(raw);\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,19 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n-    } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        String raw;\n+        if (_cfgNumbersAsStrings || value.precision() > 18) {\n+            raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+            _writeQuotedRaw(raw);\n+        } else {\n+            raw = _asString(value);\n+            if (raw.indexOf('.') < 0) { // not already a floating-point number\n+                raw += \".0\"; // add zero decimal to end\n+            }\n+            writeRaw(raw);\n+        }\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,19 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n-    } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        String raw;\n+        if (_cfgNumbersAsStrings || value.precision() > 18) {\n+            raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+            _writeQuotedRaw(raw);\n+        } else {\n+            raw = _asString(value);\n+            if (raw.indexOf('.') < 0) { // not already a floating-point number\n+                raw += \".0\"; // add zero decimal to end\n+            }\n+            writeRaw(raw);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else {\n        String rawValue = value.toString();\n        if (_cfgNumbersAsStrings) {\n            _writeQuotedRaw(rawValue);\n        } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n            _verifyBigDecimalRange(value);\n            writeRaw(rawValue);\n        } else {\n            _checkStdNumberRange(value);\n            writeRaw(rawValue);\n        }\n    }\n}\n\n//helper method to check range of big decimal if WRITE_BIGDECIMAL_AS_PLAIN is enabled\nprivate void _verifyBigDecimalRange(BigDecimal value) throws IOException {\n    if (_checkNumericTypes) {\n        if (value.compareTo(Feature.BIG_DECIMAL_EXACT_RANGE_LOWER) < 0 ||\n                value.compareTo(Feature.BIG_DECIMAL_EXACT_RANGE_UPPER) > 0) {\n            throw _constructError(\"write a BigDecimal out of range of [-1^63, 1^63-1] as plain number\");\n        }\n    }\n}\n\n//helper method to check range for non-big decimal numbers\nprivate void _checkStdNumberRange(Number value) throws IOException {\n    if (_checkNumericTypes) {\n        if (value instanceof Float || value instanceof Double) {\n            if (!isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS) && (\n                        Double.isNaN(value.doubleValue()) || Double.isInfinite(value.doubleValue()))) {\n                throw _constructError(\"Numeric values MUST be finite, but was \" + value);\n            }\n        } else if (value instanceof BigDecimal) {\n            if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n                _verifyBigDecimalRange((BigDecimal) value);\n            } else {\n                double doubleValue = ((BigDecimal) value).doubleValue();\n                if (Double.isNaN(doubleValue) || Double.isInfinite(doubleValue) ||\n                    doubleValue < Feature.LONG_MIN_AS_DOUBLE || doubleValue > Feature.LONG_MAX_AS_DOUBLE) {\n                    _reportError(\"write a BigDecimal value out of range of Java's long (-2^63 to 2^63-1)\");\n                }\n            }\n        } else {\n            // not float/double/bigdecimal, better be safe with using double check\n            double doubleValue = value.doubleValue();\n            if (Double.isNaN(doubleValue) || Double.isInfinite(doubleValue) ||\n                doubleValue < Feature.LONG_MIN_AS_DOUBLE || doubleValue > Feature.LONG_MAX_AS_DOUBLE) {\n                _reportError(\"Numeric value (\" + getText() + \") out of range of Java's long (-2^63 to 2^63-1)\");\n            }\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,18 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n-    } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        String rawValue = value.toString();\n+        if (_cfgNumbersAsStrings) {\n+            _writeQuotedRaw(rawValue);\n+        } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+            _verifyBigDecimalRange(value);\n+            writeRaw(rawValue);\n+        } else {\n+            _checkStdNumberRange(value);\n+            writeRaw(rawValue);\n+        }\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,18 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n-    } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        String rawValue = value.toString();\n+        if (_cfgNumbersAsStrings) {\n+            _writeQuotedRaw(rawValue);\n+        } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+            _verifyBigDecimalRange(value);\n+            writeRaw(rawValue);\n+        } else {\n+            _checkStdNumberRange(value);\n+            writeRaw(rawValue);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else {\n        writeRaw(value.toPlainString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n         String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+    } else {\n         writeRaw(value.toPlainString());\n-    } else {\n-        writeRaw(_asString(value));\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else {\n         writeRaw(value.toPlainString());\n-    } else {\n-        writeRaw(_asString(value));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else {\n        if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n            writeRaw(value.toPlainString());\n        } else {\n            // use toString() instead of _asString() to handle scientific notation\n            writeRaw(value.toString());\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,17 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+            writeRaw(value.toPlainString());\n+        } else {\n+            // use toString() instead of _asString() to handle scientific notation\n+            writeRaw(value.toString());\n+        }\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,17 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+            writeRaw(value.toPlainString());\n+        } else {\n+            // use toString() instead of _asString() to handle scientific notation\n+            writeRaw(value.toString());\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else {\n        BigInteger intvalue = value.toBigInteger();\n        if (intvalue != null) {\n            writeNumber(intvalue);\n        } else {\n            writeRaw(value.toString());\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,17 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n         String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        BigInteger intvalue = value.toBigInteger();\n+        if (intvalue != null) {\n+            writeNumber(intvalue);\n+        } else {\n+            writeRaw(value.toString());\n+        }\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,17 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        BigInteger intvalue = value.toBigInteger();\n+        if (intvalue != null) {\n+            writeNumber(intvalue);\n+        } else {\n+            writeRaw(value.toString());\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        _writeQuotedRaw(value.toString());\n    } else {\n        writeRaw(value.toPlainString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+        _writeQuotedRaw(value.toString());\n+    } else {\n         writeRaw(value.toPlainString());\n-    } else {\n-        writeRaw(_asString(value));\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+        _writeQuotedRaw(value.toString());\n+    } else {\n         writeRaw(value.toPlainString());\n-    } else {\n-        writeRaw(_asString(value));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n            String plain = value.toPlainString();\n            try {\n                long intValueExact = value.longValueExact();\n                if (new BigDecimal(intValueExact).equals(value)) {\n                    _writeQuotedInt(intValueExact); // write as integer\n                    return;\n                }\n            } catch (ArithmeticException e) {\n                // not an integer\n            }\n            _writeQuotedRaw(plain); // write as plain string\n        } else {\n            _writeQuotedRaw(value.toString()); // write as quoted string\n        }\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString()); // write as plain string\n    } else {\n        writeRaw(_asString(value)); // write using default formatting\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,27 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n+        if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+            String plain = value.toPlainString();\n+            try {\n+                long intValueExact = value.longValueExact();\n+                if (new BigDecimal(intValueExact).equals(value)) {\n+                    _writeQuotedInt(intValueExact); // write as integer\n+                    return;\n+                }\n+            } catch (ArithmeticException e) {\n+                // not an integer\n+            }\n+            _writeQuotedRaw(plain); // write as plain string\n+        } else {\n+            _writeQuotedRaw(value.toString()); // write as quoted string\n+        }\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+        writeRaw(value.toPlainString()); // write as plain string\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(_asString(value)); // write using default formatting\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,27 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+            String plain = value.toPlainString();\n+            try {\n+                long intValueExact = value.longValueExact();\n+                if (new BigDecimal(intValueExact).equals(value)) {\n+                    _writeQuotedInt(intValueExact); // write as integer\n+                    return;\n+                }\n+            } catch (ArithmeticException e) {\n+                // not an integer\n+            }\n+            _writeQuotedRaw(plain); // write as plain string\n+        } else {\n+            _writeQuotedRaw(value.toString()); // write as quoted string\n+        }\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+        writeRaw(value.toPlainString()); // write as plain string\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(_asString(value)); // write using default formatting\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        // Use toString() instead of _asString() to handle scientific notation\n        writeRaw(value.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,15 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        // Use toString() instead of _asString() to handle scientific notation\n+        writeRaw(value.toString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,15 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : _asString(value);\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n-        writeRaw(_asString(value));\n+        // Use toString() instead of _asString() to handle scientific notation\n+        writeRaw(value.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        _verifyPrettyValueWrite(\"write number\");\n        writeRaw(value.toPlainString());\n    } else {\n        _verifyPrettyValueWrite(\"write number\");\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -8,8 +8,10 @@\n         String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+        _verifyPrettyValueWrite(\"write number\");\n         writeRaw(value.toPlainString());\n     } else {\n+        _verifyPrettyValueWrite(\"write number\");\n         writeRaw(_asString(value));\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,11 +5,13 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+        _verifyPrettyValueWrite(\"write number\");\n         writeRaw(value.toPlainString());\n     } else {\n+        _verifyPrettyValueWrite(\"write number\");\n         writeRaw(_asString(value));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        // Always use toPlainString() to avoid scientific notation\n        String raw = value.toPlainString();\n        _writeQuotedRaw(raw);\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,14 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        // Always use toPlainString() to avoid scientific notation\n+        String raw = value.toPlainString();\n         _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n     }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,14 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        // Always use toPlainString() to avoid scientific notation\n+        String raw = value.toPlainString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n        _writeQuoted(raw);\n    } else {\n        writeRaw(value.stripTrailingZeros().toPlainString());\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,15 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n         String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+        _writeQuoted(raw);\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.stripTrailingZeros().toPlainString());\n     }\n }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,15 +1,12 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        _writeQuoted(raw);\n     } else {\n-        writeRaw(_asString(value));\n+        writeRaw(value.stripTrailingZeros().toPlainString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        // Use writeString method to correctly handle big decimal values\n        writeString(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,14 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+        // Use writeString method to correctly handle big decimal values\n+        writeString(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n     }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,14 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        // Use writeString method to correctly handle big decimal values\n+        writeString(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    // Don't really know max length for big decimal, no point checking\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n            String raw = value.toPlainString();\n            if (raw.equals(\"-0\")) {\n                writeRaw(\"-0.0\"); // Ensure negative zero is written correctly\n            } else {\n                _writeQuotedRaw(raw);\n            }\n        } else {\n            _writeQuotedRaw(value.toString());\n        }\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        // Ensure negative zero is written correctly\n        writeRaw(value.compareTo(BigDecimal.ZERO) == 0 ? \"-0.0\" : value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -5,10 +5,19 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n+        if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+            String raw = value.toPlainString();\n+            if (raw.equals(\"-0\")) {\n+                writeRaw(\"-0.0\"); // Ensure negative zero is written correctly\n+            } else {\n+                _writeQuotedRaw(raw);\n+            }\n+        } else {\n+            _writeQuotedRaw(value.toString());\n+        }\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+        // Ensure negative zero is written correctly\n+        writeRaw(value.compareTo(BigDecimal.ZERO) == 0 ? \"-0.0\" : value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n     }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -5,10 +5,19 @@\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+            String raw = value.toPlainString();\n+            if (raw.equals(\"-0\")) {\n+                writeRaw(\"-0.0\"); // Ensure negative zero is written correctly\n+            } else {\n+                _writeQuotedRaw(raw);\n+            }\n+        } else {\n+            _writeQuotedRaw(value.toString());\n+        }\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n+        // Ensure negative zero is written correctly\n+        writeRaw(value.compareTo(BigDecimal.ZERO) == 0 ? \"-0.0\" : value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        // Use BigDecimal's toEngineeringString method instead of toString or toPlainString\n        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toEngineeringString() : value.toString();\n        _writeQuotedRaw(raw);\n    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n        writeRaw(value.toPlainString());\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,11 +1,11 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n+        // Use BigDecimal's toEngineeringString method instead of toString or toPlainString\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toEngineeringString() : value.toString();\n         _writeQuotedRaw(raw);\n     } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,13 +1,13 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+        // Use BigDecimal's toEngineeringString method instead of toString or toPlainString\n+        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toEngineeringString() : value.toString();\n         _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n         writeRaw(value.toPlainString());\n     } else {\n         writeRaw(_asString(value));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigDecimal value) throws IOException {\n    _verifyValueWrite(WRITE_NUMBER);\n    if (value == null) {\n        _writeNull();\n    } else if (_cfgNumbersAsStrings) {\n        _writeQuotedRaw(value.toString()); // always write BigDecimal as a string\n    } else {\n        writeRaw(_asString(value));\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@writeNumber\n@@ -1,14 +1,10 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n-        writeRaw(value.toPlainString());\n+        _writeQuotedRaw(value.toString()); // always write BigDecimal as a string\n     } else {\n         writeRaw(_asString(value));\n     }\n--- com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n+++ com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java@writeNumber\n@@ -1,14 +1,10 @@\n @Override\n public void writeNumber(BigDecimal value) throws IOException {\n-    // Don't really know max length for big decimal, no point checking\n     _verifyValueWrite(WRITE_NUMBER);\n     if (value == null) {\n         _writeNull();\n     } else if (_cfgNumbersAsStrings) {\n-        String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n-        _writeQuotedRaw(raw);\n-    } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n-        writeRaw(value.toPlainString());\n+        _writeQuotedRaw(value.toString()); // always write BigDecimal as a string\n     } else {\n         writeRaw(_asString(value));\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]