[{"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n    if (mapSer instanceof MapSerializer) {\n        _mapSerializer = (MapSerializer) mapSer;\n    } else {\n        throw new JsonMappingException(\"Failed to contextualize \" + _mapSerializer.getClass().getName() + \" as a MapSerializer.\");\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (mapSer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) mapSer;\n+    } else {\n+        throw new JsonMappingException(\"Failed to contextualize \" + _mapSerializer.getClass().getName() + \" as a MapSerializer.\");\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (mapSer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) mapSer;\n+    } else {\n+        throw new JsonMappingException(\"Failed to contextualize \" + _mapSerializer.getClass().getName() + \" as a MapSerializer.\");\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (mapSer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) mapSer;\n+    } else {\n+        throw new JsonMappingException(\"Failed to contextualize \" + _mapSerializer.getClass().getName() + \" as a MapSerializer.\");\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    if (_mapSerializer instanceof MapSerializer) {\n        _mapSerializer = (MapSerializer)provider.handlePrimaryContextualization(_mapSerializer, _property);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if (_mapSerializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer)provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (_mapSerializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer)provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if (_mapSerializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer)provider.handlePrimaryContextualization(_mapSerializer, _property);\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    if (_mapSerializer instanceof MapSerializer) {\n        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if (_mapSerializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (_mapSerializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if (_mapSerializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n    if (_mapSerializer == null) {\n        provider.reportBadDefinition(getType(), String.format(\n                \"Null returned while trying to resolve MapSerializer for property '%s' (of type %s)\",\n                _property.getName(), _property.getType()));\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (_mapSerializer == null) {\n+        provider.reportBadDefinition(getType(), String.format(\n+                \"Null returned while trying to resolve MapSerializer for property '%s' (of type %s)\",\n+                _property.getName(), _property.getType()));\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -2,4 +2,9 @@\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n     _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (_mapSerializer == null) {\n+        provider.reportBadDefinition(getType(), String.format(\n+                \"Null returned while trying to resolve MapSerializer for property '%s' (of type %s)\",\n+                _property.getName(), _property.getType()));\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (_mapSerializer == null) {\n+        provider.reportBadDefinition(getType(), String.format(\n+                \"Null returned while trying to resolve MapSerializer for property '%s' (of type %s)\",\n+                _property.getName(), _property.getType()));\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n    if (mapSer instanceof MapSerializer) {\n        _mapSerializer = (MapSerializer) mapSer;\n    } else {\n        throw new JsonMappingException(provider.getContext().getParser(),\n            \"Failed to contextualize \" + _mapSerializer + \" as a MapSerializer.\");\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,11 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (mapSer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) mapSer;\n+    } else {\n+        throw new JsonMappingException(provider.getContext().getParser(),\n+            \"Failed to contextualize \" + _mapSerializer + \" as a MapSerializer.\");\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,11 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (mapSer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) mapSer;\n+    } else {\n+        throw new JsonMappingException(provider.getContext().getParser(),\n+            \"Failed to contextualize \" + _mapSerializer + \" as a MapSerializer.\");\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,11 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (mapSer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) mapSer;\n+    } else {\n+        throw new JsonMappingException(provider.getContext().getParser(),\n+            \"Failed to contextualize \" + _mapSerializer + \" as a MapSerializer.\");\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    if (_mapSerializer != null) {\n        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if (_mapSerializer != null) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (_mapSerializer != null) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if (_mapSerializer != null) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    if(_mapSerializer != null){\n      _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if(_mapSerializer != null){\n+      _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if(_mapSerializer != null){\n+      _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if(_mapSerializer != null){\n+      _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    JsonSerializer<?> serializer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n    if (serializer instanceof MapSerializer) {\n        _mapSerializer = (MapSerializer) serializer;\n    } else {\n        throw new JsonMappingException(\"Failed to resolve MapSerializer for property '\" + _property.getName() + \"'\");\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> serializer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (serializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) serializer;\n+    } else {\n+        throw new JsonMappingException(\"Failed to resolve MapSerializer for property '\" + _property.getName() + \"'\");\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    JsonSerializer<?> serializer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (serializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) serializer;\n+    } else {\n+        throw new JsonMappingException(\"Failed to resolve MapSerializer for property '\" + _property.getName() + \"'\");\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> serializer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (serializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) serializer;\n+    } else {\n+        throw new JsonMappingException(\"Failed to resolve MapSerializer for property '\" + _property.getName() + \"'\");\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    if (_mapSerializer != null && _property != null) {\n        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if (_mapSerializer != null && _property != null) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (_mapSerializer != null && _property != null) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if (_mapSerializer != null && _property != null) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    JsonSerializer<?> serializer = provider.findValueSerializer(Map.class, _property);\n    if (!(serializer instanceof MapSerializer)) {\n        throw JsonMappingException.from(provider.generteJsonMappingException(\"Failed to resolve MapSerializer for property\", _property));\n    }\n    _mapSerializer = (MapSerializer) serializer;\n    _mapType = (MapType) serializer.handledType();\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> serializer = provider.findValueSerializer(Map.class, _property);\n+    if (!(serializer instanceof MapSerializer)) {\n+        throw JsonMappingException.from(provider.generteJsonMappingException(\"Failed to resolve MapSerializer for property\", _property));\n+    }\n     _mapSerializer = (MapSerializer) serializer;\n+    _mapType = (MapType) serializer.handledType();\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    JsonSerializer<?> serializer = provider.findValueSerializer(Map.class, _property);\n+    if (!(serializer instanceof MapSerializer)) {\n+        throw JsonMappingException.from(provider.generteJsonMappingException(\"Failed to resolve MapSerializer for property\", _property));\n+    }\n+    _mapSerializer = (MapSerializer) serializer;\n+    _mapType = (MapType) serializer.handledType();\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> serializer = provider.findValueSerializer(Map.class, _property);\n+    if (!(serializer instanceof MapSerializer)) {\n+        throw JsonMappingException.from(provider.generteJsonMappingException(\"Failed to resolve MapSerializer for property\", _property));\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n+    _mapSerializer = (MapSerializer) serializer;\n+    _mapType = (MapType) serializer.handledType();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n    if (mapSer instanceof MapSerializer) {\n        _mapSerializer = (MapSerializer) mapSer;\n    } else {\n        throw new JsonMappingException(\"Cannot resolve Map serializer for type \" + _mapType);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (mapSer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) mapSer;\n+    } else {\n+        throw new JsonMappingException(\"Cannot resolve Map serializer for type \" + _mapType);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (mapSer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) mapSer;\n+    } else {\n+        throw new JsonMappingException(\"Cannot resolve Map serializer for type \" + _mapType);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> mapSer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (mapSer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) mapSer;\n+    } else {\n+        throw new JsonMappingException(\"Cannot resolve Map serializer for type \" + _mapType);\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    if(_mapSerializer != null) {\n        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if(_mapSerializer != null) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if(_mapSerializer != null) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if(_mapSerializer != null) {\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n    // check if _mapSerializer is null and initialize it if necessary\n    if (_mapSerializer == null) {\n        JavaType keyType = provider.constructType(String.class);\n        JavaType valueType = provider.constructType(Object.class);\n        _mapSerializer = MapSerializer.construct(null, keyType, valueType, false, null, null, null);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    // check if _mapSerializer is null and initialize it if necessary\n+    if (_mapSerializer == null) {\n+        JavaType keyType = provider.constructType(String.class);\n+        JavaType valueType = provider.constructType(Object.class);\n+        _mapSerializer = MapSerializer.construct(null, keyType, valueType, false, null, null, null);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n     _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    // check if _mapSerializer is null and initialize it if necessary\n+    if (_mapSerializer == null) {\n+        JavaType keyType = provider.constructType(String.class);\n+        JavaType valueType = provider.constructType(Object.class);\n+        _mapSerializer = MapSerializer.construct(null, keyType, valueType, false, null, null, null);\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    // check if _mapSerializer is null and initialize it if necessary\n+    if (_mapSerializer == null) {\n+        JavaType keyType = provider.constructType(String.class);\n+        JavaType valueType = provider.constructType(Object.class);\n+        _mapSerializer = MapSerializer.construct(null, keyType, valueType, false, null, null, null);\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    JsonSerializer<?> jsonSerializer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n    if (jsonSerializer instanceof MapSerializer) {\n        _mapSerializer = (MapSerializer) jsonSerializer;\n    } else {\n        // throw exception or handle the case where jsonSerializer is not an instance of MapSerializer\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> jsonSerializer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (jsonSerializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) jsonSerializer;\n+    } else {\n+        // throw exception or handle the case where jsonSerializer is not an instance of MapSerializer\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    JsonSerializer<?> jsonSerializer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (jsonSerializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) jsonSerializer;\n+    } else {\n+        // throw exception or handle the case where jsonSerializer is not an instance of MapSerializer\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> jsonSerializer = provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if (jsonSerializer instanceof MapSerializer) {\n+        _mapSerializer = (MapSerializer) jsonSerializer;\n+    } else {\n+        // throw exception or handle the case where jsonSerializer is not an instance of MapSerializer\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    JsonSerializer<?> serializer = provider.findValueSerializer(Map.class, _property);\n    _mapSerializer = (MapSerializer) serializer;\n    _mapSerializer.resolve(provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> serializer = provider.findValueSerializer(Map.class, _property);\n     _mapSerializer = (MapSerializer) serializer;\n+    _mapSerializer.resolve(provider);\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    JsonSerializer<?> serializer = provider.findValueSerializer(Map.class, _property);\n+    _mapSerializer = (MapSerializer) serializer;\n+    _mapSerializer.resolve(provider);\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n-    }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n-    }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    JsonSerializer<?> serializer = provider.findValueSerializer(Map.class, _property);\n+    _mapSerializer = (MapSerializer) serializer;\n+    _mapSerializer.resolve(provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    if(_mapSerializer instanceof MapSerializer){\n        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n    }\n    else{\n        provider.reportBadDefinition(getType(), String.format(\"Cannot resolve Map Serializer for type %s\", getType().getName()));\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if(_mapSerializer instanceof MapSerializer){\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n+    else{\n+        provider.reportBadDefinition(getType(), String.format(\"Cannot resolve Map Serializer for type %s\", getType().getName()));\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    if(_mapSerializer instanceof MapSerializer){\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+    }\n+    else{\n+        provider.reportBadDefinition(getType(), String.format(\"Cannot resolve Map Serializer for type %s\", getType().getName()));\n+    }\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,73 +1,10 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n+    if(_mapSerializer instanceof MapSerializer){\n+        _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n     }\n-    final SerializationConfig config = prov.getConfig();\n-    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n-    builder.setConfig(config);\n-    // First: any detectable (auto-detect, annotations) properties to serialize?\n-    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-    if (props == null) {\n-        props = new ArrayList<BeanPropertyWriter>();\n+    else{\n+        provider.reportBadDefinition(getType(), String.format(\"Cannot resolve Map Serializer for type %s\", getType().getName()));\n     }\n-    // [databind#638]: Allow injection of \"virtual\" properties:\n-    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n-    // [JACKSON-440] Need to allow modification bean properties to serialize:\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.changeProperties(config, beanDesc, props);\n-        }\n-    }\n-    // Any properties to suppress?\n-    props = filterBeanProperties(config, beanDesc, props);\n-    // [JACKSON-440] Need to allow reordering of properties to serialize\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n-        }\n-    }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n-    builder.setProperties(props);\n-    builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n-    if (anyGetter != null) {\n-        if (config.canOverrideAccessModifiers()) {\n-            anyGetter.fixAccess();\n-        }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n-        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n-        JavaType valueType = type.getContentType();\n-        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n-        PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n-    }\n-    // Next: need to gather view information, if any:\n-    processViews(config, builder);\n-    // Finally: let interested parties mess with the result bit more...\n-    if (_factoryConfig.hasSerializerModifiers()) {\n-        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            builder = mod.updateBuilder(config, beanDesc, builder);\n-        }\n-    }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n-    if (ser == null) {\n-        // If we get this far, there were no properties found, so no regular BeanSerializer\n-        // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n-        if (beanDesc.hasKnownClassAnnotations()) {\n-            return builder.createDummy();\n-        }\n-    }\n-    return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]