[{"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null && _mapSerializer instanceof MapSerializer) {\n        ((MapSerializer) _mapSerializer).serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n        return;\n    }\n    // ... not sure how custom handler would do it\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -7,8 +7,8 @@\n         throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n     }\n     // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n-    if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+    if (_mapSerializer != null && _mapSerializer instanceof MapSerializer) {\n+        ((MapSerializer) _mapSerializer).serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n         return;\n     }\n     // ... not sure how custom handler would do it\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null) {\n        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n        return;\n    }\n    // ... not sure how custom handler would do it\n    gen.writeObject(value);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -12,4 +12,5 @@\n         return;\n     }\n     // ... not sure how custom handler would do it\n+    gen.writeObject(value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapType != null && _mapType instanceof MapType) {\n        JavaType valueType = _mapType.getContentType();\n        JsonSerializer<Object> serializer = provider.findValueSerializer(valueType, _property);\n        if (serializer instanceof MapSerializer) {\n            ((MapSerializer) serializer).serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n            return;\n        }\n    }\n    // ... not sure how custom handler would do it\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -7,9 +7,13 @@\n         throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n     }\n     // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n-    if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n-        return;\n+    if (_mapType != null && _mapType instanceof MapType) {\n+        JavaType valueType = _mapType.getContentType();\n+        JsonSerializer<Object> serializer = provider.findValueSerializer(valueType, _property);\n+        if (serializer instanceof MapSerializer) {\n+            ((MapSerializer) serializer).serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+            return;\n+        }\n     }\n     // ... not sure how custom handler would do it\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null) {\n        // fix: initialize map serializer with proper provider before calling serializeFilteredFields \n        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, provider.findValueSerializer(Object.class));\n        return;\n    }\n    // ... not sure how custom handler would do it\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -8,7 +8,8 @@\n     }\n     // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n     if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+        // fix: initialize map serializer with proper provider before calling serializeFilteredFields \n+        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, provider.findValueSerializer(Object.class));\n         return;\n     }\n     // ... not sure how custom handler would do it\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null) {\n        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n        return;\n    }\n    if (_serializer == null) {\n        provider.defaultSerializeValue(value, gen);\n    }\n    else {\n        _serializer.serialize(value, gen, provider);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -11,5 +11,10 @@\n         _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n         return;\n     }\n-    // ... not sure how custom handler would do it\n+    if (_serializer == null) {\n+        provider.defaultSerializeValue(value, gen);\n+    }\n+    else {\n+        _serializer.serialize(value, gen, provider);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null) {\n        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n        return;\n    }\n    // fixed code starts here\n    ObjectMapper mapper = new ObjectMapper();\n    mapper.setFilterProvider(new SimpleFilterProvider().addFilter(\"myFilter\", filter));\n    String json = mapper.writeValueAsString(value);\n    gen.writeRaw(json);\n    // fixed code ends here\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -11,5 +11,10 @@\n         _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n         return;\n     }\n-    // ... not sure how custom handler would do it\n+    // fixed code starts here\n+    ObjectMapper mapper = new ObjectMapper();\n+    mapper.setFilterProvider(new SimpleFilterProvider().addFilter(\"myFilter\", filter));\n+    String json = mapper.writeValueAsString(value);\n+    gen.writeRaw(json);\n+    // fixed code ends here\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null) {\n        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n        return;\n    }\n    // FIX: Added support for custom handler\n    if (_handlerInstantiator != null) {\n        Map<?, ?> map = (Map<?, ?>) value;\n        _mapSerializer = _handlerInstantiator.findValueSerializer(map.getClass(), null);\n        if (_mapSerializer != null) {\n            _mapSerializer.serializeFilteredFields(map, gen, provider, filter, null);\n            return;\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -11,5 +11,13 @@\n         _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n         return;\n     }\n-    // ... not sure how custom handler would do it\n+    // FIX: Added support for custom handler\n+    if (_handlerInstantiator != null) {\n+        Map<?, ?> map = (Map<?, ?>) value;\n+        _mapSerializer = _handlerInstantiator.findValueSerializer(map.getClass(), null);\n+        if (_mapSerializer != null) {\n+            _mapSerializer.serializeFilteredFields(map, gen, provider, filter, null);\n+            return;\n+        }\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    if (_mapSerializer != null) {\n        //use filter instead of null parameter\n        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter);\n        return;\n    }\n    // ...\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -6,10 +6,10 @@\n     if (!(value instanceof Map<?, ?>)) {\n         throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n     }\n-    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n     if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+        //use filter instead of null parameter\n+        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter);\n         return;\n     }\n-    // ... not sure how custom handler would do it\n+    // ...\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    if (_mapSerializer != null) {\n        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, new SimpleBeanPropertyFilter.SerializeExceptFilter(filter), null);\n        return;\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -6,10 +6,8 @@\n     if (!(value instanceof Map<?, ?>)) {\n         throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n     }\n-    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n     if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, new SimpleBeanPropertyFilter.SerializeExceptFilter(filter), null);\n         return;\n     }\n-    // ... not sure how custom handler would do it\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null) {\n        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter);\n        return;\n    }\n    // ... not sure how custom handler would do it\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -8,7 +8,7 @@\n     }\n     // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n     if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter);\n         return;\n     }\n     // ... not sure how custom handler would do it\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    if (_mapSerializer != null) {\n        if (_mapSerializer instanceof CustomPropertyMapSerializer) {\n            ((CustomPropertyMapSerializer) _mapSerializer).serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n        } else {\n            _mapSerializer.serialize((Map<?, ?>)value, gen, provider);\n        }\n        return;\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -6,10 +6,12 @@\n     if (!(value instanceof Map<?, ?>)) {\n         throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n     }\n-    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n     if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+        if (_mapSerializer instanceof CustomPropertyMapSerializer) {\n+            ((CustomPropertyMapSerializer) _mapSerializer).serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+        } else {\n+            _mapSerializer.serialize((Map<?, ?>)value, gen, provider);\n+        }\n         return;\n     }\n-    // ... not sure how custom handler would do it\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    if (_mapSerializer != null) {\n        _mapSerializer.serializeFields((Map<?, ?>) value, gen, provider);\n        return;\n    }\n    // ... not sure how custom handler would do it\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -6,9 +6,8 @@\n     if (!(value instanceof Map<?, ?>)) {\n         throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n     }\n-    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n     if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+        _mapSerializer.serializeFields((Map<?, ?>) value, gen, provider);\n         return;\n     }\n     // ... not sure how custom handler would do it\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // try to support @JsonInclude options here\n    if (_mapSerializer != null) {\n        if (provider.getActiveView() != null)\n            _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, provider.findPropertyInclusion(bean.getClass(), null));\n        else\n            _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n        return;\n    }\n    // ... not sure how custom handler would do it\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -6,9 +6,12 @@\n     if (!(value instanceof Map<?, ?>)) {\n         throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n     }\n-    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n+    // try to support @JsonInclude options here\n     if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+        if (provider.getActiveView() != null)\n+            _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, provider.findPropertyInclusion(bean.getClass(), null));\n+        else\n+            _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n         return;\n     }\n     // ... not sure how custom handler would do it\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null && _mapSerializer instanceof AnyGetterWriter) {\n        ((AnyGetterWriter)_mapSerializer).getAndFilter(bean, gen, provider, filter);\n    } else if (_mapSerializer != null) {\n        _mapSerializer.serialize(value, gen, provider);\n    } else {\n        // ... not sure how custom handler would do it\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -7,9 +7,11 @@\n         throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n     }\n     // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n-    if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n-        return;\n+    if (_mapSerializer != null && _mapSerializer instanceof AnyGetterWriter) {\n+        ((AnyGetterWriter)_mapSerializer).getAndFilter(bean, gen, provider, filter);\n+    } else if (_mapSerializer != null) {\n+        _mapSerializer.serialize(value, gen, provider);\n+    } else {\n+        // ... not sure how custom handler would do it\n     }\n-    // ... not sure how custom handler would do it\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    \n    if (_serializer instanceof MapSerializer) {   // Fix: replaced _mapSerializer with _serializer and added instanceof check\n        _serializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n        return;\n    }\n    // ... not sure how custom handler would do it\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -7,8 +7,9 @@\n         throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n     }\n     // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n-    if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+    \n+    if (_serializer instanceof MapSerializer) {   // Fix: replaced _mapSerializer with _serializer and added instanceof check\n+        _serializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n         return;\n     }\n     // ... not sure how custom handler would do it\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null) {\n        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, new SimpleBeanPropertyFilter(filter), null);\n        return;\n    }\n    // ... not sure how custom handler would do it\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -8,7 +8,7 @@\n     }\n     // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n     if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, new SimpleBeanPropertyFilter(filter), null);\n         return;\n     }\n     // ... not sure how custom handler would do it\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null && _mapSerializer instanceof FilteringJackson2MapSerializer) {\n        ((FilteringJackson2MapSerializer) _mapSerializer).serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n        return;\n    }\n    // ... not sure how custom handler would do it\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -7,8 +7,8 @@\n         throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n     }\n     // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n-    if (_mapSerializer != null) {\n-        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n+    if (_mapSerializer != null && _mapSerializer instanceof FilteringJackson2MapSerializer) {\n+        ((FilteringJackson2MapSerializer) _mapSerializer).serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n         return;\n     }\n     // ... not sure how custom handler would do it\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null) {\n        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n        return;\n    }\n    // Since _mapSerializer is null, use default serializer\n    JsonSerializer<Object> serializer = provider.findValueSerializer(value.getClass());\n    serializer.serializeWithType(value, gen, provider, new TypeSerializerWrapper(null));\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@getAndFilter\n@@ -11,5 +11,7 @@\n         _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n         return;\n     }\n-    // ... not sure how custom handler would do it\n+    // Since _mapSerializer is null, use default serializer\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(value.getClass());\n+    serializer.serializeWithType(value, gen, provider, new TypeSerializerWrapper(null));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]