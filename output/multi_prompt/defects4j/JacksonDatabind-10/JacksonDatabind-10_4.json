[{"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n        // Second: if no annotations but subtypes, can create \"untyped\" serializer:\n        if (!builder.hasProperties() && builder.hasUntypedSerializer()) {\n            return builder.buildUntyped();\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,77 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // Second: if no annotations but subtypes, can create \"untyped\" serializer:\n+        if (!builder.hasProperties() && builder.hasUntypedSerializer()) {\n+            return builder.buildUntyped();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,77 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // Second: if no annotations but subtypes, can create \"untyped\" serializer:\n+        if (!builder.hasProperties() && builder.hasUntypedSerializer()) {\n+            return builder.buildUntyped();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -68,6 +68,10 @@\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n+        // Second: if no annotations but subtypes, can create \"untyped\" serializer:\n+        if (!builder.hasProperties() && builder.hasUntypedSerializer()) {\n+            return builder.buildUntyped();\n+        }\n     }\n     return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.findValueSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.findValueSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.findValueSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -3,7 +3,7 @@\n     // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n     // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n     if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n+        return prov.findValueSerializer(Object.class);\n         //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config = prov.getConfig();\n@@ -30,7 +30,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        } else {\n            return null; // Fix: Return null when serializer is not found\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,75 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else {\n+            return null; // Fix: Return null when serializer is not found\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,75 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else {\n+            return null; // Fix: Return null when serializer is not found\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -30,7 +30,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -67,6 +67,8 @@\n         // First: if there are known annotations, just create 'empty bean' serializer\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n+        } else {\n+            return null; // Fix: Return null when serializer is not found\n         }\n     }\n     return ser;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass()); // Fix applied: beanDesc.getBeanClass() replaces Object.class\n    } \n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n        // Second: if not even that, use just basic serializer:\n        ser = (JsonSerializer<Object>) new BeanAsArraySerializer(beanDesc.getBeanClass(), builder); \n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,74 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass()); // Fix applied: beanDesc.getBeanClass() replaces Object.class\n+    } \n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // Second: if not even that, use just basic serializer:\n+        ser = (JsonSerializer<Object>) new BeanAsArraySerializer(beanDesc.getBeanClass(), builder); \n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,74 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass()); // Fix applied: beanDesc.getBeanClass() replaces Object.class\n+    } \n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // Second: if not even that, use just basic serializer:\n+        ser = (JsonSerializer<Object>) new BeanAsArraySerializer(beanDesc.getBeanClass(), builder); \n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -3,9 +3,8 @@\n     // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n     // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n     if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n-    }\n+        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass()); // Fix applied: beanDesc.getBeanClass() replaces Object.class\n+    } \n     final SerializationConfig config = prov.getConfig();\n     BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n     builder.setConfig(config);\n@@ -30,7 +29,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -68,6 +67,8 @@\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n+        // Second: if not even that, use just basic serializer:\n+        ser = (JsonSerializer<Object>) new BeanAsArraySerializer(beanDesc.getBeanClass(), builder); \n     }\n     return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n        // Return \"unknown type\" serializer for plain Object\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,74 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n+        // Return \"unknown type\" serializer for plain Object\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,74 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n+        // Return \"unknown type\" serializer for plain Object\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -2,7 +2,8 @@\n protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n     // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n+    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n+        // Return \"unknown type\" serializer for plain Object\n         return prov.getUnknownTypeSerializer(Object.class);\n         //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n@@ -30,7 +31,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        } else {\n            // Second: if not even annotations, need to just serialize as JSON Object\n            return BeanSerializer.createDummy(beanDesc.getType());\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,76 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else {\n+            // Second: if not even annotations, need to just serialize as JSON Object\n+            return BeanSerializer.createDummy(beanDesc.getType());\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,76 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else {\n+            // Second: if not even annotations, need to just serialize as JSON Object\n+            return BeanSerializer.createDummy(beanDesc.getType());\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -30,7 +30,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -67,6 +67,9 @@\n         // First: if there are known annotations, just create 'empty bean' serializer\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n+        } else {\n+            // Second: if not even annotations, need to just serialize as JSON Object\n+            return BeanSerializer.createDummy(beanDesc.getType());\n         }\n     }\n     return ser;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        // throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n        // And second, for some \"well-known\" simple types, we may want to provide a more\n        // well-tuned serializer. But this is still to be implemented.\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,75 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        // throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // And second, for some \"well-known\" simple types, we may want to provide a more\n+        // well-tuned serializer. But this is still to be implemented.\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,75 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        // throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // And second, for some \"well-known\" simple types, we may want to provide a more\n+        // well-tuned serializer. But this is still to be implemented.\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -4,7 +4,7 @@\n     // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n     if (beanDesc.getBeanClass() == Object.class) {\n         return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+        // throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config = prov.getConfig();\n     BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n@@ -30,7 +30,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -60,7 +60,7 @@\n             builder = mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    JsonSerializer<Object> ser = builder.build();\n     if (ser == null) {\n         // If we get this far, there were no properties found, so no regular BeanSerializer\n         // would be constructed. But, couple of exceptions.\n@@ -68,6 +68,8 @@\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n+        // And second, for some \"well-known\" simple types, we may want to provide a more\n+        // well-tuned serializer. But this is still to be implemented.\n     }\n     return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props, builder);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props, builder);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props, builder);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -27,10 +27,10 @@\n     // [JACKSON-440] Need to allow reordering of properties to serialize\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n+            props = mod.orderProperties(config, beanDesc, props, builder);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct((Set<String>) null, type, staticTyping, typeSer, null, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct((Set<String>) null, type, staticTyping, typeSer, null, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct((Set<String>) null, type, staticTyping, typeSer, null, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -30,7 +30,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -45,7 +45,7 @@\n         TypeSerializer typeSer = createTypeSerializer(config, valueType);\n         // last 2 nulls; don't know key, value serializers (yet)\n         // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        MapSerializer anySer = MapSerializer.construct((Set<String>) null, type, staticTyping, typeSer, null, null, null, null);\n         // TODO: support '@JsonIgnoreProperties' with any setter?\n         // TODO: can we find full PropertyName?\n         PropertyName name = new PropertyName(anyGetter.getName());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -2,7 +2,7 @@\n protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n     // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n+    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n         return prov.getUnknownTypeSerializer(Object.class);\n         //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n        // Otherwise use 'unknown type' serializer, as suggested above:\n        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,75 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // Otherwise use 'unknown type' serializer, as suggested above:\n+        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,75 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // Otherwise use 'unknown type' serializer, as suggested above:\n+        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -3,7 +3,7 @@\n     // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n     // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n     if (beanDesc.getBeanClass() == Object.class) {\n-        return prov.getUnknownTypeSerializer(Object.class);\n+        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n         //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config = prov.getConfig();\n@@ -30,7 +30,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -68,6 +68,8 @@\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n+        // Otherwise use 'unknown type' serializer, as suggested above:\n+        return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n     }\n     return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        } else {\n            // As per [databind#399], we may still have a Converter\n            Converter<Object,Object> conv = beanDesc.findSerializationConverter();\n            if (conv == null) {\n                return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n            }\n            JavaType delegateType = conv.getOutputType(config.getTypeFactory());\n            if (!delegateType.hasRawClass(beanDesc.getBeanClass())) {\n                beanDesc = config.introspect(delegateType);\n                builder = constructBeanSerializerBuilder(beanDesc);\n                builder.setConfig(config);\n                props = findBeanProperties(prov, beanDesc, builder);\n                props = filterBeanProperties(config, beanDesc, props);\n                if (_factoryConfig.hasSerializerModifiers()) {\n                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                        props = mod.changeProperties(config, beanDesc, props);\n                    }\n                }\n                // [JACKSON-440] Need to allow reordering of properties to serialize\n                if (_factoryConfig.hasSerializerModifiers()) {\n                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                        props = mod.orderProperties(config, beanDesc, props);\n                    }\n                }\n                builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n                builder.setProperties(props);\n                builder.setFilterId(findFilterId(config, beanDesc));\n            }\n            ser = new StdDelegatingSerializer(conv, delegateType, prov.getSerializerProviderInstance());\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,102 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else {\n+            // As per [databind#399], we may still have a Converter\n+            Converter<Object,Object> conv = beanDesc.findSerializationConverter();\n+            if (conv == null) {\n+                return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n+            }\n+            JavaType delegateType = conv.getOutputType(config.getTypeFactory());\n+            if (!delegateType.hasRawClass(beanDesc.getBeanClass())) {\n+                beanDesc = config.introspect(delegateType);\n+                builder = constructBeanSerializerBuilder(beanDesc);\n+                builder.setConfig(config);\n+                props = findBeanProperties(prov, beanDesc, builder);\n+                props = filterBeanProperties(config, beanDesc, props);\n+                if (_factoryConfig.hasSerializerModifiers()) {\n+                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+                        props = mod.changeProperties(config, beanDesc, props);\n+                    }\n+                }\n+                // [JACKSON-440] Need to allow reordering of properties to serialize\n+                if (_factoryConfig.hasSerializerModifiers()) {\n+                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+                        props = mod.orderProperties(config, beanDesc, props);\n+                    }\n+                }\n+                builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+                builder.setProperties(props);\n+                builder.setFilterId(findFilterId(config, beanDesc));\n+            }\n+            ser = new StdDelegatingSerializer(conv, delegateType, prov.getSerializerProviderInstance());\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,102 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else {\n+            // As per [databind#399], we may still have a Converter\n+            Converter<Object,Object> conv = beanDesc.findSerializationConverter();\n+            if (conv == null) {\n+                return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n+            }\n+            JavaType delegateType = conv.getOutputType(config.getTypeFactory());\n+            if (!delegateType.hasRawClass(beanDesc.getBeanClass())) {\n+                beanDesc = config.introspect(delegateType);\n+                builder = constructBeanSerializerBuilder(beanDesc);\n+                builder.setConfig(config);\n+                props = findBeanProperties(prov, beanDesc, builder);\n+                props = filterBeanProperties(config, beanDesc, props);\n+                if (_factoryConfig.hasSerializerModifiers()) {\n+                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+                        props = mod.changeProperties(config, beanDesc, props);\n+                    }\n+                }\n+                // [JACKSON-440] Need to allow reordering of properties to serialize\n+                if (_factoryConfig.hasSerializerModifiers()) {\n+                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+                        props = mod.orderProperties(config, beanDesc, props);\n+                    }\n+                }\n+                builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+                builder.setProperties(props);\n+                builder.setFilterId(findFilterId(config, beanDesc));\n+            }\n+            ser = new StdDelegatingSerializer(conv, delegateType, prov.getSerializerProviderInstance());\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -30,7 +30,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -67,6 +67,35 @@\n         // First: if there are known annotations, just create 'empty bean' serializer\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n+        } else {\n+            // As per [databind#399], we may still have a Converter\n+            Converter<Object,Object> conv = beanDesc.findSerializationConverter();\n+            if (conv == null) {\n+                return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n+            }\n+            JavaType delegateType = conv.getOutputType(config.getTypeFactory());\n+            if (!delegateType.hasRawClass(beanDesc.getBeanClass())) {\n+                beanDesc = config.introspect(delegateType);\n+                builder = constructBeanSerializerBuilder(beanDesc);\n+                builder.setConfig(config);\n+                props = findBeanProperties(prov, beanDesc, builder);\n+                props = filterBeanProperties(config, beanDesc, props);\n+                if (_factoryConfig.hasSerializerModifiers()) {\n+                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+                        props = mod.changeProperties(config, beanDesc, props);\n+                    }\n+                }\n+                // [JACKSON-440] Need to allow reordering of properties to serialize\n+                if (_factoryConfig.hasSerializerModifiers()) {\n+                    for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+                        props = mod.orderProperties(config, beanDesc, props);\n+                    }\n+                }\n+                builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+                builder.setProperties(props);\n+                builder.setFilterId(findFilterId(config, beanDesc));\n+            }\n+            ser = new StdDelegatingSerializer(conv, delegateType, prov.getSerializerProviderInstance());\n         }\n     }\n     return ser;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        JsonSerializer<Object> anySer = prov.findValueSerializer(valueType, anyGetter);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        JsonSerializer<Object> anySer = prov.findValueSerializer(valueType, anyGetter);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        JsonSerializer<Object> anySer = prov.findValueSerializer(valueType, anyGetter);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -30,7 +30,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -45,7 +45,7 @@\n         TypeSerializer typeSer = createTypeSerializer(config, valueType);\n         // last 2 nulls; don't know key, value serializers (yet)\n         // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        JsonSerializer<Object> anySer = prov.findValueSerializer(valueType, anyGetter);\n         // TODO: support '@JsonIgnoreProperties' with any setter?\n         // TODO: can we find full PropertyName?\n         PropertyName name = new PropertyName(anyGetter.getName());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        } else {\n            return BeanSerializerBase.construct(config, beanDesc, builder);\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,75 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else {\n+            return BeanSerializerBase.construct(config, beanDesc, builder);\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,75 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else {\n+            return BeanSerializerBase.construct(config, beanDesc, builder);\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -67,6 +67,8 @@\n         // First: if there are known annotations, just create 'empty bean' serializer\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n+        } else {\n+            return BeanSerializerBase.construct(config, beanDesc, builder);\n         }\n     }\n     return ser;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n        // Second; for \"any getters\", empty BeanSerializer is fine\n        if (anyGetter != null) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,77 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // Second; for \"any getters\", empty BeanSerializer is fine\n+        if (anyGetter != null) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,77 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // Second; for \"any getters\", empty BeanSerializer is fine\n+        if (anyGetter != null) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -68,6 +68,10 @@\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n+        // Second; for \"any getters\", empty BeanSerializer is fine\n+        if (anyGetter != null) {\n+            return builder.createDummy();\n+        }\n     }\n     return ser;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // Quick sanity check: never try to create bean serializer for plain Object\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props, builder);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        MapSerializer anySer = MapSerializer.construct(\n            /* filterId */ null, type, staticTyping, typeSer,\n            /* key ser */ null, /* value ser */ null, /* value Type */ valueType);\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(\n            name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather information about suppressing nulls\n    builder.setNullValueSerializer(findNullValueSerializer(prov, beanDesc, props));\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n        // Second: if Object Id is needed, force its inclusion (to simplify\n        // some aspects of handling 'missing' objects)\n        if (builder.getBeanDescription().hasObjectId()) {\n            return builder.buildObjectIdentitySerializer();\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,76 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // Quick sanity check: never try to create bean serializer for plain Object\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props, builder);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        MapSerializer anySer = MapSerializer.construct(\n+            /* filterId */ null, type, staticTyping, typeSer,\n+            /* key ser */ null, /* value ser */ null, /* value Type */ valueType);\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(\n+            name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather information about suppressing nulls\n+    builder.setNullValueSerializer(findNullValueSerializer(prov, beanDesc, props));\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // Second: if Object Id is needed, force its inclusion (to simplify\n+        // some aspects of handling 'missing' objects)\n+        if (builder.getBeanDescription().hasObjectId()) {\n+            return builder.buildObjectIdentitySerializer();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,76 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // Quick sanity check: never try to create bean serializer for plain Object\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props, builder);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        MapSerializer anySer = MapSerializer.construct(\n+            /* filterId */ null, type, staticTyping, typeSer,\n+            /* key ser */ null, /* value ser */ null, /* value Type */ valueType);\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(\n+            name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather information about suppressing nulls\n+    builder.setNullValueSerializer(findNullValueSerializer(prov, beanDesc, props));\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+        // Second: if Object Id is needed, force its inclusion (to simplify\n+        // some aspects of handling 'missing' objects)\n+        if (builder.getBeanDescription().hasObjectId()) {\n+            return builder.buildObjectIdentitySerializer();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -1,10 +1,8 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n-    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n-    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    // Quick sanity check: never try to create bean serializer for plain Object\n     if (beanDesc.getBeanClass() == Object.class) {\n         return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config = prov.getConfig();\n     BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n@@ -27,10 +25,10 @@\n     // [JACKSON-440] Need to allow reordering of properties to serialize\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n-            props = mod.orderProperties(config, beanDesc, props);\n+            props = mod.orderProperties(config, beanDesc, props, builder);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -39,19 +37,19 @@\n             anyGetter.fixAccess();\n         }\n         JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n-        // copied from BasicSerializerFactory.buildMapSerializer():\n         boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType = type.getContentType();\n         TypeSerializer typeSer = createTypeSerializer(config, valueType);\n-        // last 2 nulls; don't know key, value serializers (yet)\n-        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n-        // TODO: support '@JsonIgnoreProperties' with any setter?\n-        // TODO: can we find full PropertyName?\n+        MapSerializer anySer = MapSerializer.construct(\n+            /* filterId */ null, type, staticTyping, typeSer,\n+            /* key ser */ null, /* value ser */ null, /* value Type */ valueType);\n         PropertyName name = new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        BeanProperty.Std anyProp = new BeanProperty.Std(\n+            name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n     }\n+    // Next: need to gather information about suppressing nulls\n+    builder.setNullValueSerializer(findNullValueSerializer(prov, beanDesc, props));\n     // Next: need to gather view information, if any:\n     processViews(config, builder);\n     // Finally: let interested parties mess with the result bit more...\n@@ -60,13 +58,18 @@\n             builder = mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n-    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    JsonSerializer<Object> ser = builder.build();\n     if (ser == null) {\n         // If we get this far, there were no properties found, so no regular BeanSerializer\n         // would be constructed. But, couple of exceptions.\n-        // First: if there are known annotations, just create 'empty bean' serializer\n+        // First: if there are known annotations, just create 'empty' serializer\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n+        }\n+        // Second: if Object Id is needed, force its inclusion (to simplify\n+        // some aspects of handling 'missing' objects)\n+        if (builder.getBeanDescription().hasObjectId()) {\n+            return builder.buildObjectIdentitySerializer();\n         }\n     }\n     return ser;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType().getContentType();\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, valueType, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType().getContentType();\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, valueType, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType().getContentType();\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, valueType, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -30,7 +30,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -38,14 +38,14 @@\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n-        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        JavaType type = anyGetter.getType().getContentType();\n         // copied from BasicSerializerFactory.buildMapSerializer():\n         boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType = type.getContentType();\n         TypeSerializer typeSer = createTypeSerializer(config, valueType);\n         // last 2 nulls; don't know key, value serializers (yet)\n         // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        MapSerializer anySer = MapSerializer.construct(null, valueType, staticTyping, typeSer, null, null, null);\n         // TODO: support '@JsonIgnoreProperties' with any setter?\n         // TODO: can we find full PropertyName?\n         PropertyName name = new PropertyName(anyGetter.getName());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        } else {\n            // 17-Oct-2021, fix: return 'unknown type' serializer if no known annotations\n            return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,76 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else {\n+            // 17-Oct-2021, fix: return 'unknown type' serializer if no known annotations\n+            return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,76 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else {\n+            // 17-Oct-2021, fix: return 'unknown type' serializer if no known annotations\n+            return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -30,7 +30,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -67,6 +67,9 @@\n         // First: if there are known annotations, just create 'empty bean' serializer\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n+        } else {\n+            // 17-Oct-2021, fix: return 'unknown type' serializer if no known annotations\n+            return prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n         }\n     }\n     return ser;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        JsonSerializer<?> anySer = prov.findValueSerializer(valueType, anyGetter);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        JsonSerializer<?> anySer = prov.findValueSerializer(valueType, anyGetter);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,73 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        JsonSerializer<?> anySer = prov.findValueSerializer(valueType, anyGetter);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -30,7 +30,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -45,7 +45,7 @@\n         TypeSerializer typeSer = createTypeSerializer(config, valueType);\n         // last 2 nulls; don't know key, value serializers (yet)\n         // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n-        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        JsonSerializer<?> anySer = prov.findValueSerializer(valueType, anyGetter);\n         // TODO: support '@JsonIgnoreProperties' with any setter?\n         // TODO: can we find full PropertyName?\n         PropertyName name = new PropertyName(anyGetter.getName());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        } else if (beanDesc.getBeanClass() == Object.class) {\n            return prov.getUnknownTypeSerializer(Object.class);\n        }\n    }\n    return ser;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@AnyGetterWriter\n@@ -1,6 +1,74 @@\n @SuppressWarnings(\"unchecked\")\n-public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n-    _accessor = accessor;\n-    _property = property;\n-    _mapSerializer = (MapSerializer) serializer;\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else if (beanDesc.getBeanClass() == Object.class) {\n+            return prov.getUnknownTypeSerializer(Object.class);\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n+++ com/fasterxml/jackson/databind/ser/AnyGetterWriter.java@resolve\n@@ -1,5 +1,74 @@\n @SuppressWarnings(\"unchecked\")\n-public void resolve(SerializerProvider provider) throws JsonMappingException {\n-    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n-    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n+protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n+    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n+    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n+        return prov.getUnknownTypeSerializer(Object.class);\n+    }\n+    final SerializationConfig config = prov.getConfig();\n+    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n+    // First: any detectable (auto-detect, annotations) properties to serialize?\n+    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n+    if (props == null) {\n+        props = new ArrayList<BeanPropertyWriter>();\n+    }\n+    // [databind#638]: Allow injection of \"virtual\" properties:\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n+    // [JACKSON-440] Need to allow modification bean properties to serialize:\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    // Any properties to suppress?\n+    props = filterBeanProperties(config, beanDesc, props);\n+    // [JACKSON-440] Need to allow reordering of properties to serialize\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props = mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n+    if (anyGetter != null) {\n+        if (config.canOverrideAccessModifiers()) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n+        // copied from BasicSerializerFactory.buildMapSerializer():\n+        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n+        JavaType valueType = type.getContentType();\n+        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n+        // last 2 nulls; don't know key, value serializers (yet)\n+        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n+        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        // TODO: support '@JsonIgnoreProperties' with any setter?\n+        // TODO: can we find full PropertyName?\n+        PropertyName name = new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n+    }\n+    // Next: need to gather view information, if any:\n+    processViews(config, builder);\n+    // Finally: let interested parties mess with the result bit more...\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder = mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+    if (ser == null) {\n+        // If we get this far, there were no properties found, so no regular BeanSerializer\n+        // would be constructed. But, couple of exceptions.\n+        // First: if there are known annotations, just create 'empty bean' serializer\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        } else if (beanDesc.getBeanClass() == Object.class) {\n+            return prov.getUnknownTypeSerializer(Object.class);\n+        }\n+    }\n+    return ser;\n }\n--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@constructBeanSerializer\n@@ -2,9 +2,8 @@\n protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n     // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n-    if (beanDesc.getBeanClass() == Object.class) {\n+    if (beanDesc.getBeanClass() == Object.class && !beanDesc.hasKnownClassAnnotations()) {\n         return prov.getUnknownTypeSerializer(Object.class);\n-        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config = prov.getConfig();\n     BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n@@ -30,7 +29,7 @@\n             props = mod.orderProperties(config, beanDesc, props);\n         }\n     }\n-        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n@@ -67,6 +66,8 @@\n         // First: if there are known annotations, just create 'empty bean' serializer\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n+        } else if (beanDesc.getBeanClass() == Object.class) {\n+            return prov.getUnknownTypeSerializer(Object.class);\n         }\n     }\n     return ser;\n", "finish_reason": "stop", "valid": false, "num": 1}]