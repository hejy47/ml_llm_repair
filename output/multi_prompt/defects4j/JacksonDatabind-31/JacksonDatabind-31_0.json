[{"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        _append(JsonToken.VALUE_STRING, text);\n        flush(); // added to ensure that the text is written to the output stream\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -4,5 +4,6 @@\n         writeNull();\n     } else {\n         _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n         _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,9 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,9 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,9 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // added to ensure that the text is written to the output stream\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        _appendValue(JsonToken.VALUE_STRING, text);\n    }\n} \n\n// Alternative fix\n@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        _writeSimpleValue(JsonToken.VALUE_STRING, text);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -3,6 +3,6 @@\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _appendValue(JsonToken.VALUE_STRING, text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _appendValue(JsonToken.VALUE_STRING, text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _appendValue(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,8 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _appendValue(JsonToken.VALUE_STRING, text);\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _appendValue(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _appendValue(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _appendValue(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _appendValue(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _appendValue(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _appendValue(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _appendValue(JsonToken.VALUE_STRING, text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _appendValue(JsonToken.VALUE_STRING, text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _appendValue(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,8 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _appendValue(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _appendValue(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,8 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _appendValue(JsonToken.VALUE_STRING, text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,8 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _appendValue(JsonToken.VALUE_STRING, text);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 9}, {"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        _append(JsonToken.VALUE_STRING, text);\n        _flushBuffer(); // additional fix to ensure data is immediately written\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -4,5 +4,6 @@\n         writeNull();\n     } else {\n         _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n         _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,9 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,9 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,9 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer(); // additional fix to ensure data is immediately written\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        writeRaw(text);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -3,6 +3,6 @@\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        writeRaw(text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        writeRaw(text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRaw(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,8 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRaw(text);\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRaw(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRaw(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRaw(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRaw(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRaw(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRaw(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        writeRaw(text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        writeRaw(text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRaw(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,8 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRaw(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRaw(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,8 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        writeRaw(text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,8 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        writeRaw(text);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        _append(JsonToken.VALUE_STRING, text);\n        flush(); // add this line to flush the output after writing the string\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -4,5 +4,6 @@\n         writeNull();\n     } else {\n         _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n         _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,9 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,9 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,9 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _append(JsonToken.VALUE_STRING, text);\n+        flush(); // add this line to flush the output after writing the string\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        _append(JsonToken.VALUE_STRING, text, false);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -3,6 +3,6 @@\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_STRING, text, false);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_STRING, text, false);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text, false);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,8 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text, false);\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text, false);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text, false);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text, false);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text, false);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text, false);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text, false);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _append(JsonToken.VALUE_STRING, text, false);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _append(JsonToken.VALUE_STRING, text, false);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text, false);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,8 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text, false);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text, false);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,8 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _append(JsonToken.VALUE_STRING, text, false);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,8 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _append(JsonToken.VALUE_STRING, text, false);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        generator.writeString(text);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -3,6 +3,6 @@\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        generator.writeString(text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        generator.writeString(text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        generator.writeString(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,8 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        generator.writeString(text);\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        generator.writeString(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        generator.writeString(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        generator.writeString(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        generator.writeString(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        generator.writeString(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        generator.writeString(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        generator.writeString(text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        generator.writeString(text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        generator.writeString(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,8 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        generator.writeString(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        generator.writeString(text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,8 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        generator.writeString(text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,8 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        generator.writeString(text);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        if (_outputContext.inObject()) {\n            _reportCantWriteValueExpectName(\"write a string\");\n        }\n        _append(JsonToken.VALUE_STRING, text);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -3,6 +3,9 @@\n     if (text == null) {\n         writeNull();\n     } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n         _append(JsonToken.VALUE_STRING, text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,11 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n         _append(JsonToken.VALUE_STRING, text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,11 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,11 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,11 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,11 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,11 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,11 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,11 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,11 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        if (_outputContext.inObject()) {\n+            _reportCantWriteValueExpectName(\"write a string\");\n+        }\n+        _append(JsonToken.VALUE_STRING, text);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -3,6 +3,6 @@\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,8 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,8 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,8 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,8 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _append(JsonToken.VALUE_STRING, text.toCharArray(), 0, text.length());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        writeRawValue('\"');\n        _writeString(text);\n        writeRawValue('\"');\n    }\n} \n\n// Helper method to actually write the string\nprivate void _writeString(String text) throws IOException {\n    final int len = text.length();\n    for (int i = 0; i < len; ++i) {\n        char c = text.charAt(i);\n        if (c <= 0x7F) { // ascii\n            _writer.write(c);\n        } else if (c < SURR1_FIRST || c > SURR2_LAST) {\n            // no need for encoding as-is\n            _writer.write(c);\n        } else {\n            if (c > SURR1_LAST) { // must be from first range\n                _illegalSurrogate(c);\n            }\n            // and if so, followed by another from next range\n            if (++i == len) {\n                _illegalSurrogate(c);\n            }\n            c = _convertSurrogate(c, text.charAt(i));\n            if (c > 0x7F) {\n                _writer.write(CODE_PREFIX);\n                _writer.write((c >> 6) | 0xC0);\n                c = (c & 0x3F) | 0x80;\n            }\n            _writer.write(c);\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -3,6 +3,8 @@\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,10 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,10 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,10 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,10 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,10 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,10 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,10 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,10 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,10 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,10 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,10 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,10 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,10 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,10 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,10 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,10 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        writeRawValue('\"');\n+        _writeString(text);\n+        writeRawValue('\"');\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        _append(JsonToken.VALUE_STRING, text);\n        _flushBuffer();\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -4,5 +4,6 @@\n         writeNull();\n     } else {\n         _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n         _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,9 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,9 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,9 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _append(JsonToken.VALUE_STRING, text);\n+        _flushBuffer();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeString(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -3,6 +3,6 @@\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeString(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,8 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,8 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,8 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,8 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeString(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _append(JsonToken.VALUE_STRING, text.replaceAll(\"\\\\p{C}\", \"\"));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]