[{"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n} \n\nprivate final void _append(JsonToken type, Object value, boolean needEntry) throws IOException {\n    if (_tokenWriteContext.writeValue() == 0 || needEntry) {\n        _writeContext.writeValue();\n        _streamWriteContext.writeValue();\n    }\n    _tokenWriteContext.setCurrentValue(value);\n    if (type.isScalarValue()) {\n        if (_wrapScalarValues) {\n            _writeScalarPrefix();\n        }\n        type.serialize(_currentValue, _generator, this);\n        if (_wrapScalarValues) {\n            _writeScalarSuffix();\n        }\n    } else {\n        _generator.writeStartArray();\n        type.serialize(_currentValue, _generator, this);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), true);\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue\", \"Cannot write raw value directly\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text, false));\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    writeRaw(text);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    writeRaw(text);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    if (text == null) {\n        writeNull();\n    } else {\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(String text) throws IOException {\n+public void writeRawValue(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n+public void writeRawValue(String text) throws IOException {\n     if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,8 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,8 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,8 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,8 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,8 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeRawValue(String text) throws IOException {\n+    if (text == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n    writeRaw(text);\n} \n\nprivate void _appendValue(JsonToken type) {\n    Segment next = _allocateTokenBuffer();\n    next.type(type);\n    _currentSegment = _currentSegment.append(next);\n} \n\nprivate void writeRaw(String text) throws IOException {\n    int length = text.length();\n    if (length > _outputEnd) {\n        _writeLongString(text);\n        return;\n    }\n    if ((_outputTail + length) > _outputEnd) {\n        _flushBuffer();\n    }\n    text.getChars(0, length, _outputBuffer, _outputTail);\n    _outputTail += length;\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,5 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,5 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,5 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,5 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,5 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,5 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    writeRaw(text);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    _append(JsonToken.VALUE_STRING, text);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_STRING, text);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    _reportUnsupportedOperation(\"writeRawValue(String)\");\n} \n\n// or \n\n@Override\npublic void writeRawValue(String text) throws IOException {\n    writeString(text);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _reportUnsupportedOperation(\"writeRawValue(String)\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n} \n\nprivate void _append(JsonToken type, Object value, boolean filtered) throws IOException {\n    Segment next =  _closeScope(type);\n    if (_outputTail + next.size > _outputEnd) {\n        _flushBuffer();\n    }\n    if (filtered) {\n        _writeContext.writeValue();\n        _filter.writeRawValue(type, value);\n    } else {\n        _writeContext.writeRawValue();\n        next.writeTo(_outputBuffer, _outputTail);\n        _outputTail += next.size;\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text), false);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n    _reportCantWriteValueError(\"write raw value\");\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,5 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,5 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,5 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,5 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,5 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,5 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _reportCantWriteValueError(\"write raw value\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n}\n\nprivate void _appendRaw(JsonToken type, Object value) throws IOException {\n    _verifyValueWrite(\"write raw value\");\n    _writeContext.writeValue();\n    _streamWriteContext.writeValue();\n    _generator.writeRawValue(type, value);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendRaw(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    _verifyValueWrite(\"write raw value\");\n    writeRaw(text);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,5 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,5 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,5 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,5 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,5 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,5 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _verifyValueWrite(\"write raw value\");\n+    writeRaw(text);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(String text) throws IOException {\n    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n    _writeScalar(text);\n} \n\nprivate void _writeScalar(Object value) throws IOException {\n    if (_cfgPrettyPrinter != null) {\n        _writePPFieldName(\"\");\n    }\n    if (value instanceof byte[]) {\n        writeBinary((byte[]) value);\n        return;\n    }\n    if (value instanceof RawValue) {\n        writeRaw((RawValue) value);\n        return;\n    }\n    _verifyValueWrite(\"write a raw scalar value\");\n    writeRawValue(String.valueOf(value));\n} \n\nprivate void _appendValue(JsonToken vt) {\n    Segment next = _hasNativeTypeIds ? _last.appendRawValue(vt, _objectId, _typeId) : _last.appendValue(vt);\n    if (next == null) {\n        _appendCompletedChunk();\n    } else {\n        _last = next;\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,5 @@\n @Override\n public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,5 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,5 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,5 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,5 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,5 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(String text) throws IOException {\n+    _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _writeScalar(text);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]