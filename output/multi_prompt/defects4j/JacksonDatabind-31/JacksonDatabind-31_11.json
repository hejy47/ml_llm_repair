[{"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        _reportError(\"writeNumber\");\n        // in this case we want to throw an error because we can't write out\n        // a BigInteger as a simple numeric value; however we could serialize\n        // it as a string value (so caller needs to call 'writeString' instead)\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,11 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,11 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,11 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,11 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,11 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,11 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,9 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,11 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,11 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,11 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,11 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _reportError(\"writeNumber\");\n+        // in this case we want to throw an error because we can't write out\n+        // a BigInteger as a simple numeric value; however we could serialize\n+        // it as a string value (so caller needs to call 'writeString' instead)\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        writeNumber(v.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        writeNumber(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        writeNumber(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        writeNumber(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,8 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        writeNumber(v.toString());\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        writeNumber(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        writeNumber(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        writeNumber(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        writeNumber(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        writeNumber(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        writeNumber(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        writeNumber(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,6 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        writeNumber(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        writeNumber(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,8 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        writeNumber(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        writeNumber(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,8 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        writeNumber(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,8 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        writeNumber(v.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        _verifyValueWrite(\"write number\");\n        writeRaw(v.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,9 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,7 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,9 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,9 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _verifyValueWrite(\"write number\");\n+        writeRaw(v.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        _append(JsonToken.VALUE_NUMBER_INT);\n        _writeNumber(v);\n    }\n} \n\nprivate void _writeNumber(BigInteger v) throws IOException {\n    if (v.bitLength() <= 31) {\n        writeNumber(v.intValue());\n    } else if (v.bitLength() <= 63) {\n        writeNumber(v.longValue());\n    } else {\n        _throwInternal();\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,9 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,7 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,9 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,9 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _append(JsonToken.VALUE_NUMBER_INT);\n+        _writeNumber(v);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,8 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,6 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,8 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,8 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,8 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        _reportIncompatibleRootType(v, this);\n        // Include this line to throw an exception if BigInteger is not representable as a long\n        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n            writeString(v.toString());\n        } else {\n            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,14 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,12 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,14 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,14 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,14 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _reportIncompatibleRootType(v, this);\n+        // Include this line to throw an exception if BigInteger is not representable as a long\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0) {\n+            writeString(v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v.longValue());\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        _reportError(\"writeNumber\");\n        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,9 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,7 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,9 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,9 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _reportError(\"writeNumber\");\n+        _append(JsonToken.VALUE_NUMBER_INT, v.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        _reportUnsupportedOperation();\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _reportUnsupportedOperation();\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,8 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _reportUnsupportedOperation();\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportUnsupportedOperation();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,8 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportUnsupportedOperation();\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,8 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportUnsupportedOperation();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportUnsupportedOperation();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportUnsupportedOperation();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportUnsupportedOperation();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportUnsupportedOperation();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportUnsupportedOperation();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,8 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _reportUnsupportedOperation();\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,6 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _reportUnsupportedOperation();\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportUnsupportedOperation();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,8 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportUnsupportedOperation();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,8 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportUnsupportedOperation();\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,8 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _reportUnsupportedOperation();\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,8 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _reportUnsupportedOperation();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        // Check if the number can fit into a long value\n        long longValue = v.longValue();\n        if (BigInteger.valueOf(longValue).equals(v)) {\n            // If yes, write as a long value\n            writeNumber(longValue);\n        } else {\n            // Otherwise, write as a BigInteger value\n            _append(JsonToken.VALUE_NUMBER_INT, v);\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,16 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,16 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,16 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,16 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,16 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,16 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,16 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,16 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,16 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,16 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,16 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,14 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,16 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,16 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,16 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,16 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,16 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        // Check if the number can fit into a long value\n+        long longValue = v.longValue();\n+        if (BigInteger.valueOf(longValue).equals(v)) {\n+            // If yes, write as a long value\n+            writeNumber(longValue);\n+        } else {\n+            // Otherwise, write as a BigInteger value\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        // check if BigInteger can be represented as long\n        long val = v.longValue();\n        if (BigInteger.valueOf(val).equals(v)) {\n            writeNumber(val);\n        } else {\n            _append(JsonToken.VALUE_NUMBER_INT, v);\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,14 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,12 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,14 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,14 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,14 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        // check if BigInteger can be represented as long\n+        long val = v.longValue();\n+        if (BigInteger.valueOf(val).equals(v)) {\n+            writeNumber(val);\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n        } else {\n            _append(JsonToken.VALUE_NUMBER_INT, v);\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,12 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,12 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,12 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,12 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,12 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,12 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,10 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,12 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,12 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,12 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            _append(JsonToken.VALUE_NUMBER_FLOAT, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n            _append(JsonToken.VALUE_STRING, v.toString());\n        } else {\n            _append(JsonToken.VALUE_NUMBER_INT, v);\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,12 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,12 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,12 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,12 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,12 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,12 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,10 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,12 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,12 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,12 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,12 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        if (isEnabled(JsonGenerator.Feature.WRITE_BIGINTS_AS_STRINGS)) {\n+            _append(JsonToken.VALUE_STRING, v.toString());\n+        } else {\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        // BigInteger values can exceed the range of long, so check for that\n        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n            // if the BigInteger is within the range of long, use writeNumber(long)\n            writeNumber(v.longValue());\n        } else {\n            // otherwise, use the _append method\n            _append(JsonToken.VALUE_NUMBER_INT, v);\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,15 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,15 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,15 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,15 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,15 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,15 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,13 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,15 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,15 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,15 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        // BigInteger values can exceed the range of long, so check for that\n+        if (v.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 && v.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n+            // if the BigInteger is within the range of long, use writeNumber(long)\n+            writeNumber(v.longValue());\n+        } else {\n+            // otherwise, use the _append method\n+            _append(JsonToken.VALUE_NUMBER_INT, v);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeNumber(BigInteger v) throws IOException {\n    if (v == null) {\n        writeNull();\n    } else {\n        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n        writeRaw(v.toString());\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,9 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,9 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,9 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,9 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -3,6 +3,7 @@\n     if (v == null) {\n         writeNull();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,9 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,9 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n+        writeNull();\n+    } else {\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,9 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n+public void writeNumber(BigInteger v) throws IOException {\n+    if (v == null) {\n         writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _reportWriteError(JsonToken.VALUE_NUMBER_INT, v.getClass());\n+        writeRaw(v.toString());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]