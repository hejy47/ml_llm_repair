[{"output": "@Override\npublic void writeRawValue(char[] text, int offset, int len) throws IOException {\n    writer.writeRaw(text, offset, len);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    writer.writeRaw(text, offset, len);\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "@Override\npublic void writeRawValue(char[] text, int offset, int len) throws IOException {\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n} \n\n//add a boolean parameter to specify if the value should be escaped or not\nprivate void _append(JsonToken type, Object value, boolean escapeValue) throws IOException {\n    _verifyValueWrite(\"write raw value\");\n    _writeContext.writeValue();\n    if (type == JsonToken.VALUE_EMBEDDED_OBJECT) {\n        _verifyScalarWrite(\"write raw value\");\n        if (value instanceof byte[]) {\n            _writeBinary((byte[]) value);\n            return;\n        }\n    }\n    _writeRawValue(type, value, escapeValue);\n} \n\n//override the original method to use the new implementation\n@Override\npublic void writeRawValue(String text) throws IOException {\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, true);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), false);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic void writeRawValue(char[] text, int offset, int len) throws IOException {\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n} \n\nprivate void _append(JsonToken token, Object value, boolean isRaw) throws IOException {\n    _currentValue = value;\n    if (token != null) {\n        _gotName = false;\n    }\n    int ix = (_writeContext == null) ? 0 : _writeContext.writeValue();\n    if (ix == 4) { \n        _reportError(\"Can not write a field name, expecting a value\");\n    }\n    \n    switch (token) {\n    case START_ARRAY:\n        _writeContext = _writeContext.createChildArrayContext();\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeStartArray(this);\n            return;\n        }\n        break;\n    case START_OBJECT:\n        _writeContext = _writeContext.createChildObjectContext();\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeStartObject(this);\n            return;\n        }\n        break;\n    case END_ARRAY:\n    case END_OBJECT:\n        _writeContext = _writeContext.getParent();\n        if (_writeContext == null) {\n            _reportError(\"Unexpected close marker '\" + token + \"': no open marker visible\");\n        }\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeEndArray(this, ix, token);\n            return;\n        }\n        break;\n    case FIELD_NAME:\n        _writeFieldName((String)value, false);\n        return;\n    case VALUE_STRING:\n        if (_cfgQuoteStrings) {\n            _writeQuotedString((String) value);\n        } else {\n            _writeString((String) value);\n        }\n        return;\n    case VALUE_NUMBER_INT:\n        if (value instanceof Integer) {\n            _writeInt(((Integer)value).intValue());\n        } else {\n            if (value instanceof Long) {\n                _writeLong(((Long) value).longValue());\n            } else {\n                if (value instanceof BigInteger) {\n                    _writeBigInt((BigInteger) value);\n                } else {\n                    if (value instanceof Short) {\n                        _writeShort(((Short) value).shortValue());\n                    } else {\n                        _writeNumber(value.toString()); \n                    }\n                }\n            }\n        }\n        return;\n    case VALUE_NUMBER_FLOAT:\n        if (value instanceof Double) {\n            _writeDouble(((Double) value).doubleValue());\n        }\n        if (value instanceof BigDecimal) {\n            _writeBigDecimal((BigDecimal) value);\n        }\n        if (value instanceof Float) {\n            _writeFloat(((Float) value).floatValue());\n        }\n        return;\n    case VALUE_TRUE:\n        _writeBoolean(true);\n        return;\n    case VALUE_FALSE:\n        _writeBoolean(false);\n        return;\n    case VALUE_NULL:\n        _writeNull();\n        return;\n    case VALUE_EMBEDDED_OBJECT:\n        if (value == null) {\n            _writeNull();\n            return;\n        }\n        if (value instanceof byte[]) {\n            _writeBinary((byte[]) value);\n            return;\n        }\n        if(isRaw){\n            _writeRaw((String)value);\n        }\n        else{\n            _writeObject(value);\n        }\n        return;\n    }\n    _throwInternal();\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), true);\n }\n", "finish_reason": "stop", "valid": false, "num": 6}, {"output": "@Override\npublic void writeRawValue(char[] text, int offset, int len) throws IOException {\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len), 0, len);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(char[] text, int offset, int len) throws IOException {\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n} \n\nprivate void _append(JsonToken type, char[] text, int offset, int len) throws IOException {\n    _verifyValueWrite(\"write raw value\");\n    Segment segment = _last.appendValue(type);\n    if (segment.hasPayload()) {\n        byte[] data = segment.getPayload();\n        System.arraycopy(text, offset, data, 0, len);\n        segment.setPayload(data);\n    } else {\n        byte[] data = new byte[len];\n        int written = com.fasterxml.jackson.core.io.JsonStringEncoder.encodeUTF8(text, offset, len, data);\n        segment.setPayload(data, written);\n    }\n    _bytesWritten += len;\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,4 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,4 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,4 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,4 @@\n @Override\n public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,4 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,4 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,4 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,4 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,4 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, text, offset, len);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic void writeRawValue(char[] text, int offset, int len) throws IOException {\n    char[] copy = new char[len];\n    System.arraycopy(text, offset, copy, 0, len);\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,6 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,6 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,6 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,6 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,6 @@\n @Override\n public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,6 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,6 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,6 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,6 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,6 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,6 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,6 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,6 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,6 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,6 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,6 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,6 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = new char[len];\n+    System.arraycopy(text, offset, copy, 0, len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(char[] text, int offset, int len) throws IOException {\n    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,5 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,5 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,5 @@\n @Override\n public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,5 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,5 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,5 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset+len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(char[] text, int offset, int len) throws IOException {\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n    writer.writeRaw(new String(text, offset, len));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,5 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,5 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,5 @@\n @Override\n public void writeRawValue(char[] text, int offset, int len) throws IOException {\n     _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,5 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,5 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,5 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    writer.writeRaw(new String(text, offset, len));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeRawValue(char[] text, int offset, int len) throws IOException {\n    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,5 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_STRING, text);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,5 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,5 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n-    }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,5 @@\n @Override\n public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,5 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n-        writeNull();\n-    } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,5 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,5 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,5 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n-        writeNull();\n-        return;\n-    }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,13 +1,5 @@\n @Override\n-public void writeTree(TreeNode node) throws IOException {\n-    if (node == null) {\n-        writeNull();\n-        return;\n-    }\n-    if (_objectCodec == null) {\n-        // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n-    } else {\n-        _objectCodec.writeTree(this, node);\n-    }\n+public void writeRawValue(char[] text, int offset, int len) throws IOException {\n+    char[] copy = Arrays.copyOfRange(text, offset, offset + len);\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(copy));\n }\n", "finish_reason": "stop", "valid": false, "num": 2}]