[{"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    } else {\n        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,13 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,13 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,13 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n     if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -8,6 +8,6 @@\n         // as with 'writeObject()', is codec optional?\n         _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _objectCodec.writeTree(this, (JsonNode) node); // Cast TreeNode to JsonNode here\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n    flush(); // add flush() to ensure data is written to the output stream\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,14 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,14 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,14 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n     }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -10,4 +10,5 @@\n     } else {\n         _objectCodec.writeTree(this, node);\n     }\n+    flush(); // add flush() to ensure data is written to the output stream\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        writeStartArray();\n        writeTreeInternal(node);\n        writeEndArray();\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n}\n\nprivate void writeTreeInternal(TreeNode node) throws IOException {\n    switch (node.asToken()) {\n        case START_OBJECT:\n            writeStartObject();\n            node.fields().forEachRemaining(entry -> {\n                try {\n                    writeFieldName(entry.getKey());\n                    writeTreeInternal(entry.getValue());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            });\n            writeEndObject();\n            break;\n        case START_ARRAY:\n            writeStartArray();\n            node.elements().forEachRemaining(this::writeTreeInternal);\n            writeEndArray();\n            break;\n        default:\n            _append(node.asToken(), node);\n            break;\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,15 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,15 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,15 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,15 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,15 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,15 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,15 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,15 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,15 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n     if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+        // as with 'writeObject()', is codec optional?\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -6,7 +6,9 @@\n     }\n     if (_objectCodec == null) {\n         // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        writeStartArray();\n+        writeTreeInternal(node);\n+        writeEndArray();\n     } else {\n         _objectCodec.writeTree(this, node);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    } else {\n        _objectCodec.writeTree(this, (JsonNode) node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, (JsonNode) node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, (JsonNode) node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,13 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, (JsonNode) node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, (JsonNode) node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,13 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode) node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,13 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n     if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _objectCodec.writeTree(this, (JsonNode) node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -8,6 +8,6 @@\n         // as with 'writeObject()', is codec optional?\n         _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _objectCodec.writeTree(this, (JsonNode) node);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,13 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,13 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,13 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n     if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+        // as with 'writeObject()', is codec optional?\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -6,7 +6,7 @@\n     }\n     if (_objectCodec == null) {\n         // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n         _objectCodec.writeTree(this, node);\n     }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n    flush();  // Fixed: flush the content to the output stream after writing the tree\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,14 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,14 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,14 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n     }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -10,4 +10,5 @@\n     } else {\n         _objectCodec.writeTree(this, node);\n     }\n+    flush();  // Fixed: flush the content to the output stream after writing the tree\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    } else {\n        ((ObjectCodec)_objectCodec).writeValue(this, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,13 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,13 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,13 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n     if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -8,6 +8,6 @@\n         // as with 'writeObject()', is codec optional?\n         _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        ((ObjectCodec)_objectCodec).writeValue(this, node);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,13 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,13 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,13 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n     if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        writeValue(((JsonNode) node).asToken());\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,13 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,13 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,13 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n     if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+        // as with 'writeObject()', is codec optional?\n+        writeValue(((JsonNode) node).asToken());\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -6,7 +6,7 @@\n     }\n     if (_objectCodec == null) {\n         // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        writeValue(((JsonNode) node).asToken());\n     } else {\n         _objectCodec.writeTree(this, node);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n    flush();\n    close();\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,15 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,15 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,15 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,15 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,15 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,15 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,15 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,15 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,15 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,15 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n     }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+    flush();\n+    close();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -10,4 +10,6 @@\n     } else {\n         _objectCodec.writeTree(this, node);\n     }\n+    flush();\n+    close();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    } else {\n        _objectCodec.writeTree(this, (JsonNode)node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, (JsonNode)node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, (JsonNode)node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode)node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,13 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode)node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode)node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode)node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode)node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode)node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode)node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode)node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, (JsonNode)node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, (JsonNode)node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode)node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,13 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode)node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, (JsonNode)node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,13 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n     if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _objectCodec.writeTree(this, (JsonNode)node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -8,6 +8,6 @@\n         // as with 'writeObject()', is codec optional?\n         _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _objectCodec.writeTree(this, node);\n+        _objectCodec.writeTree(this, (JsonNode)node);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n    flush(); // added line to flush the output after writing the tree\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,14 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,14 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,14 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n     }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+    flush(); // added line to flush the output after writing the tree\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -10,4 +10,5 @@\n     } else {\n         _objectCodec.writeTree(this, node);\n     }\n+    flush(); // added line to flush the output after writing the tree\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        writeObject(node);\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,13 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,13 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,13 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n     if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+        // as with 'writeObject()', is codec optional?\n+        writeObject(node);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -6,7 +6,7 @@\n     }\n     if (_objectCodec == null) {\n         // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        writeObject(node);\n     } else {\n         _objectCodec.writeTree(this, node);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n    flush();\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,14 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,14 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,14 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    } else {\n+        _objectCodec.writeTree(this, node);\n     }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    } else {\n-        _objectCodec.writeValue(this, value);\n-    }\n+    flush();\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -10,4 +10,5 @@\n     } else {\n         _objectCodec.writeTree(this, node);\n     }\n+    flush();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n        return;\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,14 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,14 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,14 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,14 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,14 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,14 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,14 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n         return;\n-    }\n-    if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -7,6 +7,7 @@\n     if (_objectCodec == null) {\n         // as with 'writeObject()', is codec optional?\n         _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        return;\n     } else {\n         _objectCodec.writeTree(this, node);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (node == null) {\n        writeNull();\n        return;\n    }\n    if (_objectCodec == null) {\n        // as with 'writeObject()', is codec optional?\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n    } else {\n        _objectCodec.writeTree(this, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(String text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeString1\n@@ -1,8 +1,13 @@\n @Override\n-public void writeString(SerializableString text) throws IOException {\n-    if (text == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n     } else {\n-        _append(JsonToken.VALUE_STRING, text);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(String text) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue3\n@@ -1,7 +1,13 @@\n @Override\n-public void writeRawValue(String text, int offset, int len) throws IOException {\n-    if (offset > 0 || len != text.length()) {\n-        text = text.substring(offset, offset + len);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n     }\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeRawValue4\n@@ -1,4 +1,13 @@\n @Override\n-public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(short i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber6\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(int i) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber7\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(long l) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber8\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(double d) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber9\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(float f) throws IOException {\n-    _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber10\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigDecimal dec) throws IOException {\n-    if (dec == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, dec);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber11\n@@ -1,8 +1,13 @@\n @Override\n-public void writeNumber(BigInteger v) throws IOException {\n-    if (v == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n     } else {\n-        _append(JsonToken.VALUE_NUMBER_INT, v);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNumber12\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNumber(String encodedValue) throws IOException {\n-        _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeBoolean\n@@ -1,4 +1,13 @@\n @Override\n-public void writeBoolean(boolean state) throws IOException {\n-    _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeNull\n@@ -1,4 +1,13 @@\n @Override\n-public void writeNull() throws IOException {\n-    _append(JsonToken.VALUE_NULL);\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n+        writeNull();\n+        return;\n+    }\n+    if (_objectCodec == null) {\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n+    } else {\n+        _objectCodec.writeTree(this, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,18 +1,13 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    if (value == null) {\n+public void writeTree(TreeNode node) throws IOException {\n+    if (node == null) {\n         writeNull();\n         return;\n     }\n-    Class<?> raw = value.getClass();\n-    if (raw == byte[].class || (value instanceof RawValue)) {\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        return;\n-    }\n     if (_objectCodec == null) {\n-                //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+        // as with 'writeObject()', is codec optional?\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n     } else {\n-        _objectCodec.writeValue(this, value);\n+        _objectCodec.writeTree(this, node);\n     }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -6,7 +6,7 @@\n     }\n     if (_objectCodec == null) {\n         // as with 'writeObject()', is codec optional?\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node.asToken());\n     } else {\n         _objectCodec.writeTree(this, node);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]