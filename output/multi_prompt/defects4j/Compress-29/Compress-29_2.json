[{"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    if (encoding == null) {\n        this.zipEncoding = ZipEncodingHelper.getPlatformDefaultEncoding();\n    } else {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,9 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    if (encoding == null) {\n+        this.zipEncoding = ZipEncodingHelper.getPlatformDefaultEncoding();\n+    } else {\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    if(encoding != null) {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    } else {\n        this.zipEncoding = null;\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,9 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    if(encoding != null) {\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    } else {\n+        this.zipEncoding = null;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    if (blockSize <= 0) {\n        this.blockSize = 512;\n    } else {\n        this.blockSize = blockSize;\n    }\n    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,9 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n-    this.blockSize = blockSize;\n+    if (blockSize <= 0) {\n+        this.blockSize = 512;\n+    } else {\n+        this.blockSize = blockSize;\n+    }\n     this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    if(encoding == null) {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(\"UTF8\"); // set default encoding if null\n    } else {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,9 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    if(encoding == null) {\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(\"UTF8\"); // set default encoding if null\n+    } else {\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) throws IOException {\n    this.in = in;\n    this.blockSize = blockSize;\n    if (encoding == null) {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(\"UTF8\");\n    } else {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    }\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 6}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    if(encoding != null) {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    }\n    else {\n        this.zipEncoding = ZipEncodingHelper.Utf8ZipEncoding;\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,10 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    if(encoding != null) {\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    }\n+    else {\n+        this.zipEncoding = ZipEncodingHelper.Utf8ZipEncoding;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    if (encoding == null || encoding.isEmpty()) {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(\"UTF8\");\n    } else {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,9 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    if (encoding == null || encoding.isEmpty()) {\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(\"UTF8\");\n+    } else {\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding != null ? encoding : \"UTF8\");\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,5 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding != null ? encoding : \"UTF8\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    if(encoding == null) {\n        this.zipEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;\n    } else {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,9 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    if(encoding == null) {\n+        this.zipEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;\n+    } else {\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    this.cpioEncoding = CpioEncodingHelper.getCpioEncoding(encoding);\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,5 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    this.cpioEncoding = CpioEncodingHelper.getCpioEncoding(encoding);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    if (encoding == null) {\n        this.zipEncoding = ZipEncodingHelper.getPlatformDefaultZipEncoding();\n    } else {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,9 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    if (encoding == null) {\n+        this.zipEncoding = ZipEncodingHelper.getPlatformDefaultZipEncoding();\n+    } else {\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    if(encoding != null) {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    } else {\n        this.zipEncoding = ZipEncodingHelper.getFallbackZipEncoding();\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,9 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    if(encoding != null) {\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    } else {\n+        this.zipEncoding = ZipEncodingHelper.getFallbackZipEncoding();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    if (encoding != null) {\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    } else {\n        this.zipEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,9 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    if (encoding != null) {\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    } else {\n+        this.zipEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    if(encoding != null){\n        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    } else {\n        this.zipEncoding = ZipEncodingHelper.getPlatformDefaultEncoding();\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,9 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    if(encoding != null){\n+        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    } else {\n+        this.zipEncoding = ZipEncodingHelper.getPlatformDefaultEncoding();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n    this.in = in;\n    this.blockSize = blockSize;\n    this.zipEncoding = CpioEncodingHelper.getZipEncoding(encoding);\n}", "diff": "--- org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n+++ org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java@CpioArchiveInputStream\n@@ -1,5 +1,5 @@\n public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n     this.in = in;\n     this.blockSize = blockSize;\n-    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n+    this.zipEncoding = CpioEncodingHelper.getZipEncoding(encoding);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]