[{"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        }\n        else {\n            // fixed else statement to handle tokens that are not '<'\n            tokens.pushBack(token);\n        }\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -11,8 +11,10 @@\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n             return _factory._fromClass(null, base, b);\n         }\n-        // can be comma that separates types, or closing '>'\n-        tokens.pushBack(token);\n+        else {\n+            // fixed else statement to handle tokens that are not '<'\n+            tokens.pushBack(token);\n+        }\n     }\n     return _factory._fromClass(null, base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _fromParamType(tokens, _factory._constructSimpleType(base, b));\n        }\n        // can be comma that separates types, or closing '>'\n        tokens.pushBack(token);\n    }\n    return _factory._constructSimpleType(base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -9,10 +9,10 @@\n         if (\"<\".equals(token)) {\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n-            return _factory._fromClass(null, base, b);\n+            return _fromParamType(tokens, _factory._constructSimpleType(base, b));\n         }\n         // can be comma that separates types, or closing '>'\n         tokens.pushBack(token);\n     }\n-    return _factory._fromClass(null, base, null);\n+    return _factory._constructSimpleType(base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(parameterTypes.toArray(new JavaType[0]), null);\n            return _factory._fromClass(null, base, b);\n        }\n        // can be comma that separates types, or closing '>'\n        tokens.pushBack(token);\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -8,7 +8,7 @@\n         String token = tokens.nextToken();\n         if (\"<\".equals(token)) {\n             List<JavaType> parameterTypes = parseTypes(tokens);\n-            TypeBindings b = TypeBindings.create(base, parameterTypes);\n+            TypeBindings b = TypeBindings.create(parameterTypes.toArray(new JavaType[0]), null);\n             return _factory._fromClass(null, base, b);\n         }\n         // can be comma that separates types, or closing '>'\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        } else {\n            // If the next token is not '<', it is either the comma separator or the closing '>'\n            tokens.pushBack(token);\n        }\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -10,9 +10,10 @@\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n             return _factory._fromClass(null, base, b);\n+        } else {\n+            // If the next token is not '<', it is either the comma separator or the closing '>'\n+            tokens.pushBack(token);\n         }\n-        // can be comma that separates types, or closing '>'\n-        tokens.pushBack(token);\n     }\n     return _factory._fromClass(null, base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        } else {\n            // fixed bug: should push back the token if it's not a '<'\n            tokens.pushBack(token);\n        }\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -10,9 +10,10 @@\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n             return _factory._fromClass(null, base, b);\n+        } else {\n+            // fixed bug: should push back the token if it's not a '<'\n+            tokens.pushBack(token);\n         }\n-        // can be comma that separates types, or closing '>'\n-        tokens.pushBack(token);\n     }\n     return _factory._fromClass(null, base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        } else {\n            // In case there is no '<' token\n            tokens.pushBack(token);\n        }\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -10,9 +10,10 @@\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n             return _factory._fromClass(null, base, b);\n+        } else {\n+            // In case there is no '<' token\n+            tokens.pushBack(token);\n         }\n-        // can be comma that separates types, or closing '>'\n-        tokens.pushBack(token);\n     }\n     return _factory._fromClass(null, base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromParamType(base, b);\n        }\n        // can be comma that separates types, or closing '>'\n        tokens.pushBack(token);\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -9,7 +9,7 @@\n         if (\"<\".equals(token)) {\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n-            return _factory._fromClass(null, base, b);\n+            return _factory._fromParamType(base, b);\n         }\n         // can be comma that separates types, or closing '>'\n         tokens.pushBack(token);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        } else {\n            // Check if token is closing '>' symbol\n            if (\">\".equals(token)) {\n                return _factory._fromClass(null, base, null);\n            }\n            // Invalid token\n            throw _problem(tokens, \"Unexpected token '\" + token + \"'\");\n        }\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -10,9 +10,14 @@\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n             return _factory._fromClass(null, base, b);\n+        } else {\n+            // Check if token is closing '>' symbol\n+            if (\">\".equals(token)) {\n+                return _factory._fromClass(null, base, null);\n+            }\n+            // Invalid token\n+            throw _problem(tokens, \"Unexpected token '\" + token + \"'\");\n         }\n-        // can be comma that separates types, or closing '>'\n-        tokens.pushBack(token);\n     }\n     return _factory._fromClass(null, base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        } else {\n            // fixed issue -> closing '>' not handled properly\n            tokens.pushBack(token);\n        }\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -10,9 +10,10 @@\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n             return _factory._fromClass(null, base, b);\n+        } else {\n+            // fixed issue -> closing '>' not handled properly\n+            tokens.pushBack(token);\n         }\n-        // can be comma that separates types, or closing '>'\n-        tokens.pushBack(token);\n     }\n     return _factory._fromClass(null, base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _fromParameterizedClass(base, b);\n        }\n        // can be comma that separates types, or closing '>'\n        tokens.pushBack(token);\n    }\n    return _fromClass(base, null);\n}\n\nprivate JavaType _fromParameterizedClass(Class<?> base, TypeBindings bindings) {\n    return _factory._fromClass(null, base, bindings);\n}\n\nprivate JavaType _fromClass(Class<?> base, TypeBindings bindings) {\n    if (bindings == null) {\n        bindings = TypeBindings.emptyBindings();\n    }\n    return _factory._fromClass(null, base, bindings);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -9,10 +9,10 @@\n         if (\"<\".equals(token)) {\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n-            return _factory._fromClass(null, base, b);\n+            return _fromParameterizedClass(base, b);\n         }\n         // can be comma that separates types, or closing '>'\n         tokens.pushBack(token);\n     }\n-    return _factory._fromClass(null, base, null);\n+    return _fromClass(base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        } else {\n            // fixed: pushback token if it's not a \"<\"\n            tokens.pushBack(token);\n        }\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -10,9 +10,10 @@\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n             return _factory._fromClass(null, base, b);\n+        } else {\n+            // fixed: pushback token if it's not a \"<\"\n+            tokens.pushBack(token);\n         }\n-        // can be comma that separates types, or closing '>'\n-        tokens.pushBack(token);\n     }\n     return _factory._fromClass(null, base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        } else {\n            // added else block to fix bug where the token is not properly pushed back\n            tokens.pushBack(token);\n        }\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -10,9 +10,10 @@\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n             return _factory._fromClass(null, base, b);\n+        } else {\n+            // added else block to fix bug where the token is not properly pushed back\n+            tokens.pushBack(token);\n         }\n-        // can be comma that separates types, or closing '>'\n-        tokens.pushBack(token);\n     }\n     return _factory._fromClass(null, base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        } else {\n            // If there's no opening bracket, push back the read token\n            tokens.pushBack(token);\n        }\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -10,9 +10,10 @@\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n             return _factory._fromClass(null, base, b);\n+        } else {\n+            // If there's no opening bracket, push back the read token\n+            tokens.pushBack(token);\n         }\n-        // can be comma that separates types, or closing '>'\n-        tokens.pushBack(token);\n     }\n     return _factory._fromClass(null, base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            // Fix: use _fromClassAndBindings instead of _fromClass to correctly handle generic types\n            return  _factory._fromClassAndBindings(base, b);\n        }\n        // can be comma that separates types, or closing '>'\n        tokens.pushBack(token);\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -9,7 +9,8 @@\n         if (\"<\".equals(token)) {\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n-            return _factory._fromClass(null, base, b);\n+            // Fix: use _fromClassAndBindings instead of _fromClass to correctly handle generic types\n+            return  _factory._fromClassAndBindings(base, b);\n         }\n         // can be comma that separates types, or closing '>'\n         tokens.pushBack(token);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            token = tokens.nextToken(); // consume the next token\n            if (!\">\".equals(token)) {\n                throw _problem(tokens, \"Unexpected token '\" + token + \"', expected '>'\");\n            }\n            return _factory._fromClass(null, base, b);\n        }\n        // can be comma that separates types, or closing '>'\n        tokens.pushBack(token);\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -9,6 +9,10 @@\n         if (\"<\".equals(token)) {\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n+            token = tokens.nextToken(); // consume the next token\n+            if (!\">\".equals(token)) {\n+                throw _problem(tokens, \"Unexpected token '\" + token + \"', expected '>'\");\n+            }\n             return _factory._fromClass(null, base, b);\n         }\n         // can be comma that separates types, or closing '>'\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            if (tokens.hasMoreTokens() && !\">\".equals(tokens.nextToken())) {\n                throw _problem(tokens, \"Unexpected token\");\n            }\n            return _factory._fromClass(null, base, b);\n        }\n        // can be comma that separates types, or closing '>'\n        tokens.pushBack(token);\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -9,6 +9,9 @@\n         if (\"<\".equals(token)) {\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n+            if (tokens.hasMoreTokens() && !\">\".equals(tokens.nextToken())) {\n+                throw _problem(tokens, \"Unexpected token\");\n+            }\n             return _factory._fromClass(null, base, b);\n         }\n         // can be comma that separates types, or closing '>'\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            if (tokens.hasMoreTokens() && !\">\".equals(tokens.nextToken())) {\n                throw _problem(tokens, \"Unexpected token, expected '>'.\");\n            }\n            return _factory._fromClass(null, base, b);\n        }\n        // can be comma that separates types, or closing '>'\n        tokens.pushBack(token);\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -9,6 +9,9 @@\n         if (\"<\".equals(token)) {\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n+            if (tokens.hasMoreTokens() && !\">\".equals(tokens.nextToken())) {\n+                throw _problem(tokens, \"Unexpected token, expected '>'.\");\n+            }\n             return _factory._fromClass(null, base, b);\n         }\n         // can be comma that separates types, or closing '>'\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(parameterTypes, null);\n            return _factory._fromClass(null, base, b);\n        }\n        // can be comma that separates types, or closing '>'\n        tokens.pushBack(token);\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -8,7 +8,7 @@\n         String token = tokens.nextToken();\n         if (\"<\".equals(token)) {\n             List<JavaType> parameterTypes = parseTypes(tokens);\n-            TypeBindings b = TypeBindings.create(base, parameterTypes);\n+            TypeBindings b = TypeBindings.create(parameterTypes, null);\n             return _factory._fromClass(null, base, b);\n         }\n         // can be comma that separates types, or closing '>'\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            if(!tokens.hasMoreTokens() || !\">\".equals(tokens.nextToken())) {\n                throw _problem(tokens, \"Unexpected token, expected \\\">\\\"\");\n            }\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        }\n        // can be comma that separates types, or closing '>'\n        tokens.pushBack(token);\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -8,6 +8,9 @@\n         String token = tokens.nextToken();\n         if (\"<\".equals(token)) {\n             List<JavaType> parameterTypes = parseTypes(tokens);\n+            if(!tokens.hasMoreTokens() || !\">\".equals(tokens.nextToken())) {\n+                throw _problem(tokens, \"Unexpected token, expected \\\">\\\"\");\n+            }\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n             return _factory._fromClass(null, base, b);\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        } else {\n            // Fix: add condition to check for '>' and throw an exception if it is missing\n            if(!\">\".equals(token)) {\n                throw _problem(tokens, \"Unexpected token \" + token + \", expected '>'\");\n            }\n            tokens.pushBack(token);\n            return _factory._fromClass(null, base, null);\n        }\n    }\n    return _factory._fromClass(null, base, null);\n}", "diff": "--- com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n+++ com/fasterxml/jackson/databind/type/TypeParser.java@parseType\n@@ -10,9 +10,14 @@\n             List<JavaType> parameterTypes = parseTypes(tokens);\n             TypeBindings b = TypeBindings.create(base, parameterTypes);\n             return _factory._fromClass(null, base, b);\n+        } else {\n+            // Fix: add condition to check for '>' and throw an exception if it is missing\n+            if(!\">\".equals(token)) {\n+                throw _problem(tokens, \"Unexpected token \" + token + \", expected '>'\");\n+            }\n+            tokens.pushBack(token);\n+            return _factory._fromClass(null, base, null);\n         }\n-        // can be comma that separates types, or closing '>'\n-        tokens.pushBack(token);\n     }\n     return _factory._fromClass(null, base, null);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]