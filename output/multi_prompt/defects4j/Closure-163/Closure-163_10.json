[{"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return (t.getScopeDepth() == 0 && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName())) ||\n           (t.getScopeDepth() == 1 && n.isFunction() && NodeUtil.isFunctionExpression(n));\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,6 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return (t.getScopeDepth() == 0 && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName())) ||\n+           (t.getScopeDepth() == 1 && n.isFunction() && NodeUtil.isFunctionExpression(n));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return t.getScopeRoot().isScript() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return t.getScopeRoot().isScript() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return (t.getScope().isGlobal()) && (NodeUtil.isFunctionDeclaration(n) || (n.isFunction() && n.getParent().isName()));\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return (t.getScope().isGlobal()) && (NodeUtil.isFunctionDeclaration(n) || (n.isFunction() && n.getParent().isName()));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return (t.getScopeDepth() == 1 || t.getScopeDepth() == 2 && t.isGlobalVar(n)) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return (t.getScopeDepth() == 1 || t.getScopeDepth() == 2 && t.isGlobalVar(n)) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return t.getScope().isGlobal() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return t.getScope().isGlobal() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return (t.getScope().isGlobal() && NodeUtil.isFunctionDeclaration(n)) || (n.isFunction() && n.getParent().isName());\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return (t.getScope().isGlobal() && NodeUtil.isFunctionDeclaration(n)) || (n.isFunction() && n.getParent().isName());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return t.getScope() == t.getTypedScope().getGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isAstRoot());\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return t.getScope() == t.getTypedScope().getGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isAstRoot());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return (t.getCurrentNode().isFunctionBlock() && t.getEnclosingScopeDepth() == 1 && (NodeUtil.isFunctionDeclaration(n) || (n.isFunction() && n.getParent().isName()))) || (t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || (n.isFunction() && n.getParent().isName())));\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return (t.getCurrentNode().isFunctionBlock() && t.getEnclosingScopeDepth() == 1 && (NodeUtil.isFunctionDeclaration(n) || (n.isFunction() && n.getParent().isName()))) || (t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || (n.isFunction() && n.getParent().isName())));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return (t.getScope().isGlobal() || t.getClosestHoistScope().isGlobal()) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return (t.getScope().isGlobal() || t.getClosestHoistScope().isGlobal()) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return (t.getScope().isGlobal() && NodeUtil.isFunctionDeclaration(n)) || \n            (n.isFunction() && NodeUtil.getEnclosingFunction(n.getParent()).isGlobal());\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,6 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return (t.getScope().isGlobal() && NodeUtil.isFunctionDeclaration(n)) || \n+            (n.isFunction() && NodeUtil.getEnclosingFunction(n.getParent()).isGlobal());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return (t.getScope().isGlobal() && t.inGlobalScope()) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return (t.getScope().isGlobal() && t.inGlobalScope()) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return (t.getScope().isGlobal()) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return (t.getScope().isGlobal()) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return (t.getScope().isGlobal() || t.getScope().isModuleScope()) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return (t.getScope().isGlobal() || t.getScope().isModuleScope()) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n    // Make sure we're either in the global scope, or the function\n    // we're looking at is the root of the current local scope.\n    return (t.getScope().isGlobal()) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && NodeUtil.getEnclosingFunction(n).isGlobal());\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@isGlobalFunctionDeclaration\n@@ -1,5 +1,5 @@\n private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n) {\n     // Make sure we're either in the global scope, or the function\n     // we're looking at is the root of the current local scope.\n-    return t.inGlobalScope() && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && n.getParent().isName());\n+    return (t.getScope().isGlobal()) && (NodeUtil.isFunctionDeclaration(n) || n.isFunction() && NodeUtil.getEnclosingFunction(n).isGlobal());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]