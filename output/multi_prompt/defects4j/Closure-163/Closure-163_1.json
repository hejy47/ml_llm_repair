[{"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\n        \"Global variables must be declared with 'var' or as function declarations.\");\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,6 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\n+        \"Global variables must be declared with 'var' or as function declarations.\");\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void globalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n    this.nameNode = nameNode;\n    this.parent = parent;\n    this.gramps = gramps;\n    this.module = module;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\n        \"Parent is not a variable or function declaration: \", parent);\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,6 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\n+        \"Parent is not a variable or function declaration: \", parent);\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || parent.isFunction() || parent.isClass());\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,5 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || parent.isFunction() || parent.isClass());\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent), \"Parent must be a variable or function declaration\");\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,5 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent), \"Parent must be a variable or function declaration\");\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\"Parent must be variable or function declaration.\");\n    this.nameNode = nameNode;\n    this.parent = parent;\n    this.gramps = gramps;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,7 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\"Parent must be variable or function declaration.\");\n     this.nameNode = nameNode;\n+    this.parent = parent;\n+    this.gramps = gramps;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\n        \"parent must be a variable or a function declaration\");\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,6 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\n+        \"parent must be a variable or a function declaration\");\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n    Preconditions.checkNotNull(nameNode);\n    this.nameNode = nameNode;\n    this.module = Preconditions.checkNotNull(module);\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,6 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n     Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkNotNull(nameNode);\n     this.nameNode = nameNode;\n-    this.module = module;\n+    this.module = Preconditions.checkNotNull(module);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || parent.isFunction() || NodeUtil.isFunctionDeclaration(parent));\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,5 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || parent.isFunction() || NodeUtil.isFunctionDeclaration(parent));\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isFunction() || parent.isVar() || parent.isClass());\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,5 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isFunction() || parent.isVar() || parent.isClass());\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent), \"Parent node must be a variable or function declaration\");\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,5 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent), \"Parent node must be a variable or function declaration\");\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\n    \"Parent node must be a var or function declaration\");\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,6 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\n+    \"Parent node must be a var or function declaration\");\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\n        \"Parent node must be a var or function declaration.\");\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,6 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent),\n+        \"Parent node must be a var or function declaration.\");\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent), \"Parent must be a variable or function declaration node\");\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,5 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent), \"Parent must be a variable or function declaration node\");\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || parent.isFunction() || parent.isClass());\n\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,6 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || parent.isFunction() || parent.isClass());\n+\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent), \"Parent must be a var or function declaration.\");\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,5 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent), \"Parent must be a var or function declaration.\");\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n    Preconditions.checkState(parent.isName() || parent.isFunction());\n    this.nameNode = nameNode;\n    this.module = module;\n}", "diff": "--- com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n+++ com/google/javascript/jscomp/AnalyzePrototypeProperties.java@GlobalFunction\n@@ -1,5 +1,5 @@\n GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {\n-    Preconditions.checkState(parent.isVar() || NodeUtil.isFunctionDeclaration(parent));\n+    Preconditions.checkState(parent.isName() || parent.isFunction());\n     this.nameNode = nameNode;\n     this.module = module;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]