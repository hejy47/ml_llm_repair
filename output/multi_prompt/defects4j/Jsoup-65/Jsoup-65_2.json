[{"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if (!tb.inTableScope(\"tr\")) { // check if in tr scope\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InCell);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else\n                return anythingElse(t, tb);\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else\n                return anythingElse(t, tb);\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,9 +8,13 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n+                if (!tb.inTableScope(\"tr\")) { // check if in tr scope\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n             } else\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if (!tb.inTableScope(\"tr\")) { // check if in tr scope\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if (!tb.inTableScope(\"tr\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.insert(new Token.StartTag(\"tr\"));\n                    return tb.process(startTag);\n                }\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else\n                return anythingElse(t, tb);\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else\n                return anythingElse(t, tb);\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,9 +8,14 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.insert(new Token.StartTag(\"tr\"));\n+                    return tb.process(startTag);\n+                }\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n             } else\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,48 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.insert(new Token.StartTag(\"tr\"));\n+                    return tb.process(startTag);\n+                }\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                boolean processed = anythingElse(t, tb);\n                if(!processed) {\n                    tb.processStartTag(\"tr\");\n                    return tb.process(startTag);\n                }\n                return processed;\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else\n                return anythingElse(t, tb);\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else\n                return anythingElse(t, tb);\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,9 +8,12 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n+                boolean processed = anythingElse(t, tb);\n+                if(!processed) {\n+                    tb.processStartTag(\"tr\");\n+                    return tb.process(startTag);\n+                }\n+                return processed;\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n             } else\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,46 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                boolean processed = anythingElse(t, tb);\n+                if(!processed) {\n+                    tb.processStartTag(\"tr\");\n+                    return tb.process(startTag);\n+                }\n+                return processed;\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if (!tb.inTableScope(\"tr\")) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InCell);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (name.equals(\"tr\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.pop();\n                tb.transition(InTableBody);\n            } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.pop();\n                tb.transition(InTable);\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,33 +8,46 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         case EndTag:\n             Token.EndTag endTag = t.asEndTag();\n             name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (name.equals(\"tr\")) {\n                 if (!tb.inTableScope(name)) {\n                     tb.error(this);\n                     return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n                 }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTableBody);\n+            } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTable);\n             } else if (name.equals(\"table\")) {\n                 return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n                 tb.error(this);\n                 return false;\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         default:\n             return anythingElse(t, tb);\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,56 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else {\n+                return anythingElse(t, tb);\n+            }\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTableBody);\n+            } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTable);\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n                 tb.error(this);\n                 return false;\n+            } else {\n+                return anythingElse(t, tb);\n             }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                // create a fake tr and process the start tag again\n                tb.error(this);\n                tb.processStartTag(\"tr\");\n                return tb.process(startTag);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,13 +8,15 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                // create a fake tr and process the start tag again\n                 tb.error(this);\n                 tb.processStartTag(\"tr\");\n                 return tb.process(startTag);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         case EndTag:\n             Token.EndTag endTag = t.asEndTag();\n@@ -33,8 +35,9 @@\n             } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         default:\n             return anythingElse(t, tb);\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,46 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                // create a fake tr and process the start tag again\n+                tb.error(this);\n+                tb.processStartTag(\"tr\");\n+                return tb.process(startTag);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else {\n+                return anythingElse(t, tb);\n+            }\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n+            } else {\n+                return anythingElse(t, tb);\n             }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if (!tb.inTableBodyContext()) {\n                    tb.error(this);\n                    tb.transition(InTable);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.insert(startTag);\n                    tb.transition(InCell);\n                }\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,13 +8,20 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n+                if (!tb.inTableBodyContext()) {\n+                    tb.error(this);\n+                    tb.transition(InTable);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.insert(startTag);\n+                    tb.transition(InCell);\n+                }\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         case EndTag:\n             Token.EndTag endTag = t.asEndTag();\n@@ -33,8 +40,9 @@\n             } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         default:\n             return anythingElse(t, tb);\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,51 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if (!tb.inTableBodyContext()) {\n+                    tb.error(this);\n+                    tb.transition(InTable);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.insert(startTag);\n+                    tb.transition(InCell);\n+                }\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else {\n+                return anythingElse(t, tb);\n+            }\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n+            } else {\n+                return anythingElse(t, tb);\n             }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if (!tb.inTable()) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.processStartTag(\"tr\");\n                return tb.process(startTag);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,13 +8,17 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n+                if (!tb.inTable()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n                 tb.processStartTag(\"tr\");\n                 return tb.process(startTag);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         case EndTag:\n             Token.EndTag endTag = t.asEndTag();\n@@ -33,8 +37,9 @@\n             } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         default:\n             return anythingElse(t, tb);\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,48 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if (!tb.inTable()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.processStartTag(\"tr\");\n+                return tb.process(startTag);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else {\n+                return anythingElse(t, tb);\n+            }\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n+            } else {\n+                return anythingElse(t, tb);\n             }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                tb.error(this);\n                tb.processStartTag(\"tr\");\n                return process(startTag, tb); // fixed recursive call to \"process\"\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else\n                return anythingElse(t, tb);\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else\n                return anythingElse(t, tb);\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,5 +1,5 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n+    switch (t.type) {\n         case StartTag:\n             Token.StartTag startTag = t.asStartTag();\n             String name = startTag.normalName();\n@@ -10,7 +10,7 @@\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n                 tb.error(this);\n                 tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n+                return process(startTag, tb); // fixed recursive call to \"process\"\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n             } else\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,43 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch (t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                tb.error(this);\n+                tb.processStartTag(\"tr\");\n+                return process(startTag, tb); // fixed recursive call to \"process\"\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if(!tb.inTable()) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InCell);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else\n                return anythingElse(t, tb);\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else\n                return anythingElse(t, tb);\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,9 +8,13 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n+                if(!tb.inTable()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n             } else\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if(!tb.inTable()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if (!tb.inTable()) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.processStartTag(\"tr\");\n                return tb.process(startTag);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableBody()) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.pop();\n                tb.transition(InTable);\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,33 +8,37 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n+                if (!tb.inTable()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n                 tb.processStartTag(\"tr\");\n                 return tb.process(startTag);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         case EndTag:\n             Token.EndTag endTag = t.asEndTag();\n             name = endTag.normalName();\n             if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n+                if (!tb.inTableBody()) {\n                     tb.error(this);\n                     return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n                 }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTable);\n             } else if (name.equals(\"table\")) {\n                 return exitTableBody(t, tb);\n             } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         default:\n             return anythingElse(t, tb);\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if (!tb.inTable()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.processStartTag(\"tr\");\n+                return tb.process(startTag);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else {\n+                return anythingElse(t, tb);\n+            }\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableBody()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTable);\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n+            } else {\n+                return anythingElse(t, tb);\n             }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if (!tb.inTableScope(\"tr\")) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.processStartTag(\"tr\");\n                return tb.process(startTag);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else\n                return anythingElse(t, tb);\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else\n                return anythingElse(t, tb);\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,7 +8,10 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n                 tb.processStartTag(\"tr\");\n                 return tb.process(startTag);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,46 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.processStartTag(\"tr\");\n+                return tb.process(startTag);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if (!tb.inTable()) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.processStartTag(\"tr\");\n                return tb.process(startTag);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else\n                return anythingElse(t, tb);\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableBody()) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.pop();\n                tb.transition(InTable);\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else\n                return anythingElse(t, tb);\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,7 +8,10 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n+                if (!tb.inTable()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n                 tb.processStartTag(\"tr\");\n                 return tb.process(startTag);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n@@ -20,14 +23,13 @@\n             Token.EndTag endTag = t.asEndTag();\n             name = endTag.normalName();\n             if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n+                if (!tb.inTableBody()) {\n                     tb.error(this);\n                     return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n                 }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTable);\n             } else if (name.equals(\"table\")) {\n                 return exitTableBody(t, tb);\n             } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,45 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if (!tb.inTable()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.processStartTag(\"tr\");\n+                return tb.process(startTag);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableBody()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTable);\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if(!tb.inTableBody()) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InCell);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return tb.process(startTag, InTable);\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTable(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,13 +8,18 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n+                if(!tb.inTableBody()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n+                return tb.process(startTag, InTable);\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         case EndTag:\n             Token.EndTag endTag = t.asEndTag();\n@@ -29,12 +34,13 @@\n                     tb.transition(InTable);\n                 }\n             } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n+                return exitTable(t, tb);\n             } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         default:\n             return anythingElse(t, tb);\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,49 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if(!tb.inTableBody()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return tb.process(startTag, InTable);\n+            } else {\n+                return anythingElse(t, tb);\n+            }\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTable(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n+            } else {\n+                return anythingElse(t, tb);\n             }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                // Fix: add missing tbody\n                tb.processStartTag(\"tbody\");\n                tb.processStartTag(\"tr\");\n                return tb.process(startTag);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else\n                return anythingElse(t, tb);\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else\n                return anythingElse(t, tb);\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,7 +8,8 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n+                // Fix: add missing tbody\n+                tb.processStartTag(\"tbody\");\n                 tb.processStartTag(\"tr\");\n                 return tb.process(startTag);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,44 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                // Fix: add missing tbody\n+                tb.processStartTag(\"tbody\");\n+                tb.processStartTag(\"tr\");\n+                return tb.process(startTag);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if (!tb.inTableScope(\"tr\")) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.insert(new Token.StartTag(\"tr\"));\n                return tb.process(startTag);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.pop();\n                tb.transition(InTable);\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,13 +8,18 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(new Token.StartTag(\"tr\"));\n                 return tb.process(startTag);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         case EndTag:\n             Token.EndTag endTag = t.asEndTag();\n@@ -23,18 +28,18 @@\n                 if (!tb.inTableScope(name)) {\n                     tb.error(this);\n                     return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n                 }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTable);\n             } else if (name.equals(\"table\")) {\n                 return exitTableBody(t, tb);\n             } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         default:\n             return anythingElse(t, tb);\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,48 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(new Token.StartTag(\"tr\"));\n+                return tb.process(startTag);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else {\n+                return anythingElse(t, tb);\n+            }\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTable);\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n+            } else {\n+                return anythingElse(t, tb);\n             }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if (!tb.inTableScope(\"tr\")) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InCell);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else\n                return anythingElse(t, tb);\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (StringUtil.in(name, \"table\", \"body\", \"caption\", \"col\", \"colgroup\", \"html\")) {\n                tb.error(this);\n                return false;\n            } else if (StringUtil.in(name, \"td\", \"th\")) {\n                if (!tb.inTableScope(\"td\") && !tb.inTableScope(\"th\")) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.popStackToClose(name);\n                tb.resetInsertionMode();\n            } else if (StringUtil.in(name, \"tr\")) {\n                if (!tb.inTableScope(\"tr\")) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.pop();\n                tb.transition(InTableBody);\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,9 +8,13 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n             } else\n@@ -28,13 +32,28 @@\n                     tb.pop();\n                     tb.transition(InTable);\n                 }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+            } else if (StringUtil.in(name, \"table\", \"body\", \"caption\", \"col\", \"colgroup\", \"html\")) {\n                 tb.error(this);\n                 return false;\n-            } else\n+            } else if (StringUtil.in(name, \"td\", \"th\")) {\n+                if (!tb.inTableScope(\"td\") && !tb.inTableScope(\"th\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.popStackToClose(name);\n+                tb.resetInsertionMode();\n+            } else if (StringUtil.in(name, \"tr\")) {\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTableBody);\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         default:\n             return anythingElse(t, tb);\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,62 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else\n+                return anythingElse(t, tb);\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (StringUtil.in(name, \"table\", \"body\", \"caption\", \"col\", \"colgroup\", \"html\")) {\n                 tb.error(this);\n                 return false;\n+            } else if (StringUtil.in(name, \"td\", \"th\")) {\n+                if (!tb.inTableScope(\"td\") && !tb.inTableScope(\"th\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.popStackToClose(name);\n+                tb.resetInsertionMode();\n+            } else if (StringUtil.in(name, \"tr\")) {\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTableBody);\n+            } else {\n+                return anythingElse(t, tb);\n             }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(HtmlTreeBuilderState.InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                tb.error(this);\n                tb.processStartTag(\"tr\");\n                return tb.process(startTag);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return HtmlTreeBuilderState.HandleMissingTr.process(t, tb);\n            } else {\n                return HtmlTreeBuilderState.InBody.process(t, tb);\n            }\n        break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(HtmlTreeBuilderState.InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return HtmlTreeBuilderState.HandleMissingTr.process(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return HtmlTreeBuilderState.InBody.process(t, tb);\n            }\n        break;\n        default:\n            return HtmlTreeBuilderState.InBody.process(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,21 +1,22 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n+    switch (t.type) {\n         case StartTag:\n             Token.StartTag startTag = t.asStartTag();\n             String name = startTag.normalName();\n             if (name.equals(\"tr\")) {\n                 tb.clearStackToTableBodyContext();\n                 tb.insert(startTag);\n-                tb.transition(InRow);\n+                tb.transition(HtmlTreeBuilderState.InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n                 tb.error(this);\n                 tb.processStartTag(\"tr\");\n                 return tb.process(startTag);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n+                return HtmlTreeBuilderState.HandleMissingTr.process(t, tb);\n+            } else {\n+                return HtmlTreeBuilderState.InBody.process(t, tb);\n+            }\n+        break;\n         case EndTag:\n             Token.EndTag endTag = t.asEndTag();\n             name = endTag.normalName();\n@@ -26,18 +27,19 @@\n                 } else {\n                     tb.clearStackToTableBodyContext();\n                     tb.pop();\n-                    tb.transition(InTable);\n+                    tb.transition(HtmlTreeBuilderState.InTable);\n                 }\n             } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n+                return HtmlTreeBuilderState.HandleMissingTr.process(t, tb);\n             } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n+            } else {\n+                return HtmlTreeBuilderState.InBody.process(t, tb);\n+            }\n+        break;\n         default:\n-            return anythingElse(t, tb);\n+            return HtmlTreeBuilderState.InBody.process(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,45 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch (t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(HtmlTreeBuilderState.InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                tb.error(this);\n+                tb.processStartTag(\"tr\");\n+                return tb.process(startTag);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return HtmlTreeBuilderState.HandleMissingTr.process(t, tb);\n+            } else {\n+                return HtmlTreeBuilderState.InBody.process(t, tb);\n+            }\n+        break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(HtmlTreeBuilderState.InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return HtmlTreeBuilderState.HandleMissingTr.process(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n+            } else {\n+                return HtmlTreeBuilderState.InBody.process(t, tb);\n             }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n+        break;\n+        default:\n+            return HtmlTreeBuilderState.InBody.process(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if (!tb.inTableScope(\"tr\")) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InCell);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.pop();\n                tb.transition(InTable);\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,13 +8,18 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         case EndTag:\n             Token.EndTag endTag = t.asEndTag();\n@@ -23,18 +28,18 @@\n                 if (!tb.inTableScope(name)) {\n                     tb.error(this);\n                     return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n                 }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTable);\n             } else if (name.equals(\"table\")) {\n                 return exitTableBody(t, tb);\n             } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         default:\n             return anythingElse(t, tb);\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,48 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if (!tb.inTableScope(\"tr\")) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else {\n+                return anythingElse(t, tb);\n+            }\n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.pop();\n+                tb.transition(InTable);\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n+            } else {\n+                return anythingElse(t, tb);\n             }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                if(!tb.inTableBody()) {\n                    tb.error(this);\n                    return false;\n                }\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InCell);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else {\n                return anythingElse(t, tb);\n            } \n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -8,13 +8,18 @@\n                 tb.insert(startTag);\n                 tb.transition(InRow);\n             } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n+                if(!tb.inTableBody()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n             } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                 return exitTableBody(t, tb);\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            } \n             break;\n         case EndTag:\n             Token.EndTag endTag = t.asEndTag();\n@@ -33,8 +38,9 @@\n             } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n-            } else\n+            } else {\n                 return anythingElse(t, tb);\n+            }\n             break;\n         default:\n             return anythingElse(t, tb);\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -1,47 +1,49 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    if (t.isStartTag()) {\n-        Token.StartTag startTag = t.asStartTag();\n-        String name = startTag.normalName();\n-        if (StringUtil.in(name, \"th\", \"td\")) {\n-            tb.clearStackToTableRowContext();\n-            tb.insert(startTag);\n-            tb.transition(InCell);\n-            tb.insertMarkerToFormattingElements();\n-        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n-            return handleMissingTr(t, tb);\n-        } else {\n-            return anythingElse(t, tb);\n-        }\n-    } else if (t.isEndTag()) {\n-        Token.EndTag endTag = t.asEndTag();\n-        String name = endTag.normalName();\n-        if (name.equals(\"tr\")) {\n-            if (!tb.inTableScope(name)) {\n-                // frag\n+    switch(t.type) {\n+        case StartTag:\n+            Token.StartTag startTag = t.asStartTag();\n+            String name = startTag.normalName();\n+            if (name.equals(\"tr\")) {\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InRow);\n+            } else if (StringUtil.in(name, \"th\", \"td\")) {\n+                if(!tb.inTableBody()) {\n+                    tb.error(this);\n+                    return false;\n+                }\n+                tb.clearStackToTableBodyContext();\n+                tb.insert(startTag);\n+                tb.transition(InCell);\n+            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n+                return exitTableBody(t, tb);\n+            } else {\n+                return anythingElse(t, tb);\n+            } \n+            break;\n+        case EndTag:\n+            Token.EndTag endTag = t.asEndTag();\n+            name = endTag.normalName();\n+            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+                if (!tb.inTableScope(name)) {\n+                    tb.error(this);\n+                    return false;\n+                } else {\n+                    tb.clearStackToTableBodyContext();\n+                    tb.pop();\n+                    tb.transition(InTable);\n+                }\n+            } else if (name.equals(\"table\")) {\n+                return exitTableBody(t, tb);\n+            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                 tb.error(this);\n                 return false;\n+            } else {\n+                return anythingElse(t, tb);\n             }\n-            tb.clearStackToTableRowContext();\n-            // tr\n-            tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n-        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-            if (!tb.inTableScope(name)) {\n-                tb.error(this);\n-                return false;\n-            }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n-            tb.error(this);\n-            return false;\n-        } else {\n+            break;\n+        default:\n             return anythingElse(t, tb);\n-        }\n-    } else {\n-        return anythingElse(t, tb);\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]