[{"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(HtmlTreeBuilderState.InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(HtmlTreeBuilderState.InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(\"tr\");\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(HtmlTreeBuilderState.InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(HtmlTreeBuilderState.InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(\"tr\");\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -5,7 +5,7 @@\n         if (StringUtil.in(name, \"th\", \"td\")) {\n             tb.clearStackToTableRowContext();\n             tb.insert(startTag);\n-            tb.transition(InCell);\n+            tb.transition(HtmlTreeBuilderState.InCell);\n             tb.insertMarkerToFormattingElements();\n         } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n             return handleMissingTr(t, tb);\n@@ -24,7 +24,7 @@\n             tb.clearStackToTableRowContext();\n             // tr\n             tb.pop();\n-            tb.transition(InTableBody);\n+            tb.transition(HtmlTreeBuilderState.InTableBody);\n         } else if (name.equals(\"table\")) {\n             return handleMissingTr(t, tb);\n         } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(name);\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(name);\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -32,7 +32,7 @@\n                 tb.error(this);\n                 return false;\n             }\n-            tb.processEndTag(\"tr\");\n+            tb.processEndTag(name);\n             return tb.process(t);\n         } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n             tb.error(this);\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(\"tr\");\n            return tb.process(t);\n        } else if (name.equals(\"table\") || StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,45 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(\"tr\");\n+            return tb.process(t);\n+        } else if (name.equals(\"table\") || StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -25,8 +25,6 @@\n             // tr\n             tb.pop();\n             tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n         } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n             if (!tb.inTableScope(name)) {\n                 tb.error(this);\n@@ -34,7 +32,7 @@\n             }\n             tb.processEndTag(\"tr\");\n             return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+        } else if (name.equals(\"table\") || StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n             tb.error(this);\n             return false;\n         } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(name); // changed from \"tr\" to \"name\"\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(name); // changed from \"tr\" to \"name\"\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -32,7 +32,7 @@\n                 tb.error(this);\n                 return false;\n             }\n-            tb.processEndTag(\"tr\");\n+            tb.processEndTag(name); // changed from \"tr\" to \"name\"\n             return tb.process(t);\n         } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n             tb.error(this);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(name); // Fixed line\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(name); // Fixed line\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -32,7 +32,7 @@\n                 tb.error(this);\n                 return false;\n             }\n-            tb.processEndTag(\"tr\");\n+            tb.processEndTag(name); // Fixed line\n             return tb.process(t);\n         } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n             tb.error(this);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(tb.originalState());\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(\"tr\");\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(tb.originalState());\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(\"tr\");\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -24,7 +24,7 @@\n             tb.clearStackToTableRowContext();\n             // tr\n             tb.pop();\n-            tb.transition(InTableBody);\n+            tb.transition(tb.originalState());\n         } else if (name.equals(\"table\")) {\n             return handleMissingTr(t, tb);\n         } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(name); // fixed: process the actual name of the end tag\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(name); // fixed: process the actual name of the end tag\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -32,7 +32,7 @@\n                 tb.error(this);\n                 return false;\n             }\n-            tb.processEndTag(\"tr\");\n+            tb.processEndTag(name); // fixed: process the actual name of the end tag\n             return tb.process(t);\n         } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n             tb.error(this);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(name); // fix: use name instead of \"tr\"\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(name); // fix: use name instead of \"tr\"\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -32,7 +32,7 @@\n                 tb.error(this);\n                 return false;\n             }\n-            tb.processEndTag(\"tr\");\n+            tb.processEndTag(name); // fix: use name instead of \"tr\"\n             return tb.process(t);\n         } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n             tb.error(this);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(\"tr\");\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}\n\nprivate boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n    tb.error(this);\n    return false;\n}\n\nprivate boolean handleMissingTr(Token t, HtmlTreeBuilder tb) {\n    return anythingElse(t, tb);\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,46 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(\"tr\");\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -22,7 +22,6 @@\n                 return false;\n             }\n             tb.clearStackToTableRowContext();\n-            // tr\n             tb.pop();\n             tb.transition(InTableBody);\n         } else if (name.equals(\"table\")) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(\"tr\");\n            return tb.process(t);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}\n\nprivate boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n    // handle missing implied tbody\n    tb.processStartTag(\"tbody\");\n    return tb.process(t);\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,45 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(\"tr\");\n+            return tb.process(t);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -17,16 +17,12 @@\n         String name = endTag.normalName();\n         if (name.equals(\"tr\")) {\n             if (!tb.inTableScope(name)) {\n-                // frag\n                 tb.error(this);\n                 return false;\n             }\n             tb.clearStackToTableRowContext();\n-            // tr\n             tb.pop();\n             tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n         } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n             if (!tb.inTableScope(name)) {\n                 tb.error(this);\n@@ -34,6 +30,8 @@\n             }\n             tb.processEndTag(\"tr\");\n             return tb.process(t);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n         } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n             tb.error(this);\n             return false;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(name); // fix here\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(name); // fix here\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -32,7 +32,7 @@\n                 tb.error(this);\n                 return false;\n             }\n-            tb.processEndTag(\"tr\");\n+            tb.processEndTag(name); // fix here\n             return tb.process(t);\n         } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n             tb.error(this);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(name); // fix the end tag name\n            return true; // change to true instead of processing the same token again\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")\n                && !tb.inTableScope(name)) { // add check to ensure tag is not in table scope\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,48 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(name); // fix the end tag name\n+            return true; // change to true instead of processing the same token again\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")\n+                && !tb.inTableScope(name)) { // add check to ensure tag is not in table scope\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -32,9 +32,10 @@\n                 tb.error(this);\n                 return false;\n             }\n-            tb.processEndTag(\"tr\");\n-            return tb.process(t);\n-        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.processEndTag(name); // fix the end tag name\n+            return true; // change to true instead of processing the same token again\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")\n+                && !tb.inTableScope(name)) { // add check to ensure tag is not in table scope\n             tb.error(this);\n             return false;\n         } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(name); // process the current tag, not \"tr\"\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(name); // process the current tag, not \"tr\"\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -32,7 +32,7 @@\n                 tb.error(this);\n                 return false;\n             }\n-            tb.processEndTag(\"tr\");\n+            tb.processEndTag(name); // process the current tag, not \"tr\"\n             return tb.process(t);\n         } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n             tb.error(this);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableBodyContext(); // Use this method instead of clearStackToTableRowContext to include any nested tables\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(\"tr\");\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,47 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableBodyContext(); // Use this method instead of clearStackToTableRowContext to include any nested tables\n+            // tr\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(\"tr\");\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -21,7 +21,7 @@\n                 tb.error(this);\n                 return false;\n             }\n-            tb.clearStackToTableRowContext();\n+            tb.clearStackToTableBodyContext(); // Use this method instead of clearStackToTableRowContext to include any nested tables\n             // tr\n             tb.pop();\n             tb.transition(InTableBody);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(tb.isInTableFragment() ? InTableFragment : InTableBody);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(\"tr\");\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,45 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(tb.isInTableFragment() ? InTableFragment : InTableBody);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            tb.processEndTag(\"tr\");\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -24,9 +24,7 @@\n             tb.clearStackToTableRowContext();\n             // tr\n             tb.pop();\n-            tb.transition(InTableBody);\n-        } else if (name.equals(\"table\")) {\n-            return handleMissingTr(t, tb);\n+            tb.transition(tb.isInTableFragment() ? InTableFragment : InTableBody);\n         } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n             if (!tb.inTableScope(name)) {\n                 tb.error(this);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            while (!tb.currentElement().normalName().equals(name)) {\n                tb.pop();\n            }\n            tb.pop();\n            tb.transition(InTableBody);\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilderState.java@process\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process\n@@ -1,43 +1,51 @@\n boolean process(Token t, HtmlTreeBuilder tb) {\n-    switch(t.type) {\n-        case StartTag:\n-            Token.StartTag startTag = t.asStartTag();\n-            String name = startTag.normalName();\n-            if (name.equals(\"tr\")) {\n-                tb.clearStackToTableBodyContext();\n-                tb.insert(startTag);\n-                tb.transition(InRow);\n-            } else if (StringUtil.in(name, \"th\", \"td\")) {\n-                tb.error(this);\n-                tb.processStartTag(\"tr\");\n-                return tb.process(startTag);\n-            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n-                return exitTableBody(t, tb);\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        case EndTag:\n-            Token.EndTag endTag = t.asEndTag();\n-            name = endTag.normalName();\n-            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n-                if (!tb.inTableScope(name)) {\n-                    tb.error(this);\n-                    return false;\n-                } else {\n-                    tb.clearStackToTableBodyContext();\n-                    tb.pop();\n-                    tb.transition(InTable);\n-                }\n-            } else if (name.equals(\"table\")) {\n-                return exitTableBody(t, tb);\n-            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n+    if (t.isStartTag()) {\n+        Token.StartTag startTag = t.asStartTag();\n+        String name = startTag.normalName();\n+        if (StringUtil.in(name, \"th\", \"td\")) {\n+            tb.clearStackToTableRowContext();\n+            tb.insert(startTag);\n+            tb.transition(InCell);\n+            tb.insertMarkerToFormattingElements();\n+        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n+            return handleMissingTr(t, tb);\n+        } else {\n+            return anythingElse(t, tb);\n+        }\n+    } else if (t.isEndTag()) {\n+        Token.EndTag endTag = t.asEndTag();\n+        String name = endTag.normalName();\n+        if (name.equals(\"tr\")) {\n+            if (!tb.inTableScope(name)) {\n+                // frag\n                 tb.error(this);\n                 return false;\n-            } else\n-                return anythingElse(t, tb);\n-            break;\n-        default:\n+            }\n+            tb.clearStackToTableRowContext();\n+            // tr\n+            tb.pop();\n+            tb.transition(InTableBody);\n+        } else if (name.equals(\"table\")) {\n+            return handleMissingTr(t, tb);\n+        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n+            if (!tb.inTableScope(name)) {\n+                tb.error(this);\n+                return false;\n+            }\n+            while (!tb.currentElement().normalName().equals(name)) {\n+                tb.pop();\n+            }\n+            tb.pop();\n+            tb.transition(InTableBody);\n+            return tb.process(t);\n+        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n+            tb.error(this);\n+            return false;\n+        } else {\n             return anythingElse(t, tb);\n+        }\n+    } else {\n+        return anythingElse(t, tb);\n     }\n     return true;\n }\n--- org/jsoup/parser/HtmlTreeBuilderState.java@process1\n+++ org/jsoup/parser/HtmlTreeBuilderState.java@process1\n@@ -32,7 +32,11 @@\n                 tb.error(this);\n                 return false;\n             }\n-            tb.processEndTag(\"tr\");\n+            while (!tb.currentElement().normalName().equals(name)) {\n+                tb.pop();\n+            }\n+            tb.pop();\n+            tb.transition(InTableBody);\n             return tb.process(t);\n         } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n             tb.error(this);\n", "finish_reason": "stop", "valid": false, "num": 1}]