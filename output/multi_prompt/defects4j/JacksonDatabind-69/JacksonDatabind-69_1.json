[{"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name == null || name.isEmpty()) {\n                continue;\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,7 +5,7 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+            if (name == null || name.isEmpty()) {\n                 continue;\n             }\n             Integer old = names.put(name, Integer.valueOf(i));\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name == null) {\n                continue;\n            }\n            if (properties[i].getInjectableValueId() != null) {\n                continue;\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,7 +5,10 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+            if (name == null) {\n+                continue;\n+            }\n+            if (properties[i].getInjectableValueId() != null) {\n                 continue;\n             }\n             Integer old = names.put(name, Integer.valueOf(i));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name == null || name.length() == 0) {\n                continue;\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,7 +5,7 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+            if (name == null || name.length() == 0) {\n                 continue;\n             }\n             Integer old = names.put(name, Integer.valueOf(i));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name == null || name.isEmpty()) {\n                name = properties[i].getInjectableValueId().getName();\n            }\n            if (name != null) {\n                Integer old = names.put(name, Integer.valueOf(i));\n                if (old != null) {\n                    throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n                }\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,12 +5,14 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n-                continue;\n+            if (name == null || name.isEmpty()) {\n+                name = properties[i].getInjectableValueId().getName();\n             }\n-            Integer old = names.put(name, Integer.valueOf(i));\n-            if (old != null) {\n-                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n+            if (name != null) {\n+                Integer old = names.put(name, Integer.valueOf(i));\n+                if (old != null) {\n+                    throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            // Check for null or empty property names\n            if (name == null || name.length() == 0) {\n                throw new IllegalArgumentException(\"Invalid property name at index \" + i);\n            }\n            // Check for duplicate property names\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,9 +5,11 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n-                continue;\n+            // Check for null or empty property names\n+            if (name == null || name.length() == 0) {\n+                throw new IllegalArgumentException(\"Invalid property name at index \" + i);\n             }\n+            // Check for duplicate property names\n             Integer old = names.put(name, Integer.valueOf(i));\n             if (old != null) {\n                 throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        Map<String, Integer> names = new HashMap<>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n                continue;\n            }\n            Integer old = names.putIfAbsent(name, i);\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -2,13 +2,13 @@\n     verifyNonDup(creator, C_PROPS, explicit);\n     // Better ensure we have no duplicate names either...\n     if (properties.length > 1) {\n-        HashMap<String, Integer> names = new HashMap<String, Integer>();\n+        Map<String, Integer> names = new HashMap<>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+            if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n                 continue;\n             }\n-            Integer old = names.put(name, Integer.valueOf(i));\n+            Integer old = names.putIfAbsent(name, i);\n             if (old != null) {\n                 throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n                        if (name == null || name.length() == 0 && properties[i].getInjectableValueId() != null) {\n                continue;\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,7 +5,7 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+                        if (name == null || name.length() == 0 && properties[i].getInjectableValueId() != null) {\n                 continue;\n             }\n             Integer old = names.put(name, Integer.valueOf(i));\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name != null && name.length() > 0 && properties[i].getInjectableValueId() == null) {\n                Integer old = names.put(name, Integer.valueOf(i));\n                if (old != null) {\n                    throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n                }\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,12 +5,11 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n-                continue;\n-            }\n-            Integer old = names.put(name, Integer.valueOf(i));\n-            if (old != null) {\n-                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n+            if (name != null && name.length() > 0 && properties[i].getInjectableValueId() == null) {\n+                Integer old = names.put(name, Integer.valueOf(i));\n+                if (old != null) {\n+                    throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        Map<String, Integer> names = new HashMap<>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name == null || name.isEmpty()) {\n                if (properties[i].getInjectableValueId() == null) {\n                    throw new IllegalArgumentException(\"Cannot have null or empty property name\");\n                } else {\n                    continue;\n                }\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                int idx = old.intValue();\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + idx + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -2,15 +2,20 @@\n     verifyNonDup(creator, C_PROPS, explicit);\n     // Better ensure we have no duplicate names either...\n     if (properties.length > 1) {\n-        HashMap<String, Integer> names = new HashMap<String, Integer>();\n+        Map<String, Integer> names = new HashMap<>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n-                continue;\n+            if (name == null || name.isEmpty()) {\n+                if (properties[i].getInjectableValueId() == null) {\n+                    throw new IllegalArgumentException(\"Cannot have null or empty property name\");\n+                } else {\n+                    continue;\n+                }\n             }\n             Integer old = names.put(name, Integer.valueOf(i));\n             if (old != null) {\n-                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n+                int idx = old.intValue();\n+                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + idx + \" vs \" + i + \")\");\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        Map<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name == null) {\n                continue;\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -2,10 +2,10 @@\n     verifyNonDup(creator, C_PROPS, explicit);\n     // Better ensure we have no duplicate names either...\n     if (properties.length > 1) {\n-        HashMap<String, Integer> names = new HashMap<String, Integer>();\n+        Map<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+            if (name == null) {\n                 continue;\n             }\n             Integer old = names.put(name, Integer.valueOf(i));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name == null || name.length() == 0) {\n                if (properties[i].getInjectableValueId() == null) {\n                    throw new IllegalArgumentException(\"Cannot create a PropertyCreator with a null or empty property name\");\n                } else {\n                    continue;\n                }\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,8 +5,12 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n-                continue;\n+            if (name == null || name.length() == 0) {\n+                if (properties[i].getInjectableValueId() == null) {\n+                    throw new IllegalArgumentException(\"Cannot create a PropertyCreator with a null or empty property name\");\n+                } else {\n+                    continue;\n+                }\n             }\n             Integer old = names.put(name, Integer.valueOf(i));\n             if (old != null) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name == null || name.isEmpty()) { // Check for null or empty string\n                continue;\n            }\n            if (properties[i].getInjectableValueId() != null) {\n                continue;\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,7 +5,10 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+            if (name == null || name.isEmpty()) { // Check for null or empty string\n+                continue;\n+            }\n+            if (properties[i].getInjectableValueId() != null) {\n                 continue;\n             }\n             Integer old = names.put(name, Integer.valueOf(i));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name == null) {\n                continue;\n            }\n            if (properties[i].getInjectableValueId() != null) {\n                name = \"\";\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,8 +5,11 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+            if (name == null) {\n                 continue;\n+            }\n+            if (properties[i].getInjectableValueId() != null) {\n+                name = \"\";\n             }\n             Integer old = names.put(name, Integer.valueOf(i));\n             if (old != null) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n                        if (name == null || name.isEmpty() && properties[i].getInjectableValueId() != null) {\n                continue;\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,7 +5,7 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+                        if (name == null || name.isEmpty() && properties[i].getInjectableValueId() != null) {\n                 continue;\n             }\n             Integer old = names.put(name, Integer.valueOf(i));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n            if (name == null) {\n                throw new IllegalArgumentException(\"Invalid property name passed, property name can't be null.\");\n            }\n            if (name.isEmpty() && properties[i].getInjectableValueId() != null) {\n                continue;\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n+++ com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java@addPropertyCreator\n@@ -5,7 +5,10 @@\n         HashMap<String, Integer> names = new HashMap<String, Integer>();\n         for (int i = 0, len = properties.length; i < len; ++i) {\n             String name = properties[i].getName();\n-                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+            if (name == null) {\n+                throw new IllegalArgumentException(\"Invalid property name passed, property name can't be null.\");\n+            }\n+            if (name.isEmpty() && properties[i].getInjectableValueId() != null) {\n                 continue;\n             }\n             Integer old = names.put(name, Integer.valueOf(i));\n", "finish_reason": "stop", "valid": false, "num": 1}]