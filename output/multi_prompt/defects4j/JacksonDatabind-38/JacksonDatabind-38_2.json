[{"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray() || cls == void.class || cls == Void.class) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for \" + cls.getName());\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,14 +1,14 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n     // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n-        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n+    if (cls.isArray() || cls == void.class || cls == Void.class) {\n+        throw new IllegalArgumentException(\"Can not construct SimpleType for \" + cls.getName());\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // Fix for array types\n    if (cls.isArray() || cls.getComponentType() != null && cls.getComponentType().isArray()) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,13 +1,13 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n-    // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n+    // Fix for array types\n+    if (cls.isArray() || cls.getComponentType() != null && cls.getComponentType().isArray()) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray()) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n    }\n    TypeBindings b = TypeBindings.emptyBindings();\n    JavaType superClass = _bogusSuperClass(cls);\n    return new SimpleType(cls, b, superClass, null, null, cls.getName(), false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,6 +1,6 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n@@ -10,5 +10,7 @@\n     if (cls.isArray()) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n     }\n-    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n+    TypeBindings b = TypeBindings.emptyBindings();\n+    JavaType superClass = _bogusSuperClass(cls);\n+    return new SimpleType(cls, b, superClass, null, null, cls.getName(), false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // check for array types\n    if (cls.isArray() || cls.getName().startsWith(\"[\")) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,13 +1,13 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n-    // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n+    // check for array types\n+    if (cls.isArray() || cls.getName().startsWith(\"[\")) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray()) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n    }\n    // Add a check for Enum types which are also not supported by SimpleType\n    if (Enum.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an Enum (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,6 +1,6 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n@@ -10,5 +10,9 @@\n     if (cls.isArray()) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n     }\n+    // Add a check for Enum types which are also not supported by SimpleType\n+    if (Enum.class.isAssignableFrom(cls)) {\n+        throw new IllegalArgumentException(\"Can not construct SimpleType for an Enum (class: \" + cls.getName() + \")\");\n+    }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    if (cls.isArray()) {\n        Class<?> componentType = cls.getComponentType();\n        return ArrayType.construct(construct(componentType), null, null);\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,14 +1,14 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n-    // ... and while we are at it, not array types either\n     if (cls.isArray()) {\n-        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n+        Class<?> componentType = cls.getComponentType();\n+        return ArrayType.construct(construct(componentType), null, null);\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // Add a check for enum type\n    if (cls.isEnum()) {\n        return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray()) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n    }\n    \n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,14 +1,19 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n+    // Add a check for enum type\n+    if (cls.isEnum()) {\n+        return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n+    }\n     // ... and while we are at it, not array types either\n     if (cls.isArray()) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n     }\n+    \n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n        if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // Fix: also check if the class is an interface\n    if (cls.isArray() || cls.isInterface()) { \n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or interface (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -6,9 +6,9 @@\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n-    // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n-        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n+    // Fix: also check if the class is an interface\n+    if (cls.isArray() || cls.isInterface()) { \n+        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or interface (class: \" + cls.getName() + \")\");\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray() || cls.isPrimitive()) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or primitive (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,14 +1,14 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n     // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n-        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n+    if (cls.isArray() || cls.isPrimitive()) {\n+        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or primitive (class: \" + cls.getName() + \")\");\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray() || cls == void.class) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for void or array types (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,14 +1,14 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n     // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n-        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n+    if (cls.isArray() || cls == void.class) {\n+        throw new IllegalArgumentException(\"Can not construct SimpleType for void or array types (class: \" + cls.getName() + \")\");\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // fix: check if cls is an interface before checking if it's an array\n    if (cls.isArray() || cls.isInterface()) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or interface (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,14 +1,14 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n-    // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n-        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n+    // fix: check if cls is an interface before checking if it's an array\n+    if (cls.isArray() || cls.isInterface()) {\n+        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or interface (class: \" + cls.getName() + \")\");\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray()) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n    }\n    TypeBindings bindings = TypeBindings.createIfNeeded(cls, TypeFactory.defaultInstance());\n    return new SimpleType(cls, bindings, _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,6 +1,6 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n@@ -10,5 +10,6 @@\n     if (cls.isArray()) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n     }\n-    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n+    TypeBindings bindings = TypeBindings.createIfNeeded(cls, TypeFactory.defaultInstance());\n+    return new SimpleType(cls, bindings, _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray() || cls == void.class) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,13 +1,13 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n     // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n+    if (cls.isArray() || cls == void.class) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray() || cls.isPrimitive()) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or primitive type (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,14 +1,14 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n     // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n-        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n+    if (cls.isArray() || cls.isPrimitive()) {\n+        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or primitive type (class: \" + cls.getName() + \")\");\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray()) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n    }\n    TypeBindings bindings = TypeBindings.create(cls, TypeFactory.unknownType(), TypeFactory.unknownType());\n    return new SimpleType(cls, bindings, _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,6 +1,6 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n@@ -10,5 +10,6 @@\n     if (cls.isArray()) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n     }\n-    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n+    TypeBindings bindings = TypeBindings.create(cls, TypeFactory.unknownType(), TypeFactory.unknownType());\n+    return new SimpleType(cls, bindings, _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n        if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray() || cls.isPrimitive()) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or primitive type (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -7,8 +7,8 @@\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n     // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n-        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n+    if (cls.isArray() || cls.isPrimitive()) {\n+        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or primitive type (class: \" + cls.getName() + \")\");\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray() || cls == void.class) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for \" + cls.getName());\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,14 +1,14 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n     // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n-        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n+    if (cls.isArray() || cls == void.class) {\n+        throw new IllegalArgumentException(\"Can not construct SimpleType for \" + cls.getName());\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray() || cls == Object.class) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,13 +1,13 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n     // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n+    if (cls.isArray() || cls == Object.class) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // ... and while we are at it, not array types either\n    if (cls.isArray() || cls == void.class) { // added check for void.class\n        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or void (class: \" + cls.getName() + \")\");\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,14 +1,14 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n     // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n-        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n+    if (cls.isArray() || cls == void.class) { // added check for void.class\n+        throw new IllegalArgumentException(\"Can not construct SimpleType for an array or void (class: \" + cls.getName() + \")\");\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Deprecated\npublic static SimpleType construct(Class<?> cls) {\n    if (Map.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n    }\n    if (Collection.class.isAssignableFrom(cls)) {\n        throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n    }\n    // fixed: added a check for primitive arrays\n    if (cls.isArray() && cls.getComponentType().isPrimitive()) {\n        return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n    }\n    // fixed: added a check for object arrays\n    if (cls.isArray() && !cls.getComponentType().isPrimitive()) {\n        Class<?> componentType = cls.getComponentType();\n        SimpleType simpleComponentType = construct(componentType);\n        return ArrayType.construct(simpleComponentType, null, null);\n    }\n    return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n}", "diff": "--- com/fasterxml/jackson/databind/type/SimpleType.java@construct\n+++ com/fasterxml/jackson/databind/type/SimpleType.java@construct\n@@ -1,14 +1,20 @@\n @Deprecated\n public static SimpleType construct(Class<?> cls) {\n-        if (Map.class.isAssignableFrom(cls)) {\n+    if (Map.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n     }\n     if (Collection.class.isAssignableFrom(cls)) {\n         throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n     }\n-    // ... and while we are at it, not array types either\n-    if (cls.isArray()) {\n-        throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \" + cls.getName() + \")\");\n+    // fixed: added a check for primitive arrays\n+    if (cls.isArray() && cls.getComponentType().isPrimitive()) {\n+        return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n+    }\n+    // fixed: added a check for object arrays\n+    if (cls.isArray() && !cls.getComponentType().isPrimitive()) {\n+        Class<?> componentType = cls.getComponentType();\n+        SimpleType simpleComponentType = construct(componentType);\n+        return ArrayType.construct(simpleComponentType, null, null);\n     }\n     return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]