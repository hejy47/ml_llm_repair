[{"output": "private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative, int intPartLength) throws IOException, JsonParseException {\n    // Ok, parse the rest\n    while (true) {\n        if (_inputPtr >= _inputEnd && !loadMore()) {\n            _textBuffer.setCurrentLength(outPtr);\n            return resetInt(negative, intPartLength);\n        }\n        int c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n        if (c > '9' || c < '0') {\n            if (c == '.' || c == 'e' || c == 'E') {\n                return _parseFloat(outBuf, outPtr, c, negative, intPartLength);\n            }\n            break;\n        }\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n        outBuf[outPtr++] = (char) c;\n        ++intPartLength;\n    }\n    // to push back trailing char (comma etc)\n    --_inputPtr;\n    _textBuffer.setCurrentLength(outPtr);\n    // As per #105, need separating space between root values; check here\n    // And there we have it!\n    return resetInt(negative, intPartLength);\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@_parserNumber2\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@_parserNumber2\n@@ -6,7 +6,7 @@\n             return resetInt(negative, intPartLength);\n         }\n         int c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n-        if (c > INT_9 || c < INT_0) {\n+        if (c > '9' || c < '0') {\n             if (c == '.' || c == 'e' || c == 'E') {\n                 return _parseFloat(outBuf, outPtr, c, negative, intPartLength);\n             }\n", "finish_reason": "stop", "valid": false, "num": 18}, {"output": "private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative, int intPartLength) throws IOException, JsonParseException {\n    // Ok, parse the rest\n    while (true) {\n        if (_inputPtr >= _inputEnd && !loadMore()) {\n            _textBuffer.setCurrentLength(outPtr);\n            return resetInt(negative, intPartLength);\n        }\n        int c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n        if (c > '9' || c < '0') { // fix: compare to char '9'/'0' instead of INT_9/INT_0\n            if (c == '.' || c == 'e' || c == 'E') {\n                return _parseFloat(outBuf, outPtr, c, negative, intPartLength);\n            }\n            break;\n        }\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n        outBuf[outPtr++] = (char) c;\n        ++intPartLength;\n    }\n    // to push back trailing char (comma etc)\n    --_inputPtr;\n    _textBuffer.setCurrentLength(outPtr);\n    // As per #105, need separating space between root values; check here\n    // And there we have it!\n    return resetInt(negative, intPartLength);\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@_parserNumber2\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@_parserNumber2\n@@ -6,7 +6,7 @@\n             return resetInt(negative, intPartLength);\n         }\n         int c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n-        if (c > INT_9 || c < INT_0) {\n+        if (c > '9' || c < '0') { // fix: compare to char '9'/'0' instead of INT_9/INT_0\n             if (c == '.' || c == 'e' || c == 'E') {\n                 return _parseFloat(outBuf, outPtr, c, negative, intPartLength);\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative, int intPartLength) throws IOException, JsonParseException {\n    // Ok, parse the rest\n    while (true) {\n        if (_inputPtr >= _inputEnd && !loadMore()) {\n            _textBuffer.setCurrentLength(outPtr);\n            return resetInt(negative, intPartLength);\n        }\n        int c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n        if (c > INT_9 || c < INT_0) {\n            if (c == '.' || c == 'e' || c == 'E') {\n                return _parseFloat(outBuf, outPtr, c, negative, intPartLength);\n            }\n            break;\n        }\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n        outBuf[outPtr++] = (char) c;\n        ++intPartLength;\n    }\n    // to push back trailing char (comma etc)\n    --_inputPtr;\n    _textBuffer.setCurrentLength(outPtr);\n    // As per #105, need separating space between root values; check here\n    if (_parsingContext.inRoot() && !_parsingContext.hasCurrentToken()) {\n        _verifyRootSpace(c);\n    }\n    // And there we have it!\n    return resetInt(negative, intPartLength);\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@_parserNumber2\n+++ com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java@_parserNumber2\n@@ -23,6 +23,9 @@\n     --_inputPtr;\n     _textBuffer.setCurrentLength(outPtr);\n     // As per #105, need separating space between root values; check here\n+    if (_parsingContext.inRoot() && !_parsingContext.hasCurrentToken()) {\n+        _verifyRootSpace(c);\n+    }\n     // And there we have it!\n     return resetInt(negative, intPartLength);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]