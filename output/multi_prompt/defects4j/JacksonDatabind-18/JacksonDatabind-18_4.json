[{"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n        }\n        _parser.clearCurrentToken();\n        return value;\n    } finally {\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -13,11 +13,10 @@\n         if (_updatedValue == null) {\n             value = _deserializer.deserialize(_parser, _context);\n         } else {\n-            _deserializer.deserialize(_parser, _context, _updatedValue);\n-            value = _updatedValue;\n+            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n         }\n+        _parser.clearCurrentToken();\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n        }\n        _parser.clearCurrentToken(); // Move this line to before the return statement\n        return value;\n    } finally {\n        // Typically no-op\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -13,11 +13,11 @@\n         if (_updatedValue == null) {\n             value = _deserializer.deserialize(_parser, _context);\n         } else {\n-            _deserializer.deserialize(_parser, _context, _updatedValue);\n-            value = _updatedValue;\n+            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n         }\n+        _parser.clearCurrentToken(); // Move this line to before the return statement\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        // Typically no-op\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n        _hasNextChecked = true; // Fix: set _hasNextChecked to true after checking for next value\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            _deserializer.deserialize(_parser, _context, _updatedValue);\n            value = _updatedValue;\n        }\n        return value;\n    } finally {\n        _parser.clearCurrentToken();\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -3,11 +3,11 @@\n         if (!hasNextValue()) {\n             return _throwNoSuchElement();\n         }\n+        _hasNextChecked = true; // Fix: set _hasNextChecked to true after checking for next value\n     }\n     if (_parser == null) {\n         return _throwNoSuchElement();\n     }\n-    _hasNextChecked = false;\n     try {\n         T value;\n         if (_updatedValue == null) {\n@@ -18,6 +18,6 @@\n         }\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        _parser.clearCurrentToken();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    T value;\n    try {\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            _deserializer.deserialize(_parser, _context, _updatedValue);\n            value = _updatedValue;\n        }\n    } finally {\n        _parser.clearCurrentToken();\n    }\n    return value;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -8,16 +8,16 @@\n         return _throwNoSuchElement();\n     }\n     _hasNextChecked = false;\n+    T value;\n     try {\n-        T value;\n         if (_updatedValue == null) {\n             value = _deserializer.deserialize(_parser, _context);\n         } else {\n             _deserializer.deserialize(_parser, _context, _updatedValue);\n             value = _updatedValue;\n         }\n-        return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        _parser.clearCurrentToken();\n     }\n+    return value;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public T nextValue() throws NoSuchElementException, IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            throw new NoSuchElementException();\n        }\n    }\n    if (_parser == null) {\n        throw new NoSuchElementException();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            _deserializer.deserialize(_parser, _context, _updatedValue);\n            value = _updatedValue;\n        }\n        return value;\n    } finally {\n        _parser.clearCurrentToken();\n    }\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n        }\n        _parser.clearCurrentToken(); // Move this line outside of the try block\n        return value;\n    } finally {\n        // Remove the _parser.clearCurrentToken() line from here\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -13,11 +13,11 @@\n         if (_updatedValue == null) {\n             value = _deserializer.deserialize(_parser, _context);\n         } else {\n-            _deserializer.deserialize(_parser, _context, _updatedValue);\n-            value = _updatedValue;\n+            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n         }\n+        _parser.clearCurrentToken(); // Move this line outside of the try block\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        // Remove the _parser.clearCurrentToken() line from here\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n        _hasNextChecked = true; // fix: set _hasNextChecked to true after checking instead of setting it to false\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            _deserializer.deserialize(_parser, _context, _updatedValue);\n            value = _updatedValue;\n        }\n        return value;\n    } finally {\n                _parser.clearCurrentToken();\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -3,11 +3,11 @@\n         if (!hasNextValue()) {\n             return _throwNoSuchElement();\n         }\n+        _hasNextChecked = true; // fix: set _hasNextChecked to true after checking instead of setting it to false\n     }\n     if (_parser == null) {\n         return _throwNoSuchElement();\n     }\n-    _hasNextChecked = false;\n     try {\n         T value;\n         if (_updatedValue == null) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n        _hasNextChecked = true; // Fix: set _hasNextChecked to true after checking hasNextValue()\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            _deserializer.deserialize(_parser, _context, _updatedValue);\n            value = _updatedValue;\n        }\n        return value;\n    } finally {\n        _parser.clearCurrentToken();\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -3,6 +3,7 @@\n         if (!hasNextValue()) {\n             return _throwNoSuchElement();\n         }\n+        _hasNextChecked = true; // Fix: set _hasNextChecked to true after checking hasNextValue()\n     }\n     if (_parser == null) {\n         return _throwNoSuchElement();\n@@ -18,6 +19,6 @@\n         }\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        _parser.clearCurrentToken();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            _deserializer.deserialize(_parser, _context, _updatedValue);\n            value = _updatedValue;\n        }\n        _parser.clearCurrentToken(); // moved outside of the try block\n        return value;\n    } finally {\n        // removed unnecessary code block\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -16,8 +16,9 @@\n             _deserializer.deserialize(_parser, _context, _updatedValue);\n             value = _updatedValue;\n         }\n+        _parser.clearCurrentToken(); // moved outside of the try block\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        // removed unnecessary code block\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n        }\n        _parser.clearCurrentToken(); // Move this line to the if statement above it\n        return value;\n    } finally {\n        // Do nothing\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -13,11 +13,11 @@\n         if (_updatedValue == null) {\n             value = _deserializer.deserialize(_parser, _context);\n         } else {\n-            _deserializer.deserialize(_parser, _context, _updatedValue);\n-            value = _updatedValue;\n+            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n         }\n+        _parser.clearCurrentToken(); // Move this line to the if statement above it\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        // Do nothing\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            value = _deserializer.deserialize(_parser, _context, _updatedValue); // assign the deserialized value to variable 'value'\n        }\n        _parser.clearCurrentToken();\n        return value; // return the deserialized value\n    } finally {\n        // any necessary cleanup code\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -13,11 +13,11 @@\n         if (_updatedValue == null) {\n             value = _deserializer.deserialize(_parser, _context);\n         } else {\n-            _deserializer.deserialize(_parser, _context, _updatedValue);\n-            value = _updatedValue;\n+            value = _deserializer.deserialize(_parser, _context, _updatedValue); // assign the deserialized value to variable 'value'\n         }\n-        return value;\n+        _parser.clearCurrentToken();\n+        return value; // return the deserialized value\n     } finally {\n-                _parser.clearCurrentToken();\n+        // any necessary cleanup code\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    T value = null;\n    try {\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            _deserializer.deserialize(_parser, _context, _updatedValue);\n            value = _updatedValue;\n        }\n    } finally {\n        _parser.clearCurrentToken();\n    }\n    return value;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -8,16 +8,16 @@\n         return _throwNoSuchElement();\n     }\n     _hasNextChecked = false;\n+    T value = null;\n     try {\n-        T value;\n         if (_updatedValue == null) {\n             value = _deserializer.deserialize(_parser, _context);\n         } else {\n             _deserializer.deserialize(_parser, _context, _updatedValue);\n             value = _updatedValue;\n         }\n-        return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        _parser.clearCurrentToken();\n     }\n+    return value;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n        _hasNextChecked = true; // Fix: set _hasNextChecked to true after checking hasNextValue()\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            _deserializer.deserialize(_parser, _context, _updatedValue);\n            value = _updatedValue;\n        }\n        return value;\n    } finally {\n                _parser.clearCurrentToken();\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -3,6 +3,7 @@\n         if (!hasNextValue()) {\n             return _throwNoSuchElement();\n         }\n+        _hasNextChecked = true; // Fix: set _hasNextChecked to true after checking hasNextValue()\n     }\n     if (_parser == null) {\n         return _throwNoSuchElement();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            _deserializer.deserialize(_parser, _context, _updatedValue);\n            value = _updatedValue;\n        }\n        return value;\n    } finally {\n        if (_parser != null) {\n            _parser.clearCurrentToken();\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -18,6 +18,8 @@\n         }\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        if (_parser != null) {\n+            _parser.clearCurrentToken();\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n        _hasNextChecked = true;\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            _deserializer.deserialize(_parser, _context, _updatedValue);\n            value = _updatedValue;\n        }\n        _parser.clearCurrentToken();\n        return value;\n    } finally {\n        // Clean up any resources as necessary\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -3,11 +3,11 @@\n         if (!hasNextValue()) {\n             return _throwNoSuchElement();\n         }\n+        _hasNextChecked = true;\n     }\n     if (_parser == null) {\n         return _throwNoSuchElement();\n     }\n-    _hasNextChecked = false;\n     try {\n         T value;\n         if (_updatedValue == null) {\n@@ -16,8 +16,9 @@\n             _deserializer.deserialize(_parser, _context, _updatedValue);\n             value = _updatedValue;\n         }\n+        _parser.clearCurrentToken();\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        // Clean up any resources as necessary\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n        _hasNextChecked = true;\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            _deserializer.deserialize(_parser, _context, _updatedValue);\n            value = _updatedValue;\n        }\n        return value;\n    } finally {\n        _parser.clearCurrentToken();\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -3,11 +3,11 @@\n         if (!hasNextValue()) {\n             return _throwNoSuchElement();\n         }\n+        _hasNextChecked = true;\n     }\n     if (_parser == null) {\n         return _throwNoSuchElement();\n     }\n-    _hasNextChecked = false;\n     try {\n         T value;\n         if (_updatedValue == null) {\n@@ -18,6 +18,6 @@\n         }\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        _parser.clearCurrentToken();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n        }\n        _parser.clearCurrentToken();\n        return value;\n    } finally {\n        // release _parser reference and cached deserialized value, so they can be GCed\n        if (_updatedValue == null) {\n            _deserializer.flushCachedDeserializers();\n        }\n        _parser = null;\n        _updatedValue = null;\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -13,11 +13,16 @@\n         if (_updatedValue == null) {\n             value = _deserializer.deserialize(_parser, _context);\n         } else {\n-            _deserializer.deserialize(_parser, _context, _updatedValue);\n-            value = _updatedValue;\n+            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n         }\n+        _parser.clearCurrentToken();\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        // release _parser reference and cached deserialized value, so they can be GCed\n+        if (_updatedValue == null) {\n+            _deserializer.flushCachedDeserializers();\n+        }\n+        _parser = null;\n+        _updatedValue = null;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n        }\n        _parser.clearCurrentToken(); // moved to fix bug\n        return value;\n    } finally {\n        // code was already correct\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -13,11 +13,11 @@\n         if (_updatedValue == null) {\n             value = _deserializer.deserialize(_parser, _context);\n         } else {\n-            _deserializer.deserialize(_parser, _context, _updatedValue);\n-            value = _updatedValue;\n+            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n         }\n+        _parser.clearCurrentToken(); // moved to fix bug\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        // code was already correct\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public T nextValue() throws IOException {\n    if (!_hasNextChecked) {\n        if (!hasNextValue()) {\n            return _throwNoSuchElement();\n        }\n    }\n    if (_parser == null) {\n        return _throwNoSuchElement();\n    }\n    _hasNextChecked = false;\n    try {\n        T value;\n        if (_updatedValue == null) {\n            value = _deserializer.deserialize(_parser, _context);\n        } else {\n            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n        }\n        _parser.clearCurrentToken();\n        return value;\n    } finally {\n        \n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@nextValue\n@@ -13,11 +13,11 @@\n         if (_updatedValue == null) {\n             value = _deserializer.deserialize(_parser, _context);\n         } else {\n-            _deserializer.deserialize(_parser, _context, _updatedValue);\n-            value = _updatedValue;\n+            value = _deserializer.deserialize(_parser, _context, _updatedValue);\n         }\n+        _parser.clearCurrentToken();\n         return value;\n     } finally {\n-                _parser.clearCurrentToken();\n+        \n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]