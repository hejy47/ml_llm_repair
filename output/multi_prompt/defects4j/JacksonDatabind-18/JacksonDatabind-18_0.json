[{"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() == null && p.isExpectedStartArrayToken()) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        _context = _context.createContextualValue(_type.getContentType(), _updatedValue);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,11 +10,8 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    if (managedParser && (p != null) && p.currentToken() == null && p.isExpectedStartArrayToken()) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n-        // regardless, recovery context should be whatever context we have now,\n-        // with sole exception of pointing to a start marker, in which case it's\n-        // the parent\n+        _context = _context.createContextualValue(_type.getContentType(), _updatedValue);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() != null && p.isExpectedStartArrayToken()) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        ctxt.handleStartArrayForSingleValue();\n        // regardless, recovery context should be whatever context we have now,\n        // with sole exception of pointing to a start marker, in which case it's\n        // the parent\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,9 +10,9 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() != null && p.isExpectedStartArrayToken()) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n+        ctxt.handleStartArrayForSingleValue();\n         // regardless, recovery context should be whatever context we have now,\n         // with sole exception of pointing to a start marker, in which case it's\n         // the parent\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() != JsonToken.START_ARRAY) {\n        throw new IllegalStateException(\"JSON input must start with an array token\");\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,11 +10,7 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n-        // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n-        // regardless, recovery context should be whatever context we have now,\n-        // with sole exception of pointing to a start marker, in which case it's\n-        // the parent\n+    if (managedParser && (p != null) && p.currentToken() != JsonToken.START_ARRAY) {\n+        throw new IllegalStateException(\"JSON input must start with an array token\");\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() == null && p.isExpectedStartArrayToken()) {\n        try {\n            p.nextToken();\n        } catch (IOException ioe) {\n            throw ctxt.mappingException(ioe.getMessage(), ioe);\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,11 +10,11 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n-        // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n-        // regardless, recovery context should be whatever context we have now,\n-        // with sole exception of pointing to a start marker, in which case it's\n-        // the parent\n+    if (managedParser && (p != null) && p.currentToken() == null && p.isExpectedStartArrayToken()) {\n+        try {\n+            p.nextToken();\n+        } catch (IOException ioe) {\n+            throw ctxt.mappingException(ioe.getMessage(), ioe);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() == null && p.isExpectedStartArrayToken()) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        p.clearCurrentToken();\n        ctxt.assignCurrContext(p);\n        // regardless, recovery context should be whatever context we have now,\n        // with sole exception of pointing to a start marker, in which case it's\n        // the parent\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,9 +10,10 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    if (managedParser && (p != null) && p.currentToken() == null && p.isExpectedStartArrayToken()) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n         p.clearCurrentToken();\n+        ctxt.assignCurrContext(p);\n         // regardless, recovery context should be whatever context we have now,\n         // with sole exception of pointing to a start marker, in which case it's\n         // the parent\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() == null) {\n        // If no current token, point to the first token\n        p.nextToken();\n    }\n    if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        ctxt.assignArray(p);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,11 +10,12 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() == null) {\n+        // If no current token, point to the first token\n+        p.nextToken();\n+    }\n+    if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n-        // regardless, recovery context should be whatever context we have now,\n-        // with sole exception of pointing to a start marker, in which case it's\n-        // the parent\n+        ctxt.assignArray(p);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        ctxt = ctxt.createChildArrayContext(null);\n        // regardless, recovery context should be whatever context we have now,\n        // with sole exception of pointing to a start marker, in which case it's\n        // the parent\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,9 +10,9 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n+        ctxt = ctxt.createChildArrayContext(null);\n         // regardless, recovery context should be whatever context we have now,\n         // with sole exception of pointing to a start marker, in which case it's\n         // the parent\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    // Fix added below to handle the case where the parser is not pointing to START_ARRAY token.\n    if (managedParser && (p != null)) {\n        if (p.isExpectedStartArrayToken()) {\n            p.clearCurrentToken();\n            ctxt = ctxt.createArrayContext(null);\n        } else {\n            ctxt = ctxt.createContext(_type, p);\n        }\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,11 +10,13 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n-        // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n-        // regardless, recovery context should be whatever context we have now,\n-        // with sole exception of pointing to a start marker, in which case it's\n-        // the parent\n+    // Fix added below to handle the case where the parser is not pointing to START_ARRAY token.\n+    if (managedParser && (p != null)) {\n+        if (p.isExpectedStartArrayToken()) {\n+            p.clearCurrentToken();\n+            ctxt = ctxt.createArrayContext(null);\n+        } else {\n+            ctxt = ctxt.createContext(_type, p);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() == null && p.isExpectedStartArrayToken()) {\n        try {\n            p.nextToken();\n        } catch (IOException e) {\n            throw ctxt.mappingException(\"Failed to clear current token\", e);\n        }\n        ctxt.getParser().setCurrentValue(valueToUpdate);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,11 +10,12 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n-        // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n-        // regardless, recovery context should be whatever context we have now,\n-        // with sole exception of pointing to a start marker, in which case it's\n-        // the parent\n+    if (managedParser && (p != null) && p.currentToken() == null && p.isExpectedStartArrayToken()) {\n+        try {\n+            p.nextToken();\n+        } catch (IOException e) {\n+            throw ctxt.mappingException(\"Failed to clear current token\", e);\n+        }\n+        ctxt.getParser().setCurrentValue(valueToUpdate);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n        if (managedParser && (p != null) && p.getCurrentToken() == null && p.nextToken() == JsonToken.START_ARRAY) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        ctxt.assignArrayContext(_updatedValue, p);\n        // regardless, recovery context should be whatever context we have now,\n        // with sole exception of pointing to a start marker, in which case it's\n        // the parent\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,9 +10,9 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+        if (managedParser && (p != null) && p.getCurrentToken() == null && p.nextToken() == JsonToken.START_ARRAY) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n+        ctxt.assignArrayContext(_updatedValue, p);\n         // regardless, recovery context should be whatever context we have now,\n         // with sole exception of pointing to a start marker, in which case it's\n         // the parent\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() == JsonToken.START_ARRAY) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        ctxt.assignArray((Collection<Object>)_updatedValue);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,11 +10,8 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() == JsonToken.START_ARRAY) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n-        // regardless, recovery context should be whatever context we have now,\n-        // with sole exception of pointing to a start marker, in which case it's\n-        // the parent\n+        ctxt.assignArray((Collection<Object>)_updatedValue);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() == JsonToken.START_ARRAY) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        ctxt.assignCurrentToken(p);\n        // regardless, recovery context should be whatever context we have now,\n        // with sole exception of pointing to a start marker, in which case it's\n        // the parent\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,9 +10,9 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() == JsonToken.START_ARRAY) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n+        ctxt.assignCurrentToken(p);\n         // regardless, recovery context should be whatever context we have now,\n         // with sole exception of pointing to a start marker, in which case it's\n         // the parent\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        p.clearCurrentToken();\n        ctxt.assignArrayContext(null);\n        // regardless, recovery context should be whatever context we have now,\n        // with sole exception of pointing to a start marker, in which case it's\n        // the parent\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,9 +10,10 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n         p.clearCurrentToken();\n+        ctxt.assignArrayContext(null);\n         // regardless, recovery context should be whatever context we have now,\n         // with sole exception of pointing to a start marker, in which case it's\n         // the parent\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() == null) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        _context = ctxt.createChildArrayContext(_context);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,11 +10,8 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() == null) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n-        // regardless, recovery context should be whatever context we have now,\n-        // with sole exception of pointing to a start marker, in which case it's\n-        // the parent\n+        _context = ctxt.createChildArrayContext(_context);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        Class<?> rawClass = type.getRawClass();\n        if (!rawClass.isInstance(valueToUpdate)) {\n            throw new IllegalArgumentException(\"Cannot update instance of \" + valueToUpdate.getClass() + \" with instance of \" + rawClass);\n        }\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        p.clearCurrentToken();\n        // regardless, recovery context should be whatever context we have now,\n        // with sole exception of pointing to a start marker, in which case it's\n        // the parent\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -8,9 +8,13 @@\n     if (valueToUpdate == null) {\n         _updatedValue = null;\n     } else {\n+        Class<?> rawClass = type.getRawClass();\n+        if (!rawClass.isInstance(valueToUpdate)) {\n+            throw new IllegalArgumentException(\"Cannot update instance of \" + valueToUpdate.getClass() + \" with instance of \" + rawClass);\n+        }\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n         p.clearCurrentToken();\n         // regardless, recovery context should be whatever context we have now,\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() != null && p.currentToken().isStructStart()) {\n        // If pointing to START_OBJECT or START_ARRAY, context should be that object or array\n        ctxt.assignCurrentValue(_updatedValue);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,11 +10,8 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n-        // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n-        // regardless, recovery context should be whatever context we have now,\n-        // with sole exception of pointing to a start marker, in which case it's\n-        // the parent\n+    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() != null && p.currentToken().isStructStart()) {\n+        // If pointing to START_OBJECT or START_ARRAY, context should be that object or array\n+        ctxt.assignCurrentValue(_updatedValue);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n        try {\n            ctxt = ctxt.createChildArrayContext(null);\n        } catch (JsonProcessingException e) {\n            throw new IllegalStateException(e);\n        }\n        p.clearCurrentToken();\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,11 +10,12 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n-        // If pointing to START_ARRAY, context should be that ARRAY\n+    if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+        try {\n+            ctxt = ctxt.createChildArrayContext(null);\n+        } catch (JsonProcessingException e) {\n+            throw new IllegalStateException(e);\n+        }\n         p.clearCurrentToken();\n-        // regardless, recovery context should be whatever context we have now,\n-        // with sole exception of pointing to a start marker, in which case it's\n-        // the parent\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    // added null check for _parser to avoid NPE\n    if (managedParser && (_parser != null) && _parser.isExpectedStartArrayToken()) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        _parser.clearCurrentToken();\n        // regardless, recovery context should be whatever context we have now,\n        // with sole exception of pointing to a start marker, in which case it's\n        // the parent\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,9 +10,10 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    // added null check for _parser to avoid NPE\n+    if (managedParser && (_parser != null) && _parser.isExpectedStartArrayToken()) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n+        _parser.clearCurrentToken();\n         // regardless, recovery context should be whatever context we have now,\n         // with sole exception of pointing to a start marker, in which case it's\n         // the parent\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    //fixed below\n    if (managedParser && (p != null) && p.hasToken(JsonToken.START_ARRAY)) {\n        _context = ctxt.childContext(null);\n        p.clearCurrentToken();\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,11 +10,9 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n-        // If pointing to START_ARRAY, context should be that ARRAY\n+    //fixed below\n+    if (managedParser && (p != null) && p.hasToken(JsonToken.START_ARRAY)) {\n+        _context = ctxt.childContext(null);\n         p.clearCurrentToken();\n-        // regardless, recovery context should be whatever context we have now,\n-        // with sole exception of pointing to a start marker, in which case it's\n-        // the parent\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"unchecked\")\nprotected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean managedParser, Object valueToUpdate) {\n    _type = type;\n    _parser = p;\n    _context = ctxt;\n    _deserializer = (JsonDeserializer<T>) deser;\n    _closeParser = managedParser;\n    if (valueToUpdate == null) {\n        _updatedValue = null;\n    } else {\n        _updatedValue = (T) valueToUpdate;\n    }\n    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() == JsonToken.START_ARRAY) {\n        // If pointing to START_ARRAY, context should be that ARRAY\n        _context = _context.createArrayContext();\n        // regardless, recovery context should be whatever context we have now,\n        // with sole exception of pointing to a start marker, in which case it's\n        // the parent\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n+++ com/fasterxml/jackson/databind/MappingIterator.java@MappingIterator\n@@ -10,9 +10,9 @@\n     } else {\n         _updatedValue = (T) valueToUpdate;\n     }\n-        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n+    if (managedParser && (p != null) && p.currentToken() == null && p.nextToken() == JsonToken.START_ARRAY) {\n         // If pointing to START_ARRAY, context should be that ARRAY\n-        p.clearCurrentToken();\n+        _context = _context.createArrayContext();\n         // regardless, recovery context should be whatever context we have now,\n         // with sole exception of pointing to a start marker, in which case it's\n         // the parent\n", "finish_reason": "stop", "valid": false, "num": 1}]