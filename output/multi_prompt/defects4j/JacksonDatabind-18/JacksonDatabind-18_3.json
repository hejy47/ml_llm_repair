[{"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.getCurrentToken();\n        if (t == null) {\n            // un-initialized or cleared; find next\n            t = _parser.nextToken();\n            if (t == null || t == JsonToken.END_ARRAY) {\n                JsonParser jp = _parser;\n                _parser = null;\n                if (_closeParser) {\n                    jp.close();\n                }\n                return false;\n            }\n        }\n        _hasNextChecked = true;\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,15 +1,12 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n         JsonToken t = _parser.getCurrentToken();\n-        _hasNextChecked = true;\n         if (t == null) {\n             // un-initialized or cleared; find next\n             t = _parser.nextToken();\n-            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n             if (t == null || t == JsonToken.END_ARRAY) {\n                 JsonParser jp = _parser;\n                 _parser = null;\n@@ -19,7 +16,7 @@\n                 return false;\n             }\n         }\n-        // fall through\n+        _hasNextChecked = true;\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.getCurrentToken();\n        if (t == null) {\n            t = _parser.nextToken();\n            if (t == null || t == JsonToken.END_ARRAY) {\n                JsonParser jp = _parser;\n                _parser = null;\n                if (_closeParser) {\n                    jp.close();\n                }\n                return false;\n            }\n        }\n        _hasNextChecked = true;\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,15 +1,11 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n         JsonToken t = _parser.getCurrentToken();\n-        _hasNextChecked = true;\n         if (t == null) {\n-            // un-initialized or cleared; find next\n             t = _parser.nextToken();\n-            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n             if (t == null || t == JsonToken.END_ARRAY) {\n                 JsonParser jp = _parser;\n                 _parser = null;\n@@ -19,7 +15,7 @@\n                 return false;\n             }\n         }\n-        // fall through\n+        _hasNextChecked = true;\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 7}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.nextToken();\n        _hasNextChecked = true;\n\n        if (t == null || t == JsonToken.END_ARRAY) {\n            JsonParser jp = _parser;\n            _parser = null;\n            if (_closeParser) {\n                jp.close();\n            }\n            return false;\n        }\n        // fall through\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,23 +1,18 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n-        JsonToken t = _parser.getCurrentToken();\n+        JsonToken t = _parser.nextToken();\n         _hasNextChecked = true;\n-        if (t == null) {\n-            // un-initialized or cleared; find next\n-            t = _parser.nextToken();\n-            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n-            if (t == null || t == JsonToken.END_ARRAY) {\n-                JsonParser jp = _parser;\n-                _parser = null;\n-                if (_closeParser) {\n-                    jp.close();\n-                }\n-                return false;\n+\n+        if (t == null || t == JsonToken.END_ARRAY) {\n+            JsonParser jp = _parser;\n+            _parser = null;\n+            if (_closeParser) {\n+                jp.close();\n             }\n+            return false;\n         }\n         // fall through\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.getCurrentToken();\n        _hasNextChecked = true;\n        if (t == null || t == JsonToken.END_ARRAY) {\n            // un-initialized or cleared; find next\n            t = _parser.nextToken();\n            if (t == null || t == JsonToken.END_ARRAY) {\n                JsonParser jp = _parser;\n                _parser = null;\n                if (_closeParser) {\n                    jp.close();\n                }\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,15 +1,13 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n         JsonToken t = _parser.getCurrentToken();\n         _hasNextChecked = true;\n-        if (t == null) {\n+        if (t == null || t == JsonToken.END_ARRAY) {\n             // un-initialized or cleared; find next\n             t = _parser.nextToken();\n-            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n             if (t == null || t == JsonToken.END_ARRAY) {\n                 JsonParser jp = _parser;\n                 _parser = null;\n@@ -19,7 +17,6 @@\n                 return false;\n             }\n         }\n-        // fall through\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.currentToken(); // changed from getCurrentToken()\n        _hasNextChecked = true;\n        if (t == null) {\n            // un-initialized or cleared; find next\n            t = _parser.nextToken();\n            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n            if (t == null || t == JsonToken.END_ARRAY) {\n                JsonParser jp = _parser;\n                _parser = null;\n                if (_closeParser) {\n                    jp.close();\n                }\n                return false;\n            }\n        }\n        // fall through\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,10 +1,9 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n-        JsonToken t = _parser.getCurrentToken();\n+        JsonToken t = _parser.currentToken(); // changed from getCurrentToken()\n         _hasNextChecked = true;\n         if (t == null) {\n             // un-initialized or cleared; find next\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.nextValue(); // changed from _parser.nextToken()\n        _hasNextChecked = true;\n        if (t == null) {\n            // un-initialized or cleared; find next\n            JsonParser jp = _parser;\n            _parser = null;\n            if (_closeParser) {\n                jp.close();\n            }\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,25 +1,19 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n-        JsonToken t = _parser.getCurrentToken();\n+        JsonToken t = _parser.nextValue(); // changed from _parser.nextToken()\n         _hasNextChecked = true;\n         if (t == null) {\n             // un-initialized or cleared; find next\n-            t = _parser.nextToken();\n-            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n-            if (t == null || t == JsonToken.END_ARRAY) {\n-                JsonParser jp = _parser;\n-                _parser = null;\n-                if (_closeParser) {\n-                    jp.close();\n-                }\n-                return false;\n+            JsonParser jp = _parser;\n+            _parser = null;\n+            if (_closeParser) {\n+                jp.close();\n             }\n+            return false;\n         }\n-        // fall through\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.getCurrentToken();\n        if (t == null) {\n            t = _parser.nextToken();\n            if (t == null || t == JsonToken.END_ARRAY) {\n                JsonParser jp = _parser;\n                _parser = null;\n                if (_closeParser) {\n                    jp.close();\n                }\n                return false;\n            }\n            _hasNextChecked = true;\n            return true;\n        }\n        _hasNextChecked = true;\n        return true;\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,15 +1,11 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n         JsonToken t = _parser.getCurrentToken();\n-        _hasNextChecked = true;\n         if (t == null) {\n-            // un-initialized or cleared; find next\n             t = _parser.nextToken();\n-            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n             if (t == null || t == JsonToken.END_ARRAY) {\n                 JsonParser jp = _parser;\n                 _parser = null;\n@@ -18,8 +14,11 @@\n                 }\n                 return false;\n             }\n+            _hasNextChecked = true;\n+            return true;\n         }\n-        // fall through\n+        _hasNextChecked = true;\n+        return true;\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.nextToken();\n        _hasNextChecked = true;\n        if (t == null || t == JsonToken.END_ARRAY) {\n            JsonParser jp = _parser;\n            _parser = null;\n            if (_closeParser) {\n                jp.close();\n            }\n            return false;\n        }\n        _parser = jp;\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,25 +1,19 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n-        JsonToken t = _parser.getCurrentToken();\n+        JsonToken t = _parser.nextToken();\n         _hasNextChecked = true;\n-        if (t == null) {\n-            // un-initialized or cleared; find next\n-            t = _parser.nextToken();\n-            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n-            if (t == null || t == JsonToken.END_ARRAY) {\n-                JsonParser jp = _parser;\n-                _parser = null;\n-                if (_closeParser) {\n-                    jp.close();\n-                }\n-                return false;\n+        if (t == null || t == JsonToken.END_ARRAY) {\n+            JsonParser jp = _parser;\n+            _parser = null;\n+            if (_closeParser) {\n+                jp.close();\n             }\n+            return false;\n         }\n-        // fall through\n+        _parser = jp;\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.getCurrentToken();\n        if (t == null) {\n            // un-initialized or cleared; find next\n            t = _parser.nextToken();\n            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n            if (t == null || t == JsonToken.END_ARRAY) {\n                JsonParser jp = _parser;\n                _parser = null;\n                if (_closeParser) {\n                    jp.close();\n                }\n                return false;\n            }\n        }\n        _hasNextChecked = true;\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,11 +1,9 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n         JsonToken t = _parser.getCurrentToken();\n-        _hasNextChecked = true;\n         if (t == null) {\n             // un-initialized or cleared; find next\n             t = _parser.nextToken();\n@@ -19,7 +17,7 @@\n                 return false;\n             }\n         }\n-        // fall through\n+        _hasNextChecked = true;\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.nextToken(); // get the next token first\n        if (t == null || t == JsonToken.END_ARRAY) { // check if it's the end\n            _hasNextChecked = true; // set the flag to true even if we don't clear the token\n            JsonParser jp = _parser;\n            _parser = null;\n            if (_closeParser) {\n                jp.close();\n            }\n            return false;\n        }\n        _parser = jp; // set the parser to current one\n        _hasNextChecked = true;\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,25 +1,20 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n-        JsonToken t = _parser.getCurrentToken();\n+        JsonToken t = _parser.nextToken(); // get the next token first\n+        if (t == null || t == JsonToken.END_ARRAY) { // check if it's the end\n+            _hasNextChecked = true; // set the flag to true even if we don't clear the token\n+            JsonParser jp = _parser;\n+            _parser = null;\n+            if (_closeParser) {\n+                jp.close();\n+            }\n+            return false;\n+        }\n+        _parser = jp; // set the parser to current one\n         _hasNextChecked = true;\n-        if (t == null) {\n-            // un-initialized or cleared; find next\n-            t = _parser.nextToken();\n-            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n-            if (t == null || t == JsonToken.END_ARRAY) {\n-                JsonParser jp = _parser;\n-                _parser = null;\n-                if (_closeParser) {\n-                    jp.close();\n-                }\n-                return false;\n-            }\n-        }\n-        // fall through\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.currentToken();\n        _hasNextChecked = true;\n        if (t == null) {\n            t = _parser.nextToken();\n            if (t == null || t == JsonToken.END_ARRAY) {\n                JsonParser jp = _parser;\n                _parser = null;\n                if (_closeParser) {\n                    jp.close();\n                }\n                return false;\n            } else {\n                _parser.clearCurrentToken();\n            }\n        }\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,15 +1,12 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n-        JsonToken t = _parser.getCurrentToken();\n+        JsonToken t = _parser.currentToken();\n         _hasNextChecked = true;\n         if (t == null) {\n-            // un-initialized or cleared; find next\n             t = _parser.nextToken();\n-            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n             if (t == null || t == JsonToken.END_ARRAY) {\n                 JsonParser jp = _parser;\n                 _parser = null;\n@@ -17,9 +14,10 @@\n                     jp.close();\n                 }\n                 return false;\n+            } else {\n+                _parser.clearCurrentToken();\n             }\n         }\n-        // fall through\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.nextToken();\n        _hasNextChecked = true;\n        if (t == null || t == JsonToken.END_ARRAY) {\n            JsonParser jp = _parser;\n            _parser = null;\n            if (_closeParser) {\n                jp.close();\n            }\n            return false;\n        }\n        // fall through\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,23 +1,17 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n-        JsonToken t = _parser.getCurrentToken();\n+        JsonToken t = _parser.nextToken();\n         _hasNextChecked = true;\n-        if (t == null) {\n-            // un-initialized or cleared; find next\n-            t = _parser.nextToken();\n-            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n-            if (t == null || t == JsonToken.END_ARRAY) {\n-                JsonParser jp = _parser;\n-                _parser = null;\n-                if (_closeParser) {\n-                    jp.close();\n-                }\n-                return false;\n+        if (t == null || t == JsonToken.END_ARRAY) {\n+            JsonParser jp = _parser;\n+            _parser = null;\n+            if (_closeParser) {\n+                jp.close();\n             }\n+            return false;\n         }\n         // fall through\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public boolean hasNextValue() throws IOException {\n    if (_parser == null) {\n        return false;\n    }\n    if (!_hasNextChecked) {\n        JsonToken t = _parser.getCurrentToken();\n        _hasNextChecked = true;\n        if (t == null) {\n            t = _parser.nextToken();\n            if (t == null || t == JsonToken.END_ARRAY) {\n                JsonParser jp = _parser;\n                _parser = null;\n                if (_closeParser) {\n                    jp.close();\n                }\n                return false;\n            }\n        }\n        else if (t == JsonToken.END_ARRAY) {\n            JsonParser jp = _parser;\n            _parser = null;\n            if (_closeParser) {\n                jp.close();\n            }\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n+++ com/fasterxml/jackson/databind/MappingIterator.java@hasNextValue\n@@ -1,15 +1,12 @@\n public boolean hasNextValue() throws IOException {\n     if (_parser == null) {\n         return false;\n-        // fall-through\n     }\n     if (!_hasNextChecked) {\n         JsonToken t = _parser.getCurrentToken();\n         _hasNextChecked = true;\n         if (t == null) {\n-            // un-initialized or cleared; find next\n             t = _parser.nextToken();\n-            // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).\n             if (t == null || t == JsonToken.END_ARRAY) {\n                 JsonParser jp = _parser;\n                 _parser = null;\n@@ -19,7 +16,14 @@\n                 return false;\n             }\n         }\n-        // fall through\n+        else if (t == JsonToken.END_ARRAY) {\n+            JsonParser jp = _parser;\n+            _parser = null;\n+            if (_closeParser) {\n+                jp.close();\n+            }\n+            return false;\n+        }\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]