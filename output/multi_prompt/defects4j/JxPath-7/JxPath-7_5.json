[{"output": "public Object computeValue(EvalContext context) {\n    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n    return l < r;\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l > r ? Boolean.TRUE : Boolean.FALSE;\n+    return l < r;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l >= r ? Boolean.TRUE : Boolean.FALSE;\n+    return l < r;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    return l < r;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l <= r ? Boolean.TRUE : Boolean.FALSE;\n+    return l < r;\n }\n", "finish_reason": "stop", "valid": false, "num": 8}, {"output": "public Object computeValue(EvalContext context) {\n    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n    return l < r ? Boolean.TRUE : Boolean.FALSE;\n}\n\n(Note: The original function was not actually buggy)", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l > r ? Boolean.TRUE : Boolean.FALSE;\n+    return l < r ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l >= r ? Boolean.TRUE : Boolean.FALSE;\n+    return l < r ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l <= r ? Boolean.TRUE : Boolean.FALSE;\n+    return l < r ? Boolean.TRUE : Boolean.FALSE;\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "public Object computeValue(EvalContext context) {\n    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n    if (Double.compare(l, r) < 0) {\n        return Boolean.TRUE;\n    } else {\n        return Boolean.FALSE;\n    }\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l > r ? Boolean.TRUE : Boolean.FALSE;\n+    if (Double.compare(l, r) < 0) {\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l >= r ? Boolean.TRUE : Boolean.FALSE;\n+    if (Double.compare(l, r) < 0) {\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    if (Double.compare(l, r) < 0) {\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l <= r ? Boolean.TRUE : Boolean.FALSE;\n+    if (Double.compare(l, r) < 0) {\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public Object computeValue(EvalContext context) {\n    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n    if (Double.isNaN(l) || Double.isNaN(r)) {\n        return Boolean.FALSE;\n    }\n    return l < r ? Boolean.TRUE : Boolean.FALSE;\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n@@ -1,5 +1,8 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l > r ? Boolean.TRUE : Boolean.FALSE;\n+    if (Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    }\n+    return l < r ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n@@ -1,5 +1,8 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l >= r ? Boolean.TRUE : Boolean.FALSE;\n+    if (Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    }\n+    return l < r ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n@@ -1,5 +1,8 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+    if (Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    }\n     return l < r ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n@@ -1,5 +1,8 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l <= r ? Boolean.TRUE : Boolean.FALSE;\n+    if (Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    }\n+    return l < r ? Boolean.TRUE : Boolean.FALSE;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Object computeValue(EvalContext context) {\n    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n    if(Double.isNaN(l) || Double.isNaN(r)) {\n        return Boolean.FALSE;\n    }\n    return l < r ? Boolean.TRUE : Boolean.FALSE;\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n@@ -1,5 +1,8 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l > r ? Boolean.TRUE : Boolean.FALSE;\n+    if(Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    }\n+    return l < r ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n@@ -1,5 +1,8 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l >= r ? Boolean.TRUE : Boolean.FALSE;\n+    if(Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    }\n+    return l < r ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n@@ -1,5 +1,8 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+    if(Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    }\n     return l < r ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n@@ -1,5 +1,8 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l <= r ? Boolean.TRUE : Boolean.FALSE;\n+    if(Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    }\n+    return l < r ? Boolean.TRUE : Boolean.FALSE;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Object computeValue(EvalContext context) {\n    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n    if(Double.compare(l,r)<0){\n        return Boolean.TRUE;\n    } else {\n        return Boolean.FALSE;\n    }\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l > r ? Boolean.TRUE : Boolean.FALSE;\n+    if(Double.compare(l,r)<0){\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l >= r ? Boolean.TRUE : Boolean.FALSE;\n+    if(Double.compare(l,r)<0){\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    if(Double.compare(l,r)<0){\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l <= r ? Boolean.TRUE : Boolean.FALSE;\n+    if(Double.compare(l,r)<0){\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Object computeValue(EvalContext context) {\n    Double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n    Double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n    return l.compareTo(r) < 0 ? Boolean.TRUE : Boolean.FALSE;\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n-    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n-    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l > r ? Boolean.TRUE : Boolean.FALSE;\n+    Double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+    Double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+    return l.compareTo(r) < 0 ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n-    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n-    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l >= r ? Boolean.TRUE : Boolean.FALSE;\n+    Double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+    Double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+    return l.compareTo(r) < 0 ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n-    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n-    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    Double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+    Double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+    return l.compareTo(r) < 0 ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n-    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n-    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l <= r ? Boolean.TRUE : Boolean.FALSE;\n+    Double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n+    Double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n+    return l.compareTo(r) < 0 ? Boolean.TRUE : Boolean.FALSE;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Object computeValue(EvalContext context) {\n    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n    if(l < r){\n        return Boolean.TRUE;\n    } else {\n        return Boolean.FALSE;\n    }\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l > r ? Boolean.TRUE : Boolean.FALSE;\n+    if(l < r){\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l >= r ? Boolean.TRUE : Boolean.FALSE;\n+    if(l < r){\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    if(l < r){\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l <= r ? Boolean.TRUE : Boolean.FALSE;\n+    if(l < r){\n+        return Boolean.TRUE;\n+    } else {\n+        return Boolean.FALSE;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Object computeValue(EvalContext context) {\n    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n    return l < r ? Boolean.TRUE : l == r ? Boolean.TRUE : Boolean.FALSE;\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l > r ? Boolean.TRUE : Boolean.FALSE;\n+    return l < r ? Boolean.TRUE : l == r ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l >= r ? Boolean.TRUE : Boolean.FALSE;\n+    return l < r ? Boolean.TRUE : l == r ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    return l < r ? Boolean.TRUE : l == r ? Boolean.TRUE : Boolean.FALSE;\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n@@ -1,5 +1,5 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l <= r ? Boolean.TRUE : Boolean.FALSE;\n+    return l < r ? Boolean.TRUE : l == r ? Boolean.TRUE : Boolean.FALSE;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public Object computeValue(EvalContext context) {\n    double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n    double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n    if (Double.isNaN(l) || Double.isNaN(r)) {\n        return Boolean.FALSE;\n    } else {\n        return l < r ? Boolean.TRUE : Boolean.FALSE;\n    }\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l > r ? Boolean.TRUE : Boolean.FALSE;\n+    if (Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    } else {\n+        return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l >= r ? Boolean.TRUE : Boolean.FALSE;\n+    if (Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    } else {\n+        return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    if (Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    } else {\n+        return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    }\n }\n--- org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n+++ org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java@computeValue\n@@ -1,5 +1,9 @@\n public Object computeValue(EvalContext context) {\n     double l = InfoSetUtil.doubleValue(args[0].computeValue(context));\n     double r = InfoSetUtil.doubleValue(args[1].computeValue(context));\n-    return l <= r ? Boolean.TRUE : Boolean.FALSE;\n+    if (Double.isNaN(l) || Double.isNaN(r)) {\n+        return Boolean.FALSE;\n+    } else {\n+        return l < r ? Boolean.TRUE : Boolean.FALSE;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]