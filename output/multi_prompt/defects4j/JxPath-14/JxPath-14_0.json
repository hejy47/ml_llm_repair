[{"output": "protected Object functionFloor(EvalContext context) {\n    assertArgCount(1);\n    double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));\n    return new Double(Math.floor(v)).intValue();\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n+++ org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n@@ -1,5 +1,5 @@\n protected Object functionFloor(EvalContext context) {\n     assertArgCount(1);\n     double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));\n-    return new Double(Math.floor(v));\n+    return new Double(Math.floor(v)).intValue();\n }\n", "finish_reason": "stop", "valid": false, "num": 6}, {"output": "protected Object functionFloor(EvalContext context) {\n    assertArgCount(1);\n    double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));\n    return Double.valueOf(Math.floor(v));\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n+++ org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n@@ -1,5 +1,5 @@\n protected Object functionFloor(EvalContext context) {\n     assertArgCount(1);\n     double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));\n-    return new Double(Math.floor(v));\n+    return Double.valueOf(Math.floor(v));\n }\n", "finish_reason": "stop", "valid": false, "num": 6}, {"output": "protected Object functionFloor(EvalContext context) {\n    assertArgCount(1);\n    double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));\n    return Math.floor(v);\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n+++ org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n@@ -1,5 +1,5 @@\n protected Object functionFloor(EvalContext context) {\n     assertArgCount(1);\n     double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));\n-    return new Double(Math.floor(v));\n+    return Math.floor(v);\n }\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "protected Object functionFloor(EvalContext context) {\n    assertArgCount(1);\n    double v = ((Number)getArg1().computeValue(context)).doubleValue();\n    return new Double(Math.floor(v));\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n+++ org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n@@ -1,5 +1,5 @@\n protected Object functionFloor(EvalContext context) {\n     assertArgCount(1);\n-    double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));\n+    double v = ((Number)getArg1().computeValue(context)).doubleValue();\n     return new Double(Math.floor(v));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected Object functionFloor(EvalContext context) {\n    assertArgCount(1);\n    double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));\n    return new Double(Math.floor(Math.abs(v)) * Math.signum(v));\n}\n\nNote: The fix ensures that negative values are properly rounded down to the nearest integer value.", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n+++ org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n@@ -1,5 +1,5 @@\n protected Object functionFloor(EvalContext context) {\n     assertArgCount(1);\n     double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));\n-    return new Double(Math.floor(v));\n+    return new Double(Math.floor(Math.abs(v)) * Math.signum(v));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected Object functionFloor(EvalContext context) {\n    assertArgCount(1);\n    double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));\n    if (Double.isNaN(v) || Double.isInfinite(v)) {\n        return Double.NaN;\n    }\n    return new Double(Math.floor(v));\n}", "diff": "--- org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n+++ org/apache/commons/jxpath/ri/compiler/CoreFunction.java@functionFloor\n@@ -1,5 +1,8 @@\n protected Object functionFloor(EvalContext context) {\n     assertArgCount(1);\n     double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));\n+    if (Double.isNaN(v) || Double.isInfinite(v)) {\n+        return Double.NaN;\n+    }\n     return new Double(Math.floor(v));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]