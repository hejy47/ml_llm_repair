[{"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (BigDecimal.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                } else {\n                    return prov.findValueSerializer(handledType(), property);\n                }\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,11 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                } else {\n+                    return prov.findValueSerializer(handledType(), property);\n+                }\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,12 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                } else {\n+                    return prov.findValueSerializer(handledType(), property);\n+                }\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (BigDecimal.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n                // if it's not a BigDecimal, fall through to default behavior\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,10 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                // if it's not a BigDecimal, fall through to default behavior\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,11 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                // if it's not a BigDecimal, fall through to default behavior\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (BigDecimal.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n                break;\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,10 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,11 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (BigDecimal.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,9 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,10 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // Need special handling for `BigDecimal` and `BigInteger`\n                if (BigDecimal.class.isAssignableFrom(handledType()) || BigInteger.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -4,8 +4,10 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                // Need special handling for `BigDecimal` and `BigInteger`\n+                if (BigDecimal.class.isAssignableFrom(handledType()) || BigInteger.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,10 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // Need special handling for `BigDecimal` and `BigInteger`\n+                if (BigDecimal.class.isAssignableFrom(handledType()) || BigInteger.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (handledType() == BigDecimal.class) {\n                    return ToStringSerializer.instance;\n                }\n                // fall through\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,10 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (handledType() == BigDecimal.class) {\n+                    return ToStringSerializer.instance;\n+                }\n+                // fall through\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,11 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (handledType() == BigDecimal.class) {\n+                    return ToStringSerializer.instance;\n+                }\n+                // fall through\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (BigDecimal.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n                return prov.findValueSerializer(handledType(), property);\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,10 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                return prov.findValueSerializer(handledType(), property);\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,11 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                return prov.findValueSerializer(handledType(), property);\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (handledType() == BigDecimal.class) {\n                    // Use `ToStringSerializer` for BigDecimal values\n                    return ToStringSerializer.instance;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,8 +5,13 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (handledType() == BigDecimal.class) {\n+                    // Use `ToStringSerializer` for BigDecimal values\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n+                break;\n         }\n     }\n     return this;\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,8 +4,14 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (handledType() == BigDecimal.class) {\n+                    // Use `ToStringSerializer` for BigDecimal values\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n+                break;\n         }\n     }\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (handledType() == BigDecimal.class) {\n                    return ToStringSerializer.instance;\n                }\n                return prov.findValueSerializer(String.class, property);\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,10 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (handledType() == BigDecimal.class) {\n+                    return ToStringSerializer.instance;\n+                }\n+                return prov.findValueSerializer(String.class, property);\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,11 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (handledType() == BigDecimal.class) {\n+                    return ToStringSerializer.instance;\n+                }\n+                return prov.findValueSerializer(String.class, property);\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (handledType() == BigDecimal.class) {\n                    return ToStringSerializer.instance;\n                }\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,9 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (handledType() == BigDecimal.class) {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,10 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (handledType() == BigDecimal.class) {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (handledType() == BigDecimal.class) {\n                    return ToStringSerializer.instance;\n                }\n                break;\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,10 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (handledType() == BigDecimal.class) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,11 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (handledType() == BigDecimal.class) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (Number.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,9 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (Number.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,10 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (Number.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (Number.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n                break;\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,7 +5,10 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (Number.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,11 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (Number.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                break;\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                // [databind#2264]: Need special handling for `BigDecimal`\n                if (BigDecimal.class.isAssignableFrom(handledType())) {\n                    return ToStringSerializer.instance;\n                }\n                // fallback to default implementation if not BigDecimal\n                break;\n            default:\n                // fallback to default implementation if not STRING\n                break;\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -5,8 +5,14 @@\n         switch(format.getShape()) {\n             case STRING:\n                 // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                // fallback to default implementation if not BigDecimal\n+                break;\n             default:\n+                // fallback to default implementation if not STRING\n+                break;\n         }\n     }\n     return this;\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,8 +4,15 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                // [databind#2264]: Need special handling for `BigDecimal`\n+                if (BigDecimal.class.isAssignableFrom(handledType())) {\n+                    return ToStringSerializer.instance;\n+                }\n+                // fallback to default implementation if not BigDecimal\n+                break;\n             default:\n+                // fallback to default implementation if not STRING\n+                break;\n         }\n     }\n     return this;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null) {\n        switch(format.getShape()) {\n            case STRING:\n                if (handledType() == BigDecimal.class) {\n                    // [databind#2264]: Need special handling for `BigDecimal`\n                    return ToStringSerializer.instance;\n                }\n            default:\n        }\n    }\n    return this;\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -4,8 +4,10 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n+                if (handledType() == BigDecimal.class) {\n+                    // [databind#2264]: Need special handling for `BigDecimal`\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -4,7 +4,10 @@\n     if (format != null) {\n         switch(format.getShape()) {\n             case STRING:\n-                return ToStringSerializer.instance;\n+                if (handledType() == BigDecimal.class) {\n+                    // [databind#2264]: Need special handling for `BigDecimal`\n+                    return ToStringSerializer.instance;\n+                }\n             default:\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n    if (format != null && format.getShape() == JsonFormat.Shape.STRING) {\n        // [databind#2264]: Need special handling for `BigDecimal`\n        return ToStringSerializer.instance;\n    } else {\n        return this;\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializer.java@createContextual\n@@ -1,13 +1,10 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n     JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n-    if (format != null) {\n-        switch(format.getShape()) {\n-            case STRING:\n-                // [databind#2264]: Need special handling for `BigDecimal`\n-                return ToStringSerializer.instance;\n-            default:\n-        }\n+    if (format != null && format.getShape() == JsonFormat.Shape.STRING) {\n+        // [databind#2264]: Need special handling for `BigDecimal`\n+        return ToStringSerializer.instance;\n+    } else {\n+        return this;\n     }\n-    return this;\n }\n--- com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/NumberSerializers.java@createContextual\n@@ -1,12 +1,10 @@\n @Override\n public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n     JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n-    if (format != null) {\n-        switch(format.getShape()) {\n-            case STRING:\n-                return ToStringSerializer.instance;\n-            default:\n-        }\n+    if (format != null && format.getShape() == JsonFormat.Shape.STRING) {\n+        // [databind#2264]: Need special handling for `BigDecimal`\n+        return ToStringSerializer.instance;\n+    } else {\n+        return this;\n     }\n-    return this;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]