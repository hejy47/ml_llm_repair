[{"output": "static Double getStringNumberValue(String rawJsString) {\n    String s = trimJsWhiteSpace(rawJsString);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.startsWith(\"0x\")) {\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.startsWith(\"0x\", 1)) {\n        return null;\n    }\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        // return Double.valueOf(ScriptRuntime.negativeZero);\n        return null;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -1,25 +1,20 @@\n static Double getStringNumberValue(String rawJsString) {\n-    // vertical tab is not always whitespace\n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n         return 0.0;\n     }\n-    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-        // Attempt to convert hex numbers.\n+    if (s.length() > 2 && s.startsWith(\"0x\")) {\n         try {\n             return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n         } catch (NumberFormatException e) {\n             return Double.NaN;\n         }\n     }\n-    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-        // hex numbers with explicit signs vary between browsers.\n+    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.startsWith(\"0x\", 1)) {\n         return null;\n     }\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n+        // return Double.valueOf(ScriptRuntime.negativeZero);\n         return null;\n     }\n     try {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        // hex numbers with explicit signs vary between browsers.\n        return Double.NaN;\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        return Double.NaN;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -15,12 +15,12 @@\n     }\n     if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n         // hex numbers with explicit signs vary between browsers.\n-        return null;\n+        return Double.NaN;\n     }\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n+        return Double.NaN;\n     }\n     try {\n         return Double.parseDouble(s);\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    String s = trimJsWhiteSpace(rawJsString);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        return Double.NaN; // return NaN instead of null\n    }\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) { // using equalsIgnoreCase\n        if (s.startsWith(\"-\")) {\n            return Double.NEGATIVE_INFINITY;\n        } else {\n            return Double.POSITIVE_INFINITY;\n        }\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -1,12 +1,9 @@\n static Double getStringNumberValue(String rawJsString) {\n-    // vertical tab is not always whitespace\n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n         return 0.0;\n     }\n     if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-        // Attempt to convert hex numbers.\n         try {\n             return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n         } catch (NumberFormatException e) {\n@@ -14,13 +11,14 @@\n         }\n     }\n     if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-        // hex numbers with explicit signs vary between browsers.\n-        return null;\n+        return Double.NaN; // return NaN instead of null\n     }\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) { // using equalsIgnoreCase\n+        if (s.startsWith(\"-\")) {\n+            return Double.NEGATIVE_INFINITY;\n+        } else {\n+            return Double.POSITIVE_INFINITY;\n+        }\n     }\n     try {\n         return Double.parseDouble(s);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    String s = trimJsWhiteSpace(rawJsString);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        return null;\n    }\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) { // Fix comparison of infinity value\n        return Double.POSITIVE_INFINITY;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -1,12 +1,9 @@\n static Double getStringNumberValue(String rawJsString) {\n-    // vertical tab is not always whitespace\n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n         return 0.0;\n     }\n     if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-        // Attempt to convert hex numbers.\n         try {\n             return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n         } catch (NumberFormatException e) {\n@@ -14,13 +11,10 @@\n         }\n     }\n     if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-        // hex numbers with explicit signs vary between browsers.\n         return null;\n     }\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) { // Fix comparison of infinity value\n+        return Double.POSITIVE_INFINITY;\n     }\n     try {\n         return Double.parseDouble(s);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    String s = trimJsWhiteSpace(rawJsString);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Only check for explicit sign if first character is a + or -\n        if (s.charAt(0) == '+' || s.charAt(0) == '-') {\n            try {\n                return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n            } catch (NumberFormatException e) {\n                return Double.NaN;\n            }\n        } else {\n            return null;\n        }\n    }\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        // Use Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY for consistency\n        if (s.charAt(0) == '-') {\n            return Double.NEGATIVE_INFINITY;\n        } else {\n            return Double.POSITIVE_INFINITY;\n        }\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -1,26 +1,34 @@\n static Double getStringNumberValue(String rawJsString) {\n-    // vertical tab is not always whitespace\n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n         return 0.0;\n     }\n     if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-        // Attempt to convert hex numbers.\n         try {\n             return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n         } catch (NumberFormatException e) {\n             return Double.NaN;\n         }\n     }\n-    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-        // hex numbers with explicit signs vary between browsers.\n-        return null;\n+    if (s.length() > 3 && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n+        // Only check for explicit sign if first character is a + or -\n+        if (s.charAt(0) == '+' || s.charAt(0) == '-') {\n+            try {\n+                return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n+            } catch (NumberFormatException e) {\n+                return Double.NaN;\n+            }\n+        } else {\n+            return null;\n+        }\n     }\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n+        // Use Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY for consistency\n+        if (s.charAt(0) == '-') {\n+            return Double.NEGATIVE_INFINITY;\n+        } else {\n+            return Double.POSITIVE_INFINITY;\n+        }\n     }\n     try {\n         return Double.parseDouble(s);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    // Fixing the conversion of hex numbers\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    // Fixing the check of hex numbers with explicit signs\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        // hex numbers with explicit signs vary between browsers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(3), 16) * (s.charAt(0) == '-' ? -1 : 1));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        if (s.charAt(0) == '-') {\n            return Double.NEGATIVE_INFINITY;\n        } else {\n            return Double.POSITIVE_INFINITY;\n        }\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch(NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -1,10 +1,10 @@\n static Double getStringNumberValue(String rawJsString) {\n     // vertical tab is not always whitespace\n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n         return 0.0;\n     }\n+    // Fixing the conversion of hex numbers\n     if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n         // Attempt to convert hex numbers.\n         try {\n@@ -13,18 +13,27 @@\n             return Double.NaN;\n         }\n     }\n+    // Fixing the check of hex numbers with explicit signs\n     if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n         // hex numbers with explicit signs vary between browsers.\n-        return null;\n+        try {\n+            return Double.valueOf(Integer.parseInt(s.substring(3), 16) * (s.charAt(0) == '-' ? -1 : 1));\n+        } catch (NumberFormatException e) {\n+            return Double.NaN;\n+        }\n     }\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n+        if (s.charAt(0) == '-') {\n+            return Double.NEGATIVE_INFINITY;\n+        } else {\n+            return Double.POSITIVE_INFINITY;\n+        }\n     }\n     try {\n         return Double.parseDouble(s);\n-    } catch (NumberFormatException e) {\n+    } catch(NumberFormatException e) {\n         return Double.NaN;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.startsWith(\"0x\")) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.startsWith(\"0x\")) {\n        // hex numbers with explicit signs vary between browsers.\n        return null;\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        return null;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -5,7 +5,7 @@\n     if (s.length() == 0) {\n         return 0.0;\n     }\n-    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n+    if (s.length() > 2 && s.startsWith(\"0x\")) {\n         // Attempt to convert hex numbers.\n         try {\n             return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n@@ -13,13 +13,13 @@\n             return Double.NaN;\n         }\n     }\n-    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n+    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.startsWith(\"0x\")) {\n         // hex numbers with explicit signs vary between browsers.\n         return null;\n     }\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n         return null;\n     }\n     try {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        // hex numbers with explicit signs vary between browsers.\n        return null;\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        return Double.POSITIVE_INFINITY;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -19,8 +19,8 @@\n     }\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n+        return Double.POSITIVE_INFINITY;\n     }\n     try {\n         return Double.parseDouble(s);\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        // hex numbers with explicit signs vary between browsers.\n        return null;\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\")) {\n        return Double.POSITIVE_INFINITY;\n    } else if (s.equalsIgnoreCase(\"-infinity\")) {\n        return Double.NEGATIVE_INFINITY;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -19,8 +19,10 @@\n     }\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\")) {\n+        return Double.POSITIVE_INFINITY;\n+    } else if (s.equalsIgnoreCase(\"-infinity\")) {\n+        return Double.NEGATIVE_INFINITY;\n     }\n     try {\n         return Double.parseDouble(s);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        // hex numbers with explicit signs vary between browsers.\n        return null;\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        return Double.valueOf(s);\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -19,8 +19,8 @@\n     }\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n+        return Double.valueOf(s);\n     }\n     try {\n         return Double.parseDouble(s);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))) {\n        // hex numbers with explicit signs vary between browsers.\n        return null;\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        return null;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -13,13 +13,13 @@\n             return Double.NaN;\n         }\n     }\n-    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n+    if (s.length() > 3 && (s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))) {\n         // hex numbers with explicit signs vary between browsers.\n         return null;\n     }\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n         return null;\n     }\n     try {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        // hex numbers with explicit signs vary between browsers.\n        return Double.NaN; // fix: return NaN instead of null\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) { // fix: use equalsIgnoreCase\n        return Double.NaN;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -15,12 +15,12 @@\n     }\n     if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n         // hex numbers with explicit signs vary between browsers.\n-        return null;\n+        return Double.NaN; // fix: return NaN instead of null\n     }\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) { // fix: use equalsIgnoreCase\n+        return Double.NaN;\n     }\n     try {\n         return Double.parseDouble(s);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    String s = trimJsWhiteSpace(rawJsString);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        return null;\n    }\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        return Double.POSITIVE_INFINITY;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -1,12 +1,9 @@\n static Double getStringNumberValue(String rawJsString) {\n-    // vertical tab is not always whitespace\n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n         return 0.0;\n     }\n     if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-        // Attempt to convert hex numbers.\n         try {\n             return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n         } catch (NumberFormatException e) {\n@@ -14,13 +11,10 @@\n         }\n     }\n     if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-        // hex numbers with explicit signs vary between browsers.\n         return null;\n     }\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n+        return Double.POSITIVE_INFINITY;\n     }\n     try {\n         return Double.parseDouble(s);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    String s = trimJsWhiteSpace(rawJsString);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        // hex numbers with explicit signs vary between browsers.\n        return Double.NaN;\n    }\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        return Double.valueOf(s.toLowerCase().equals(\"infinity\") ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -1,7 +1,5 @@\n static Double getStringNumberValue(String rawJsString) {\n-    // vertical tab is not always whitespace\n     String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n     if (s.length() == 0) {\n         return 0.0;\n     }\n@@ -15,12 +13,10 @@\n     }\n     if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n         // hex numbers with explicit signs vary between browsers.\n-        return null;\n+        return Double.NaN;\n     }\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n+        return Double.valueOf(s.toLowerCase().equals(\"infinity\") ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);\n     }\n     try {\n         return Double.parseDouble(s);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "static Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        // hex numbers with explicit signs vary between browsers.\n        return Double.NaN; // changed null to Double.NaN as null is not a valid return type for Double\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) { // changed .equals() to .equalsIgnoreCase() for case-insensitivity\n        return Double.parseDouble(s);\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.java@getStringNumberValue\n@@ -15,12 +15,12 @@\n     }\n     if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n         // hex numbers with explicit signs vary between browsers.\n-        return null;\n+        return Double.NaN; // changed null to Double.NaN as null is not a valid return type for Double\n     }\n     // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n     // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n+    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) { // changed .equals() to .equalsIgnoreCase() for case-insensitivity\n+        return Double.parseDouble(s);\n     }\n     try {\n         return Double.parseDouble(s);\n", "finish_reason": "stop", "valid": false, "num": 1}]