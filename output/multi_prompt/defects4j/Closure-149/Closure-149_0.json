[{"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(CheckLevel.ERROR, config.jscompError);\n    diagnosticGroups.setWarningLevel(CheckLevel.WARNING, config.jscompWarning);\n    diagnosticGroups.setWarningLevel(CheckLevel.OFF, config.jscompOff);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.manageClosureDependencies));\n    options.setLanguageIn(LanguageMode.ECMASCRIPT_2019);\n    options.setLanguageOut(LanguageMode.ECMASCRIPT_2019);\n    options.setIdeMode(config.jscompIdeMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,27 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(CheckLevel.ERROR, config.jscompError);\n+    diagnosticGroups.setWarningLevel(CheckLevel.WARNING, config.jscompWarning);\n+    diagnosticGroups.setWarningLevel(CheckLevel.OFF, config.jscompOff);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.manageClosureDependencies));\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT_2019);\n+    options.setLanguageOut(LanguageMode.ECMASCRIPT_2019);\n+    options.setIdeMode(config.jscompIdeMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.ERROR), config.jscompError);\n    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.WARNING), config.jscompWarning);\n    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.OFF), config.jscompOff);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(config.manageClosureDependencies);\n    options.setChecksOnly(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,21 +1,21 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.ERROR), config.jscompError);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.WARNING), config.jscompWarning);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.OFF), config.jscompOff);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setDependencyOptions(config.manageClosureDependencies);\n+    options.setChecksOnly(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.entryPoint));\n    options.setChecksOnly(config.checksOnly);\n    options.setLanguage(LanguageMode.fromString(config.languageIn), LanguageMode.fromString(config.languageOut));\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,26 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.entryPoint));\n+    options.setChecksOnly(config.checksOnly);\n+    options.setLanguage(LanguageMode.fromString(config.languageIn), LanguageMode.fromString(config.languageOut));\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(TypeCheck.WrongParameterOrder, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevel(TypeCheck.WrongArgumentCount, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevel(CheckSideEffects.NO_SIDE_EFFECTS, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevel(CheckSideEffects.INHERENTLY_DEPENDENT, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevel(CheckSideEffects.MISSING_CONST, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,30 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n+    diagnosticGroups.setWarningLevel(TypeCheck.WrongParameterOrder, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(TypeCheck.WrongArgumentCount, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(CheckSideEffects.NO_SIDE_EFFECTS, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(CheckSideEffects.INHERENTLY_DEPENDENT, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(CheckSideEffects.MISSING_CONST, CheckLevel.OFF);\n     diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n     diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n     diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.CHECK_ERROR, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.CHECK_WARNING, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.CHECK_ALMOST_ALWAYS, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.CHECK_SIDE_EFFECT_FREE_CODE, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.DEPRECATED_ANNOTATIONS, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.MISSING_PROVIDE, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.MISSING_REQUIRE, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.MISSING_SOURCEFILE, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.MODULE_LOAD, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.STRICT_MODULE_DEP_CHECK, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.UNDEFINED_NAMES, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.UNDEFINED_VARS, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(\n            DiagnosticGroups.UNKNOWN_DEFINES, CheckLevel.ERROR);\n\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputPath(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.variableMapInput = \n                VariableMap.load(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.propertyMapInput =\n                VariableMap.load(config.propertyMapInputFile);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,8 +1,34 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.CHECK_ERROR, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.CHECK_WARNING, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.CHECK_ALMOST_ALWAYS, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.CHECK_SIDE_EFFECT_FREE_CODE, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.DEPRECATED_ANNOTATIONS, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.MISSING_PROVIDE, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.MISSING_REQUIRE, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.MISSING_SOURCEFILE, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.MODULE_LOAD, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.STRICT_MODULE_DEP_CHECK, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.UNDEFINED_NAMES, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.UNDEFINED_VARS, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(\n+            DiagnosticGroups.UNKNOWN_DEFINES, CheckLevel.ERROR);\n+\n     createDefineReplacements(config.define, options);\n     options.manageClosureDependencies = config.manageClosureDependencies;\n     options.devMode = config.jscompDevMode;\n@@ -10,16 +36,18 @@\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputPath(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.variableMapInput = \n+                VariableMap.load(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.propertyMapInput =\n+                VariableMap.load(config.propertyMapInputFile);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap =\n                VariableMap.fromByteArray(FileUtils.readFileToByteArray(new File(config.variableMapInputFile)));\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap =\n                VariableMap.fromByteArray(FileUtils.readFileToByteArray(new File(config.propertyMapInputFile)));\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,27 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setDependencyOptions(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMap =\n+                VariableMap.fromByteArray(FileUtils.readFileToByteArray(new File(config.variableMapInputFile)));\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMap =\n+                VariableMap.fromByteArray(FileUtils.readFileToByteArray(new File(config.propertyMapInputFile)));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(JSC_MISSING_PROVIDE_WARNING, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevel(JSC_UNDEFINED_VARIABLE, CheckLevel.OFF);\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setInputVariableMap(VariableMap.load(config.variableMapInputFile));\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setInputPropertyMap(VariableMap.load(config.propertyMapInputFile));\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,27 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n+    diagnosticGroups.setWarningLevel(JSC_MISSING_PROVIDE_WARNING, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(JSC_UNDEFINED_VARIABLE, CheckLevel.OFF);\n     diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n     diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n     diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setInputVariableMap(VariableMap.load(config.variableMapInputFile));\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setInputPropertyMap(VariableMap.load(config.propertyMapInputFile));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputPath(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setInputVariableMap(VariableMap.load(config.variableMapInputFile));\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setInputPropertyMap(VariableMap.load(config.propertyMapInputFile));\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,25 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputPath(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setInputVariableMap(VariableMap.load(config.variableMapInputFile));\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setInputPropertyMap(VariableMap.load(config.propertyMapInputFile));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!config.jsOutputFile.isEmpty()) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (!config.createSourceMap.isEmpty()) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.isEmpty()) {\n        options.setInputVariableMapSerialized(VariableMap.load(config.variableMapInputFile).toBytes());\n    }\n    if (!config.propertyMapInputFile.isEmpty()) {\n        options.setInputPropertyMapSerialized(VariableMap.load(config.propertyMapInputFile).toBytes());\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,25 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    if (!config.jsOutputFile.isEmpty()) {\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (!config.createSourceMap.isEmpty()) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    if (!config.variableMapInputFile.isEmpty()) {\n+        options.setInputVariableMapSerialized(VariableMap.load(config.variableMapInputFile).toBytes());\n     }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+    if (!config.propertyMapInputFile.isEmpty()) {\n+        options.setInputPropertyMapSerialized(VariableMap.load(config.propertyMapInputFile).toBytes());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.ERROR), config.jscompError);\n    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.WARNING), config.jscompWarning);\n    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.OFF), config.jscompOff);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(config.manageClosureDependencies);\n    options.setLanguageIn(LanguageMode.ECMASCRIPT6_STRICT);\n    options.setLanguageOut(LanguageMode.ECMASCRIPT5_STRICT);\n    options.skipAllCompilerPasses();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputPath(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapFormat(SourceMap.Format.V3);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile, true).toByteArray();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = JSONFormat.parse(Files.asCharSource(new File(config.propertyMapInputFile), Charsets.UTF_8).read()).toByteArray();\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,26 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.ERROR), config.jscompError);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.WARNING), config.jscompWarning);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultSeverity(CheckLevel.OFF), config.jscompOff);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n-    options.setCodingConvention(config.codingConvention);\n+    options.setDependencyOptions(config.manageClosureDependencies);\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT6_STRICT);\n+    options.setLanguageOut(LanguageMode.ECMASCRIPT5_STRICT);\n+    options.skipAllCompilerPasses();\n+    if (config.jsOutputFile.length() > 0) {\n+        options.setOutputPath(config.jsOutputFile);\n+    }\n+    if (config.createSourceMap.length() > 0) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n+    }\n+    options.setSourceMapFormat(SourceMap.Format.V3);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n-    }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n-    }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile, true).toByteArray();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMapSerialized = JSONFormat.parse(Files.asCharSource(new File(config.propertyMapInputFile), Charsets.UTF_8).read()).toByteArray();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(JSError.getDefaultInstance(config.jscompError), CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSError.getDefaultInstance(config.jscompWarning), CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(JSError.getDefaultInstance(config.jscompOff), CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(DependencyOptions.newBuilder()\n            .setDependencySorting(config.dependencySorting)\n            .setMoocherDropping(config.moocherDropping)\n            .setEntryPoints(config.entryPoint)\n            .setDependencyPruning(config.dependencyPruning)\n            .setDependencyParsing(config.dependencyParsing)\n            .build());\n    options.setChecksOnly(config.checksOnly);\n    options.setDiagnosticGroups(diagnosticGroups);\n    options.setWarningsGuard(new CustomWarningsGuard(options.getWarningsGuard(),\n            config.warningsGuardCustom, config.warningsGuardDisabled));\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputPath(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setInputVariableMap(VariableMap.load(config.variableMapInputFile));\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setInputPropertyMap(VariableMap.load(config.propertyMapInputFile));\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,36 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultInstance(config.jscompError), CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultInstance(config.jscompWarning), CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(JSError.getDefaultInstance(config.jscompOff), CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setDependencyOptions(DependencyOptions.newBuilder()\n+            .setDependencySorting(config.dependencySorting)\n+            .setMoocherDropping(config.moocherDropping)\n+            .setEntryPoints(config.entryPoint)\n+            .setDependencyPruning(config.dependencyPruning)\n+            .setDependencyParsing(config.dependencyParsing)\n+            .build());\n+    options.setChecksOnly(config.checksOnly);\n+    options.setDiagnosticGroups(diagnosticGroups);\n+    options.setWarningsGuard(new CustomWarningsGuard(options.getWarningsGuard(),\n+            config.warningsGuardCustom, config.warningsGuardDisabled));\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputPath(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setInputVariableMap(VariableMap.load(config.variableMapInputFile));\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setInputPropertyMap(VariableMap.load(config.propertyMapInputFile));\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputPath(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.setVariableMapInputFileName(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.setPropertyMapInputFileName(config.propertyMapInputFile);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,25 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputPath(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.setVariableMapInputFileName(config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.setPropertyMapInputFileName(config.propertyMapInputFile);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(\n        DiagnosticGroups.CHECK_TYPES,\n        config.jscompError.equals(\"\") ? CheckLevel.ERROR : CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        config.jscompWarning.equals(\"\") ? CheckLevel.OFF : CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(\n        DiagnosticGroups.MISSING_PROVIDE,\n        config.jscompOff.equals(\"\") ? CheckLevel.OFF : CheckLevel.WARNING);\n\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n\n    if (!config.jsOutputFile.isEmpty()) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n\n    if (!config.createSourceMap.isEmpty()) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n\n    if (!config.variableMapOutputFile.isEmpty()) {\n        options.variableMapOutputPath = config.variableMapOutputFile;\n    }\n\n    if (!config.propertyMapOutputFile.isEmpty()) {\n        options.propertyMapOutputPath = config.propertyMapOutputFile;\n    }\n\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,24 +1,44 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(\n+        DiagnosticGroups.CHECK_TYPES,\n+        config.jscompError.equals(\"\") ? CheckLevel.ERROR : CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(\n+        DiagnosticGroups.GLOBAL_THIS,\n+        config.jscompWarning.equals(\"\") ? CheckLevel.OFF : CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(\n+        DiagnosticGroups.MISSING_PROVIDE,\n+        config.jscompOff.equals(\"\") ? CheckLevel.OFF : CheckLevel.WARNING);\n+\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+\n+    if (!config.jsOutputFile.isEmpty()) {\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+\n+    if (!config.createSourceMap.isEmpty()) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+\n+    if (!config.variableMapOutputFile.isEmpty()) {\n+        options.variableMapOutputPath = config.variableMapOutputFile;\n+    }\n+\n+    if (!config.propertyMapOutputFile.isEmpty()) {\n+        options.propertyMapOutputPath = config.propertyMapOutputFile;\n+    }\n+\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n+\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setProcessCommonJSModules(config.manageClosureDependencies);\n    options.setChecksOnly(config.checksOnly);\n    options.setDevMode(config.jscompDevMode);\n    options.setLanguageIn(config.languageIn);\n    options.setLanguageOut(config.languageOut);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,21 +1,24 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setProcessCommonJSModules(config.manageClosureDependencies);\n+    options.setChecksOnly(config.checksOnly);\n+    options.setDevMode(config.jscompDevMode);\n+    options.setLanguageIn(config.languageIn);\n+    options.setLanguageOut(config.languageOut);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(JSC_WARNING, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSC_TYPE_CHECK, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(JSC_DEBUGGER_STATEMENT_PRESENT, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.manageClosureDependencies));\n    options.setIdeMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryOutputLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!Strings.isNullOrEmpty(config.jsOutputFile)) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (!Strings.isNullOrEmpty(config.createSourceMap)) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!Strings.isNullOrEmpty(config.variableMapInputFile)) {\n        options.inputVariableMap =\n            parseVariableMap(config.variableMapInputFile, options.getVariableMapFormat());\n    }\n    if (!Strings.isNullOrEmpty(config.propertyMapInputFile)) {\n        options.inputPropertyMap =\n            parseVariableMap(config.propertyMapInputFile, options.getPropertyMapOutputFormat());\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,27 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(JSC_WARNING, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSC_TYPE_CHECK, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(JSC_DEBUGGER_STATEMENT_PRESENT, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setDependencyOptions(DependencyOptions.pruneForEntryPoints(config.manageClosureDependencies));\n+    options.setIdeMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n-    options.setSummaryDetailLevel(config.summaryDetailLevel);\n+    options.setSummaryOutputLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    if (!Strings.isNullOrEmpty(config.jsOutputFile)) {\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (!Strings.isNullOrEmpty(config.createSourceMap)) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    if (!Strings.isNullOrEmpty(config.variableMapInputFile)) {\n+        options.inputVariableMap =\n+            parseVariableMap(config.variableMapInputFile, options.getVariableMapFormat());\n     }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+    if (!Strings.isNullOrEmpty(config.propertyMapInputFile)) {\n+        options.inputPropertyMap =\n+            parseVariableMap(config.propertyMapInputFile, options.getPropertyMapOutputFormat());\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(JSError.getDefaultInstance(config.jscompError), CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSError.getDefaultInstance(config.jscompWarning), CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(JSError.getDefaultInstance(config.jscompOff), CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFeature(Feature.VARIABLES, true);\n        options.setOutputLocation(config.jsOutputFile, null);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n    }\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setOutputFeature(CompilerOptions.OutputFeature.GROUP_BY_FILES);\n        options.setGenerateExports(true);\n        options.setGeneratePseudoNames(true);\n        options.setClosurePass(true);\n        options.setGenerateMap(true);\n        options.setMapRoot(config.mapRoot);\n        options.setOutputFile(config.jsOutputFile);\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n        options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n        options.setSourceMapFormat(config.sourceMapFormat);\n    }\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,21 +1,28 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setDependencyOptions(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+        options.setOutputFeature(CompilerOptions.OutputFeature.GROUP_BY_FILES);\n+        options.setGenerateExports(true);\n+        options.setGeneratePseudoNames(true);\n+        options.setClosurePass(true);\n+        options.setGenerateMap(true);\n+        options.setMapRoot(config.mapRoot);\n+        options.setOutputFile(config.jsOutputFile);\n     }\n     if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+        options.setSourceMapOutputPath(config.createSourceMap);\n+        options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+        options.setSourceMapFormat(config.sourceMapFormat);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(JSC_GeneralCodingConvention, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSC_MissingSemicolon, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(JSC_Convention, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(JSC_Visibility, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setManageClosureDependencies(config.manageClosureDependencies);\n    options.setDevMode(config.jscompDevMode);\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!config.jsOutputFile.isEmpty()) {\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (!config.createSourceMap.isEmpty()) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n    }\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.isEmpty()) {\n        options.inputVariableMapSerialized =\n            VariableMap.load(config.variableMapInputFile, StandardCharsets.UTF_8).toByteArray();\n    }\n    if (!config.propertyMapInputFile.isEmpty()) {\n        options.inputPropertyMapSerialized =\n            VariableMap.load(config.propertyMapInputFile, StandardCharsets.UTF_8).toByteArray();\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,28 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(JSC_GeneralCodingConvention, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSC_MissingSemicolon, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(JSC_Convention, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(JSC_Visibility, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n+    options.setManageClosureDependencies(config.manageClosureDependencies);\n+    options.setDevMode(config.jscompDevMode);\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    if (!config.jsOutputFile.isEmpty()) {\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (!config.createSourceMap.isEmpty()) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+    if (!config.variableMapInputFile.isEmpty()) {\n+        options.inputVariableMapSerialized =\n+            VariableMap.load(config.variableMapInputFile, StandardCharsets.UTF_8).toByteArray();\n     }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+    if (!config.propertyMapInputFile.isEmpty()) {\n+        options.inputPropertyMapSerialized =\n+            VariableMap.load(config.propertyMapInputFile, StandardCharsets.UTF_8).toByteArray();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(config.manageClosureDependencies);\n    options.setLanguageIn(config.jscompDevMode ? CompilerOptions.LanguageMode.ECMASCRIPT_2020 : CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n    options.setCodingConvention(config.getCodingConvention());\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (!config.jsOutputFile.isEmpty()) {\n        options.setOutputFeature(CompilerOptions.OutputFeature.GENERATE_JS);\n        options.setJsOutputFile(config.jsOutputFile);\n    }\n    if (!config.createSourceMap.isEmpty()) {\n        options.setSourceMapOutputPath(config.createSourceMap);\n        options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n        options.setSourceMapFormat(CompilerOptions.SourceMapFormat.V3);\n    }\n    if (!config.variableMapInputFile.isEmpty()) {\n        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.isEmpty()) {\n        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,27 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n-    options.setCodingConvention(config.codingConvention);\n+    options.setDependencyOptions(config.manageClosureDependencies);\n+    options.setLanguageIn(config.jscompDevMode ? CompilerOptions.LanguageMode.ECMASCRIPT_2020 : CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n+    options.setCodingConvention(config.getCodingConvention());\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset = getInputCharset();\n-    if (config.jsOutputFile.length() > 0) {\n-        options.jsOutputFile = config.jsOutputFile;\n+    if (!config.jsOutputFile.isEmpty()) {\n+        options.setOutputFeature(CompilerOptions.OutputFeature.GENERATE_JS);\n+        options.setJsOutputFile(config.jsOutputFile);\n     }\n-    if (config.createSourceMap.length() > 0) {\n-        options.sourceMapOutputPath = config.createSourceMap;\n+    if (!config.createSourceMap.isEmpty()) {\n+        options.setSourceMapOutputPath(config.createSourceMap);\n+        options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n+        options.setSourceMapFormat(CompilerOptions.SourceMapFormat.V3);\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n-    if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+    if (!config.variableMapInputFile.isEmpty()) {\n+        options.inputVariableMap = VariableMap.load(config.variableMapInputFile);\n     }\n-    if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+    if (!config.propertyMapInputFile.isEmpty()) {\n+        options.inputPropertyMap = VariableMap.load(config.propertyMapInputFile);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.setDependencyOptions(DependencyOptions.pruneForCompile());\n    options.setLanguageIn(LanguageMode.ECMASCRIPT_2019);\n    options.setLanguageOut(LanguageMode.ECMASCRIPT_2019);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    options.setParseJsDocDocumentation(config.parseJsDocDocumentation);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.setGenerateExports(true);\n        options.setIdeMode(config.ideMode);\n        options.setModuleResolutionMode(config.moduleResolutionMode);\n        options.setModuleResolution(config.moduleResolution);\n        options.jsOutputFile = config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.setSourceMapFormat(SourceMap.Format.V3);\n        options.setPrettyPrint(true);\n        options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.setRewritePolyfills(false);\n    options.setProcessEcmaDependencies(true);\n    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMap = VariableMap.load(options, config.variableMapInputFile);\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMap = VariableMap.load(options, config.propertyMapInputFile);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@setRunOptions\n@@ -1,25 +1,34 @@\n final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    diagnosticGroups.setWarningLevel(config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevel(config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevel(config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n-    options.manageClosureDependencies = config.manageClosureDependencies;\n-    options.devMode = config.jscompDevMode;\n-    options.setCodingConvention(config.codingConvention);\n+    options.setDependencyOptions(DependencyOptions.pruneForCompile());\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT_2019);\n+    options.setLanguageOut(LanguageMode.ECMASCRIPT_2019);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n+    options.setParseJsDocDocumentation(config.parseJsDocDocumentation);\n     inputCharset = getInputCharset();\n     if (config.jsOutputFile.length() > 0) {\n+        options.setGenerateExports(true);\n+        options.setIdeMode(config.ideMode);\n+        options.setModuleResolutionMode(config.moduleResolutionMode);\n+        options.setModuleResolution(config.moduleResolution);\n         options.jsOutputFile = config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() > 0) {\n+        options.setSourceMapFormat(SourceMap.Format.V3);\n+        options.setPrettyPrint(true);\n         options.sourceMapOutputPath = config.createSourceMap;\n     }\n-    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n+    options.setRewritePolyfills(false);\n+    options.setProcessEcmaDependencies(true);\n+    options.setSourceMapDetailLevel(config.sourceMapDetailLevel);\n     if (!config.variableMapInputFile.equals(\"\")) {\n-        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n+        options.inputVariableMap = VariableMap.load(options, config.variableMapInputFile);\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n-        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n+        options.inputPropertyMap = VariableMap.load(options, config.propertyMapInputFile);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]