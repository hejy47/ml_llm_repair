[{"output": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0];\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1];\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() > 1 && (defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\'')) {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf('\\'') == -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                        // do nothing, it will be caught at the end\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n@@ -16,11 +16,11 @@\n                 } else if (defValue.equals(\"false\")) {\n                     options.setDefineToBooleanLiteral(defName, false);\n                     continue;\n-                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n+                } else if (defValue.length() > 1 && (defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\'')) {\n                     // If the value starts and ends with a single quote,\n                     // we assume that it's a string.\n                     String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n+                    if (maybeStringVal.indexOf('\\'') == -1) {\n                         options.setDefineToStringLiteral(defName, maybeStringVal);\n                         continue;\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0].trim(); // remove leading/trailing whitespaces\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1].trim(); // remove leading/trailing whitespaces\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                        // do nothing, it will be caught at the end\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n@@ -3,13 +3,13 @@\n     // Parse the definitions\n     for (String override : definitions) {\n         String[] assignment = override.split(\"=\", 2);\n-        String defName = assignment[0];\n+        String defName = assignment[0].trim(); // remove leading/trailing whitespaces\n         if (defName.length() > 0) {\n             if (assignment.length == 1) {\n                 options.setDefineToBooleanLiteral(defName, true);\n                 continue;\n             } else {\n-                String defValue = assignment[1];\n+                String defValue = assignment[1].trim(); // remove leading/trailing whitespaces\n                 if (defValue.equals(\"true\")) {\n                     options.setDefineToBooleanLiteral(defName, true);\n                     continue;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0];\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1];\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf('\\'') == -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                        // do nothing, it will be caught at the end\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n@@ -20,7 +20,7 @@\n                     // If the value starts and ends with a single quote,\n                     // we assume that it's a string.\n                     String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n+                    if (maybeStringVal.indexOf('\\'') == -1) {\n                         options.setDefineToStringLiteral(defName, maybeStringVal);\n                         continue;\n                     }\n", "finish_reason": "stop", "valid": false, "num": 7}, {"output": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0];\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1];\n\n                // Fix: added null check for defValue\n                if (defValue == null) {\n                    throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n                }\n\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                        // do nothing, it will be caught at the end\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n@@ -10,6 +10,12 @@\n                 continue;\n             } else {\n                 String defValue = assignment[1];\n+\n+                // Fix: added null check for defValue\n+                if (defValue == null) {\n+                    throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n+                }\n+\n                 if (defValue.equals(\"true\")) {\n                     options.setDefineToBooleanLiteral(defName, true);\n                     continue;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0];\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1];\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() > 2 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf('\\'') == -1) { // Fix: Use single quotes.\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                        // do nothing, it will be caught at the end\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n@@ -16,11 +16,11 @@\n                 } else if (defValue.equals(\"false\")) {\n                     options.setDefineToBooleanLiteral(defName, false);\n                     continue;\n-                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n+                } else if (defValue.length() > 2 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n                     // If the value starts and ends with a single quote,\n                     // we assume that it's a string.\n                     String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n+                    if (maybeStringVal.indexOf('\\'') == -1) { // Fix: Use single quotes.\n                         options.setDefineToStringLiteral(defName, maybeStringVal);\n                         continue;\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0];\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1];\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() > 1 && defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\'') {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf('\\'') == -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                        // do nothing, it will be caught at the end\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n@@ -16,11 +16,11 @@\n                 } else if (defValue.equals(\"false\")) {\n                     options.setDefineToBooleanLiteral(defName, false);\n                     continue;\n-                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n+                } else if (defValue.length() > 1 && defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\'') {\n                     // If the value starts and ends with a single quote,\n                     // we assume that it's a string.\n                     String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n+                    if (maybeStringVal.indexOf('\\'') == -1) {\n                         options.setDefineToStringLiteral(defName, maybeStringVal);\n                         continue;\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0];\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1];\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() > 2 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf('\\'') == -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                        // do nothing, it will be caught at the end\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n@@ -16,11 +16,11 @@\n                 } else if (defValue.equals(\"false\")) {\n                     options.setDefineToBooleanLiteral(defName, false);\n                     continue;\n-                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n+                } else if (defValue.length() > 2 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n                     // If the value starts and ends with a single quote,\n                     // we assume that it's a string.\n                     String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n+                    if (maybeStringVal.indexOf('\\'') == -1) {\n                         options.setDefineToStringLiteral(defName, maybeStringVal);\n                         continue;\n                     }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0];\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1];\n                 if (defValue.startsWith(\"'\") && defValue.endsWith(\"'\") && defValue.length() > 2) {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    options.setDefineToStringLiteral(defName, maybeStringVal);\n                    continue;\n                } else {\n                    try {\n                        double doubleVal = Double.parseDouble(defValue);\n                        if (Double.isNaN(doubleVal) || Double.isInfinite(doubleVal)) {\n                            throw new NumberFormatException();\n                        }\n                        options.setDefineToDoubleLiteral(defName, doubleVal);\n                        continue;\n                    } catch (NumberFormatException e) {\n                        if (defValue.equals(\"true\")) {\n                            options.setDefineToBooleanLiteral(defName, true);\n                            continue;\n                        } else if (defValue.equals(\"false\")) {\n                            options.setDefineToBooleanLiteral(defName, false);\n                            continue;\n                        }\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n@@ -10,26 +10,28 @@\n                 continue;\n             } else {\n                 String defValue = assignment[1];\n-                if (defValue.equals(\"true\")) {\n-                    options.setDefineToBooleanLiteral(defName, true);\n-                    continue;\n-                } else if (defValue.equals(\"false\")) {\n-                    options.setDefineToBooleanLiteral(defName, false);\n-                    continue;\n-                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n+                 if (defValue.startsWith(\"'\") && defValue.endsWith(\"'\") && defValue.length() > 2) {\n                     // If the value starts and ends with a single quote,\n                     // we assume that it's a string.\n                     String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n-                        options.setDefineToStringLiteral(defName, maybeStringVal);\n-                        continue;\n-                    }\n+                    options.setDefineToStringLiteral(defName, maybeStringVal);\n+                    continue;\n                 } else {\n                     try {\n-                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n+                        double doubleVal = Double.parseDouble(defValue);\n+                        if (Double.isNaN(doubleVal) || Double.isInfinite(doubleVal)) {\n+                            throw new NumberFormatException();\n+                        }\n+                        options.setDefineToDoubleLiteral(defName, doubleVal);\n                         continue;\n                     } catch (NumberFormatException e) {\n-                        // do nothing, it will be caught at the end\n+                        if (defValue.equals(\"true\")) {\n+                            options.setDefineToBooleanLiteral(defName, true);\n+                            continue;\n+                        } else if (defValue.equals(\"false\")) {\n+                            options.setDefineToBooleanLiteral(defName, false);\n+                            continue;\n+                        }\n                     }\n                 }\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0].trim(); // Remove leading/trailing whitespaces\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1].trim(); // Remove leading/trailing whitespaces\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf('\\'') == -1) { // Use single quotes inside string\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                        // do nothing, it will be caught at the end\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n@@ -3,13 +3,13 @@\n     // Parse the definitions\n     for (String override : definitions) {\n         String[] assignment = override.split(\"=\", 2);\n-        String defName = assignment[0];\n+        String defName = assignment[0].trim(); // Remove leading/trailing whitespaces\n         if (defName.length() > 0) {\n             if (assignment.length == 1) {\n                 options.setDefineToBooleanLiteral(defName, true);\n                 continue;\n             } else {\n-                String defValue = assignment[1];\n+                String defValue = assignment[1].trim(); // Remove leading/trailing whitespaces\n                 if (defValue.equals(\"true\")) {\n                     options.setDefineToBooleanLiteral(defName, true);\n                     continue;\n@@ -20,7 +20,7 @@\n                     // If the value starts and ends with a single quote,\n                     // we assume that it's a string.\n                     String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n+                    if (maybeStringVal.indexOf('\\'') == -1) { // Use single quotes inside string\n                         options.setDefineToStringLiteral(defName, maybeStringVal);\n                         continue;\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0];\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1];\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() > 2 && (defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\'')) {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf('\\'') == -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                        // do nothing, it will be caught at the end\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n@@ -16,11 +16,11 @@\n                 } else if (defValue.equals(\"false\")) {\n                     options.setDefineToBooleanLiteral(defName, false);\n                     continue;\n-                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n+                } else if (defValue.length() > 2 && (defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\'')) {\n                     // If the value starts and ends with a single quote,\n                     // we assume that it's a string.\n                     String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n+                    if (maybeStringVal.indexOf('\\'') == -1) {\n                         options.setDefineToStringLiteral(defName, maybeStringVal);\n                         continue;\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0];\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1];\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() > 1 && defValue.startsWith(\"'\") && defValue.endsWith(\"'\")) {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf('\\'') == -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                        // do nothing, it will be caught at the end\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "diff": "--- com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n+++ com/google/javascript/jscomp/AbstractCommandLineRunner.java@createDefineReplacements\n@@ -16,11 +16,11 @@\n                 } else if (defValue.equals(\"false\")) {\n                     options.setDefineToBooleanLiteral(defName, false);\n                     continue;\n-                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n+                } else if (defValue.length() > 1 && defValue.startsWith(\"'\") && defValue.endsWith(\"'\")) {\n                     // If the value starts and ends with a single quote,\n                     // we assume that it's a string.\n                     String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n-                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n+                    if (maybeStringVal.indexOf('\\'') == -1) {\n                         options.setDefineToStringLiteral(defName, maybeStringVal);\n                         continue;\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}]