[{"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset + 1 < inputEnd) {\n        int ch2 = (int) cbuf[inputOffset+1];\n        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n            ch = ((ch - SURR1_FIRST) << 10) + (ch2 - SURR2_FIRST) + 0x10000;\n            inputOffset += 2;\n            final byte[] bbuf = _outputBuffer;\n            bbuf[_outputTail++] = (byte) (0xf0 | (ch >> 18));\n            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 12) & 0x3f));\n            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n            bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n            return inputOffset;\n        }\n    }\n\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset+1;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,20 +1,22 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset + 1 < inputEnd) {\n+        int ch2 = (int) cbuf[inputOffset+1];\n+        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n+            ch = ((ch - SURR1_FIRST) << 10) + (ch2 - SURR2_FIRST) + 0x10000;\n+            inputOffset += 2;\n+            final byte[] bbuf = _outputBuffer;\n+            bbuf[_outputTail++] = (byte) (0xf0 | (ch >> 18));\n+            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 12) & 0x3f));\n+            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n+            bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n+            return inputOffset;\n         }\n     }\n+\n     final byte[] bbuf = _outputBuffer;\n     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n     bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n     bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n-    return inputOffset;\n+    return inputOffset+1;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset + 1 < inputEnd) {\n        int ch2 = cbuf[inputOffset + 1];\n        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n            // outside of BMP; encode as 4-byte sequence\n            ch = ((ch - SURR1_FIRST) << 10) + (ch2 - SURR2_FIRST) + 0x10000;\n            inputOffset += 2;\n            final byte[] bbuf = _outputBuffer;\n            bbuf[_outputTail++] = (byte) (0xF0 | (ch >> 18));\n            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 12) & 0x3F));\n            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n            bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n            return inputOffset;\n        }\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,15 +1,17 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset + 1 < inputEnd) {\n+        int ch2 = cbuf[inputOffset + 1];\n+        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n+            // outside of BMP; encode as 4-byte sequence\n+            ch = ((ch - SURR1_FIRST) << 10) + (ch2 - SURR2_FIRST) + 0x10000;\n+            inputOffset += 2;\n+            final byte[] bbuf = _outputBuffer;\n+            bbuf[_outputTail++] = (byte) (0xF0 | (ch >> 18));\n+            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 12) & 0x3F));\n+            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n+            bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n+            return inputOffset;\n         }\n     }\n     final byte[] bbuf = _outputBuffer;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset + 1 < inputEnd) {\n        int nextCh = cbuf[inputOffset + 1];\n        if (nextCh >= SURR2_FIRST && nextCh <= SURR2_LAST) {\n            // outside of BMP\n            _outputSurrogates(ch, nextCh);\n            return inputOffset + 2;\n        }\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset + 1;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,20 +1,16 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset + 1 < inputEnd) {\n+        int nextCh = cbuf[inputOffset + 1];\n+        if (nextCh >= SURR2_FIRST && nextCh <= SURR2_LAST) {\n+            // outside of BMP\n+            _outputSurrogates(ch, nextCh);\n+            return inputOffset + 2;\n         }\n     }\n     final byte[] bbuf = _outputBuffer;\n     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n     bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n     bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n-    return inputOffset;\n+    return inputOffset + 1;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset + 1 < inputEnd) {\n        // we have surrogate pair\n        ch = _convertSurrogate(ch, cbuf[inputOffset++]);\n    }\n    final byte[] bbuf = _outputBuffer;\n    if (ch < 0x80) { // one byte\n        bbuf[_outputTail++] = (byte) ch;\n    } else if (ch < 0x800) { // two bytes\n        bbuf[_outputTail++] = (byte) (0xc0 | (ch >> 6));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    } else {\n        // three bytes\n        bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    }\n    return inputOffset;\n}\n\nprivate int _convertSurrogate(int firstPart, int secondPart) throws IOException {\n    if (secondPart < SURR2_FIRST || secondPart > SURR2_LAST) {\n        _reportError(\"Incomplete surrogate pair\");\n    }\n    return 0x10000 + ((firstPart - SURR1_FIRST) << 10) + (secondPart - SURR2_FIRST);\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,20 +1,20 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n-        }\n+    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset + 1 < inputEnd) {\n+        // we have surrogate pair\n+        ch = _convertSurrogate(ch, cbuf[inputOffset++]);\n     }\n     final byte[] bbuf = _outputBuffer;\n-    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n-    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n-    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n+    if (ch < 0x80) { // one byte\n+        bbuf[_outputTail++] = (byte) ch;\n+    } else if (ch < 0x800) { // two bytes\n+        bbuf[_outputTail++] = (byte) (0xc0 | (ch >> 6));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n+    } else {\n+        // three bytes\n+        bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n+        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n+    }\n     return inputOffset;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset + 1 < inputEnd) {\n        int ch2 = cbuf[inputOffset + 1];\n        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n            // yes, outside of BMP\n            _outputSurrogates(ch, ch2);\n            return inputOffset + 2;\n        }\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset + 1;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,20 +1,16 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n+    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset + 1 < inputEnd) {\n+        int ch2 = cbuf[inputOffset + 1];\n+        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n             // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+            _outputSurrogates(ch, ch2);\n+            return inputOffset + 2;\n         }\n     }\n     final byte[] bbuf = _outputBuffer;\n     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n     bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n     bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n-    return inputOffset;\n+    return inputOffset + 1;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset < inputEnd) {\n        int next = (int) cbuf[inputOffset++];\n        if (next <= SURR2_LAST && next >= SURR2_FIRST) {\n            ch = ((ch - SURR1_FIRST) << 10) + (next - SURR2_FIRST) + 0x10000;\n        } else {\n            throw new IOException(\"Incomplete surrogate pair\");\n        }\n    }\n    final byte[] bbuf = _outputBuffer;\n    if (ch <= 0x7F) {\n        bbuf[_outputTail++] = (byte) ch;\n    } else if (ch <= 0x7FF) {\n        bbuf[_outputTail++] = (byte) (0xC0 | (ch >> 6));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n    } else if (ch <= 0xFFFF) {\n        bbuf[_outputTail++] = (byte) (0xE0 | (ch >> 12));\n        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n    } else {\n        bbuf[_outputTail++] = (byte) (0xF0 | (ch >> 18));\n        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 12) & 0x3F));\n        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n    }\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,20 +1,28 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset < inputEnd) {\n+        int next = (int) cbuf[inputOffset++];\n+        if (next <= SURR2_LAST && next >= SURR2_FIRST) {\n+            ch = ((ch - SURR1_FIRST) << 10) + (next - SURR2_FIRST) + 0x10000;\n+        } else {\n+            throw new IOException(\"Incomplete surrogate pair\");\n         }\n     }\n     final byte[] bbuf = _outputBuffer;\n-    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n-    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n-    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n+    if (ch <= 0x7F) {\n+        bbuf[_outputTail++] = (byte) ch;\n+    } else if (ch <= 0x7FF) {\n+        bbuf[_outputTail++] = (byte) (0xC0 | (ch >> 6));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n+    } else if (ch <= 0xFFFF) {\n+        bbuf[_outputTail++] = (byte) (0xE0 | (ch >> 12));\n+        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n+    } else {\n+        bbuf[_outputTail++] = (byte) (0xF0 | (ch >> 18));\n+        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 12) & 0x3F));\n+        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n+    }\n     return inputOffset;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset + 1 < inputEnd) {\n        int ch2 = cbuf[inputOffset + 1];\n        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n            // Outside of BMP; so combined pair of surrogates\n            ch = ((ch - SURR1_FIRST) << 10) + (ch2 - SURR2_FIRST) + 0x10000;\n            inputOffset += 2;\n            final byte[] bbuf = _outputBuffer;\n            bbuf[_outputTail++] = (byte) (0xF0 | (ch >> 18));\n            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 12) & 0x3F));\n            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n            bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n            return inputOffset;\n        \n        }\n    }\n    // Ok, then, usual 3-byte char it is:\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,17 +1,21 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset + 1 < inputEnd) {\n+        int ch2 = cbuf[inputOffset + 1];\n+        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n+            // Outside of BMP; so combined pair of surrogates\n+            ch = ((ch - SURR1_FIRST) << 10) + (ch2 - SURR2_FIRST) + 0x10000;\n+            inputOffset += 2;\n+            final byte[] bbuf = _outputBuffer;\n+            bbuf[_outputTail++] = (byte) (0xF0 | (ch >> 18));\n+            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 12) & 0x3F));\n+            bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n+            bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n+            return inputOffset;\n+        \n         }\n     }\n+    // Ok, then, usual 3-byte char it is:\n     final byte[] bbuf = _outputBuffer;\n     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n     bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset < inputEnd) {\n        // check if character is part of surrogate pair\n        char nextChar = cbuf[inputOffset];\n        if (Character.isSurrogatePair(ch, nextChar)) {\n            // combine surrogate pair to output 4 bytes\n            _outputSurrogates(ch, nextChar);\n            return inputOffset + 1;\n        }\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,14 +1,11 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n+    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset < inputEnd) {\n+        // check if character is part of surrogate pair\n+        char nextChar = cbuf[inputOffset];\n+        if (Character.isSurrogatePair(ch, nextChar)) {\n+            // combine surrogate pair to output 4 bytes\n+            _outputSurrogates(ch, nextChar);\n             return inputOffset + 1;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset < inputEnd) {\n        // yes, outside of BMP and we have second part\n        char c2 = cbuf[inputOffset];\n        if (Character.isSurrogatePair(ch, c2)) {\n            _outputSurrogates(ch, c2);\n            return inputOffset + 1;\n        }\n        _reportError(\"Incomplete surrogate pair: first char 0x\" + Integer.toHexString(ch));\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,16 +1,13 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n+    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset < inputEnd) {\n+        // yes, outside of BMP and we have second part\n+        char c2 = cbuf[inputOffset];\n+        if (Character.isSurrogatePair(ch, c2)) {\n+            _outputSurrogates(ch, c2);\n             return inputOffset + 1;\n         }\n+        _reportError(\"Incomplete surrogate pair: first char 0x\" + Integer.toHexString(ch));\n     }\n     final byte[] bbuf = _outputBuffer;\n     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset < inputEnd) {\n        // yes, outside of BMP and we have second part\n        char ch2 = cbuf[inputOffset];\n        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n            int codePoint = _decodeSurrogate(ch, ch2);\n            final byte[] bbuf = _outputBuffer;\n            bbuf[_outputTail++] = (byte) (0xf0 | (codePoint >> 18));\n            bbuf[_outputTail++] = (byte) (0x80 | ((codePoint >> 12) & 0x3f));\n            bbuf[_outputTail++] = (byte) (0x80 | ((codePoint >> 6) & 0x3f));\n            bbuf[_outputTail++] = (byte) (0x80 | (codePoint & 0x3f));\n            return inputOffset + 1;\n        } else {\n            // No second part (and thus no valid codepoint)\n            _reportError(\"Incomplete surrogate pair at end of String/JSON text\");\n        }\n    }\n    final byte[] bbuf = _outputBuffer;\n    if (ch <= 0x007F) {\n        bbuf[_outputTail++] = (byte) ch;\n    } else if (ch <= 0x07FF) {\n        bbuf[_outputTail++] = (byte) (0xC0 | (ch >> 6));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n    } else {\n        bbuf[_outputTail++] = (byte) (0xE0 | (ch >> 12));\n        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    }\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,20 +1,31 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n+    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset < inputEnd) {\n+        // yes, outside of BMP and we have second part\n+        char ch2 = cbuf[inputOffset];\n+        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n+            int codePoint = _decodeSurrogate(ch, ch2);\n+            final byte[] bbuf = _outputBuffer;\n+            bbuf[_outputTail++] = (byte) (0xf0 | (codePoint >> 18));\n+            bbuf[_outputTail++] = (byte) (0x80 | ((codePoint >> 12) & 0x3f));\n+            bbuf[_outputTail++] = (byte) (0x80 | ((codePoint >> 6) & 0x3f));\n+            bbuf[_outputTail++] = (byte) (0x80 | (codePoint & 0x3f));\n             return inputOffset + 1;\n+        } else {\n+            // No second part (and thus no valid codepoint)\n+            _reportError(\"Incomplete surrogate pair at end of String/JSON text\");\n         }\n     }\n     final byte[] bbuf = _outputBuffer;\n-    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n-    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n-    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n+    if (ch <= 0x007F) {\n+        bbuf[_outputTail++] = (byte) ch;\n+    } else if (ch <= 0x07FF) {\n+        bbuf[_outputTail++] = (byte) (0xC0 | (ch >> 6));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n+    } else {\n+        bbuf[_outputTail++] = (byte) (0xE0 | (ch >> 12));\n+        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n+    }\n     return inputOffset;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset + 1 < inputEnd) {\n        // yes, outside of BMP and second part is available\n        _outputSurrogates(ch, cbuf[inputOffset+1]);\n        return inputOffset + 2;\n    } else {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n        return inputOffset + 1;\n    }\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,20 +1,14 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n-        }\n+    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset + 1 < inputEnd) {\n+        // yes, outside of BMP and second part is available\n+        _outputSurrogates(ch, cbuf[inputOffset+1]);\n+        return inputOffset + 2;\n+    } else {\n+        final byte[] bbuf = _outputBuffer;\n+        bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n+        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n+        return inputOffset + 1;\n     }\n-    final byte[] bbuf = _outputBuffer;\n-    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n-    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n-    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n-    return inputOffset;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR2_LAST) {\n        // yes, outside of BMP\n        // Do we have second part?\n        if (inputOffset >= inputEnd || cbuf == null) {\n            // nope... have to note down\n            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n        } else {\n            _outputSurrogates(ch, cbuf[inputOffset]);\n            return inputOffset + 1;\n        }\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,13 +1,12 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n+    if (ch >= SURR1_FIRST && ch <= SURR2_LAST) {\n+        // yes, outside of BMP\n+        // Do we have second part?\n+        if (inputOffset >= inputEnd || cbuf == null) {\n+            // nope... have to note down\n+            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n+        } else {\n             _outputSurrogates(ch, cbuf[inputOffset]);\n             return inputOffset + 1;\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR2_LAST) {\n        // yes, outside of BMP\n        // Do we have second part?\n        if (inputOffset >= inputEnd || cbuf == null) {\n            // nope... have to note down\n            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n        } else {\n            _outputSurrogates(ch, cbuf[inputOffset]);\n            return inputOffset + 1;\n        }\n    } else {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    }\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,20 +1,20 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n+    if (ch >= SURR1_FIRST && ch <= SURR2_LAST) {\n+        // yes, outside of BMP\n+        // Do we have second part?\n+        if (inputOffset >= inputEnd || cbuf == null) {\n+            // nope... have to note down\n+            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n+        } else {\n             _outputSurrogates(ch, cbuf[inputOffset]);\n             return inputOffset + 1;\n         }\n+    } else {\n+        final byte[] bbuf = _outputBuffer;\n+        bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n+        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n     }\n-    final byte[] bbuf = _outputBuffer;\n-    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n-    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n-    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n     return inputOffset;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR1_LAST) {\n        // first part of a surrogate pair\n        if (inputOffset + 1 >= inputEnd || cbuf == null) {\n            // no second part available\n            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n        }\n        char next = cbuf[inputOffset + 1];\n        if (next < SURR2_FIRST || next > SURR2_LAST) {\n            // invalid second part\n            _reportError(\"Incomplete surrogate pair\");\n        }\n        _outputSurrogates(ch, next);\n        return inputOffset + 2;\n    } else if (ch >= SURR2_FIRST && ch <= SURR2_LAST) {\n        // second part of a surrogate pair not expected here\n        _reportError(\"Incomplete surrogate pair\");\n    }\n    // not a surrogate, output as three-byte sequence\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset + 1;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,20 +1,26 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+    if (ch >= SURR1_FIRST && ch <= SURR1_LAST) {\n+        // first part of a surrogate pair\n+        if (inputOffset + 1 >= inputEnd || cbuf == null) {\n+            // no second part available\n+            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n         }\n+        char next = cbuf[inputOffset + 1];\n+        if (next < SURR2_FIRST || next > SURR2_LAST) {\n+            // invalid second part\n+            _reportError(\"Incomplete surrogate pair\");\n+        }\n+        _outputSurrogates(ch, next);\n+        return inputOffset + 2;\n+    } else if (ch >= SURR2_FIRST && ch <= SURR2_LAST) {\n+        // second part of a surrogate pair not expected here\n+        _reportError(\"Incomplete surrogate pair\");\n     }\n+    // not a surrogate, output as three-byte sequence\n     final byte[] bbuf = _outputBuffer;\n     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n     bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n     bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n-    return inputOffset;\n+    return inputOffset + 1;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR1_LAST) {\n        // Do we have second part?\n        if (inputOffset + 1 >= inputEnd || cbuf == null) {\n            // nope... have to note down\n            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n        }\n        _outputSurrogates(ch, cbuf[inputOffset + 1]);\n        return inputOffset + 2;\n    } else if (ch >= SURR2_FIRST && ch <= SURR2_LAST) {\n        // Let's write the first part using recursion\n        if (inputOffset >= inputEnd || cbuf == null) {\n            _reportError(\"Missing low surrogate on writeRaw() input\");\n        }\n        char low = cbuf[inputOffset];\n        ++inputOffset;\n        if (low < SURR2_FIRST || low > SURR2_LAST) {\n            _reportError(\"Unexpected low surrogate character '\"+((int) low)+\"'\");\n        }\n        _outputSurrogates(ch, low);\n        return inputOffset;\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,16 +1,25 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+    if (ch >= SURR1_FIRST && ch <= SURR1_LAST) {\n+        // Do we have second part?\n+        if (inputOffset + 1 >= inputEnd || cbuf == null) {\n+            // nope... have to note down\n+            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n         }\n+        _outputSurrogates(ch, cbuf[inputOffset + 1]);\n+        return inputOffset + 2;\n+    } else if (ch >= SURR2_FIRST && ch <= SURR2_LAST) {\n+        // Let's write the first part using recursion\n+        if (inputOffset >= inputEnd || cbuf == null) {\n+            _reportError(\"Missing low surrogate on writeRaw() input\");\n+        }\n+        char low = cbuf[inputOffset];\n+        ++inputOffset;\n+        if (low < SURR2_FIRST || low > SURR2_LAST) {\n+            _reportError(\"Unexpected low surrogate character '\"+((int) low)+\"'\");\n+        }\n+        _outputSurrogates(ch, low);\n+        return inputOffset;\n     }\n     final byte[] bbuf = _outputBuffer;\n     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset < inputEnd && cbuf != null) {\n        // we have both parts of a surrogate\n        _outputSurrogates(ch, cbuf[inputOffset]);\n        return inputOffset + 1;\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,16 +1,9 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n-        }\n+    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset < inputEnd && cbuf != null) {\n+        // we have both parts of a surrogate\n+        _outputSurrogates(ch, cbuf[inputOffset]);\n+        return inputOffset + 1;\n     }\n     final byte[] bbuf = _outputBuffer;\n     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset < inputEnd) {\n        // yes, outside of BMP and we have second part\n        char ch2 = cbuf[inputOffset++];\n        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n            _outputSurrogates(ch, ch2);\n            return inputOffset;\n        }\n        _reportError(\"Unmatched surrogate pair\");\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,16 +1,13 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+    if (ch >= SURR1_FIRST && ch <= SURR2_LAST && inputOffset < inputEnd) {\n+        // yes, outside of BMP and we have second part\n+        char ch2 = cbuf[inputOffset++];\n+        if (ch2 >= SURR2_FIRST && ch2 <= SURR2_LAST) {\n+            _outputSurrogates(ch, ch2);\n+            return inputOffset;\n         }\n+        _reportError(\"Unmatched surrogate pair\");\n     }\n     final byte[] bbuf = _outputBuffer;\n     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR1_LAST) {\n        // Do we have second part?\n        if (inputOffset + 1 >= inputEnd || cbuf == null) {\n            // nope... have to note down\n            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n        }\n        _outputSurrogates(ch, cbuf[inputOffset + 1]);\n        return inputOffset + 2;\n    } else if (ch >= SURR2_FIRST && ch <= SURR2_LAST) {\n        // yes, outside of BMP\n        // Do we have second part?\n        if (inputOffset >= inputEnd || cbuf == null) {\n            // nope... have to note down\n            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n        }\n        _outputSurrogates(ch, cbuf[inputOffset]);\n        return inputOffset + 1;\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,16 +1,22 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+    if (ch >= SURR1_FIRST && ch <= SURR1_LAST) {\n+        // Do we have second part?\n+        if (inputOffset + 1 >= inputEnd || cbuf == null) {\n+            // nope... have to note down\n+            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n         }\n+        _outputSurrogates(ch, cbuf[inputOffset + 1]);\n+        return inputOffset + 2;\n+    } else if (ch >= SURR2_FIRST && ch <= SURR2_LAST) {\n+        // yes, outside of BMP\n+        // Do we have second part?\n+        if (inputOffset >= inputEnd || cbuf == null) {\n+            // nope... have to note down\n+            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n+        }\n+        _outputSurrogates(ch, cbuf[inputOffset]);\n+        return inputOffset + 1;\n     }\n     final byte[] bbuf = _outputBuffer;\n     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR1_LAST) {\n        // yes, first part of surrogate pair\n        // Do we have second part?\n        if (inputOffset + 1 >= inputEnd || cbuf == null) {\n            // nope... have to note down\n            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n        }\n        _outputSurrogates(ch, cbuf[inputOffset + 1]);\n        return inputOffset + 2;\n    } else if (ch >= SURR2_FIRST && ch <= SURR2_LAST) {\n        // yes, second part of surrogate pair\n        // first part should have been output already, let's verify\n        if (inputOffset == inputEnd || cbuf == null) {\n            // nope... missing first part\n            _reportError(\"Unmatched surrogate on writeRaw()\");\n        }\n        // output pair\n        _outputSurrogates(cbuf[inputOffset], ch);\n        return inputOffset + 1;\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,16 +1,24 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+    if (ch >= SURR1_FIRST && ch <= SURR1_LAST) {\n+        // yes, first part of surrogate pair\n+        // Do we have second part?\n+        if (inputOffset + 1 >= inputEnd || cbuf == null) {\n+            // nope... have to note down\n+            _reportError(\"Split surrogate on writeRaw() input (last character)\");\n         }\n+        _outputSurrogates(ch, cbuf[inputOffset + 1]);\n+        return inputOffset + 2;\n+    } else if (ch >= SURR2_FIRST && ch <= SURR2_LAST) {\n+        // yes, second part of surrogate pair\n+        // first part should have been output already, let's verify\n+        if (inputOffset == inputEnd || cbuf == null) {\n+            // nope... missing first part\n+            _reportError(\"Unmatched surrogate on writeRaw()\");\n+        }\n+        // output pair\n+        _outputSurrogates(cbuf[inputOffset], ch);\n+        return inputOffset + 1;\n     }\n     final byte[] bbuf = _outputBuffer;\n     bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset + 1 < inputEnd) {\n        int surr = cbuf[inputOffset++];\n        if (surr < SURR2_FIRST || surr > SURR2_LAST) {\n            _reportError(\"Incomplete surrogate pair\");\n        }\n        ch = 0x10000 + ((ch - SURR1_FIRST) << 10) + (surr - SURR2_FIRST);\n    }\n    final byte[] bbuf = _outputBuffer;\n    if (ch < 0x80) {\n        bbuf[_outputTail++] = (byte) ch;\n    } else if (ch < 0x800) {\n        bbuf[_outputTail++] = (byte) (0xC0 | (ch >> 6));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n    } else if (ch <= 0xFFFF) {\n        bbuf[_outputTail++] = (byte) (0xE0 | (ch >> 12));\n        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n    } else {\n        bbuf[_outputTail++] = (byte) (0xF0 | (ch >> 18));\n        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 12) & 0x3F));\n        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n    }\n    return inputOffset;\n}", "diff": "--- com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n+++ com/fasterxml/jackson/core/json/UTF8JsonGenerator.java@_outputRawMultiByteChar\n@@ -1,20 +1,27 @@\n private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n     // Let's handle surrogates gracefully (as 4 byte output):\n-    if (ch >= SURR1_FIRST) {\n-        if (ch <= SURR2_LAST) {\n-            // yes, outside of BMP\n-            // Do we have second part?\n-            if (inputOffset >= inputEnd || cbuf == null) {\n-                // nope... have to note down\n-                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n-            }\n-            _outputSurrogates(ch, cbuf[inputOffset]);\n-            return inputOffset + 1;\n+    if (ch >= SURR1_FIRST && ch <= SURR1_LAST && inputOffset + 1 < inputEnd) {\n+        int surr = cbuf[inputOffset++];\n+        if (surr < SURR2_FIRST || surr > SURR2_LAST) {\n+            _reportError(\"Incomplete surrogate pair\");\n         }\n+        ch = 0x10000 + ((ch - SURR1_FIRST) << 10) + (surr - SURR2_FIRST);\n     }\n     final byte[] bbuf = _outputBuffer;\n-    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n-    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n-    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n+    if (ch < 0x80) {\n+        bbuf[_outputTail++] = (byte) ch;\n+    } else if (ch < 0x800) {\n+        bbuf[_outputTail++] = (byte) (0xC0 | (ch >> 6));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n+    } else if (ch <= 0xFFFF) {\n+        bbuf[_outputTail++] = (byte) (0xE0 | (ch >> 12));\n+        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n+    } else {\n+        bbuf[_outputTail++] = (byte) (0xF0 | (ch >> 18));\n+        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 12) & 0x3F));\n+        bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3F));\n+        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3F));\n+    }\n     return inputOffset;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]