[{"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        // is this even legal call?\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n            return null;\n        }\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -10,10 +10,10 @@\n             return result;\n         }\n     } catch (Exception re) {\n+        if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+            return null;\n+        }\n         return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n-    }\n-    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-        return null;\n     }\n     return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,19 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        // is this even legal call?\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+            return null;\n+        }\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    return null;\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        return null;\n    } else {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -14,6 +13,7 @@\n     }\n     if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n         return null;\n+    } else {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n     }\n-    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,19 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    return null;\n+    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        return null;\n+    } else {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        if (!ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n            return null;\n        }\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -13,7 +12,9 @@\n         return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n     if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-        return null;\n+        if (!ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n+            return null;\n+        }\n     }\n     return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,20 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n+        }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n+    }\n+    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        if (!ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n+            return null;\n         }\n     }\n-    return null;\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        // is this even legal call?\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        if(ctxt.isEnabled(DeserializationFeature.FAIL_ON_WEIRD_KEY)){\n            return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n        }else{\n            return null;\n        }\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        return null;\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -10,7 +10,11 @@\n             return result;\n         }\n     } catch (Exception re) {\n-        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n+        if(ctxt.isEnabled(DeserializationFeature.FAIL_ON_WEIRD_KEY)){\n+            return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n+        }else{\n+            return null;\n+        }\n     }\n     if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n         return null;\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,23 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        // is this even legal call?\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n+        }\n+    } catch (Exception re) {\n+        if(ctxt.isEnabled(DeserializationFeature.FAIL_ON_WEIRD_KEY)){\n+            return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n+        }else{\n+            return null;\n         }\n     }\n-    return null;\n+    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        return null;\n+    }\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        return null;\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\", key);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -15,5 +14,5 @@\n     if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n         return null;\n     }\n-    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\", key);\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,18 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    return null;\n+    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        return null;\n+    }\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\", key);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return ctxt.handleUnexpectedToken(_keyClass, JsonToken.VALUE_NULL, ctxt.parser,\n                \"Cannot deserialize a null key\");\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        return null;\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,8 +1,8 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n-        return null;\n+        return ctxt.handleUnexpectedToken(_keyClass, JsonToken.VALUE_NULL, ctxt.parser,\n+                \"Cannot deserialize a null key\");\n     }\n     try {\n         Object result = _parse(key, ctxt);\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,19 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return ctxt.handleUnexpectedToken(_keyClass, JsonToken.VALUE_NULL, ctxt.parser,\n+                \"Cannot deserialize a null key\");\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    return null;\n+    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        return null;\n+    }\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum()) {\n        if (ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n            return null;\n        }\n        if (ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_ENUM_VALUES)) {\n            return ctxt.handleWeirdKey(_keyClass, key, \"unknown enum value\");\n        }\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -12,8 +11,13 @@\n     } catch (Exception re) {\n         return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-        return null;\n+    if (_keyClass.isEnum()) {\n+        if (ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+            return null;\n+        }\n+        if (ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_ENUM_VALUES)) {\n+            return ctxt.handleWeirdKey(_keyClass, key, \"unknown enum value\");\n+        }\n     }\n     return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,23 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n+        }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n+    }\n+    if (_keyClass.isEnum()) {\n+        if (ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+            return null;\n+        }\n+        if (ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_ENUM_VALUES)) {\n+            return ctxt.handleWeirdKey(_keyClass, key, \"unknown enum value\");\n         }\n     }\n-    return null;\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        // is this even legal call?\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        return null;\n    }\n    throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -15,5 +15,5 @@\n     if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n         return null;\n     }\n-    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n+    throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation\");\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,19 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        // is this even legal call?\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    return null;\n+    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        return null;\n+    }\n+    throw ctxt.weirdKeyException(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n            return null;\n        }\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -10,10 +9,10 @@\n             return result;\n         }\n     } catch (Exception re) {\n+        if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+            return null;\n+        }\n         return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n-    }\n-    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-        return null;\n     }\n     return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,18 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+            return null;\n+        }\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    return null;\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        // is this even legal call?\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        return null;\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -12,7 +12,7 @@\n     } catch (Exception re) {\n         return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+    if (_keyClass.isEnum() && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n         return null;\n     }\n     return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,19 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        // is this even legal call?\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    return null;\n+    if (_keyClass.isEnum() && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        return null;\n+    }\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig(). isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        if (!ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\n            // return null for unknown enum values if configured to ignore unknown properties\n            return null;\n        }\n        // otherwise, throw a JsonMappingException\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n    }\n    // return null for unknown enum values if not an enum\n    return null;\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -12,8 +11,14 @@\n     } catch (Exception re) {\n         return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-        return null;\n+    if (_keyClass.isEnum() && ctxt.getConfig(). isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        if (!ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\n+            // return null for unknown enum values if configured to ignore unknown properties\n+            return null;\n+        }\n+        // otherwise, throw a JsonMappingException\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n     }\n-    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n+    // return null for unknown enum values if not an enum\n+    return null;\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,24 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n+    if (_keyClass.isEnum() && ctxt.getConfig(). isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        if (!ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\n+            // return null for unknown enum values if configured to ignore unknown properties\n+            return null;\n+        }\n+        // otherwise, throw a JsonMappingException\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n+    }\n+    // return null for unknown enum values if not an enum\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception e) {\n        if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n            return null;\n        }\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", e.getMessage());\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -9,11 +8,11 @@\n         if (result != null) {\n             return result;\n         }\n-    } catch (Exception re) {\n-        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n-    }\n-    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-        return null;\n+    } catch (Exception e) {\n+        if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+            return null;\n+        }\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", e.getMessage());\n     }\n     return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,18 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception e) {\n+        if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+            return null;\n+        }\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", e.getMessage());\n     }\n-    return null;\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        return null;\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation of %s\", _keyClass.getSimpleName());\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -15,5 +14,5 @@\n     if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n         return null;\n     }\n-    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation of %s\", _keyClass.getSimpleName());\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,18 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    return null;\n+    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        return null;\n+    }\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation of %s\", _keyClass.getSimpleName());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null || key.isEmpty()) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        String message = (re.getMessage() != null) ? re.getMessage() : \"Unspecified error\";\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", message);\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        return null;\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n-    if (key == null) {\n-        // is this even legal call?\n+    if (key == null || key.isEmpty()) {\n         return null;\n     }\n     try {\n@@ -10,7 +9,8 @@\n             return result;\n         }\n     } catch (Exception re) {\n-        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n+        String message = (re.getMessage() != null) ? re.getMessage() : \"Unspecified error\";\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", message);\n     }\n     if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n         return null;\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,19 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null || key.isEmpty()) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        String message = (re.getMessage() != null) ? re.getMessage() : \"Unspecified error\";\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", message);\n     }\n-    return null;\n+    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        return null;\n+    }\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        return null;\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\", (Object[]) null);\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -15,5 +14,5 @@\n     if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n         return null;\n     }\n-    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\", (Object[]) null);\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,18 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    return null;\n+    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        return null;\n+    }\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\", (Object[]) null);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        return null;\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}\n\n# Changes Made\nThe only change made was replacing `ctxt.getConfig().isEnabled()` with `ctxt.isEnabled()` to ensure compatibility with newer versions of Jackson.", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -12,7 +11,7 @@\n     } catch (Exception re) {\n         return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+    if (_keyClass.isEnum() && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n         return null;\n     }\n     return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,18 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    return null;\n+    if (_keyClass.isEnum() && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        return null;\n+    }\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        // is this even legal call?\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        if (!ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n            return null;\n        }\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -13,7 +13,9 @@\n         return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n     if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-        return null;\n+        if (!ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n+            return null;\n+        }\n     }\n     return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,21 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        // is this even legal call?\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n+        }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n+    }\n+    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        if (!ctxt.getConfig().isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n+            return null;\n         }\n     }\n-    return null;\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\n            throw ctxt.weirdKeyException(_keyClass, key, \"not one of the values accepted for Enum class\");\n        }\n        return null;\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -13,6 +12,9 @@\n         return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n     if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\n+            throw ctxt.weirdKeyException(_keyClass, key, \"not one of the values accepted for Enum class\");\n+        }\n         return null;\n     }\n     return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,21 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n-            }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n         }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    return null;\n+    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+        if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\n+            throw ctxt.weirdKeyException(_keyClass, key, \"not one of the values accepted for Enum class\");\n+        }\n+        return null;\n+    }\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum()) {\n        try {\n            Object value = Enum.valueOf((Class<Enum>)_keyClass, key);\n            return value;\n        } catch (IllegalArgumentException e) {\n            if (ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n                return null;\n            } else {\n                return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n            }\n        }\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "diff": "--- com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n+++ com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java@deserializeKey\n@@ -1,7 +1,6 @@\n @Override\n public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n     if (key == null) {\n-        // is this even legal call?\n         return null;\n     }\n     try {\n@@ -12,8 +11,17 @@\n     } catch (Exception re) {\n         return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n     }\n-    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-        return null;\n+    if (_keyClass.isEnum()) {\n+        try {\n+            Object value = Enum.valueOf((Class<Enum>)_keyClass, key);\n+            return value;\n+        } catch (IllegalArgumentException e) {\n+            if (ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+                return null;\n+            } else {\n+                return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n+            }\n+        }\n     }\n     return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n--- com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n+++ com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java@findFactoryMethod\n@@ -1,18 +1,27 @@\n @Override\n-public Method findFactoryMethod(Class<?>... expArgTypes) {\n-    // So, of all single-arg static methods:\n-    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n-        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n-        if (isFactoryMethod(am)) {\n-            // And must take one of expected arg types (or supertype)\n-            Class<?> actualArgType = am.getRawParameterType(0);\n-            for (Class<?> expArgType : expArgTypes) {\n-                // And one that matches what we would pass in\n-                if (actualArgType.isAssignableFrom(expArgType)) {\n-                    return am.getAnnotated();\n-                }\n+public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n+    if (key == null) {\n+        return null;\n+    }\n+    try {\n+        Object result = _parse(key, ctxt);\n+        if (result != null) {\n+            return result;\n+        }\n+    } catch (Exception re) {\n+        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n+    }\n+    if (_keyClass.isEnum()) {\n+        try {\n+            Object value = Enum.valueOf((Class<Enum>)_keyClass, key);\n+            return value;\n+        } catch (IllegalArgumentException e) {\n+            if (ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+                return null;\n+            } else {\n+                return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n             }\n         }\n     }\n-    return null;\n+    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]