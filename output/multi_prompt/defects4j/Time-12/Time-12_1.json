[{"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    int year = date.getYear();\n    if (year < 0) {\n        year = Math.abs(year) - 1;\n        year = -year;\n    }\n    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,10 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    int year = date.getYear();\n+    if (year < 0) {\n+        year = Math.abs(year) - 1;\n+        year = -year;\n+    }\n+    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,13 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    int year = date.getYear();\n+    if (year < 0) {\n+        year = Math.abs(year) - 1;\n+        year = -year;\n+    }\n+    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    int year = date.getYear();\n    if (year < 0) {\n        year = Math.abs(year) - 1;\n        year = -year; // flip sign back to negative\n    }\n    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,10 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    int year = date.getYear();\n+    if (year < 0) {\n+        year = Math.abs(year) - 1;\n+        year = -year; // flip sign back to negative\n+    }\n+    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,13 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    int year = date.getYear();\n+    if (year < 0) {\n+        year = Math.abs(year) - 1;\n+        year = -year; // flip sign back to negative\n+    }\n+    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC by adding 1 to year and making it negative\n    int year = date.getYear();\n    if (year < 0) {\n        year = -(year - 1);\n        year = -year;\n    }\n    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -3,6 +3,11 @@\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n-    // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    // handle years in era BC by adding 1 to year and making it negative\n+    int year = date.getYear();\n+    if (year < 0) {\n+        year = -(year - 1);\n+        year = -year;\n+    }\n+    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,13 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n-    // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    // handle years in era BC by adding 1 to year and making it negative\n+    int year = date.getYear();\n+    if (year < 0) {\n+        year = -(year - 1);\n+        year = -year;\n+    }\n+    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    //add the remaining arguments(hours, minutes, seconds and milliseconds) in the constructor\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,6 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n+    //add the remaining arguments(hours, minutes, seconds and milliseconds) in the constructor\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,9 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n+    //add the remaining arguments(hours, minutes, seconds and milliseconds) in the constructor\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    LocalDate localDate;\n    if (date.getYear() < 0) {\n        localDate = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate() - 1);\n    } else {\n        localDate = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n    }\n    return localDate;\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,11 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    LocalDate localDate;\n+    if (date.getYear() < 0) {\n+        localDate = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate() - 1);\n+    } else {\n+        localDate = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    }\n+    return localDate;\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,14 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    LocalDate localDate;\n+    if (date.getYear() < 0) {\n+        localDate = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate() - 1);\n+    } else {\n+        localDate = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    }\n+    return localDate;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    int year = date.getYear() + 1900;\n    if (year <= 0) {\n        year = 1 - year;\n    }\n    return new LocalDate(year, date.getMonth() + 1, date.getDate());\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,9 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    int year = date.getYear() + 1900;\n+    if (year <= 0) {\n+        year = 1 - year;\n+    }\n+    return new LocalDate(year, date.getMonth() + 1, date.getDate());\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,12 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    int year = date.getYear() + 1900;\n+    if (year <= 0) {\n+        year = 1 - year;\n+    }\n+    return new LocalDate(year, date.getMonth() + 1, date.getDate());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    if (date.getYear() < 0) {\n        return new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n    }\n    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,8 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n+    if (date.getYear() < 0) {\n+        return new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n+    }\n     return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,11 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    if (date.getYear() < 0) {\n+        return new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n+    }\n+    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    int year = date.getYear() < 0 ? Math.abs(date.getYear()) - 1 : date.getYear() + 1900;\n    return new LocalDate(year, date.getMonth() + 1, date.getDate());\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,6 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    int year = date.getYear() < 0 ? Math.abs(date.getYear()) - 1 : date.getYear() + 1900;\n+    return new LocalDate(year, date.getMonth() + 1, date.getDate());\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,9 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    int year = date.getYear() < 0 ? Math.abs(date.getYear()) - 1 : date.getYear() + 1900;\n+    return new LocalDate(year, date.getMonth() + 1, date.getDate());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    return LocalDate.of(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,5 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    return LocalDate.of(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,8 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    return LocalDate.of(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    LocalDate ld;\n    // handle years in era BC\n    if (date.getYear() > 0) {\n        ld = new LocalDate(date.getYear(), date.getMonth() + 1, date.getDate());\n    } else {\n        ld = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withEra(DateTimeConstants.BC);\n    }\n    return ld;\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -3,6 +3,12 @@\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n+    LocalDate ld;\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    if (date.getYear() > 0) {\n+        ld = new LocalDate(date.getYear(), date.getMonth() + 1, date.getDate());\n+    } else {\n+        ld = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withEra(DateTimeConstants.BC);\n+    }\n+    return ld;\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,14 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n+    LocalDate ld;\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    if (date.getYear() > 0) {\n+        ld = new LocalDate(date.getYear(), date.getMonth() + 1, date.getDate());\n+    } else {\n+        ld = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withEra(DateTimeConstants.BC);\n+    }\n+    return ld;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    if (date.getYear() < 0) {\n        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withYearOfEra(0);\n    }\n    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,8 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n+    if (date.getYear() < 0) {\n+        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withYearOfEra(0);\n+    }\n     return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,11 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    if (date.getYear() < 0) {\n+        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withYearOfEra(0);\n+    }\n+    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings({\"deprecation\", \"java.time.zone\"})\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    return LocalDate.of(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    LocalDate localDate;\n    if(date.getYear() < 0) {\n        localDate = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n        localDate = localDate.minusYears(1);\n    } else {\n        localDate = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n    }\n    return localDate;\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,12 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    LocalDate localDate;\n+    if(date.getYear() < 0) {\n+        localDate = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n+        localDate = localDate.minusYears(1);\n+    } else {\n+        localDate = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    }\n+    return localDate;\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,15 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    LocalDate localDate;\n+    if(date.getYear() < 0) {\n+        localDate = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n+        localDate = localDate.minusYears(1);\n+    } else {\n+        localDate = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    }\n+    return localDate;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    if (date.getYear() < 0) {\n        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withChronology(ISOChronology.getInstanceUTC());\n    } else {\n        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n    }\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,9 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    if (date.getYear() < 0) {\n+        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withChronology(ISOChronology.getInstanceUTC());\n+    } else {\n+        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    }\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,12 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    if (date.getYear() < 0) {\n+        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withChronology(ISOChronology.getInstanceUTC());\n+    } else {\n+        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    LocalDate convertedDate;\n    if (date.getYear() < 0) {\n        convertedDate = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n        convertedDate = convertedDate.withYear(date.getYear() + 1);\n    } else {\n        convertedDate = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n    }\n    return convertedDate;\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,12 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    LocalDate convertedDate;\n+    if (date.getYear() < 0) {\n+        convertedDate = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n+        convertedDate = convertedDate.withYear(date.getYear() + 1);\n+    } else {\n+        convertedDate = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    }\n+    return convertedDate;\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,15 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    LocalDate convertedDate;\n+    if (date.getYear() < 0) {\n+        convertedDate = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n+        convertedDate = convertedDate.withYear(date.getYear() + 1);\n+    } else {\n+        convertedDate = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    }\n+    return convertedDate;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    int year = date.getYear();\n    if (year < 0) {\n        year = Math.abs(year) - 1;\n        year *= -1;\n    }\n    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,10 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    int year = date.getYear();\n+    if (year < 0) {\n+        year = Math.abs(year) - 1;\n+        year *= -1;\n+    }\n+    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,13 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    int year = date.getYear();\n+    if (year < 0) {\n+        year = Math.abs(year) - 1;\n+        year *= -1;\n+    }\n+    return new LocalDate(year + 1900, date.getMonth() + 1, date.getDate());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    if (date.getYear() < 0) {\n        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withYearOfEra(0);\n    } else {\n        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n    }\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,9 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    if (date.getYear() < 0) {\n+        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withYearOfEra(0);\n+    } else {\n+        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    }\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,12 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    if (date.getYear() < 0) {\n+        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate()).withYearOfEra(0);\n+    } else {\n+        return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    LocalDate ld;\n    if(date.getYear() >= 0){\n        ld = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n    } else {\n        ld = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n    }\n    return ld;\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,11 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    LocalDate ld;\n+    if(date.getYear() >= 0){\n+        ld = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    } else {\n+        ld = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n+    }\n+    return ld;\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,14 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    LocalDate ld;\n+    if(date.getYear() >= 0){\n+        ld = new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    } else {\n+        ld = new LocalDate(date.getYear() + 1901, date.getMonth() + 1, date.getDate());\n+    }\n+    return ld;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@SuppressWarnings(\"deprecation\")\npublic static LocalDate fromDateFields(Date date) {\n    if (date == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    // handle years in era BC\n    LocalDate localDate;\n    if (date.getYear() < 0) {\n        localDate = new LocalDate(date.getYear()+1901, date.getMonth()+1, date.getDate());\n        localDate = localDate.minusYears(1);\n    } else {\n        localDate = new LocalDate(date.getYear()+1900, date.getMonth()+1, date.getDate());\n    }\n    return localDate;\n}", "diff": "--- org/joda/time/LocalDate.java@fromDateFields\n+++ org/joda/time/LocalDate.java@fromDateFields\n@@ -4,5 +4,12 @@\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDate(date.getYear() + 1900, date.getMonth() + 1, date.getDate());\n+    LocalDate localDate;\n+    if (date.getYear() < 0) {\n+        localDate = new LocalDate(date.getYear()+1901, date.getMonth()+1, date.getDate());\n+        localDate = localDate.minusYears(1);\n+    } else {\n+        localDate = new LocalDate(date.getYear()+1900, date.getMonth()+1, date.getDate());\n+    }\n+    return localDate;\n }\n--- org/joda/time/LocalDateTime.java@fromDateFields\n+++ org/joda/time/LocalDateTime.java@fromDateFields\n@@ -1,8 +1,15 @@\n @SuppressWarnings(\"deprecation\")\n-public static LocalDateTime fromDateFields(Date date) {\n+public static LocalDate fromDateFields(Date date) {\n     if (date == null) {\n         throw new IllegalArgumentException(\"The date must not be null\");\n     }\n     // handle years in era BC\n-    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);\n+    LocalDate localDate;\n+    if (date.getYear() < 0) {\n+        localDate = new LocalDate(date.getYear()+1901, date.getMonth()+1, date.getDate());\n+        localDate = localDate.minusYears(1);\n+    } else {\n+        localDate = new LocalDate(date.getYear()+1900, date.getMonth()+1, date.getDate());\n+    }\n+    return localDate;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]