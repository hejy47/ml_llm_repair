[{"output": "//-----------------------------------------------------------------------\npublic static LocalDate fromCalendarFields(Calendar calendar) {\n    if (calendar == null) {\n        throw new IllegalArgumentException(\"The calendar must not be null\");\n    }\n    int year = calendar.get(Calendar.YEAR);\n    int month = calendar.get(Calendar.MONTH) + 1;\n    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);\n    return LocalDate.of(year, month, dayOfMonth);\n}", "diff": "--- org/joda/time/LocalDate.java@fromCalendarFields\n+++ org/joda/time/LocalDate.java@fromCalendarFields\n@@ -3,6 +3,8 @@\n     if (calendar == null) {\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n-    int yearOfEra = calendar.get(Calendar.YEAR);\n-    return new LocalDate(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));\n+    int year = calendar.get(Calendar.YEAR);\n+    int month = calendar.get(Calendar.MONTH) + 1;\n+    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);\n+    return LocalDate.of(year, month, dayOfMonth);\n }\n--- org/joda/time/LocalDateTime.java@fromCalendarFields\n+++ org/joda/time/LocalDateTime.java@fromCalendarFields\n@@ -1,8 +1,10 @@\n //-----------------------------------------------------------------------\n-public static LocalDateTime fromCalendarFields(Calendar calendar) {\n+public static LocalDate fromCalendarFields(Calendar calendar) {\n     if (calendar == null) {\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n-    int yearOfEra = calendar.get(Calendar.YEAR);\n-    return new LocalDateTime(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND), calendar.get(Calendar.MILLISECOND));\n+    int year = calendar.get(Calendar.YEAR);\n+    int month = calendar.get(Calendar.MONTH) + 1;\n+    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);\n+    return LocalDate.of(year, month, dayOfMonth);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "//-----------------------------------------------------------------------\npublic static LocalDate fromCalendarFields(Calendar calendar) {\n    if (calendar == null) {\n        throw new IllegalArgumentException(\"The calendar must not be null\");\n    }\n    int year = calendar.get(Calendar.YEAR);\n    int month = calendar.get(Calendar.MONTH) + 1;\n    int day = calendar.get(Calendar.DAY_OF_MONTH);\n    return LocalDate.of(year, month, day);\n}", "diff": "--- org/joda/time/LocalDate.java@fromCalendarFields\n+++ org/joda/time/LocalDate.java@fromCalendarFields\n@@ -3,6 +3,8 @@\n     if (calendar == null) {\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n-    int yearOfEra = calendar.get(Calendar.YEAR);\n-    return new LocalDate(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));\n+    int year = calendar.get(Calendar.YEAR);\n+    int month = calendar.get(Calendar.MONTH) + 1;\n+    int day = calendar.get(Calendar.DAY_OF_MONTH);\n+    return LocalDate.of(year, month, day);\n }\n--- org/joda/time/LocalDateTime.java@fromCalendarFields\n+++ org/joda/time/LocalDateTime.java@fromCalendarFields\n@@ -1,8 +1,10 @@\n //-----------------------------------------------------------------------\n-public static LocalDateTime fromCalendarFields(Calendar calendar) {\n+public static LocalDate fromCalendarFields(Calendar calendar) {\n     if (calendar == null) {\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n-    int yearOfEra = calendar.get(Calendar.YEAR);\n-    return new LocalDateTime(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND), calendar.get(Calendar.MILLISECOND));\n+    int year = calendar.get(Calendar.YEAR);\n+    int month = calendar.get(Calendar.MONTH) + 1;\n+    int day = calendar.get(Calendar.DAY_OF_MONTH);\n+    return LocalDate.of(year, month, day);\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "//-----------------------------------------------------------------------\npublic static LocalDate fromCalendarFields(Calendar calendar) {\n    if (calendar == null) {\n        throw new IllegalArgumentException(\"The calendar must not be null\");\n    }\n    int yearOfEra = calendar.get(Calendar.YEAR);\n    int month = calendar.get(Calendar.MONTH) + 1;\n    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);\n    return LocalDate.of(yearOfEra, month, dayOfMonth);\n}", "diff": "--- org/joda/time/LocalDate.java@fromCalendarFields\n+++ org/joda/time/LocalDate.java@fromCalendarFields\n@@ -4,5 +4,7 @@\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n     int yearOfEra = calendar.get(Calendar.YEAR);\n-    return new LocalDate(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));\n+    int month = calendar.get(Calendar.MONTH) + 1;\n+    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);\n+    return LocalDate.of(yearOfEra, month, dayOfMonth);\n }\n--- org/joda/time/LocalDateTime.java@fromCalendarFields\n+++ org/joda/time/LocalDateTime.java@fromCalendarFields\n@@ -1,8 +1,10 @@\n //-----------------------------------------------------------------------\n-public static LocalDateTime fromCalendarFields(Calendar calendar) {\n+public static LocalDate fromCalendarFields(Calendar calendar) {\n     if (calendar == null) {\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n     int yearOfEra = calendar.get(Calendar.YEAR);\n-    return new LocalDateTime(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND), calendar.get(Calendar.MILLISECOND));\n+    int month = calendar.get(Calendar.MONTH) + 1;\n+    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);\n+    return LocalDate.of(yearOfEra, month, dayOfMonth);\n }\n", "finish_reason": "stop", "valid": false, "num": 6}, {"output": "//-----------------------------------------------------------------------\npublic static LocalDate fromCalendarFields(Calendar calendar) {\n    if (calendar == null) {\n        throw new IllegalArgumentException(\"The calendar must not be null\");\n    }\n    int yearOfEra = calendar.get(Calendar.ERA) == GregorianCalendar.AD\n                    ? calendar.get(Calendar.YEAR) : 1 - calendar.get(Calendar.YEAR);\n    return new LocalDate(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));\n}", "diff": "--- org/joda/time/LocalDate.java@fromCalendarFields\n+++ org/joda/time/LocalDate.java@fromCalendarFields\n@@ -3,6 +3,7 @@\n     if (calendar == null) {\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n-    int yearOfEra = calendar.get(Calendar.YEAR);\n+    int yearOfEra = calendar.get(Calendar.ERA) == GregorianCalendar.AD\n+                    ? calendar.get(Calendar.YEAR) : 1 - calendar.get(Calendar.YEAR);\n     return new LocalDate(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));\n }\n--- org/joda/time/LocalDateTime.java@fromCalendarFields\n+++ org/joda/time/LocalDateTime.java@fromCalendarFields\n@@ -1,8 +1,9 @@\n //-----------------------------------------------------------------------\n-public static LocalDateTime fromCalendarFields(Calendar calendar) {\n+public static LocalDate fromCalendarFields(Calendar calendar) {\n     if (calendar == null) {\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n-    int yearOfEra = calendar.get(Calendar.YEAR);\n-    return new LocalDateTime(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND), calendar.get(Calendar.MILLISECOND));\n+    int yearOfEra = calendar.get(Calendar.ERA) == GregorianCalendar.AD\n+                    ? calendar.get(Calendar.YEAR) : 1 - calendar.get(Calendar.YEAR);\n+    return new LocalDate(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static LocalDate fromCalendarFields(Calendar calendar) {\n    if (calendar == null) {\n        throw new IllegalArgumentException(\"The calendar must not be null\");\n    }\n    int year = calendar.get(Calendar.YEAR);\n    int month = calendar.get(Calendar.MONTH) + 1; // adjust for 0-indexed months\n    int day = calendar.get(Calendar.DAY_OF_MONTH);\n    return LocalDate.of(year, month, day);\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "//-----------------------------------------------------------------------\npublic static LocalDate fromCalendarFields(Calendar calendar) {\n    if (calendar == null) {\n        throw new IllegalArgumentException(\"The calendar must not be null\");\n    }\n    int yearOfEra = calendar.get(Calendar.YEAR);\n    int month = calendar.get(Calendar.MONTH) + 1;\n    int day = calendar.get(Calendar.DAY_OF_MONTH);\n    return LocalDate.of(yearOfEra, month, day);\n}", "diff": "--- org/joda/time/LocalDate.java@fromCalendarFields\n+++ org/joda/time/LocalDate.java@fromCalendarFields\n@@ -4,5 +4,7 @@\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n     int yearOfEra = calendar.get(Calendar.YEAR);\n-    return new LocalDate(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));\n+    int month = calendar.get(Calendar.MONTH) + 1;\n+    int day = calendar.get(Calendar.DAY_OF_MONTH);\n+    return LocalDate.of(yearOfEra, month, day);\n }\n--- org/joda/time/LocalDateTime.java@fromCalendarFields\n+++ org/joda/time/LocalDateTime.java@fromCalendarFields\n@@ -1,8 +1,10 @@\n //-----------------------------------------------------------------------\n-public static LocalDateTime fromCalendarFields(Calendar calendar) {\n+public static LocalDate fromCalendarFields(Calendar calendar) {\n     if (calendar == null) {\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n     int yearOfEra = calendar.get(Calendar.YEAR);\n-    return new LocalDateTime(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND), calendar.get(Calendar.MILLISECOND));\n+    int month = calendar.get(Calendar.MONTH) + 1;\n+    int day = calendar.get(Calendar.DAY_OF_MONTH);\n+    return LocalDate.of(yearOfEra, month, day);\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "//-----------------------------------------------------------------------\npublic static LocalDate fromCalendarFields(Calendar calendar) {\n    if (calendar == null) {\n        throw new IllegalArgumentException(\"The calendar must not be null\");\n    }\n    int yearOfEra = calendar.get(Calendar.YEAR);\n    int monthOfYear = calendar.get(Calendar.MONTH);\n    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);\n    return new LocalDate(yearOfEra, monthOfYear + 1, dayOfMonth);\n}", "diff": "--- org/joda/time/LocalDate.java@fromCalendarFields\n+++ org/joda/time/LocalDate.java@fromCalendarFields\n@@ -4,5 +4,7 @@\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n     int yearOfEra = calendar.get(Calendar.YEAR);\n-    return new LocalDate(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));\n+    int monthOfYear = calendar.get(Calendar.MONTH);\n+    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);\n+    return new LocalDate(yearOfEra, monthOfYear + 1, dayOfMonth);\n }\n--- org/joda/time/LocalDateTime.java@fromCalendarFields\n+++ org/joda/time/LocalDateTime.java@fromCalendarFields\n@@ -1,8 +1,10 @@\n //-----------------------------------------------------------------------\n-public static LocalDateTime fromCalendarFields(Calendar calendar) {\n+public static LocalDate fromCalendarFields(Calendar calendar) {\n     if (calendar == null) {\n         throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n     int yearOfEra = calendar.get(Calendar.YEAR);\n-    return new LocalDateTime(yearOfEra, calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND), calendar.get(Calendar.MILLISECOND));\n+    int monthOfYear = calendar.get(Calendar.MONTH);\n+    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);\n+    return new LocalDate(yearOfEra, monthOfYear + 1, dayOfMonth);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]