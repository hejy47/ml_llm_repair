[{"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        long longResult = peekedLong; // Fixed: Store long result before casting\n        result = (int) longResult;\n        if (longResult != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -5,8 +5,9 @@\n     }\n     int result;\n     if (p == PEEKED_LONG) {\n-        result = (int) peekedLong;\n-        if (peekedLong != result) {\n+        long longResult = peekedLong; // Fixed: Store long result before casting\n+        result = (int) longResult;\n+        if (longResult != result) {\n             // Make sure no precision was lost casting to 'int'.\n             throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (Double.isNaN(asDouble) || Double.isInfinite(asDouble) || (double) result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -34,7 +34,7 @@\n     // don't catch this NumberFormatException.\n     double asDouble = Double.parseDouble(peekedString);\n     result = (int) asDouble;\n-    if (result != asDouble) {\n+    if (Double.isNaN(asDouble) || Double.isInfinite(asDouble) || (double) result != asDouble) {\n         // Make sure no precision was lost casting to 'int'.\n         throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peekedString = null; // move this line here\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -21,6 +21,7 @@\n         peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n         try {\n             result = Integer.parseInt(peekedString);\n+            peekedString = null; // move this line here\n             peeked = PEEKED_NONE;\n             pathIndices[stackSize - 1]++;\n             return result;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (Double.isInfinite(asDouble) || Double.isNaN(asDouble) || result != asDouble) {\n        // Throw NumberFormatException if conversion to int is not possible.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -34,8 +34,8 @@\n     // don't catch this NumberFormatException.\n     double asDouble = Double.parseDouble(peekedString);\n     result = (int) asDouble;\n-    if (result != asDouble) {\n-        // Make sure no precision was lost casting to 'int'.\n+    if (Double.isInfinite(asDouble) || Double.isNaN(asDouble) || result != asDouble) {\n+        // Throw NumberFormatException if conversion to int is not possible.\n         throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n     }\n     peekedString = null;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n        try {\n            return Integer.parseInt(peekedString);\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    }\n    if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            return Integer.parseInt(peekedString);\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    }\n    throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -17,29 +17,19 @@\n     if (p == PEEKED_NUMBER) {\n         peekedString = new String(buffer, pos, peekedNumberLength);\n         pos += peekedNumberLength;\n-    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n-        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n         try {\n-            result = Integer.parseInt(peekedString);\n-            peeked = PEEKED_NONE;\n-            pathIndices[stackSize - 1]++;\n-            return result;\n+            return Integer.parseInt(peekedString);\n         } catch (NumberFormatException ignored) {\n             // Fall back to parse as a double below.\n         }\n-    } else {\n-        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n     }\n-    peeked = PEEKED_BUFFERED;\n-    // don't catch this NumberFormatException.\n-    double asDouble = Double.parseDouble(peekedString);\n-    result = (int) asDouble;\n-    if (result != asDouble) {\n-        // Make sure no precision was lost casting to 'int'.\n-        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+    if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n+        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+        try {\n+            return Integer.parseInt(peekedString);\n+        } catch (NumberFormatException ignored) {\n+            // Fall back to parse as a double below.\n+        }\n     }\n-    peekedString = null;\n-    peeked = PEEKED_NONE;\n-    pathIndices[stackSize - 1]++;\n-    return result;\n+    throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        // Fixed bug: Cast the long value to int instead of storing it into peekedLong\n        long longResult = peekedLong;\n        result = (int) longResult;\n        if (longResult != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -5,8 +5,10 @@\n     }\n     int result;\n     if (p == PEEKED_LONG) {\n-        result = (int) peekedLong;\n-        if (peekedLong != result) {\n+        // Fixed bug: Cast the long value to int instead of storing it into peekedLong\n+        long longResult = peekedLong;\n+        result = (int) longResult;\n+        if (longResult != result) {\n             // Make sure no precision was lost casting to 'int'.\n             throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (Double.isInfinite(asDouble) || Double.isNaN(asDouble)) {\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    if (result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -34,6 +34,9 @@\n     // don't catch this NumberFormatException.\n     double asDouble = Double.parseDouble(peekedString);\n     result = (int) asDouble;\n+    if (Double.isInfinite(asDouble) || Double.isNaN(asDouble)) {\n+        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+    }\n     if (result != asDouble) {\n         // Make sure no precision was lost casting to 'int'.\n         throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (Double.isNaN(asDouble) || Double.isInfinite(asDouble)) {\n        // Make sure no NaN or Infinity values are parsed as 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    if (result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -34,6 +34,10 @@\n     // don't catch this NumberFormatException.\n     double asDouble = Double.parseDouble(peekedString);\n     result = (int) asDouble;\n+    if (Double.isNaN(asDouble) || Double.isInfinite(asDouble)) {\n+        // Make sure no NaN or Infinity values are parsed as 'int'.\n+        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+    }\n     if (result != asDouble) {\n         // Make sure no precision was lost casting to 'int'.\n         throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if ((long) result != peekedLong) {\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if ((double) result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -6,8 +6,7 @@\n     int result;\n     if (p == PEEKED_LONG) {\n         result = (int) peekedLong;\n-        if (peekedLong != result) {\n-            // Make sure no precision was lost casting to 'int'.\n+        if ((long) result != peekedLong) {\n             throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n         }\n         peeked = PEEKED_NONE;\n@@ -34,7 +33,7 @@\n     // don't catch this NumberFormatException.\n     double asDouble = Double.parseDouble(peekedString);\n     result = (int) asDouble;\n-    if (result != asDouble) {\n+    if ((double) result != asDouble) {\n         // Make sure no precision was lost casting to 'int'.\n         throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    if (asDouble > Integer.MAX_VALUE || asDouble < Integer.MIN_VALUE) {\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath() + \". Int value out of range.\");\n    }\n    result = (int) asDouble;\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -33,11 +33,10 @@\n     peeked = PEEKED_BUFFERED;\n     // don't catch this NumberFormatException.\n     double asDouble = Double.parseDouble(peekedString);\n+    if (asDouble > Integer.MAX_VALUE || asDouble < Integer.MIN_VALUE) {\n+        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath() + \". Int value out of range.\");\n+    }\n     result = (int) asDouble;\n-    if (result != asDouble) {\n-        // Make sure no precision was lost casting to 'int'.\n-        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n-    }\n     peekedString = null;\n     peeked = PEEKED_NONE;\n     pathIndices[stackSize - 1]++;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if ((long) result != peekedLong) { // fix: compare long values for precision loss\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if ((double) result != asDouble) { // fix: compare double values for precision loss\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -6,7 +6,7 @@\n     int result;\n     if (p == PEEKED_LONG) {\n         result = (int) peekedLong;\n-        if (peekedLong != result) {\n+        if ((long) result != peekedLong) { // fix: compare long values for precision loss\n             // Make sure no precision was lost casting to 'int'.\n             throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n         }\n@@ -34,7 +34,7 @@\n     // don't catch this NumberFormatException.\n     double asDouble = Double.parseDouble(peekedString);\n     result = (int) asDouble;\n-    if (result != asDouble) {\n+    if ((double) result != asDouble) { // fix: compare double values for precision loss\n         // Make sure no precision was lost casting to 'int'.\n         throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n            // Fixed Line:\n            // Instead of fallback to parse as a double, throw a NumberFormatException\n            throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -26,6 +26,9 @@\n             return result;\n         } catch (NumberFormatException ignored) {\n             // Fall back to parse as a double below.\n+            // Fixed Line:\n+            // Instead of fallback to parse as a double, throw a NumberFormatException\n+            throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n         }\n     } else {\n         throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    if (asDouble > Integer.MAX_VALUE || asDouble < Integer.MIN_VALUE) {\n        // Make sure the number can be represented as an integer.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) asDouble;\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -33,11 +33,11 @@\n     peeked = PEEKED_BUFFERED;\n     // don't catch this NumberFormatException.\n     double asDouble = Double.parseDouble(peekedString);\n-    result = (int) asDouble;\n-    if (result != asDouble) {\n-        // Make sure no precision was lost casting to 'int'.\n+    if (asDouble > Integer.MAX_VALUE || asDouble < Integer.MIN_VALUE) {\n+        // Make sure the number can be represented as an integer.\n         throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n     }\n+    result = (int) asDouble;\n     peekedString = null;\n     peeked = PEEKED_NONE;\n     pathIndices[stackSize - 1]++;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        long longResult = peekedLong;\n        if (longResult > Integer.MAX_VALUE || longResult < Integer.MIN_VALUE) {\n            throw new NumberFormatException(\"Expected an int but was \" + longResult + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        result = (int) longResult;\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    double asDouble = Double.parseDouble(peekedString);\n    if (asDouble > Integer.MAX_VALUE || asDouble < Integer.MIN_VALUE) {\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) asDouble;\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -5,11 +5,11 @@\n     }\n     int result;\n     if (p == PEEKED_LONG) {\n-        result = (int) peekedLong;\n-        if (peekedLong != result) {\n-            // Make sure no precision was lost casting to 'int'.\n-            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+        long longResult = peekedLong;\n+        if (longResult > Integer.MAX_VALUE || longResult < Integer.MIN_VALUE) {\n+            throw new NumberFormatException(\"Expected an int but was \" + longResult + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n         }\n+        result = (int) longResult;\n         peeked = PEEKED_NONE;\n         pathIndices[stackSize - 1]++;\n         return result;\n@@ -31,13 +31,11 @@\n         throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n     }\n     peeked = PEEKED_BUFFERED;\n-    // don't catch this NumberFormatException.\n     double asDouble = Double.parseDouble(peekedString);\n-    result = (int) asDouble;\n-    if (result != asDouble) {\n-        // Make sure no precision was lost casting to 'int'.\n+    if (asDouble > Integer.MAX_VALUE || asDouble < Integer.MIN_VALUE) {\n         throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n     }\n+    result = (int) asDouble;\n     peekedString = null;\n     peeked = PEEKED_NONE;\n     pathIndices[stackSize - 1]++;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Continue below to parse as a double.\n        }\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Continue below to parse as a double.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -17,6 +17,14 @@\n     if (p == PEEKED_NUMBER) {\n         peekedString = new String(buffer, pos, peekedNumberLength);\n         pos += peekedNumberLength;\n+        try {\n+            result = Integer.parseInt(peekedString);\n+            peeked = PEEKED_NONE;\n+            pathIndices[stackSize - 1]++;\n+            return result;\n+        } catch (NumberFormatException ignored) {\n+            // Continue below to parse as a double.\n+        }\n     } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n         peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n         try {\n@@ -25,7 +33,7 @@\n             pathIndices[stackSize - 1]++;\n             return result;\n         } catch (NumberFormatException ignored) {\n-            // Fall back to parse as a double below.\n+            // Continue below to parse as a double.\n         }\n     } else {\n         throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    if (asDouble > Integer.MAX_VALUE || asDouble < Integer.MIN_VALUE) {\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) asDouble;\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -33,11 +33,10 @@\n     peeked = PEEKED_BUFFERED;\n     // don't catch this NumberFormatException.\n     double asDouble = Double.parseDouble(peekedString);\n-    result = (int) asDouble;\n-    if (result != asDouble) {\n-        // Make sure no precision was lost casting to 'int'.\n+    if (asDouble > Integer.MAX_VALUE || asDouble < Integer.MIN_VALUE) {\n         throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n     }\n+    result = (int) asDouble;\n     peekedString = null;\n     peeked = PEEKED_NONE;\n     pathIndices[stackSize - 1]++;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peekedString = null; // remove redundant assignment\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -21,6 +21,7 @@\n         peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n         try {\n             result = Integer.parseInt(peekedString);\n+            peekedString = null; // remove redundant assignment\n             peeked = PEEKED_NONE;\n             pathIndices[stackSize - 1]++;\n             return result;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peekedString = null; // FIXED: reset peekedString to null after successful parse\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -21,6 +21,7 @@\n         peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n         try {\n             result = Integer.parseInt(peekedString);\n+            peekedString = null; // FIXED: reset peekedString to null after successful parse\n             peeked = PEEKED_NONE;\n             pathIndices[stackSize - 1]++;\n             return result;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public int nextInt() throws IOException {\n    int p = peeked;\n    if (p == PEEKED_NONE) {\n        p = doPeek();\n    }\n    int result;\n    if (p == PEEKED_LONG) {\n        result = (int) peekedLong;\n        if (peekedLong != result) {\n            // Make sure no precision was lost casting to 'int'.\n            throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n        }\n        peeked = PEEKED_NONE;\n        pathIndices[stackSize - 1]++;\n        return result;\n    }\n    if (p == PEEKED_NUMBER) {\n        peekedString = new String(buffer, pos, peekedNumberLength);\n        pos += peekedNumberLength;\n    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n        try {\n            result = Integer.parseInt(peekedString);\n            peekedString = null;\n            peeked = PEEKED_NONE;\n            pathIndices[stackSize - 1]++;\n            return result;\n        } catch (NumberFormatException ignored) {\n            // Fall back to parse as a double below.\n        }\n    } else {\n        throw new IllegalStateException(\"Expected an int but was \" + peek() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peeked = PEEKED_BUFFERED;\n    // don't catch this NumberFormatException.\n    double asDouble = Double.parseDouble(peekedString);\n    result = (int) asDouble;\n    if (result != asDouble) {\n        // Make sure no precision was lost casting to 'int'.\n        throw new NumberFormatException(\"Expected an int but was \" + peekedString + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n}", "diff": "--- com/google/gson/stream/JsonReader.java@nextInt\n+++ com/google/gson/stream/JsonReader.java@nextInt\n@@ -21,6 +21,7 @@\n         peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n         try {\n             result = Integer.parseInt(peekedString);\n+            peekedString = null;\n             peeked = PEEKED_NONE;\n             pathIndices[stackSize - 1]++;\n             return result;\n", "finish_reason": "stop", "valid": false, "num": 2}]