[{"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Triple(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle), locale);\n    if (timeZone != null) {\n        key = new Pair(key, timeZone);\n    }\n    FastDateFormat format = cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        try {\n            String pattern = ((SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)).toPattern();\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch(ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    }\n    return format;\n}", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -1,22 +1,18 @@\n public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n-    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+    Object key = new Triple(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle), locale);\n     if (timeZone != null) {\n         key = new Pair(key, timeZone);\n     }\n-    if (locale != null) {\n-        key = new Pair(key, locale);\n-    }\n-    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n+    FastDateFormat format = cDateTimeInstanceCache.get(key);\n     if (format == null) {\n         if (locale == null) {\n             locale = Locale.getDefault();\n         }\n         try {\n-            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n-            String pattern = formatter.toPattern();\n+            String pattern = ((SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)).toPattern();\n             format = getInstance(pattern, timeZone, locale);\n             cDateTimeInstanceCache.put(key, format);\n-        } catch (ClassCastException ex) {\n+        } catch(ClassCastException ex) {\n             throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), locale);\n    if (timeZone != null) {\n        key = new Pair(key, timeZone);\n    }\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        try {\n            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            if (timeZone != null) {\n                formatter.setTimeZone(timeZone);\n            }\n            format = getInstance(formatter.toPattern(), timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    }\n    return format;\n}", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -1,20 +1,16 @@\n public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n-    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), locale);\n     if (timeZone != null) {\n         key = new Pair(key, timeZone);\n     }\n-    if (locale != null) {\n-        key = new Pair(key, locale);\n-    }\n     FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n     if (format == null) {\n-        if (locale == null) {\n-            locale = Locale.getDefault();\n-        }\n         try {\n             SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n-            String pattern = formatter.toPattern();\n-            format = getInstance(pattern, timeZone, locale);\n+            if (timeZone != null) {\n+                formatter.setTimeZone(timeZone);\n+            }\n+            format = getInstance(formatter.toPattern(), timeZone, locale);\n             cDateTimeInstanceCache.put(key, format);\n         } catch (ClassCastException ex) {\n             throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), locale);\n    if (timeZone != null) {\n        key = new Pair(key, timeZone);\n    }\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        try {\n            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            String pattern = formatter.toPattern();\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    }\n    return format;\n}\n\nThe fix involves changing the key used to search the cache from a pair of integers to a triple of integers plus the locale. This ensures that different locales are properly differentiated and do not result in the same cache key.", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -1,10 +1,7 @@\n public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n-    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), locale);\n     if (timeZone != null) {\n         key = new Pair(key, timeZone);\n-    }\n-    if (locale != null) {\n-        key = new Pair(key, locale);\n     }\n     FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n     if (format == null) {\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n    if (timeZone != null) {\n        key = new Pair(key, timeZone);\n    }\n    if (locale != null) {\n        key = new Pair(key, locale);\n    }\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        try {\n            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            String pattern = formatter.toPattern();\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    } else if (format.getTimeZone() != timeZone) {\n        format = getInstance(format.getPattern(), timeZone, locale);\n        cDateTimeInstanceCache.put(key, format);\n    }\n    return format;\n}", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -19,6 +19,9 @@\n         } catch (ClassCastException ex) {\n             throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n         }\n+    } else if (format.getTimeZone() != timeZone) {\n+        format = getInstance(format.getPattern(), timeZone, locale);\n+        cDateTimeInstanceCache.put(key, format);\n     }\n     return format;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), timeZone);\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        try {\n            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            String pattern = formatter.toPattern();\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    }\n    return format;\n}\n\n# Explanation\nThe problem in the buggy function is that the key used to cache the format instance is not consistent with the arguments passed to the function. Specifically, if a non-null timeZone parameter is passed, it is not included in the key. Similarly, if a non-null locale parameter is passed, it is also not included in the key. So, even if the same combination of dateStyle, timeStyle, timeZone, and locale is used to call the function multiple times, it will create a new format instance every time instead of reusing the cached one. The fix is to include all four parameters in the key using a Triple object instead of a Pair object.", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -1,11 +1,5 @@\n public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n-    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n-    if (timeZone != null) {\n-        key = new Pair(key, timeZone);\n-    }\n-    if (locale != null) {\n-        key = new Pair(key, locale);\n-    }\n+    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), timeZone);\n     FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n     if (format == null) {\n         if (locale == null) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Pair(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle));\n    if (timeZone != null) {\n        key = new Pair(key, timeZone);\n    }\n    if (locale != null) {\n        key = new Pair(key, locale);\n    }\n    synchronized (cDateTimeInstanceCache) {\n        FastDateFormat format = cDateTimeInstanceCache.get(key);\n        if (format == null) {\n            if (locale == null) {\n                locale = Locale.getDefault();\n            }\n            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            String pattern = formatter.toPattern();\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        }\n        return format;\n    }\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n    if (timeZone != null) {\n        key = new Pair(key, timeZone);\n    }\n    if (locale != null) {\n        key = new Pair(key, locale);\n    }\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        try {\n            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            String pattern = formatter.toPattern();\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        } catch (IllegalArgumentException ex) {\n            throw new IllegalArgumentException(\"Invalid date time style specified\");\n        }\n    }\n    return format;\n}", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -18,6 +18,8 @@\n             cDateTimeInstanceCache.put(key, format);\n         } catch (ClassCastException ex) {\n             throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n+        } catch (IllegalArgumentException ex) {\n+            throw new IllegalArgumentException(\"Invalid date time style specified\");\n         }\n     }\n     return format;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), locale);\n    if (timeZone != null) {\n        key = new Pair(key, timeZone);\n    }\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        try {\n            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            formatter.setTimeZone(timeZone);\n            String pattern = formatter.toPattern();\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    }\n    return format;\n}", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -1,18 +1,13 @@\n public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n-    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), locale);\n     if (timeZone != null) {\n         key = new Pair(key, timeZone);\n     }\n-    if (locale != null) {\n-        key = new Pair(key, locale);\n-    }\n     FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n     if (format == null) {\n-        if (locale == null) {\n-            locale = Locale.getDefault();\n-        }\n         try {\n             SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n+            formatter.setTimeZone(timeZone);\n             String pattern = formatter.toPattern();\n             format = getInstance(pattern, timeZone, locale);\n             cDateTimeInstanceCache.put(key, format);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), timeZone);\n    if (locale != null) {\n        key = new Pair(key, locale);\n    }\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        try {\n            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            String pattern = formatter.toPattern();\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    }\n    return format;\n}", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -1,8 +1,5 @@\n public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n-    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n-    if (timeZone != null) {\n-        key = new Pair(key, timeZone);\n-    }\n+    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), timeZone);\n     if (locale != null) {\n         key = new Pair(key, locale);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Triple(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle), timeZone);\n    if (locale != null) {\n        key = new Pair(key, locale);\n    }\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        try {\n            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            String pattern = formatter.toPattern();\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    }\n    return format;\n}", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -1,8 +1,5 @@\n public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n-    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n-    if (timeZone != null) {\n-        key = new Pair(key, timeZone);\n-    }\n+    Object key = new Triple(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle), timeZone);\n     if (locale != null) {\n         key = new Pair(key, locale);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), timeZone);\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        try {\n            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            String pattern = formatter.toPattern();\n            if (timeZone != null) {\n                format = getInstance(pattern, timeZone, locale);\n            } else {\n                format = getInstance(pattern, locale);\n            }\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    }\n    return format;\n}", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -1,11 +1,5 @@\n public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n-    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n-    if (timeZone != null) {\n-        key = new Pair(key, timeZone);\n-    }\n-    if (locale != null) {\n-        key = new Pair(key, locale);\n-    }\n+    Object key = new Triple(new Integer(dateStyle), new Integer(timeStyle), timeZone);\n     FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n     if (format == null) {\n         if (locale == null) {\n@@ -14,7 +8,11 @@\n         try {\n             SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n             String pattern = formatter.toPattern();\n-            format = getInstance(pattern, timeZone, locale);\n+            if (timeZone != null) {\n+                format = getInstance(pattern, timeZone, locale);\n+            } else {\n+                format = getInstance(pattern, locale);\n+            }\n             cDateTimeInstanceCache.put(key, format);\n         } catch (ClassCastException ex) {\n             throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Triple(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle), locale);\n    if (timeZone != null) {\n        key = new Pair(key, timeZone);\n    }\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        try {\n            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            String pattern = formatter.toPattern();\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    }\n    return format;\n}", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -1,10 +1,7 @@\n public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n-    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+    Object key = new Triple(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle), locale);\n     if (timeZone != null) {\n         key = new Pair(key, timeZone);\n-    }\n-    if (locale != null) {\n-        key = new Pair(key, locale);\n     }\n     FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n     if (format == null) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Triple(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle), locale);\n    if (timeZone != null) {\n        key = new Pair(key, timeZone);\n    }\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        try {\n            String pattern = ((SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)).toPattern();\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException e) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    }\n    return format;\n}", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -1,10 +1,7 @@\n public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n-    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n+    Object key = new Triple(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle), locale);\n     if (timeZone != null) {\n         key = new Pair(key, timeZone);\n-    }\n-    if (locale != null) {\n-        key = new Pair(key, locale);\n     }\n     FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n     if (format == null) {\n@@ -12,11 +9,10 @@\n             locale = Locale.getDefault();\n         }\n         try {\n-            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n-            String pattern = formatter.toPattern();\n+            String pattern = ((SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale)).toPattern();\n             format = getInstance(pattern, timeZone, locale);\n             cDateTimeInstanceCache.put(key, format);\n-        } catch (ClassCastException ex) {\n+        } catch (ClassCastException e) {\n             throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {\n    Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n    if (timeZone != null) {\n        key = new Pair(key, timeZone);\n    }\n    if (locale != null) {\n        key = new Pair(key, locale);\n    }\n    FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n    if (format == null) {\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        try {\n            String pattern = null;\n            if (dateStyle != -1 && timeStyle != -1) {\n                pattern = DateFormatUtil.getDateTimePattern(dateStyle, timeStyle, locale);\n            } else if(dateStyle != -1) {\n                pattern = DateFormatUtil.getDatePattern(dateStyle, locale);\n            } else if(timeStyle != -1) {\n                pattern = DateFormatUtil.getTimePattern(timeStyle, locale);\n            }\n            format = getInstance(pattern, timeZone, locale);\n            cDateTimeInstanceCache.put(key, format);\n        } catch (ClassCastException ex) {\n            throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n        }\n    }\n    return format;\n}", "diff": "--- org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n+++ org/apache/commons/lang/time/FastDateFormat.java@getDateTimeInstance\n@@ -12,8 +12,14 @@\n             locale = Locale.getDefault();\n         }\n         try {\n-            SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n-            String pattern = formatter.toPattern();\n+            String pattern = null;\n+            if (dateStyle != -1 && timeStyle != -1) {\n+                pattern = DateFormatUtil.getDateTimePattern(dateStyle, timeStyle, locale);\n+            } else if(dateStyle != -1) {\n+                pattern = DateFormatUtil.getDatePattern(dateStyle, locale);\n+            } else if(timeStyle != -1) {\n+                pattern = DateFormatUtil.getTimePattern(timeStyle, locale);\n+            }\n             format = getInstance(pattern, timeZone, locale);\n             cDateTimeInstanceCache.put(key, format);\n         } catch (ClassCastException ex) {\n", "finish_reason": "stop", "valid": false, "num": 1}]