[{"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    if (root.isFunction()) {\n        this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n    } else {\n        this.isHoisted = false;\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,8 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    if (root.isFunction()) {\n+        this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    } else {\n+        this.isHoisted = false;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only named functions may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root, /* allowLambdas= */ false);\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n     // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root, /* allowLambdas= */ false);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only function declarations may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n+    // only function declarations may be hoisted.\n     this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only named functions may be hoisted.\n    if(root.isFunction()) {\n        this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n    } else {\n        this.isHoisted = false;\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,9 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n     // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    if(root.isFunction()) {\n+        this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    } else {\n+        this.isHoisted = false;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only function declarations (not expressions) may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root)\n        || NodeUtil.isHoistedFunctionExpression(root);\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,6 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    // only function declarations (not expressions) may be hoisted.\n+    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root)\n+        || NodeUtil.isHoistedFunctionExpression(root);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only function declarations may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root) && root.isFunction();\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    // only function declarations may be hoisted.\n+    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root) && root.isFunction();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only named functions may be hoisted.\n    this.isHoisted = root != null && NodeUtil.isHoistedFunctionDeclaration(root);\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n     // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    this.isHoisted = root != null && NodeUtil.isHoistedFunctionDeclaration(root);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only named functions declared with var, let, or const may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root) && NodeUtil.isNamedFunctionDeclaration(root) && NodeUtil.isDeclaredByVarLetOrConst(root);\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    // only named functions declared with var, let, or const may be hoisted.\n+    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root) && NodeUtil.isNamedFunctionDeclaration(root) && NodeUtil.isDeclaredByVarLetOrConst(root);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only named functions may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root) && root.getFirstChild().isName();\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n     // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root) && root.getFirstChild().isName();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only function expressions may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedFunctionExpression(root);\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    // only function expressions may be hoisted.\n+    this.isHoisted = NodeUtil.isHoistedFunctionExpression(root);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only function declarations with a name may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedNamedFunctionDeclaration(root);\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    // only function declarations with a name may be hoisted.\n+    this.isHoisted = NodeUtil.isHoistedNamedFunctionDeclaration(root);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only named functions may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root) && root.isName();\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n     // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root) && root.isName();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only function expressions and named function declarations may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedFunction(root);\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    // only function expressions and named function declarations may be hoisted.\n+    this.isHoisted = NodeUtil.isHoistedFunction(root);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only function declarations and named function expressions may be hoisted\n    this.isHoisted = NodeUtil.isHoistedFunction(root);\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    // only function declarations and named function expressions may be hoisted\n+    this.isHoisted = NodeUtil.isHoistedFunction(root);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // check if the root node is a function declaration and has a name to be hoisted\n    this.isHoisted = root.isFunction() && root.getFirstChild().isName();\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    // check if the root node is a function declaration and has a name to be hoisted\n+    this.isHoisted = root.isFunction() && root.getFirstChild().isName();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only named functions may be hoisted.\n    this.isHoisted = false;\n    if (root.isFunction()) {\n        this.isHoisted = !root.getFirstChild().getString().isEmpty();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,8 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n     // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    this.isHoisted = false;\n+    if (root.isFunction()) {\n+        this.isHoisted = !root.getFirstChild().getString().isEmpty();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only named functions may be hoisted in strict mode.\n    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root)\n                     && NodeUtil.doesNodeBelongToStrictContext(root);\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,6 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    // only named functions may be hoisted in strict mode.\n+    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root)\n+                     && NodeUtil.doesNodeBelongToStrictContext(root);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only named functions may be hoisted.\n    this.isHoisted = root.isFunction() && root.getFirstChild().isName();\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n     // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    this.isHoisted = root.isFunction() && root.getFirstChild().isName();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only named functions may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root) && root.getFirstChild().getString() != null;\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n     // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root) && root.getFirstChild().getString() != null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "BasicBlock(BasicBlock parent, Node root) {\n    this.parent = parent;\n    // only function declarations or function expressions with a name may be hoisted.\n    this.isHoisted = NodeUtil.isHoistedFunctionDeclarationOrFunctionExpression(root);\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@BasicBlock\n@@ -1,5 +1,5 @@\n BasicBlock(BasicBlock parent, Node root) {\n     this.parent = parent;\n-    // only named functions may be hoisted.\n-    this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n+    // only function declarations or function expressions with a name may be hoisted.\n+    this.isHoisted = NodeUtil.isHoistedFunctionDeclarationOrFunctionExpression(root);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]