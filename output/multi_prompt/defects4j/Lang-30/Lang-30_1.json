[{"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                    // check for missing low surrogate\n                    if (j < searchLast && cs.charAt(i + 1) == searchChars[j + 1]) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,9 +12,9 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                    // check for missing low surrogate\n+                    if (j < searchLast && cs.charAt(i + 1) == searchChars[j + 1]) {\n                         return true;\n                     }\n                 } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -1,7 +1,7 @@\n // ContainsAny\n //-----------------------------------------------------------------------\n public static boolean containsAny(CharSequence cs, char[] searchChars) {\n-    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n+    if (cs == null || searchChars == null) {\n         return false;\n     }\n     int csLength = cs.length();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,7 +12,7 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                     // missing low surrogate, fine, like String.indexOf(String)\n                     if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n", "finish_reason": "stop", "valid": false, "num": 7}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // check if there is a corresponding low surrogate\n                    if (searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                        return true;\n                    }\n                } else {\n                    // ch is not a surrogate\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,13 +12,13 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n+                    // check if there is a corresponding low surrogate\n+                    if (searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                         return true;\n                     }\n                 } else {\n-                    // ch is in the Basic Multilingual Plane\n+                    // ch is not a surrogate\n                     return true;\n                 }\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // Check for missing low surrogate\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,8 +12,8 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n+                    // Check for missing low surrogate\n                     if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // Missing low surrogate\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,8 +12,8 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n+                    // Missing low surrogate\n                     if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    if (cs.charAt(i + 1) == searchChars[j + 1]) {\n                        return true;\n                    }\n                } else if (ch <= Character.MAX_VALUE) {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -14,10 +14,10 @@\n             if (searchChars[j] == ch) {\n                 if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                     // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                    if (cs.charAt(i + 1) == searchChars[j + 1]) {\n                         return true;\n                     }\n-                } else {\n+                } else if (ch <= Character.MAX_VALUE) {\n                     // ch is in the Basic Multilingual Plane\n                     return true;\n                 }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    if (csLength == 0 || searchLength == 0) {\n        return false;\n    }\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                    if (j == searchLast) {\n                        // missing low surrogate, fine, like String.indexOf(String)\n                        return true;\n                    }\n                    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -1,20 +1,26 @@\n // ContainsAny\n //-----------------------------------------------------------------------\n public static boolean containsAny(CharSequence cs, char[] searchChars) {\n-    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n+    if (cs == null || searchChars == null) {\n         return false;\n     }\n     int csLength = cs.length();\n     int searchLength = searchChars.length;\n+    if (csLength == 0 || searchLength == 0) {\n+        return false;\n+    }\n     int csLast = csLength - 1;\n     int searchLast = searchLength - 1;\n     for (int i = 0; i < csLength; i++) {\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                    if (j == searchLast) {\n+                        // missing low surrogate, fine, like String.indexOf(String)\n+                        return true;\n+                    }\n+                    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n                 } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // if ch is a high surrogate, check for a matching low surrogate\n                    if (searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                        return true;\n                    }\n                } else {\n                    // ch is either in the Basic Multilingual Plane or a low surrogate\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,13 +12,13 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n+                    // if ch is a high surrogate, check for a matching low surrogate\n+                    if (searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                         return true;\n                     }\n                 } else {\n-                    // ch is in the Basic Multilingual Plane\n+                    // ch is either in the Basic Multilingual Plane or a low surrogate\n                     return true;\n                 }\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                    if (searchChars.length > (j + 1) && Character.isLowSurrogate(searchChars[j + 1])) {\n                        // Use Character.codePointAt to get full Unicode codepoint representation of the surrogate pair\n                        int codePoint = Character.codePointAt(searchChars, j);\n                        // Get the number of chars in the codepoint (2 for a surrogate pair)\n                        int charCount = Character.charCount(codePoint);\n                        if (i < csLast - charCount + 1 && Character.codePointAt(cs, i) == codePoint) {\n                            return true;\n                        }\n                    }\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -13,12 +13,16 @@\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n                 if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n-                        return true;\n+                    if (searchChars.length > (j + 1) && Character.isLowSurrogate(searchChars[j + 1])) {\n+                        // Use Character.codePointAt to get full Unicode codepoint representation of the surrogate pair\n+                        int codePoint = Character.codePointAt(searchChars, j);\n+                        // Get the number of chars in the codepoint (2 for a surrogate pair)\n+                        int charCount = Character.charCount(codePoint);\n+                        if (i < csLast - charCount + 1 && Character.codePointAt(cs, i) == codePoint) {\n+                            return true;\n+                        }\n                     }\n                 } else {\n-                    // ch is in the Basic Multilingual Plane\n                     return true;\n                 }\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                    // missing low surrogate\n                    if (i + 1 < csLength && searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -13,8 +13,8 @@\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n                 if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                    // missing low surrogate\n+                    if (i + 1 < csLength && searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n                 } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // check for a valid surrogate pair\n                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,8 +12,8 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n+                    // check for a valid surrogate pair\n                     if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                    // missing low surrogate, fine, like String.indexOf(String)\n                    if (i + 1 < csLength && searchChars[j + 1] == cs.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    // ch is in the Basic Multilingual Plane\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -14,7 +14,7 @@\n             if (searchChars[j] == ch) {\n                 if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                     // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                    if (i + 1 < csLength && searchChars[j + 1] == cs.charAt(i + 1)) {\n                         return true;\n                     }\n                 } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsAny\n//-----------------------------------------------------------------------\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                    // Check for missing low surrogate\n                    if (searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                        return true;\n                    }\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsAny\n+++ org/apache/commons/lang3/StringUtils.java@containsAny\n@@ -12,13 +12,12 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLength; j++) {\n             if (searchChars[j] == ch) {\n-                if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n-                    // missing low surrogate, fine, like String.indexOf(String)\n-                    if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n+                    // Check for missing low surrogate\n+                    if (searchChars[j + 1] == cs.charAt(i + 1) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                         return true;\n                     }\n                 } else {\n-                    // ch is in the Basic Multilingual Plane\n                     return true;\n                 }\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}]