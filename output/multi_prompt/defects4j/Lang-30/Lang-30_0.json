[{"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch) && i < csLen - 1) {\n            char ch2 = cs.charAt(i+1);\n            if (Character.isLowSurrogate(ch2)) {\n                ch = Character.toCodePoint(ch, ch2);\n                i++;\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -8,9 +8,15 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isHighSurrogate(ch) && i < csLen - 1) {\n+            char ch2 = cs.charAt(i+1);\n+            if (Character.isLowSurrogate(ch2)) {\n+                ch = Character.toCodePoint(ch, ch2);\n+                i++;\n+            }\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n                 return i;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                return i;\n            }\n        }\n        // check if ch is a high surrogate\n        if (Character.isHighSurrogate(ch) && i < csLen - 1) {\n            char ch2 = cs.charAt(i + 1);\n            if (Character.isLowSurrogate(ch2)) {\n                int codePoint = Character.toCodePoint(ch, ch2);\n                for (int k = 0; k < searchLen; k++) {\n                    if (searchChars[k] == codePoint) {\n                        return i;\n                    }\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -14,6 +14,18 @@\n                 return i;\n             }\n         }\n+        // check if ch is a high surrogate\n+        if (Character.isHighSurrogate(ch) && i < csLen - 1) {\n+            char ch2 = cs.charAt(i + 1);\n+            if (Character.isLowSurrogate(ch2)) {\n+                int codePoint = Character.toCodePoint(ch, ch2);\n+                for (int k = 0; k < searchLen; k++) {\n+                    if (searchChars[k] == codePoint) {\n+                        return i;\n+                    }\n+                }\n+            }\n+        }\n     }\n     return INDEX_NOT_FOUND;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isSurrogate(ch)) {\n            continue;\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -8,9 +8,11 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isSurrogate(ch)) {\n+            continue;\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n                 return i;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            i++; // skip the low surrogate character\n            if (i == csLen) {\n                break;\n            }\n            ch = cs.charAt(i);\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -8,9 +8,15 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            i++; // skip the low surrogate character\n+            if (i == csLen) {\n+                break;\n+            }\n+            ch = cs.charAt(i);\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n                 return i;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isSurrogate(ch)) {\n            // ch is a supplementary character\n            if (searchLen == 1) {\n                return i;\n            }\n            if (i < csLen - 1) {\n                char ch2 = cs.charAt(i + 1);\n                for (int j = 0; j < searchLen; j++) {\n                    if (searchChars[j] == ch && j < searchLen - 1 && searchChars[j + 1] == ch2) {\n                        return i;\n                    }\n                }\n            }\n        } else {\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    return i;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -8,10 +8,24 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n-        for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n+        if (Character.isSurrogate(ch)) {\n+            // ch is a supplementary character\n+            if (searchLen == 1) {\n                 return i;\n+            }\n+            if (i < csLen - 1) {\n+                char ch2 = cs.charAt(i + 1);\n+                for (int j = 0; j < searchLen; j++) {\n+                    if (searchChars[j] == ch && j < searchLen - 1 && searchChars[j + 1] == ch2) {\n+                        return i;\n+                    }\n+                }\n+            }\n+        } else {\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    return i;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i + 1 < csLen) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    ch = Character.toCodePoint(ch, ch2);\n                    i++;\n                }\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -8,6 +8,15 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i + 1 < csLen) {\n+                char ch2 = cs.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2)) {\n+                    ch = Character.toCodePoint(ch, ch2);\n+                    i++;\n+                }\n+            }\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n                 // ch is a supplementary character\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                return i;\n            }\n            if (Character.isHighSurrogate(ch) && j < searchLen - 1 &&\n                    searchChars[j + 1] == cs.charAt(i + 1)) {\n                return i;\n            }\n        }\n        if (Character.isHighSurrogate(ch)) {\n            i++;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -13,6 +13,13 @@\n                 // ch is a supplementary character\n                 return i;\n             }\n+            if (Character.isHighSurrogate(ch) && j < searchLen - 1 &&\n+                    searchChars[j + 1] == cs.charAt(i + 1)) {\n+                return i;\n+            }\n+        }\n+        if (Character.isHighSurrogate(ch)) {\n+            i++;\n         }\n     }\n     return INDEX_NOT_FOUND;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                return i;\n            }\n        }\n        if (Character.isSurrogate(ch)) {\n            if (searchLen == 1) {\n                return i;\n            }\n            if (i < csLen - 1 && isHighSurrogate(ch)) {\n                char ch2 = cs.charAt(i + 1);\n                if (isLowSurrogate(ch2) && indexOf(searchChars, ch, ch2) != INDEX_NOT_FOUND) {\n                    return i;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}\n\n// Helper method for checking if a character is a high surrogate\nprivate static boolean isHighSurrogate(char ch) {\n    return ch >= '\\uD800' && ch <= '\\uDBFF';\n}\n\n// Helper method for checking if a character is a low surrogate\nprivate static boolean isLowSurrogate(char ch) {\n    return ch >= '\\uDC00' && ch <= '\\uDFFF';\n}\n\n// Helper method for finding the index of a pair of high and low surrogates in the search chars array\nprivate static int indexOf(char[] searchChars, char high, char low) {\n    for (int i = 0; i < searchChars.length - 1; i++) {\n        if (searchChars[i] == high && searchChars[i + 1] == low) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -14,6 +14,17 @@\n                 return i;\n             }\n         }\n+        if (Character.isSurrogate(ch)) {\n+            if (searchLen == 1) {\n+                return i;\n+            }\n+            if (i < csLen - 1 && isHighSurrogate(ch)) {\n+                char ch2 = cs.charAt(i + 1);\n+                if (isLowSurrogate(ch2) && indexOf(searchChars, ch, ch2) != INDEX_NOT_FOUND) {\n+                    return i;\n+                }\n+            }\n+        }\n     }\n     return INDEX_NOT_FOUND;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            // ch is a supplementary character, check for matching surrogate pair\n            if (i < csLen - 1) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    int codePoint = Character.toCodePoint(ch, ch2);\n                    for (int j = 0; j < searchLen; j++) {\n                        if (searchChars[j] == codePoint) {\n                            return i;\n                        }\n                    }\n                }\n            }\n            // Skip this supplementary character and continue search\n            i++;\n        } else {\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    return i;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -8,10 +8,26 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n-        for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n-                return i;\n+        if (Character.isHighSurrogate(ch)) {\n+            // ch is a supplementary character, check for matching surrogate pair\n+            if (i < csLen - 1) {\n+                char ch2 = cs.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2)) {\n+                    int codePoint = Character.toCodePoint(ch, ch2);\n+                    for (int j = 0; j < searchLen; j++) {\n+                        if (searchChars[j] == codePoint) {\n+                            return i;\n+                        }\n+                    }\n+                }\n+            }\n+            // Skip this supplementary character and continue search\n+            i++;\n+        } else {\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    return i;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                return i;\n            }\n            if (Character.isSurrogate(ch) && j < searchLen - 1 && searchChars[j + 1] == ch) {\n                // handle supplementary characters\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -13,6 +13,10 @@\n                 // ch is a supplementary character\n                 return i;\n             }\n+            if (Character.isSurrogate(ch) && j < searchLen - 1 && searchChars[j + 1] == ch) {\n+                // handle supplementary characters\n+                return i;\n+            }\n         }\n     }\n     return INDEX_NOT_FOUND;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -1,7 +1,7 @@\n // IndexOfAny chars\n //-----------------------------------------------------------------------\n public static int indexOfAny(CharSequence cs, char[] searchChars) {\n-    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n+    if (cs == null || searchChars == null) {\n         return INDEX_NOT_FOUND;\n     }\n     int csLen = cs.length();\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            // Check if the next index has the low surrogate\n            if (i + 1 < csLen && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                // Combine the high and low surrogate to form a single supplementary character\n                ch = Character.toSupplementaryCodePoint(ch, cs.charAt(i + 1));\n                i++; // Move to the next index\n            } else {\n                continue; // Invalid high surrogate, move on to the next index\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            // Check if the search character is a surrogate pair\n            if (Character.isHighSurrogate(searchChars[j])) {\n                // Check if the next index has the low surrogate\n                if (j + 1 < searchLen && Character.isLowSurrogate(searchChars[j + 1])) {\n                    // Combine the high and low surrogate to form a single supplementary character\n                    int searchChar = Character.toSupplementaryCodePoint(searchChars[j], searchChars[j + 1]);\n                    if (searchChar == ch) {\n                        return i;\n                    }\n                    j++; // Move to the next index\n                } else {\n                    continue; // Invalid high surrogate, move on to the next index\n                }\n            } else if (searchChars[j] == ch) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -8,9 +8,31 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            // Check if the next index has the low surrogate\n+            if (i + 1 < csLen && Character.isLowSurrogate(cs.charAt(i + 1))) {\n+                // Combine the high and low surrogate to form a single supplementary character\n+                ch = Character.toSupplementaryCodePoint(ch, cs.charAt(i + 1));\n+                i++; // Move to the next index\n+            } else {\n+                continue; // Invalid high surrogate, move on to the next index\n+            }\n+        }\n         for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n+            // Check if the search character is a surrogate pair\n+            if (Character.isHighSurrogate(searchChars[j])) {\n+                // Check if the next index has the low surrogate\n+                if (j + 1 < searchLen && Character.isLowSurrogate(searchChars[j + 1])) {\n+                    // Combine the high and low surrogate to form a single supplementary character\n+                    int searchChar = Character.toSupplementaryCodePoint(searchChars[j], searchChars[j + 1]);\n+                    if (searchChar == ch) {\n+                        return i;\n+                    }\n+                    j++; // Move to the next index\n+                } else {\n+                    continue; // Invalid high surrogate, move on to the next index\n+                }\n+            } else if (searchChars[j] == ch) {\n                 return i;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            // ch is a supplementary character, so we need to check the next char too\n            if (i + 1 < csLen) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2) && ArrayUtils.contains(searchChars, ch, ch2)) {\n                    return i;\n                }\n            }\n            i++; // increment i since we've already checked the next char\n        } else if (ArrayUtils.contains(searchChars, ch)) {\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -8,11 +8,17 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n-        for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n-                return i;\n+        if (Character.isHighSurrogate(ch)) {\n+            // ch is a supplementary character, so we need to check the next char too\n+            if (i + 1 < csLen) {\n+                char ch2 = cs.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2) && ArrayUtils.contains(searchChars, ch, ch2)) {\n+                    return i;\n+                }\n             }\n+            i++; // increment i since we've already checked the next char\n+        } else if (ArrayUtils.contains(searchChars, ch)) {\n+            return i;\n         }\n     }\n     return INDEX_NOT_FOUND;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        // check if ch is a supplementary character\n        if (Character.isSurrogate(ch)) {\n             if (searchLen == 1) {\n                return i;\n             }\n             else if (i < csLen - 1) {\n                char ch2 = cs.charAt(i+1);\n                if (Character.isSurrogatePair(ch, ch2)) {\n                    i++;\n                    if (ArrayUtils.contains(searchChars, Character.toChars(ch, ch2))) {\n                        return i - 1;\n                    }\n                }\n            }\n        } else {\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    return i;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -8,10 +8,25 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n-        for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n+        // check if ch is a supplementary character\n+        if (Character.isSurrogate(ch)) {\n+             if (searchLen == 1) {\n                 return i;\n+             }\n+             else if (i < csLen - 1) {\n+                char ch2 = cs.charAt(i+1);\n+                if (Character.isSurrogatePair(ch, ch2)) {\n+                    i++;\n+                    if (ArrayUtils.contains(searchChars, Character.toChars(ch, ch2))) {\n+                        return i - 1;\n+                    }\n+                }\n+            }\n+        } else {\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    return i;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            // check if ch is a high surrogate and if there's enough characters left to form a supplementary character\n            if (i + 1 < csLen) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2) && ArrayUtils.contains(searchChars, Character.toCodePoint(ch, ch2))) {\n                    // ch and ch2 form a supplementary character and it's found in searchChars\n                    return i;\n                }\n            }\n            i++; // skip the next char since it's already part of a supplementary character\n        } else if (Character.isLowSurrogate(ch)) {\n            // ch cannot be a low surrogate by itself, ignore it\n            continue;\n        } else {\n            // ch is a simple character, check if it's in searchChars\n            if (ArrayUtils.contains(searchChars, (int) ch)) {\n                return i;\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -8,9 +8,22 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n-        for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n+        if (Character.isHighSurrogate(ch)) {\n+            // check if ch is a high surrogate and if there's enough characters left to form a supplementary character\n+            if (i + 1 < csLen) {\n+                char ch2 = cs.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2) && ArrayUtils.contains(searchChars, Character.toCodePoint(ch, ch2))) {\n+                    // ch and ch2 form a supplementary character and it's found in searchChars\n+                    return i;\n+                }\n+            }\n+            i++; // skip the next char since it's already part of a supplementary character\n+        } else if (Character.isLowSurrogate(ch)) {\n+            // ch cannot be a low surrogate by itself, ignore it\n+            continue;\n+        } else {\n+            // ch is a simple character, check if it's in searchChars\n+            if (ArrayUtils.contains(searchChars, (int) ch)) {\n                 return i;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is a supplementary character\n                return i;\n            }\n        }\n        if (Character.isSurrogate(ch)) {\n            // ch is a surrogate pair\n            if (i < csLen - 1) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isSurrogatePair(ch, ch2)) {\n                    return i;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -14,6 +14,15 @@\n                 return i;\n             }\n         }\n+        if (Character.isSurrogate(ch)) {\n+            // ch is a surrogate pair\n+            if (i < csLen - 1) {\n+                char ch2 = cs.charAt(i + 1);\n+                if (Character.isSurrogatePair(ch, ch2)) {\n+                    return i;\n+                }\n+            }\n+        }\n     }\n     return INDEX_NOT_FOUND;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (j == searchLen - 1) {\n                        // missing low surrogate, return the high surrogate index\n                        return i;\n                    }\n                    if (i < csLen - 1 && searchChars[j + 1] == cs.charAt(i + 1)) {\n                        // valid surrogate pair, advance index by one\n                        i++;\n                    }\n                } else if (Character.isLowSurrogate(ch)) {\n                    if (j == 0) {\n                        // missing high surrogate, return the low surrogate index\n                        return i;\n                    }\n                } else {\n                    return i;\n                }\n            }\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -10,8 +10,23 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n-                return i;\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (j == searchLen - 1) {\n+                        // missing low surrogate, return the high surrogate index\n+                        return i;\n+                    }\n+                    if (i < csLen - 1 && searchChars[j + 1] == cs.charAt(i + 1)) {\n+                        // valid surrogate pair, advance index by one\n+                        i++;\n+                    }\n+                } else if (Character.isLowSurrogate(ch)) {\n+                    if (j == 0) {\n+                        // missing high surrogate, return the low surrogate index\n+                        return i;\n+                    }\n+                } else {\n+                    return i;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            // check if there is another character to form a valid surrogate pair\n            if (i + 1 < csLen && Character.isLowSurrogate(cs.charAt(i+1))) {\n                // combine the surrogate pair and check if it matches any of the search chars\n                char[] surrogatePair = {ch, cs.charAt(i+1)};\n                if (ArrayUtils.contains(searchChars, surrogatePair)) {\n                    return i;\n                }\n                i++; // skip the second part of the surrogate pair\n            }\n        } else if (ArrayUtils.contains(searchChars, ch)) {\n            // ch is not a surrogate character, check if it matches any of the search chars\n            return i;\n        }\n    }\n    return INDEX_NOT_FOUND;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@indexOfAny\n+++ org/apache/commons/lang3/StringUtils.java@indexOfAny\n@@ -8,11 +8,19 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n-        for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // ch is a supplementary character\n-                return i;\n+        if (Character.isHighSurrogate(ch)) {\n+            // check if there is another character to form a valid surrogate pair\n+            if (i + 1 < csLen && Character.isLowSurrogate(cs.charAt(i+1))) {\n+                // combine the surrogate pair and check if it matches any of the search chars\n+                char[] surrogatePair = {ch, cs.charAt(i+1)};\n+                if (ArrayUtils.contains(searchChars, surrogatePair)) {\n+                    return i;\n+                }\n+                i++; // skip the second part of the surrogate pair\n             }\n+        } else if (ArrayUtils.contains(searchChars, ch)) {\n+            // ch is not a surrogate character, check if it matches any of the search chars\n+            return i;\n         }\n     }\n     return INDEX_NOT_FOUND;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// IndexOfAny chars\n//-----------------------------------------------------------------------\npublic static int indexOfAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return INDEX_NOT_FOUND;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i < csLen - 1) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    ch = Character.toS", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}]