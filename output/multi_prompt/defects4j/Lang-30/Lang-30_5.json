[{"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i + 1 < csLen) {\n                char ch2 = cs.charAt(i + 1);\n                int codePoint = Character.toCodePoint(ch, ch2);\n                if (Arrays.binarySearch(searchChars, (char) codePoint) >= 0) {\n                    return false;\n                }\n            }\n            i++; // advance past high surrogate\n        } else if (Arrays.binarySearch(searchChars, ch) >= 0) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,12 +8,17 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n-        for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n-                return false;\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i + 1 < csLen) {\n+                char ch2 = cs.charAt(i + 1);\n+                int codePoint = Character.toCodePoint(ch, ch2);\n+                if (Arrays.binarySearch(searchChars, (char) codePoint) >= 0) {\n+                    return false;\n+                }\n             }\n+            i++; // advance past high surrogate\n+        } else if (Arrays.binarySearch(searchChars, ch) >= 0) {\n+            return false;\n         }\n     }\n     return true;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            // check if the next character is a low surrogate\n            if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                // combine the high and low surrogates into a single character and check if it's in the searchChars array\n                char[] combined = Character.toChars(Character.toCodePoint(ch, cs.charAt(i + 1)));\n                if (containsAny(combined, searchChars)) {\n                    return false;\n                }\n                i++;\n            }\n        } else {\n            // ch is not a surrogate, check if it's in the searchChars array\n            if (containsAny(new char[] { ch }, searchChars)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,10 +8,19 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n-        for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n+        if (Character.isHighSurrogate(ch)) {\n+            // check if the next character is a low surrogate\n+            if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i + 1))) {\n+                // combine the high and low surrogates into a single character and check if it's in the searchChars array\n+                char[] combined = Character.toChars(Character.toCodePoint(ch, cs.charAt(i + 1)));\n+                if (containsAny(combined, searchChars)) {\n+                    return false;\n+                }\n+                i++;\n+            }\n+        } else {\n+            // ch is not a surrogate, check if it's in the searchChars array\n+            if (containsAny(new char[] { ch }, searchChars)) {\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // missing low surrogate, fine, like String.indexOf(String)\n                // ch is in the Basic Multilingual Plane\n                continue;\n            }\n        }\n        return false;\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -12,9 +12,10 @@\n             if (searchChars[j] == ch) {\n                 // missing low surrogate, fine, like String.indexOf(String)\n                 // ch is in the Basic Multilingual Plane\n-                return false;\n+                continue;\n             }\n         }\n+        return false;\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (Character.isHighSurrogate(searchChars[j]) && (j < searchLen - 1) && Character.isLowSurrogate(searchChars[j+1])) {\n                if (Character.toCodePoint(searchChars[j], searchChars[j+1]) == Character.codePointAt(cs, i)) {\n                    // ch matches a high-low surrogate pair in searchChars, skip the next char in cs\n                    i++;\n                    break;\n                }\n            } else if (searchChars[j] == ch) {\n                // ch is a non-surrogate char in the Basic Multilingual Plane\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -9,9 +9,14 @@\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n+            if (Character.isHighSurrogate(searchChars[j]) && (j < searchLen - 1) && Character.isLowSurrogate(searchChars[j+1])) {\n+                if (Character.toCodePoint(searchChars[j], searchChars[j+1]) == Character.codePointAt(cs, i)) {\n+                    // ch matches a high-low surrogate pair in searchChars, skip the next char in cs\n+                    i++;\n+                    break;\n+                }\n+            } else if (searchChars[j] == ch) {\n+                // ch is a non-surrogate char in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (j < searchLen - 1 && Character.isLowSurrogate(searchChars[j+1])) {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n} \n\nThe fixed function checks for surrogate pairs when a high surrogate is encountered in the input string.", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,9 +10,13 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n-                return false;\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (j < searchLen - 1 && Character.isLowSurrogate(searchChars[j+1])) {\n+                        return false;\n+                    }\n+                } else {\n+                    return false;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i < csLen - 1) {\n                char ch2 = cs.charAt(i+1);\n                if (Character.isLowSurrogate(ch2)) {\n                    ch = Character.toCodePoint(ch, ch2);\n                }\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,10 +8,16 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i < csLen - 1) {\n+                char ch2 = cs.charAt(i+1);\n+                if (Character.isLowSurrogate(ch2)) {\n+                    ch = Character.toCodePoint(ch, ch2);\n+                }\n+            }\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // missing low surrogate, fine, like String.indexOf(String)\n                // ch is in the Basic Multilingual Plane\n                break;\n            }\n            if (j == searchLen - 1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -12,9 +12,12 @@\n             if (searchChars[j] == ch) {\n                 // missing low surrogate, fine, like String.indexOf(String)\n                 // ch is in the Basic Multilingual Plane\n-                return false;\n+                break;\n+            }\n+            if (j == searchLen - 1) {\n+                return true;\n             }\n         }\n     }\n-    return true;\n+    return false;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            // High surrogate should always be followed by a low surrogate\n            if (i < csLen - 1) {\n                char ch2 = cs.charAt(i+1);\n                if (Character.isLowSurrogate(ch2)) {\n                    ch = Character.toCodePoint(ch, ch2);\n                    i++;\n                }\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,10 +8,18 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            // High surrogate should always be followed by a low surrogate\n+            if (i < csLen - 1) {\n+                char ch2 = cs.charAt(i+1);\n+                if (Character.isLowSurrogate(ch2)) {\n+                    ch = Character.toCodePoint(ch, ch2);\n+                    i++;\n+                }\n+            }\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            // if the character is a high surrogate, we need to check the next character\n            i++;\n            if (i < csLen && Character.isLowSurrogate(cs.charAt(i))) {\n                char surrogate = Character.toCodePoint(ch, cs.charAt(i));\n                if (contains(searchChars, surrogate)) {\n                    return false;\n                }\n            }\n        } else {\n            // character is not a surrogate\n            if (contains(searchChars, ch)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n// helper method to check if a given character exists in the searchChars array\nprivate static boolean contains(char[] searchChars, char ch) {\n    for (int j = 0; j < searchChars.length; j++) {\n        if (searchChars[j] == ch) {\n            return true;\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,10 +8,18 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n-        for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n+        if (Character.isHighSurrogate(ch)) {\n+            // if the character is a high surrogate, we need to check the next character\n+            i++;\n+            if (i < csLen && Character.isLowSurrogate(cs.charAt(i))) {\n+                char surrogate = Character.toCodePoint(ch, cs.charAt(i));\n+                if (contains(searchChars, surrogate)) {\n+                    return false;\n+                }\n+            }\n+        } else {\n+            // character is not a surrogate\n+            if (contains(searchChars, ch)) {\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            // check if there is a low surrogate following ch\n            if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i+1))) {\n                ch = Character.toCodePoint(ch, cs.charAt(i+1));\n                i++;\n            }\n            else {\n                // missing low surrogate, invalid\n                return false;\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,10 +8,19 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            // check if there is a low surrogate following ch\n+            if (i < csLen - 1 && Character.isLowSurrogate(cs.charAt(i+1))) {\n+                ch = Character.toCodePoint(ch, cs.charAt(i+1));\n+                i++;\n+            }\n+            else {\n+                // missing low surrogate, invalid\n+                return false;\n+            }\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i + 1 < csLen) {\n                char nextChar = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(nextChar)) {\n                    ch = Character.toS", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i < csLen - 1) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    ch = Character.toCodePoint(ch, ch2);\n                    i++;\n                }\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,10 +8,17 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i < csLen - 1) {\n+                char ch2 = cs.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2)) {\n+                    ch = Character.toCodePoint(ch, ch2);\n+                    i++;\n+                }\n+            }\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (Character.isHighSurrogate(ch)) {\n                if (j + 1 < searchLen && Character.isLowSurrogate(searchChars[j+1])) {\n                    if (Character.toCodePoint(ch, searchChars[j+1]) == Character.codePointAt(searchChars, j+1)) {\n                        // ch is a surrogate pair match\n                        return false;\n                    }\n                } else {\n                    // missing low surrogate\n                    throw new IllegalArgumentException(\"The input contains an invalid surrogate pair\");\n                }\n            } else if (Character.isLowSurrogate(ch)) {\n                // missing high surrogate\n                throw new IllegalArgumentException(\"The input contains an invalid surrogate pair\");\n            } else if (searchChars[j] == ch) {\n                // ch is in the Basic Multilingual Plane\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -9,8 +9,20 @@\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n-            if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n+            if (Character.isHighSurrogate(ch)) {\n+                if (j + 1 < searchLen && Character.isLowSurrogate(searchChars[j+1])) {\n+                    if (Character.toCodePoint(ch, searchChars[j+1]) == Character.codePointAt(searchChars, j+1)) {\n+                        // ch is a surrogate pair match\n+                        return false;\n+                    }\n+                } else {\n+                    // missing low surrogate\n+                    throw new IllegalArgumentException(\"The input contains an invalid surrogate pair\");\n+                }\n+            } else if (Character.isLowSurrogate(ch)) {\n+                // missing high surrogate\n+                throw new IllegalArgumentException(\"The input contains an invalid surrogate pair\");\n+            } else if (searchChars[j] == ch) {\n                 // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i < csLen - 1) {\n                char ch2 = cs.charAt(i+1);\n                if (Character.isLowSurrogate(ch2)) {\n                    ch = Character.toCodePoint(ch, ch2);\n                    i++;\n                }\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,10 +8,17 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i < csLen - 1) {\n+                char ch2 = cs.charAt(i+1);\n+                if (Character.isLowSurrogate(ch2)) {\n+                    ch = Character.toCodePoint(ch, ch2);\n+                    i++;\n+                }\n+            }\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (j == searchLen - 1) {\n                        // missing low surrogate\n                        return false;\n                    }\n                    char nextChar = searchChars[j + 1];\n                    if (Character.isLowSurrogate(nextChar)) {\n                        // valid surrogate pair\n                        return false;\n                    }\n                } else {\n                    // not a surrogate pair\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,9 +10,20 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n-                return false;\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (j == searchLen - 1) {\n+                        // missing low surrogate\n+                        return false;\n+                    }\n+                    char nextChar = searchChars[j + 1];\n+                    if (Character.isLowSurrogate(nextChar)) {\n+                        // valid surrogate pair\n+                        return false;\n+                    }\n+                } else {\n+                    // not a surrogate pair\n+                    return false;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i + 1 < csLen) {\n                char ch2 = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(ch2)) {\n                    ch = Character.toCodePoint(ch, ch2);\n                    i++;\n                }\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,10 +8,17 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i + 1 < csLen) {\n+                char ch2 = cs.charAt(i + 1);\n+                if (Character.isLowSurrogate(ch2)) {\n+                    ch = Character.toCodePoint(ch, ch2);\n+                    i++;\n+                }\n+            }\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // missing low surrogate, fine, like String.indexOf(String)\n                // ch is in the Basic Multilingual Plane\n                return false;\n            }\n        }\n        // check for high surrogate\n        if (Character.isHighSurrogate(ch)) {\n            if (i < csLen - 1) {\n                char next = cs.charAt(i+1);\n                if (Character.isLowSurrogate(next)) {\n                    int codePoint = Character.toCodePoint(ch, next);\n                    if (contains(searchChars, codePoint)) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n\n// helper function to check if array contains a specific character\nprivate static boolean contains(char[] arr, int codePoint) {\n    for (char c : Character.toChars(codePoint)) {\n        if (contains(arr, c)) {\n            return true;\n        }\n    }\n    return false;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -15,6 +15,18 @@\n                 return false;\n             }\n         }\n+        // check for high surrogate\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i < csLen - 1) {\n+                char next = cs.charAt(i+1);\n+                if (Character.isLowSurrogate(next)) {\n+                    int codePoint = Character.toCodePoint(ch, next);\n+                    if (contains(searchChars, codePoint)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+        }\n     }\n     return true;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if(Character.isHighSurrogate(ch)){\n            if(i+1 < csLen && Character.isLowSurrogate(cs.charAt(i+1))){\n                ch = Character.toCodePoint(ch, cs.charAt(i+1));\n                i++;\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // missing low surrogate, fine, like String.indexOf(String)\n                // ch is in the Basic Multilingual Plane\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,6 +8,12 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if(Character.isHighSurrogate(ch)){\n+            if(i+1 < csLen && Character.isLowSurrogate(cs.charAt(i+1))){\n+                ch = Character.toCodePoint(ch, cs.charAt(i+1));\n+                i++;\n+            }\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n                 // missing low surrogate, fine, like String.indexOf(String)\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (j == searchLen - 1) {\n                        return false;\n                    } else {\n                        char next = cs.charAt(i + 1);\n                        if (Character.isLowSurrogate(next)) {\n                            char cmp = Character.toCodePoint(ch, next);\n                            if (searchChars[j] == cmp) {\n                                return false;\n                            }\n                        }\n                    }\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -10,9 +10,21 @@\n         char ch = cs.charAt(i);\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n-                // ch is in the Basic Multilingual Plane\n-                return false;\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (j == searchLen - 1) {\n+                        return false;\n+                    } else {\n+                        char next = cs.charAt(i + 1);\n+                        if (Character.isLowSurrogate(next)) {\n+                            char cmp = Character.toCodePoint(ch, next);\n+                            if (searchChars[j] == cmp) {\n+                                return false;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    return false;\n+                }\n             }\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "// ContainsNone\n//-----------------------------------------------------------------------\npublic static boolean containsNone(CharSequence cs, char[] searchChars) {\n    if (cs == null || searchChars == null) {\n        return true;\n    }\n    int csLen = cs.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < csLen; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            i++;\n            if (i == csLen) {\n              return true;\n            }\n            char ch2 = cs.charAt(i);\n            if (!Character.isLowSurrogate(ch2)) {\n              return true;\n            }\n            ch = Character.toCodePoint(ch, ch2);\n        }\n        for (int j = 0; j < searchLen; j++) {\n            if (searchChars[j] == ch) {\n                // ch is in the Basic Multilingual Plane\n                return false;\n            }\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/lang3/StringUtils.java@containsNone\n+++ org/apache/commons/lang3/StringUtils.java@containsNone\n@@ -8,9 +8,19 @@\n     int searchLen = searchChars.length;\n     for (int i = 0; i < csLen; i++) {\n         char ch = cs.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            i++;\n+            if (i == csLen) {\n+              return true;\n+            }\n+            char ch2 = cs.charAt(i);\n+            if (!Character.isLowSurrogate(ch2)) {\n+              return true;\n+            }\n+            ch = Character.toCodePoint(ch, ch2);\n+        }\n         for (int j = 0; j < searchLen; j++) {\n             if (searchChars[j] == ch) {\n-                // missing low surrogate, fine, like String.indexOf(String)\n                 // ch is in the Basic Multilingual Plane\n                 return false;\n             }\n", "finish_reason": "stop", "valid": false, "num": 1}]