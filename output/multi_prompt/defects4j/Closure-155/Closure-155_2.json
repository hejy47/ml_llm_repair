[{"output": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName()) {\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n        blockStack.pop();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n@@ -1,11 +1,11 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (n.getType() == Token.NAME) {\n+    if (n.isName()) {\n         Var v = t.getScope().getVar(n.getString());\n         if (v != null && varFilter.apply(v)) {\n             addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n         }\n     }\n-    if (isBlockBoundary(n, parent)) {\n+    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n         blockStack.pop();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName()) {\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (NodeUtil.isBlockScopedDeclaration(n)) {\n        blockStack.pop();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n@@ -1,11 +1,11 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (n.getType() == Token.NAME) {\n+    if (n.isName()) {\n         Var v = t.getScope().getVar(n.getString());\n         if (v != null && varFilter.apply(v)) {\n             addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n         }\n     }\n-    if (isBlockBoundary(n, parent)) {\n+    if (NodeUtil.isBlockScopedDeclaration(n)) {\n         blockStack.pop();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName()) {\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (isBlockBoundary(n, parent)) {\n        blockStack.pop();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n@@ -1,5 +1,5 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (n.getType() == Token.NAME) {\n+    if (n.isName()) {\n         Var v = t.getScope().getVar(n.getString());\n         if (v != null && varFilter.apply(v)) {\n             addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName()) {\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (NodeUtil.isBlockBoundary(n, parent)) {\n        blockStack.pop();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n@@ -1,11 +1,11 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (n.getType() == Token.NAME) {\n+    if (n.isName()) {\n         Var v = t.getScope().getVar(n.getString());\n         if (v != null && varFilter.apply(v)) {\n             addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n         }\n     }\n-    if (isBlockBoundary(n, parent)) {\n+    if (NodeUtil.isBlockBoundary(n, parent)) {\n         blockStack.pop();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 7}, {"output": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.NAME) {\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (NodeUtil.isBlockBoundary(n, parent)) { // fixed by adding NodeUtil.\n        blockStack.pop();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n@@ -5,7 +5,7 @@\n             addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n         }\n     }\n-    if (isBlockBoundary(n, parent)) {\n+    if (NodeUtil.isBlockBoundary(n, parent)) { // fixed by adding NodeUtil.\n         blockStack.pop();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n != null && n.getType() == Token.NAME) {\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (n != null && isBlockBoundary(n, parent)) {\n        blockStack.pop();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n@@ -1,11 +1,11 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (n.getType() == Token.NAME) {\n+    if (n != null && n.getType() == Token.NAME) {\n         Var v = t.getScope().getVar(n.getString());\n         if (v != null && varFilter.apply(v)) {\n             addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n         }\n     }\n-    if (isBlockBoundary(n, parent)) {\n+    if (n != null && isBlockBoundary(n, parent)) {\n         blockStack.pop();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName()) {\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (NodeUtil.isBlockBoundary(n)) {\n        blockStack.pop();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n@@ -1,11 +1,11 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (n.getType() == Token.NAME) {\n+    if (n.isName()) {\n         Var v = t.getScope().getVar(n.getString());\n         if (v != null && varFilter.apply(v)) {\n             addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n         }\n     }\n-    if (isBlockBoundary(n, parent)) {\n+    if (NodeUtil.isBlockBoundary(n)) {\n         blockStack.pop();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName()) { // Using isName instead of getType() == Token.NAME\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (isBlockBoundary(n, parent)) {\n        blockStack.pop();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n@@ -1,5 +1,5 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (n.getType() == Token.NAME) {\n+    if (n.isName()) { // Using isName instead of getType() == Token.NAME\n         Var v = t.getScope().getVar(n.getString());\n         if (v != null && varFilter.apply(v)) {\n             addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.NAME) {\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (n.isBlock() && !parent.isBlock()) {\n        blockStack.pop();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n@@ -5,7 +5,7 @@\n             addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n         }\n     }\n-    if (isBlockBoundary(n, parent)) {\n+    if (n.isBlock() && !parent.isBlock()) {\n         blockStack.pop();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName()) {\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (NodeUtil.isBlockScopedNameDeclaration(n)) {\n        blockStack.add(n);\n    }\n    if (NodeUtil.isBlockScopeRoot(n)) {\n        blockStack.pop();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n@@ -1,11 +1,14 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (n.getType() == Token.NAME) {\n+    if (n.isName()) {\n         Var v = t.getScope().getVar(n.getString());\n         if (v != null && varFilter.apply(v)) {\n             addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n         }\n     }\n-    if (isBlockBoundary(n, parent)) {\n+    if (NodeUtil.isBlockScopedNameDeclaration(n)) {\n+        blockStack.add(n);\n+    }\n+    if (NodeUtil.isBlockScopeRoot(n)) {\n         blockStack.pop();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName()) {\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (NodeUtil.isBlockControlStructure(n)) {\n        blockStack.pop();\n    }\n}", "diff": "--- com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n+++ com/google/javascript/jscomp/ReferenceCollectingCallback.java@visit\n@@ -1,11 +1,11 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (n.getType() == Token.NAME) {\n+    if (n.isName()) {\n         Var v = t.getScope().getVar(n.getString());\n         if (v != null && varFilter.apply(v)) {\n             addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n         }\n     }\n-    if (isBlockBoundary(n, parent)) {\n+    if (NodeUtil.isBlockControlStructure(n)) {\n         blockStack.pop();\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]