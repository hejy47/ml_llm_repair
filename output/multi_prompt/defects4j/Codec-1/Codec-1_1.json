[{"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    if (inwd[0] == 'K' && inwd[1] == 'N') {\n        local.append(inwd, 1, inwd.length - 1);\n    } else if (inwd[0] == 'W' && inwd[1] == 'R') {\n        // WR -> R\n        local.append(inwd, 1, inwd.length - 1);\n        // WH -> W\n    } else if (inwd[0] == 'W' && inwd[1] == 'H') {\n        local.append(inwd, 1, inwd.length - 1);\n        local.setCharAt(0, 'W');\n    } else {\n        local.append(inwd);\n    }\n\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch (symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                        'C':\n                    if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                        'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                        'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -13,44 +13,19 @@\n     //   output\n     StringBuffer code = new StringBuffer(10);\n     // handle initial 2 characters exceptions\n-    switch(inwd[0]) {\n-        case 'K':\n-        case 'G':\n-        case 'P':\n-                        if (inwd[1] == 'N') {\n-                local.append(inwd, 1, inwd.length - 1);\n-            } else {\n-                local.append(inwd);\n-            }\n-            break;\n-        case 'A':\n-                        if (inwd[1] == 'E') {\n-                local.append(inwd, 1, inwd.length - 1);\n-            } else {\n-                local.append(inwd);\n-            }\n-            break;\n-        case 'W':\n-                        if (inwd[1] == 'R') {\n-                // WR -> R\n-                local.append(inwd, 1, inwd.length - 1);\n-                break;\n-            }\n-            if (inwd[1] == 'H') {\n-                local.append(inwd, 1, inwd.length - 1);\n-                // WH -> W\n-                local.setCharAt(0, 'W');\n-            } else {\n-                local.append(inwd);\n-            }\n-            break;\n-        case 'X':\n-                        inwd[0] = 'S';\n-            local.append(inwd);\n-            break;\n-        default:\n-            local.append(inwd);\n-    }\n+    if (inwd[0] == 'K' && inwd[1] == 'N') {\n+        local.append(inwd, 1, inwd.length - 1);\n+    } else if (inwd[0] == 'W' && inwd[1] == 'R') {\n+        // WR -> R\n+        local.append(inwd, 1, inwd.length - 1);\n+        // WH -> W\n+    } else if (inwd[0] == 'W' && inwd[1] == 'H') {\n+        local.append(inwd, 1, inwd.length - 1);\n+        local.setCharAt(0, 'W');\n+    } else {\n+        local.append(inwd);\n+    }\n+\n     // now local has working string with initials fixed\n     int wdsz = local.length();\n     int n = 0;\n@@ -62,7 +37,7 @@\n             n++;\n         } else {\n             // not dup\n-            switch(symb) {\n+            switch (symb) {\n                 case 'A':\n                 case 'E':\n                 case 'I':\n@@ -81,8 +56,8 @@\n                     code.append(symb);\n                     break;\n                 case // lots of C special cases\n-                'C':\n-                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n+                        'C':\n+                    if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                         break;\n                     }\n                     if (regionMatch(local, n, \"CIA\")) {\n@@ -123,7 +98,7 @@\n                     }\n                     break;\n                 case // GH silent at end or before consonant\n-                'G':\n+                        'G':\n                     if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                         break;\n                     }\n@@ -216,7 +191,7 @@\n                     break;\n                 case 'W':\n                 case // silent if not followed by vowel\n-                'Y':\n+                        'Y':\n                     if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                         code.append(symb);\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuilder local = new StringBuilder(40);\n    //   output\n    StringBuilder code = new StringBuilder(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd.length > 1 && inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length > 1 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -9,34 +9,34 @@\n     }\n     char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n     // manipulate\n-    StringBuffer local = new StringBuffer(40);\n+    StringBuilder local = new StringBuilder(40);\n     //   output\n-    StringBuffer code = new StringBuffer(10);\n+    StringBuilder code = new StringBuilder(10);\n     // handle initial 2 characters exceptions\n     switch(inwd[0]) {\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+                        if (inwd.length > 1 && inwd[1] == 'E') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length > 1 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd[1] == 'E' || inwd[1] == 'Y') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length > 1 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\") || regionMatch(local, n, \"CC\")) {\n                        // \"CIA\" -> X, \"CC\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\") || regionMatch(local, n, \"SIAN\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\") || regionMatch(local, n, \"TCH\")) {\n                        code.append('X');\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,26 +17,26 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+                        if (inwd[1] == 'E' || inwd[1] == 'Y') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length > 1 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -85,8 +85,8 @@\n                                         if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                         break;\n                     }\n-                    if (regionMatch(local, n, \"CIA\")) {\n-                        // \"CIA\" -> X\n+                    if (regionMatch(local, n, \"CIA\") || regionMatch(local, n, \"CC\")) {\n+                        // \"CIA\" -> X, \"CC\" -> X\n                         code.append('X');\n                         break;\n                     }\n@@ -189,19 +189,15 @@\n                     code.append('K');\n                     break;\n                 case 'S':\n-                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n+                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\") || regionMatch(local, n, \"SIAN\")) {\n                         code.append('X');\n                     } else {\n                         code.append('S');\n                     }\n                     break;\n                 case 'T':\n-                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n+                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\") || regionMatch(local, n, \"TCH\")) {\n                         code.append('X');\n-                        break;\n-                    }\n-                    if (regionMatch(local, n, \"TCH\")) {\n-                        // Silent if in \"TCH\"\n                         break;\n                     }\n                     // substitute numeral 0 for TH (resembles theta after all)\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n            if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n            if (inwd.length > 1 && inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'G':\n            if (inwd.length > 1 && inwd[1] == 'N') {\n                if (inwd.length > 2 && inwd[2] == 'E') {\n                    // GNED -> J\n                    local.append(inwd, 1, inwd.length - 1);\n                    local.setCharAt(0, 'J');\n                } else {\n                    local.append(inwd, 1, inwd.length - 1);\n                }\n            } else {\n                if (inwd.length > 1 && inwd[1] == 'H') {\n                    if (inwd.length > 2 && !isVowel(inwd, 2)) {\n                        local.append(inwd, 1, inwd.length - 1);\n                        local.setCharAt(0, 'K');\n                    } else {\n                        local.append(inwd);\n                    }\n                } else {\n                    local.append(inwd);\n                }\n            }\n            break;\n        case 'W':\n            if (inwd.length > 1 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                if (inwd.length > 1 && inwd[1] == 'H') {\n                    local.append(inwd, 1, inwd.length - 1);\n                    // WH -> W\n                    local.setCharAt(0, 'W');\n                } else {\n                    local.append(inwd);\n                }\n            }\n            break;\n        case 'X':\n            inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'C':\n                    // lots of C special cases\n                    if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        // SCI, SCE, SCY -> S\n                        code.append('S');\n                    } else {\n                        if (regionMatch(local, n, \"CIA\")) {\n                            // \"CIA\" -> X\n                            code.append('X');\n                        } else {\n                            if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                                // CI,CE,CY -> S\n                                code.append('S');\n                            } else {\n                                if (isNextChar(local, n, 'H')) {\n                                    // CH->C if not in SCHTHR\n                                    if (n == 0 && wdsz >= 3 && isVowel(local, 2)) {\n                                        code.append('K');\n                                    } else {\n                                        if (n > 0 && regionMatch(local, n, \"CHAE\")) {\n                                            code.append('K');\n                                        } else {\n                                            if (regionMatch(local, n, \"CH\")) {\n                                                code.append('K');\n                                            } else {\n                                                if (regionMatch(local, n, \"CHT\")) {\n                                                    code.append('0');\n                                                } else {\n                                                    code.append('K');\n                                                }\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    code.append('K');\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        // GH -> F if at end or before a consonant\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0 && !isVowel(local, n - 1)) || (n > 1 && isRegionVowel(local, n - 2)) || (n == 0 && (regionMatch(local, n, \"GEE\") || regionMatch(local, n, \"GEO\") || regionMatch(local, n, \"GEL\")))) {\n                        // Hard-G rule\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        break; // terminal H\n                    }\n                    if (n > 0 && (VARSON.indexOf(local.charAt(n - 1)) >= 0 || isVowel(local, n + 1))) {\n                        break;\n                    }\n                    code.append('H');\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case 'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            n = getCodeIndex(code);\n        }\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,35 +17,57 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+            if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+            if (inwd.length > 1 && inwd[1] == 'E') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n+        case 'G':\n+            if (inwd.length > 1 && inwd[1] == 'N') {\n+                if (inwd.length > 2 && inwd[2] == 'E') {\n+                    // GNED -> J\n+                    local.append(inwd, 1, inwd.length - 1);\n+                    local.setCharAt(0, 'J');\n+                } else {\n+                    local.append(inwd, 1, inwd.length - 1);\n+                }\n+            } else {\n+                if (inwd.length > 1 && inwd[1] == 'H') {\n+                    if (inwd.length > 2 && !isVowel(inwd, 2)) {\n+                        local.append(inwd, 1, inwd.length - 1);\n+                        local.setCharAt(0, 'K');\n+                    } else {\n+                        local.append(inwd);\n+                    }\n+                } else {\n+                    local.append(inwd);\n+                }\n+            }\n+            break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+            if (inwd.length > 1 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n-                break;\n-            }\n-            if (inwd[1] == 'H') {\n-                local.append(inwd, 1, inwd.length - 1);\n-                // WH -> W\n-                local.setCharAt(0, 'W');\n-            } else {\n-                local.append(inwd);\n+            } else {\n+                if (inwd.length > 1 && inwd[1] == 'H') {\n+                    local.append(inwd, 1, inwd.length - 1);\n+                    // WH -> W\n+                    local.setCharAt(0, 'W');\n+                } else {\n+                    local.append(inwd);\n+                }\n             }\n             break;\n         case 'X':\n-                        inwd[0] = 'S';\n+            inwd[0] = 'S';\n             local.append(inwd);\n             break;\n         default:\n@@ -71,46 +93,52 @@\n                     if (n == 0) {\n                         code.append(symb);\n                     }\n-                    // only use vowel if leading char\n                     break;\n                 case 'B':\n                     if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                         // B is silent if word ends in MB\n-                        break;\n-                    }\n-                    code.append(symb);\n-                    break;\n-                case // lots of C special cases\n-                'C':\n-                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n-                        break;\n-                    }\n-                    if (regionMatch(local, n, \"CIA\")) {\n-                        // \"CIA\" -> X\n-                        code.append('X');\n-                        break;\n-                    }\n-                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n+                    } else {\n+                        code.append(symb);\n+                    }\n+                    break;\n+                case 'C':\n+                    // lots of C special cases\n+                    if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n+                        // SCI, SCE, SCY -> S\n                         code.append('S');\n-                        // CI,CE,CY -> S\n-                        break;\n-                    }\n-                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n-                        // SCH->sk\n-                        code.append('K');\n-                        break;\n-                    }\n-                    if (isNextChar(local, n, 'H')) {\n-                        // detect CH\n-                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n-                            // CH consonant -> K consonant\n-                            code.append('K');\n+                    } else {\n+                        if (regionMatch(local, n, \"CIA\")) {\n+                            // \"CIA\" -> X\n+                            code.append('X');\n                         } else {\n-                            // CHvowel -> X\n-                            code.append('X');\n+                            if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n+                                // CI,CE,CY -> S\n+                                code.append('S');\n+                            } else {\n+                                if (isNextChar(local, n, 'H')) {\n+                                    // CH->C if not in SCHTHR\n+                                    if (n == 0 && wdsz >= 3 && isVowel(local, 2)) {\n+                                        code.append('K');\n+                                    } else {\n+                                        if (n > 0 && regionMatch(local, n, \"CHAE\")) {\n+                                            code.append('K');\n+                                        } else {\n+                                            if (regionMatch(local, n, \"CH\")) {\n+                                                code.append('K');\n+                                            } else {\n+                                                if (regionMatch(local, n, \"CHT\")) {\n+                                                    code.append('0');\n+                                                } else {\n+                                                    code.append('K');\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                } else {\n+                                    code.append('K');\n+                                }\n+                            }\n                         }\n-                    } else {\n-                        code.append('K');\n                     }\n                     break;\n                 case 'D':\n@@ -120,42 +148,6 @@\n                         n += 2;\n                     } else {\n                         code.append('T');\n-                    }\n-                    break;\n-                case // GH silent at end or before consonant\n-                'G':\n-                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n-                        break;\n-                    }\n-                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n-                        break;\n-                    }\n-                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n-                        // silent G\n-                        break;\n-                    }\n-                    if (isPreviousChar(local, n, 'G')) {\n-                        hard = true;\n-                    } else {\n-                        hard = false;\n-                    }\n-                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n-                        code.append('J');\n-                    } else {\n-                        code.append('K');\n-                    }\n-                    break;\n-                case 'H':\n-                    if (isLastChar(wdsz, n)) {\n-                        // terminal H\n-                        break;\n-                    }\n-                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n-                        break;\n-                    }\n-                    if (isVowel(local, n + 1)) {\n-                        // Hvowel\n-                        code.append('H');\n                     }\n                     break;\n                 case 'F':\n@@ -166,14 +158,41 @@\n                 case 'R':\n                     code.append(symb);\n                     break;\n+                case 'G':\n+                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n+                        // GH -> F if at end or before a consonant\n+                        break;\n+                    }\n+                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n+                        break;\n+                    }\n+                    if ((n > 0 && !isVowel(local, n - 1)) || (n > 1 && isRegionVowel(local, n - 2)) || (n == 0 && (regionMatch(local, n, \"GEE\") || regionMatch(local, n, \"GEO\") || regionMatch(local, n, \"GEL\")))) {\n+                        // Hard-G rule\n+                        hard = true;\n+                    } else {\n+                        hard = false;\n+                    }\n+                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n+                        code.append('J');\n+                    } else {\n+                        code.append('K');\n+                    }\n+                    break;\n+                case 'H':\n+                    if (isLastChar(wdsz, n)) {\n+                        break; // terminal H\n+                    }\n+                    if (n > 0 && (VARSON.indexOf(local.charAt(n - 1)) >= 0 || isVowel(local, n + 1))) {\n+                        break;\n+                    }\n+                    code.append('H');\n+                    break;\n                 case 'K':\n                     if (n > 0) {\n-                        // not initial\n                         if (!isPreviousChar(local, n, 'C')) {\n                             code.append(symb);\n                         }\n                     } else {\n-                        // initial K\n                         code.append(symb);\n                     }\n                     break;\n@@ -204,7 +223,6 @@\n                         // Silent if in \"TCH\"\n                         break;\n                     }\n-                    // substitute numeral 0 for TH (resembles theta after all)\n                     if (regionMatch(local, n, \"TH\")) {\n                         code.append('0');\n                     } else {\n@@ -215,8 +233,7 @@\n                     code.append('F');\n                     break;\n                 case 'W':\n-                case // silent if not followed by vowel\n-                'Y':\n+                case 'Y':\n                     if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                         code.append(symb);\n                     }\n@@ -229,10 +246,8 @@\n                     code.append('S');\n                     break;\n             }\n-            // end switch\n-            n++;\n+            n = getCodeIndex(code);\n         }\n-        // end else from symb != 'C'\n         if (code.length() > this.getMaxCodeLen()) {\n             code.setLength(this.getMaxCodeLen());\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd[1] == 'E' || inwd[1] == 'Y') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CH\") || regionMatch(local, n, \"CA\") || regionMatch(local, n, \"CO\")) {\n                        // CH, CA, CO -> K\n                        code.append('K');\n                        break;\n                    }\n                    code.append('K');\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,14 +17,14 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+                        if (inwd[1] == 'E' || inwd[1] == 'Y') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n@@ -100,18 +100,12 @@\n                         code.append('K');\n                         break;\n                     }\n-                    if (isNextChar(local, n, 'H')) {\n-                        // detect CH\n-                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n-                            // CH consonant -> K consonant\n-                            code.append('K');\n-                        } else {\n-                            // CHvowel -> X\n-                            code.append('X');\n-                        }\n-                    } else {\n+                    if (regionMatch(local, n, \"CH\") || regionMatch(local, n, \"CA\") || regionMatch(local, n, \"CO\")) {\n+                        // CH, CA, CO -> K\n                         code.append('K');\n-                    }\n+                        break;\n+                    }\n+                    code.append('K');\n                     break;\n                 case 'D':\n                     if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length > 1 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                        'C':\n                    if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                        'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                        'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,7 +17,7 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n@@ -31,12 +31,12 @@\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length > 1 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -81,8 +81,8 @@\n                     code.append(symb);\n                     break;\n                 case // lots of C special cases\n-                'C':\n-                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n+                        'C':\n+                    if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                         break;\n                     }\n                     if (regionMatch(local, n, \"CIA\")) {\n@@ -123,7 +123,7 @@\n                     }\n                     break;\n                 case // GH silent at end or before consonant\n-                'G':\n+                        'G':\n                     if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                         break;\n                     }\n@@ -216,7 +216,7 @@\n                     break;\n                 case 'W':\n                 case // silent if not followed by vowel\n-                'Y':\n+                        'Y':\n                     if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                         code.append(symb);\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length > 1 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    code.append('W');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,7 +17,7 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n@@ -31,12 +31,12 @@\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length > 1 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -187,6 +187,7 @@\n                     break;\n                 case 'Q':\n                     code.append('K');\n+                    code.append('W');\n                     break;\n                 case 'S':\n                     if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length > 1 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (n > 0 && !isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,7 +17,7 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n@@ -31,12 +31,12 @@\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length > 1 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -217,7 +217,7 @@\n                 case 'W':\n                 case // silent if not followed by vowel\n                 'Y':\n-                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n+                    if (n > 0 && !isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                         code.append(symb);\n                     }\n                     break;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length > 1 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n                        local.append(inwd);\n                        break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,7 +17,7 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n@@ -31,12 +31,12 @@\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length > 1 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -46,8 +46,8 @@\n             break;\n         case 'X':\n                         inwd[0] = 'S';\n-            local.append(inwd);\n-            break;\n+                        local.append(inwd);\n+                        break;\n         default:\n             local.append(inwd);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length >= 2 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd.length >= 2 && inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length >= 2 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length >= 2 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != C\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,26 +17,26 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length >= 2 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+                        if (inwd.length >= 2 && inwd[1] == 'E') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length >= 2 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length >= 2 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -51,6 +51,7 @@\n         default:\n             local.append(inwd);\n     }\n+\n     // now local has working string with initials fixed\n     int wdsz = local.length();\n     int n = 0;\n@@ -232,7 +233,7 @@\n             // end switch\n             n++;\n         }\n-        // end else from symb != 'C'\n+        // end else from symb != C\n         if (code.length() > this.getMaxCodeLen()) {\n             code.setLength(this.getMaxCodeLen());\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd.length > 1 && inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length > 1 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,26 +17,26 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+                        if (inwd.length > 1 && inwd[1] == 'E') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length > 1 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd.length > 1 && inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length > 1 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (isLastChar(wdsz, n) && isPreviousChar(local, n, 'E')) {\n                        // silent if at the end and the previous letter is 'E'\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,26 +17,26 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+                        if (inwd.length > 1 && inwd[1] == 'E') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length > 1 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -217,6 +217,10 @@\n                 case 'W':\n                 case // silent if not followed by vowel\n                 'Y':\n+                    if (isLastChar(wdsz, n) && isPreviousChar(local, n, 'E')) {\n+                        // silent if at the end and the previous letter is 'E'\n+                        break;\n+                    }\n                     if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                         code.append(symb);\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuilder local = new StringBuilder(40); //Changed from StringBuffer to StringBuilder for better performance\n    //   output\n    StringBuilder code = new StringBuilder(10); //Changed from StringBuffer to StringBuilder for better performance\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n            if (inwd.length > 1 && inwd[1] == 'N') { //Added null check and length check\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n            if (inwd.length > 1 && inwd[1] == 'E') { //Added null check and length check\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n            if (inwd.length > 1 && inwd[1] == 'R') { //Added null check and length check\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') { //Added null check and length check\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n            inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                        'C':\n                    if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                        'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                        'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -9,34 +9,34 @@\n     }\n     char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n     // manipulate\n-    StringBuffer local = new StringBuffer(40);\n+    StringBuilder local = new StringBuilder(40); //Changed from StringBuffer to StringBuilder for better performance\n     //   output\n-    StringBuffer code = new StringBuffer(10);\n+    StringBuilder code = new StringBuilder(10); //Changed from StringBuffer to StringBuilder for better performance\n     // handle initial 2 characters exceptions\n     switch(inwd[0]) {\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+            if (inwd.length > 1 && inwd[1] == 'N') { //Added null check and length check\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+            if (inwd.length > 1 && inwd[1] == 'E') { //Added null check and length check\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+            if (inwd.length > 1 && inwd[1] == 'R') { //Added null check and length check\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') { //Added null check and length check\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -45,7 +45,7 @@\n             }\n             break;\n         case 'X':\n-                        inwd[0] = 'S';\n+            inwd[0] = 'S';\n             local.append(inwd);\n             break;\n         default:\n@@ -81,8 +81,8 @@\n                     code.append(symb);\n                     break;\n                 case // lots of C special cases\n-                'C':\n-                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n+                        'C':\n+                    if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                         break;\n                     }\n                     if (regionMatch(local, n, \"CIA\")) {\n@@ -123,7 +123,7 @@\n                     }\n                     break;\n                 case // GH silent at end or before consonant\n-                'G':\n+                        'G':\n                     if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                         break;\n                     }\n@@ -216,7 +216,7 @@\n                     break;\n                 case 'W':\n                 case // silent if not followed by vowel\n-                'Y':\n+                        'Y':\n                     if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                         code.append(symb);\n                     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length>1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd.length>1 && inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length>1 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length>1 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,26 +17,26 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length>1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+                        if (inwd.length>1 && inwd[1] == 'E') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length>1 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length>1 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') { // Check if second character exists\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length > 1 && inwd[1] == 'R') { // Check if second character exists\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') { // Check if second character exists\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,7 +17,7 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') { // Check if second character exists\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n@@ -31,12 +31,12 @@\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length > 1 && inwd[1] == 'R') { // Check if second character exists\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') { // Check if second character exists\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd[1] == 'E' || inwd[1] == 'Y') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd.length > 1 && inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\") || regionMatch(local, n, \"CC\")) {\n                        // \"CIA\", \"CC\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\") || regionMatch(local, n, \"SIAN\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,26 +17,26 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+                        if (inwd[1] == 'E' || inwd[1] == 'Y') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+                        if (inwd.length > 1 && inwd[1] == 'R') {\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -85,8 +85,8 @@\n                                         if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                         break;\n                     }\n-                    if (regionMatch(local, n, \"CIA\")) {\n-                        // \"CIA\" -> X\n+                    if (regionMatch(local, n, \"CIA\") || regionMatch(local, n, \"CC\")) {\n+                        // \"CIA\", \"CC\" -> X\n                         code.append('X');\n                         break;\n                     }\n@@ -189,7 +189,7 @@\n                     code.append('K');\n                     break;\n                 case 'S':\n-                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n+                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\") || regionMatch(local, n, \"SIAN\")) {\n                         code.append('X');\n                     } else {\n                         code.append('S');\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd.length > 1 && inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd[1] == 'E' || inwd[1] == 'Y') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append(symb);\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,14 +17,14 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+                        if (inwd.length > 1 && inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+                        if (inwd[1] == 'E' || inwd[1] == 'Y') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n@@ -36,7 +36,7 @@\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -212,7 +212,7 @@\n                     }\n                     break;\n                 case 'V':\n-                    code.append('F');\n+                    code.append(symb);\n                     break;\n                 case 'W':\n                 case // silent if not followed by vowel\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n            if (inwd.length > 1 && inwd[1] == 'N') { // Fixed exception handling\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n            if (inwd.length > 1 && inwd[1] == 'E') { // Fixed exception handling\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n            if (inwd.length > 1 && inwd[1] == 'R') { // Fixed exception handling\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') { // Fixed exception handling\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n            inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                    if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -17,26 +17,26 @@\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+            if (inwd.length > 1 && inwd[1] == 'N') { // Fixed exception handling\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+            if (inwd.length > 1 && inwd[1] == 'E') { // Fixed exception handling\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+            if (inwd.length > 1 && inwd[1] == 'R') { // Fixed exception handling\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') { // Fixed exception handling\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -45,7 +45,7 @@\n             }\n             break;\n         case 'X':\n-                        inwd[0] = 'S';\n+            inwd[0] = 'S';\n             local.append(inwd);\n             break;\n         default:\n@@ -82,7 +82,7 @@\n                     break;\n                 case // lots of C special cases\n                 'C':\n-                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n+                    if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                         break;\n                     }\n                     if (regionMatch(local, n, \"CIA\")) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuilder local = new StringBuilder(40);\n    //   output\n    StringBuilder code = new StringBuilder(10);\n    // handle initial 2 characters exceptions\n    switch (inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n            if (inwd.length > 1 && inwd[1] == 'N') { // fix\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n            if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n            if (inwd.length > 1 && inwd[1] == 'R') { // fix\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd.length > 1 && inwd[1] == 'H') { // fix\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n            inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n            break; // fix\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    for (int n = 0; (code.length() < this.getMaxCodeLen()) && (n < wdsz); n++) { // fix\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if (symb == 'C' && isPreviousChar(local, n, symb)) {\n            continue;\n        }\n        // not a duplicate\n        switch (symb) {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                if (n == 0) {\n                    code.append(symb);\n                }\n                // only use vowel if leading character\n                break;\n            case 'B':\n                if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                    // B is silent if word ends in MB\n                    break;\n                }\n                code.append(symb);\n                break;\n            case // lots of C special cases\n                    'C':\n                // \"CIA\" -> X\n                if (regionMatch(local, n, \"CIA\")) {\n                    code.append('X');\n                    break;\n                }\n                if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                    // SCH->sk\n                    code.append('K');\n                    break;\n                }\n                if (isNextChar(local, n, 'H')) {\n                    // detect CH\n                    if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                        // CH consonant -> K consonant\n                        code.append('K');\n                    } else {\n                        // CHvowel -> X\n                        code.append('X');\n                    }\n                } else if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                    // special case \"sugar\"\n                    code.append('X');\n                } else if (regionMatch(local, n, \"CI\", \"CE\", \"CY\")) {\n                    // CI,CE,CY -> S\n                    code.append('S');\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'D':\n                if (isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                    // DGE DGI DGY -> J\n                    code.append('J');\n                    n += 2;\n                } else {\n                    code.append('T');\n                }\n                break;\n            case // GH silent at end or before consonant\n                    'G':\n                if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                    break;\n                }\n                if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                    break;\n                }\n                if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                    // silent G\n                    break;\n                }\n                // G -> F if phoniclly like \"enough\"; else -> K\n                if ((n > 0) && (isPreviousChar(local, n, 'U') && (regionMatch(local, n, \"B\", \"H\", \"L\", \"R\", \"O\")))) {\n                    code.append('F');\n                } else if (isPreviousChar(local, n, 'I') && isNextChar(local, n, \"E\", \"Y\", \"I\")) {\n                    // -CCIA-, -CCI-, -CCIE-, -CCY-, -CCI-\n                    code.append('S');\n                } else if (isPreviousChar(local, n, 'S') && isNextChar(local, n, \"L\", \"M\", \"N\", \"W\") && !isNextChar(local, n, \"O\")) {\n                    // Island, aisle, debris, \"hors d'oeuvre\"\n                    break;\n                } else if (isPreviousChar(local, n, 'G')) {\n                    hard = true;\n                } else {\n                    hard = false;\n                }\n                if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                    code.append('J');\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'H':\n                if (isLastChar(wdsz, n) || (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                    break; // terminal H or HH\n                }\n                if (isVowel(local, n + 1)) {\n                    code.append('H'); // Hvowel\n                }\n                break;\n            case 'F':\n            case 'J':\n            case 'L':\n            case 'M':\n            case 'N':\n            case 'R':\n                code.append(symb);\n                break;\n            case 'K':\n                if (n > 0) { // not initial\n                    if (!isPreviousChar(local, n, 'C')) {\n                        code.append(symb);\n                    }\n                } else {\n                    code.append(symb);\n                }\n                break;\n            case 'P':\n                if (isNextChar(local, n, 'H')) {\n                    // PH -> F\n                    code.append('F');\n                } else if (regionMatch(local, n, \"P\", \"B\")) {\n                    code.append('P');\n                }\n                break;\n            case 'Q':\n                code.append('K');\n                break;\n            case 'S':\n                if ((regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")\n                        || (n == 0 && regionMatch(local, n, \"SCH\")))) {\n                    code.append('X');\n                } else if (regionMatch(local, n, \"S\", \"Z\", \"CE\", \"CI\", \"CY\")) {\n                    code.append('S');\n                } else {\n                    code.append('X');\n                }\n                break;\n            case 'T':\n                if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                    code.append('X');\n                    break;\n                }\n                if (regionMatch(local, n, \"TCH\")) {\n                    // Silent if in \"TCH\"\n                    break;\n                }\n                if (regionMatch(local, n, \"TH\") || regionMatch(local, n, \"TTH\")) {\n                    // TH -> 0\n                    code.append('0');\n                } else {\n                    code.append('T');\n                }\n                break;\n            case 'V':\n                code.append('F');\n                break;\n            case 'W':\n            case 'Y':\n                if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                    code.append(symb);\n                }\n                break;\n            case 'X':\n                code.append('K');\n                code.append('S');\n                break;\n            case 'Z':\n                code.append('S');\n                break;\n        }\n        // end switch\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "diff": "--- org/apache/commons/codec/language/Metaphone.java@metaphone\n+++ org/apache/commons/codec/language/Metaphone.java@metaphone\n@@ -9,34 +9,34 @@\n     }\n     char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n     // manipulate\n-    StringBuffer local = new StringBuffer(40);\n+    StringBuilder local = new StringBuilder(40);\n     //   output\n-    StringBuffer code = new StringBuffer(10);\n+    StringBuilder code = new StringBuilder(10);\n     // handle initial 2 characters exceptions\n-    switch(inwd[0]) {\n+    switch (inwd[0]) {\n         case 'K':\n         case 'G':\n         case 'P':\n-                        if (inwd[1] == 'N') {\n+            if (inwd.length > 1 && inwd[1] == 'N') { // fix\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'A':\n-                        if (inwd[1] == 'E') {\n+            if (inwd[1] == 'E') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n         case 'W':\n-                        if (inwd[1] == 'R') {\n+            if (inwd.length > 1 && inwd[1] == 'R') { // fix\n                 // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n                 break;\n             }\n-            if (inwd[1] == 'H') {\n+            if (inwd.length > 1 && inwd[1] == 'H') { // fix\n                 local.append(inwd, 1, inwd.length - 1);\n                 // WH -> W\n                 local.setCharAt(0, 'W');\n@@ -45,194 +45,192 @@\n             }\n             break;\n         case 'X':\n-                        inwd[0] = 'S';\n+            inwd[0] = 'S';\n             local.append(inwd);\n             break;\n         default:\n             local.append(inwd);\n+            break; // fix\n     }\n     // now local has working string with initials fixed\n     int wdsz = local.length();\n-    int n = 0;\n-    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n-        // max code size of 4 works well\n+    for (int n = 0; (code.length() < this.getMaxCodeLen()) && (n < wdsz); n++) { // fix\n         char symb = local.charAt(n);\n         // remove duplicate letters except C\n-        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n-            n++;\n-        } else {\n-            // not dup\n-            switch(symb) {\n-                case 'A':\n-                case 'E':\n-                case 'I':\n-                case 'O':\n-                case 'U':\n-                    if (n == 0) {\n+        if (symb == 'C' && isPreviousChar(local, n, symb)) {\n+            continue;\n+        }\n+        // not a duplicate\n+        switch (symb) {\n+            case 'A':\n+            case 'E':\n+            case 'I':\n+            case 'O':\n+            case 'U':\n+                if (n == 0) {\n+                    code.append(symb);\n+                }\n+                // only use vowel if leading character\n+                break;\n+            case 'B':\n+                if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n+                    // B is silent if word ends in MB\n+                    break;\n+                }\n+                code.append(symb);\n+                break;\n+            case // lots of C special cases\n+                    'C':\n+                // \"CIA\" -> X\n+                if (regionMatch(local, n, \"CIA\")) {\n+                    code.append('X');\n+                    break;\n+                }\n+                if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n+                    // SCH->sk\n+                    code.append('K');\n+                    break;\n+                }\n+                if (isNextChar(local, n, 'H')) {\n+                    // detect CH\n+                    if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n+                        // CH consonant -> K consonant\n+                        code.append('K');\n+                    } else {\n+                        // CHvowel -> X\n+                        code.append('X');\n+                    }\n+                } else if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n+                    // special case \"sugar\"\n+                    code.append('X');\n+                } else if (regionMatch(local, n, \"CI\", \"CE\", \"CY\")) {\n+                    // CI,CE,CY -> S\n+                    code.append('S');\n+                } else {\n+                    code.append('K');\n+                }\n+                break;\n+            case 'D':\n+                if (isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n+                    // DGE DGI DGY -> J\n+                    code.append('J');\n+                    n += 2;\n+                } else {\n+                    code.append('T');\n+                }\n+                break;\n+            case // GH silent at end or before consonant\n+                    'G':\n+                if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n+                    break;\n+                }\n+                if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n+                    break;\n+                }\n+                if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n+                    // silent G\n+                    break;\n+                }\n+                // G -> F if phoniclly like \"enough\"; else -> K\n+                if ((n > 0) && (isPreviousChar(local, n, 'U') && (regionMatch(local, n, \"B\", \"H\", \"L\", \"R\", \"O\")))) {\n+                    code.append('F');\n+                } else if (isPreviousChar(local, n, 'I') && isNextChar(local, n, \"E\", \"Y\", \"I\")) {\n+                    // -CCIA-, -CCI-, -CCIE-, -CCY-, -CCI-\n+                    code.append('S');\n+                } else if (isPreviousChar(local, n, 'S') && isNextChar(local, n, \"L\", \"M\", \"N\", \"W\") && !isNextChar(local, n, \"O\")) {\n+                    // Island, aisle, debris, \"hors d'oeuvre\"\n+                    break;\n+                } else if (isPreviousChar(local, n, 'G')) {\n+                    hard = true;\n+                } else {\n+                    hard = false;\n+                }\n+                if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n+                    code.append('J');\n+                } else {\n+                    code.append('K');\n+                }\n+                break;\n+            case 'H':\n+                if (isLastChar(wdsz, n) || (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n+                    break; // terminal H or HH\n+                }\n+                if (isVowel(local, n + 1)) {\n+                    code.append('H'); // Hvowel\n+                }\n+                break;\n+            case 'F':\n+            case 'J':\n+            case 'L':\n+            case 'M':\n+            case 'N':\n+            case 'R':\n+                code.append(symb);\n+                break;\n+            case 'K':\n+                if (n > 0) { // not initial\n+                    if (!isPreviousChar(local, n, 'C')) {\n                         code.append(symb);\n                     }\n-                    // only use vowel if leading char\n-                    break;\n-                case 'B':\n-                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n-                        // B is silent if word ends in MB\n-                        break;\n-                    }\n+                } else {\n                     code.append(symb);\n-                    break;\n-                case // lots of C special cases\n-                'C':\n-                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n-                        break;\n-                    }\n-                    if (regionMatch(local, n, \"CIA\")) {\n-                        // \"CIA\" -> X\n-                        code.append('X');\n-                        break;\n-                    }\n-                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n-                        code.append('S');\n-                        // CI,CE,CY -> S\n-                        break;\n-                    }\n-                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n-                        // SCH->sk\n-                        code.append('K');\n-                        break;\n-                    }\n-                    if (isNextChar(local, n, 'H')) {\n-                        // detect CH\n-                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n-                            // CH consonant -> K consonant\n-                            code.append('K');\n-                        } else {\n-                            // CHvowel -> X\n-                            code.append('X');\n-                        }\n-                    } else {\n-                        code.append('K');\n-                    }\n-                    break;\n-                case 'D':\n-                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n-                        // DGE DGI DGY -> J\n-                        code.append('J');\n-                        n += 2;\n-                    } else {\n-                        code.append('T');\n-                    }\n-                    break;\n-                case // GH silent at end or before consonant\n-                'G':\n-                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n-                        break;\n-                    }\n-                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n-                        break;\n-                    }\n-                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n-                        // silent G\n-                        break;\n-                    }\n-                    if (isPreviousChar(local, n, 'G')) {\n-                        hard = true;\n-                    } else {\n-                        hard = false;\n-                    }\n-                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n-                        code.append('J');\n-                    } else {\n-                        code.append('K');\n-                    }\n-                    break;\n-                case 'H':\n-                    if (isLastChar(wdsz, n)) {\n-                        // terminal H\n-                        break;\n-                    }\n-                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n-                        break;\n-                    }\n-                    if (isVowel(local, n + 1)) {\n-                        // Hvowel\n-                        code.append('H');\n-                    }\n-                    break;\n-                case 'F':\n-                case 'J':\n-                case 'L':\n-                case 'M':\n-                case 'N':\n-                case 'R':\n+                }\n+                break;\n+            case 'P':\n+                if (isNextChar(local, n, 'H')) {\n+                    // PH -> F\n+                    code.append('F');\n+                } else if (regionMatch(local, n, \"P\", \"B\")) {\n+                    code.append('P');\n+                }\n+                break;\n+            case 'Q':\n+                code.append('K');\n+                break;\n+            case 'S':\n+                if ((regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")\n+                        || (n == 0 && regionMatch(local, n, \"SCH\")))) {\n+                    code.append('X');\n+                } else if (regionMatch(local, n, \"S\", \"Z\", \"CE\", \"CI\", \"CY\")) {\n+                    code.append('S');\n+                } else {\n+                    code.append('X');\n+                }\n+                break;\n+            case 'T':\n+                if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n+                    code.append('X');\n+                    break;\n+                }\n+                if (regionMatch(local, n, \"TCH\")) {\n+                    // Silent if in \"TCH\"\n+                    break;\n+                }\n+                if (regionMatch(local, n, \"TH\") || regionMatch(local, n, \"TTH\")) {\n+                    // TH -> 0\n+                    code.append('0');\n+                } else {\n+                    code.append('T');\n+                }\n+                break;\n+            case 'V':\n+                code.append('F');\n+                break;\n+            case 'W':\n+            case 'Y':\n+                if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                     code.append(symb);\n-                    break;\n-                case 'K':\n-                    if (n > 0) {\n-                        // not initial\n-                        if (!isPreviousChar(local, n, 'C')) {\n-                            code.append(symb);\n-                        }\n-                    } else {\n-                        // initial K\n-                        code.append(symb);\n-                    }\n-                    break;\n-                case 'P':\n-                    if (isNextChar(local, n, 'H')) {\n-                        // PH -> F\n-                        code.append('F');\n-                    } else {\n-                        code.append(symb);\n-                    }\n-                    break;\n-                case 'Q':\n-                    code.append('K');\n-                    break;\n-                case 'S':\n-                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n-                        code.append('X');\n-                    } else {\n-                        code.append('S');\n-                    }\n-                    break;\n-                case 'T':\n-                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n-                        code.append('X');\n-                        break;\n-                    }\n-                    if (regionMatch(local, n, \"TCH\")) {\n-                        // Silent if in \"TCH\"\n-                        break;\n-                    }\n-                    // substitute numeral 0 for TH (resembles theta after all)\n-                    if (regionMatch(local, n, \"TH\")) {\n-                        code.append('0');\n-                    } else {\n-                        code.append('T');\n-                    }\n-                    break;\n-                case 'V':\n-                    code.append('F');\n-                    break;\n-                case 'W':\n-                case // silent if not followed by vowel\n-                'Y':\n-                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n-                        code.append(symb);\n-                    }\n-                    break;\n-                case 'X':\n-                    code.append('K');\n-                    code.append('S');\n-                    break;\n-                case 'Z':\n-                    code.append('S');\n-                    break;\n-            }\n-            // end switch\n-            n++;\n+                }\n+                break;\n+            case 'X':\n+                code.append('K');\n+                code.append('S');\n+                break;\n+            case 'Z':\n+                code.append('S');\n+                break;\n         }\n-        // end else from symb != 'C'\n+        // end switch\n         if (code.length() > this.getMaxCodeLen()) {\n             code.setLength(this.getMaxCodeLen());\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}]