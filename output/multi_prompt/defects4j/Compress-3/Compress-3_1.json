[{"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new TarArchiveEntry(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    } else {\n        entry.writeEntryHeader(recordBuf);\n        buffer.writeRecord(recordBuf);\n        currBytes = 0;\n        if (entry.isDirectory()) {\n            currSize = 0;\n        } else {\n            currSize = entry.getSize();\n        }\n        currName = entry.getName();\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -15,16 +15,17 @@\n             write(0);\n             closeArchiveEntry();\n         } else if (longFileMode != LONGFILE_TRUNCATE) {\n-            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n+            throw new TarArchiveEntry(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n         }\n+    } else {\n+        entry.writeEntryHeader(recordBuf);\n+        buffer.writeRecord(recordBuf);\n+        currBytes = 0;\n+        if (entry.isDirectory()) {\n+            currSize = 0;\n+        } else {\n+            currSize = entry.getSize();\n+        }\n+        currName = entry.getName();\n     }\n-    entry.writeEntryHeader(recordBuf);\n-    buffer.writeRecord(recordBuf);\n-    currBytes = 0;\n-    if (entry.isDirectory()) {\n-        currSize = 0;\n-    } else {\n-        currSize = entry.getSize();\n-    }\n-    currName = entry.getName();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    } else {\n        entry.writeEntryHeader(recordBuf);\n        buffer.writeRecord(recordBuf);\n        currBytes = 0;\n        if (entry.isDirectory()) {\n            currSize = 0;\n        } else {\n            currSize = entry.getSize();\n        }\n        currName = entry.getName();\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -17,14 +17,15 @@\n         } else if (longFileMode != LONGFILE_TRUNCATE) {\n             throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n         }\n+    } else {\n+        entry.writeEntryHeader(recordBuf);\n+        buffer.writeRecord(recordBuf);\n+        currBytes = 0;\n+        if (entry.isDirectory()) {\n+            currSize = 0;\n+        } else {\n+            currSize = entry.getSize();\n+        }\n+        currName = entry.getName();\n     }\n-    entry.writeEntryHeader(recordBuf);\n-    buffer.writeRecord(recordBuf);\n-    currBytes = 0;\n-    if (entry.isDirectory()) {\n-        currSize = 0;\n-    } else {\n-        currSize = entry.getSize();\n-    }\n-    currName = entry.getName();\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n            entry.writeEntryHeader(recordBuf);\n            buffer.writeRecord(recordBuf);\n            currBytes = 0;\n            if (entry.isDirectory()) {\n                currSize = 0;\n            } else {\n                currSize = entry.getSize();\n            }\n            currName = entry.getName();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    } else {\n        entry.writeEntryHeader(recordBuf);\n        buffer.writeRecord(recordBuf);\n        currBytes = 0;\n        if (entry.isDirectory()) {\n            currSize = 0;\n        } else {\n            currSize = entry.getSize();\n        }\n        currName = entry.getName();\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -14,17 +14,27 @@\n             // NUL terminator\n             write(0);\n             closeArchiveEntry();\n+            entry.writeEntryHeader(recordBuf);\n+            buffer.writeRecord(recordBuf);\n+            currBytes = 0;\n+            if (entry.isDirectory()) {\n+                currSize = 0;\n+            } else {\n+                currSize = entry.getSize();\n+            }\n+            currName = entry.getName();\n         } else if (longFileMode != LONGFILE_TRUNCATE) {\n             throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n         }\n+    } else {\n+        entry.writeEntryHeader(recordBuf);\n+        buffer.writeRecord(recordBuf);\n+        currBytes = 0;\n+        if (entry.isDirectory()) {\n+            currSize = 0;\n+        } else {\n+            currSize = entry.getSize();\n+        }\n+        currName = entry.getName();\n     }\n-    entry.writeEntryHeader(recordBuf);\n-    buffer.writeRecord(recordBuf);\n-    currBytes = 0;\n-    if (entry.isDirectory()) {\n-        currSize = 0;\n-    } else {\n-        currSize = entry.getSize();\n-    }\n-    currName = entry.getName();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n            // return after longlink entry is closed\n            return;\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -14,6 +14,8 @@\n             // NUL terminator\n             write(0);\n             closeArchiveEntry();\n+            // return after longlink entry is closed\n+            return;\n         } else if (longFileMode != LONGFILE_TRUNCATE) {\n             throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        } else {\n            // Truncate the file name to TarConstants.NAMELEN\n            entry.setName(entry.getName().substring(0, TarConstants.NAMELEN));\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -16,6 +16,9 @@\n             closeArchiveEntry();\n         } else if (longFileMode != LONGFILE_TRUNCATE) {\n             throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n+        } else {\n+            // Truncate the file name to TarConstants.NAMELEN\n+            entry.setName(entry.getName().substring(0, TarConstants.NAMELEN));\n         }\n     }\n     entry.writeEntryHeader(recordBuf);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n            // FIXED - added else statement to handle case when longFileMode != LONGFILE_GNU\n        } else {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -14,7 +14,8 @@\n             // NUL terminator\n             write(0);\n             closeArchiveEntry();\n-        } else if (longFileMode != LONGFILE_TRUNCATE) {\n+            // FIXED - added else statement to handle case when longFileMode != LONGFILE_GNU\n+        } else {\n             throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE && !entry.isDirectory()) {\n            // Check if file is too long and not a directory\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -14,7 +14,8 @@\n             // NUL terminator\n             write(0);\n             closeArchiveEntry();\n-        } else if (longFileMode != LONGFILE_TRUNCATE) {\n+        } else if (longFileMode != LONGFILE_TRUNCATE && !entry.isDirectory()) {\n+            // Check if file is too long and not a directory\n             throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    String entryName = entry.getName();\n    if (entryName.length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entryName.getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entryName;\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -1,12 +1,13 @@\n public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n     TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n-    if (entry.getName().length() >= TarConstants.NAMELEN) {\n+    String entryName = entry.getName();\n+    if (entryName.length() >= TarConstants.NAMELEN) {\n         if (longFileMode == LONGFILE_GNU) {\n             // create a TarEntry for the LongLink, the contents\n             // of which are the entry's name\n             TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n             // TODO is it correct to use the default charset here?\n-            final byte[] nameBytes = entry.getName().getBytes();\n+            final byte[] nameBytes = entryName.getBytes();\n             // +1 for NUL\n             longLinkEntry.setSize(nameBytes.length + 1);\n             putArchiveEntry(longLinkEntry);\n@@ -15,7 +16,7 @@\n             write(0);\n             closeArchiveEntry();\n         } else if (longFileMode != LONGFILE_TRUNCATE) {\n-            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n+            throw new RuntimeException(\"file name '\" + entryName + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n         }\n     }\n     entry.writeEntryHeader(recordBuf);\n@@ -26,5 +27,5 @@\n     } else {\n         currSize = entry.getSize();\n     }\n-    currName = entry.getName();\n+    currName = entryName;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() > TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -1,6 +1,6 @@\n public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n     TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n-    if (entry.getName().length() >= TarConstants.NAMELEN) {\n+    if (entry.getName().length() > TarConstants.NAMELEN) {\n         if (longFileMode == LONGFILE_GNU) {\n             // create a TarEntry for the LongLink, the contents\n             // of which are the entry's name\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        } else {\n            // Truncate the entry name if it is too long\n            entry.setName(entry.getName().substring(0, TarConstants.NAMELEN));\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -16,6 +16,9 @@\n             closeArchiveEntry();\n         } else if (longFileMode != LONGFILE_TRUNCATE) {\n             throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n+        } else {\n+            // Truncate the entry name if it is too long\n+            entry.setName(entry.getName().substring(0, TarConstants.NAMELEN));\n         }\n     }\n     entry.writeEntryHeader(recordBuf);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    String name = entry.getName();\n    if (name.getBytes().length >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = name.getBytes(StandardCharsets.UTF_8);\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + name + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = name;\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -1,12 +1,13 @@\n public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n     TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n-    if (entry.getName().length() >= TarConstants.NAMELEN) {\n+    String name = entry.getName();\n+    if (name.getBytes().length >= TarConstants.NAMELEN) {\n         if (longFileMode == LONGFILE_GNU) {\n             // create a TarEntry for the LongLink, the contents\n             // of which are the entry's name\n             TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n             // TODO is it correct to use the default charset here?\n-            final byte[] nameBytes = entry.getName().getBytes();\n+            final byte[] nameBytes = name.getBytes(StandardCharsets.UTF_8);\n             // +1 for NUL\n             longLinkEntry.setSize(nameBytes.length + 1);\n             putArchiveEntry(longLinkEntry);\n@@ -15,7 +16,7 @@\n             write(0);\n             closeArchiveEntry();\n         } else if (longFileMode != LONGFILE_TRUNCATE) {\n-            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n+            throw new RuntimeException(\"file name '\" + name + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n         }\n     }\n     entry.writeEntryHeader(recordBuf);\n@@ -26,5 +27,5 @@\n     } else {\n         currSize = entry.getSize();\n     }\n-    currName = entry.getName();\n+    currName = name;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            // fixed: putArchiveEntry() needs to be called recursively\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -9,6 +9,7 @@\n             final byte[] nameBytes = entry.getName().getBytes();\n             // +1 for NUL\n             longLinkEntry.setSize(nameBytes.length + 1);\n+            // fixed: putArchiveEntry() needs to be called recursively\n             putArchiveEntry(longLinkEntry);\n             write(nameBytes);\n             // NUL terminator\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() > TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    } else {\n        entry.writeEntryHeader(recordBuf);\n        buffer.writeRecord(recordBuf);\n        currBytes = 0;\n        if (entry.isDirectory()) {\n            currSize = 0;\n        } else {\n            currSize = entry.getSize();\n        }\n        currName = entry.getName();\n    }\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -1,6 +1,6 @@\n public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n     TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n-    if (entry.getName().length() >= TarConstants.NAMELEN) {\n+    if (entry.getName().length() > TarConstants.NAMELEN) {\n         if (longFileMode == LONGFILE_GNU) {\n             // create a TarEntry for the LongLink, the contents\n             // of which are the entry's name\n@@ -17,14 +17,15 @@\n         } else if (longFileMode != LONGFILE_TRUNCATE) {\n             throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n         }\n+    } else {\n+        entry.writeEntryHeader(recordBuf);\n+        buffer.writeRecord(recordBuf);\n+        currBytes = 0;\n+        if (entry.isDirectory()) {\n+            currSize = 0;\n+        } else {\n+            currSize = entry.getSize();\n+        }\n+        currName = entry.getName();\n     }\n-    entry.writeEntryHeader(recordBuf);\n-    buffer.writeRecord(recordBuf);\n-    currBytes = 0;\n-    if (entry.isDirectory()) {\n-        currSize = 0;\n-    } else {\n-        currSize = entry.getSize();\n-    }\n-    currName = entry.getName();\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes(StandardCharsets.UTF_8);\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -6,7 +6,7 @@\n             // of which are the entry's name\n             TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n             // TODO is it correct to use the default charset here?\n-            final byte[] nameBytes = entry.getName().getBytes();\n+            final byte[] nameBytes = entry.getName().getBytes(StandardCharsets.UTF_8);\n             // +1 for NUL\n             longLinkEntry.setSize(nameBytes.length + 1);\n             putArchiveEntry(longLinkEntry);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        } else {\n            // Truncate the file name if it is too long\n            entry.setName(entry.getName().substring(0, TarConstants.NAMELEN - 1));\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -16,6 +16,9 @@\n             closeArchiveEntry();\n         } else if (longFileMode != LONGFILE_TRUNCATE) {\n             throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n+        } else {\n+            // Truncate the file name if it is too long\n+            entry.setName(entry.getName().substring(0, TarConstants.NAMELEN - 1));\n         }\n     }\n     entry.writeEntryHeader(recordBuf);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n            // fix: recursively call putArchiveEntry with the original entry\n            putArchiveEntry(entry);\n            return;\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -14,6 +14,9 @@\n             // NUL terminator\n             write(0);\n             closeArchiveEntry();\n+            // fix: recursively call putArchiveEntry with the original entry\n+            putArchiveEntry(entry);\n+            return;\n         } else if (longFileMode != LONGFILE_TRUNCATE) {\n             throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n         }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n    TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n    if (entry.getName().length() >= TarConstants.NAMELEN) {\n        if (longFileMode == LONGFILE_GNU) {\n            // create a TarEntry for the LongLink, the contents\n            // of which are the entry's name\n            TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);\n            // TODO is it correct to use the default charset here?\n            final byte[] nameBytes = entry.getName().getBytes();\n            // +1 for NUL\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            // NUL terminator\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != LONGFILE_TRUNCATE) {\n            throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n    closeArchiveEntry(); // ensure the entry is properly closed\n}", "diff": "--- org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n+++ org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java@putArchiveEntry\n@@ -27,4 +27,5 @@\n         currSize = entry.getSize();\n     }\n     currName = entry.getName();\n+    closeArchiveEntry(); // ensure the entry is properly closed\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]