[{"output": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        gen.writeNull();\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    _delegateSerializer.serialize(delegateValue, gen, provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,11 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n-    }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -1,16 +1,11 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n-    JsonSerializer<?> delSer = _delegateSerializer;\n-    JavaType delegateType = _delegateType;\n-    if (delSer == null) {\n-        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n-        if (delegateType == null) {\n-            delegateType = _converter.getOutputType(provider.getTypeFactory());\n-        }\n-                delSer = provider.findValueSerializer(delegateType);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n     }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n-    }\n-    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -3,7 +3,7 @@\n     Object delegateValue = convertValue(value);\n     // should we accept nulls?\n     if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n+        gen.writeNull();\n         return;\n     }\n     // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,11 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,11 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,11 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,11 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        provider.defaultSerializeNull(gen);\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(delegateValue.getClass());\n    serializer.serialize(delegateValue, gen, provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,12 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n-    }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -1,16 +1,12 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n-    JsonSerializer<?> delSer = _delegateSerializer;\n-    JavaType delegateType = _delegateType;\n-    if (delSer == null) {\n-        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n-        if (delegateType == null) {\n-            delegateType = _converter.getOutputType(provider.getTypeFactory());\n-        }\n-                delSer = provider.findValueSerializer(delegateType);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n-    }\n-    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -7,5 +7,6 @@\n         return;\n     }\n     // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,12 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,12 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,12 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,12 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findPrimaryPropertySerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        gen.writeNull();\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    if (_delegateSerializer == null) {\n        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n    }\n    _delegateSerializer.serialize(delegateValue, gen, provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,14 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -1,16 +1,14 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n-    JsonSerializer<?> delSer = _delegateSerializer;\n-    JavaType delegateType = _delegateType;\n-    if (delSer == null) {\n-        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n-        if (delegateType == null) {\n-            delegateType = _converter.getOutputType(provider.getTypeFactory());\n-        }\n-                delSer = provider.findValueSerializer(delegateType);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n     }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n     }\n-    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -3,9 +3,12 @@\n     Object delegateValue = convertValue(value);\n     // should we accept nulls?\n     if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n+        gen.writeNull();\n         return;\n     }\n     // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n     _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,14 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,14 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,14 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,14 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        gen.writeNull();\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n    _delegateSerializer.serialize(delegateValue, gen, provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,12 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n-    }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -1,16 +1,12 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n-    JsonSerializer<?> delSer = _delegateSerializer;\n-    JavaType delegateType = _delegateType;\n-    if (delSer == null) {\n-        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n-        if (delegateType == null) {\n-            delegateType = _converter.getOutputType(provider.getTypeFactory());\n-        }\n-                delSer = provider.findValueSerializer(delegateType);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n     }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n-    }\n-    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -3,9 +3,10 @@\n     Object delegateValue = convertValue(value);\n     // should we accept nulls?\n     if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n+        gen.writeNull();\n         return;\n     }\n     // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n     _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,12 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,12 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,12 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,12 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        gen.writeNull();\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n    serializer.serialize(delegateValue, gen, provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,12 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n-    }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -1,16 +1,12 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n-    JsonSerializer<?> delSer = _delegateSerializer;\n-    JavaType delegateType = _delegateType;\n-    if (delSer == null) {\n-        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n-        if (delegateType == null) {\n-            delegateType = _converter.getOutputType(provider.getTypeFactory());\n-        }\n-                delSer = provider.findValueSerializer(delegateType);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n     }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n-    }\n-    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -3,9 +3,10 @@\n     Object delegateValue = convertValue(value);\n     // should we accept nulls?\n     if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n+        gen.writeNull();\n         return;\n     }\n     // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,12 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,12 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,12 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,12 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        provider.defaultSerializeNull(gen);\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    JsonSerializer<?> serializer = provider.findValueSerializer(delegateValue.getClass());\n    serializer.serialize(delegateValue, gen, provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,12 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n-    }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<?> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -1,16 +1,12 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n-    JsonSerializer<?> delSer = _delegateSerializer;\n-    JavaType delegateType = _delegateType;\n-    if (delSer == null) {\n-        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n-        if (delegateType == null) {\n-            delegateType = _converter.getOutputType(provider.getTypeFactory());\n-        }\n-                delSer = provider.findValueSerializer(delegateType);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n-    }\n-    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<?> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -7,5 +7,6 @@\n         return;\n     }\n     // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    JsonSerializer<?> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,12 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<?> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,12 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<?> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,12 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<?> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,12 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<?> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        provider.defaultSerializeNull(gen);\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    if (_delegateSerializer == null) {\n        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n    }\n    _delegateSerializer.serialize(delegateValue, gen, provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,14 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -1,16 +1,14 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n-    JsonSerializer<?> delSer = _delegateSerializer;\n-    JavaType delegateType = _delegateType;\n-    if (delSer == null) {\n-        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n-        if (delegateType == null) {\n-            delegateType = _converter.getOutputType(provider.getTypeFactory());\n-        }\n-                delSer = provider.findValueSerializer(delegateType);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n     }\n-    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -7,5 +7,8 @@\n         return;\n     }\n     // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n     _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,14 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,14 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,14 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,14 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        provider.defaultSerializeNull(gen);\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n    serializer.serialize(delegateValue, gen, provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,12 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n-    }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -1,16 +1,12 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n-    JsonSerializer<?> delSer = _delegateSerializer;\n-    JavaType delegateType = _delegateType;\n-    if (delSer == null) {\n-        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n-        if (delegateType == null) {\n-            delegateType = _converter.getOutputType(provider.getTypeFactory());\n-        }\n-                delSer = provider.findValueSerializer(delegateType);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n-    }\n-    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -7,5 +7,6 @@\n         return;\n     }\n     // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,12 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,12 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,12 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,12 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    JsonSerializer<Object> serializer = provider.findValueSerializer(delegateValue.getClass());\n+    serializer.serialize(delegateValue, gen, provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonProcessingException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        provider.defaultSerializeNull(gen);\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    if (_delegateSerializer == null) {\n        throw new JsonMappingException(\"Delegate serializer not set for Converter \" + getClass().getName());\n    }\n    _delegateSerializer.serialize(delegateValue, gen, provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,14 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonProcessingException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"Delegate serializer not set for Converter \" + getClass().getName());\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -1,16 +1,14 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n-    JsonSerializer<?> delSer = _delegateSerializer;\n-    JavaType delegateType = _delegateType;\n-    if (delSer == null) {\n-        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n-        if (delegateType == null) {\n-            delegateType = _converter.getOutputType(provider.getTypeFactory());\n-        }\n-                delSer = provider.findValueSerializer(delegateType);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonProcessingException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"Delegate serializer not set for Converter \" + getClass().getName());\n     }\n-    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,5 +1,5 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonProcessingException {\n     Object delegateValue = convertValue(value);\n     // should we accept nulls?\n     if (delegateValue == null) {\n@@ -7,5 +7,8 @@\n         return;\n     }\n     // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"Delegate serializer not set for Converter \" + getClass().getName());\n+    }\n     _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,14 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonProcessingException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"Delegate serializer not set for Converter \" + getClass().getName());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,14 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonProcessingException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"Delegate serializer not set for Converter \" + getClass().getName());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,14 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonProcessingException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"Delegate serializer not set for Converter \" + getClass().getName());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,14 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonProcessingException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"Delegate serializer not set for Converter \" + getClass().getName());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        gen.writeNull();\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    if (_delegateSerializer == null) {\n        throw new JsonMappingException(\"No serializer found for class \" + delegateValue.getClass().getName());\n    }\n    _delegateSerializer.serialize(delegateValue, gen, provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,14 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"No serializer found for class \" + delegateValue.getClass().getName());\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -1,16 +1,14 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n-    JsonSerializer<?> delSer = _delegateSerializer;\n-    JavaType delegateType = _delegateType;\n-    if (delSer == null) {\n-        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n-        if (delegateType == null) {\n-            delegateType = _converter.getOutputType(provider.getTypeFactory());\n-        }\n-                delSer = provider.findValueSerializer(delegateType);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n     }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"No serializer found for class \" + delegateValue.getClass().getName());\n     }\n-    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -3,9 +3,12 @@\n     Object delegateValue = convertValue(value);\n     // should we accept nulls?\n     if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n+        gen.writeNull();\n         return;\n     }\n     // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"No serializer found for class \" + delegateValue.getClass().getName());\n+    }\n     _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,14 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"No serializer found for class \" + delegateValue.getClass().getName());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,14 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"No serializer found for class \" + delegateValue.getClass().getName());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,14 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"No serializer found for class \" + delegateValue.getClass().getName());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,14 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        gen.writeNull();\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if (_delegateSerializer == null) {\n+        throw new JsonMappingException(\"No serializer found for class \" + delegateValue.getClass().getName());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "It is not possible to provide a fix for the given function without knowing the context and specific bug that needs to be addressed.", "diff": "", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        provider.defaultSerializeNull(gen);\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    if(_delegateSerializer == null) {\n        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n    }\n    _delegateSerializer.serialize(delegateValue, gen, provider);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,14 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if(_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -1,16 +1,14 @@\n @Override\n-public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n-    JsonSerializer<?> delSer = _delegateSerializer;\n-    JavaType delegateType = _delegateType;\n-    if (delSer == null) {\n-        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n-        if (delegateType == null) {\n-            delegateType = _converter.getOutputType(provider.getTypeFactory());\n-        }\n-                delSer = provider.findValueSerializer(delegateType);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n     }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if(_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n     }\n-    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -7,5 +7,8 @@\n         return;\n     }\n     // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if(_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n     _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,14 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if(_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,14 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if(_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,14 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n     Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if(_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,14 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Object delegateValue = convertValue(value);\n+    // should we accept nulls?\n+    if (delegateValue == null) {\n+        provider.defaultSerializeNull(gen);\n+        return;\n+    }\n+    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n+    if(_delegateSerializer == null) {\n+        _delegateSerializer = provider.findValueSerializer(delegateValue.getClass());\n+    }\n+    _delegateSerializer.serialize(delegateValue, gen, provider);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]