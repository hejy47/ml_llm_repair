[{"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        delSer = provider.findValueSerializer(delegateType, property);\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,16 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,10 +7,10 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n     if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n     }\n     return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,16 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,16 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,16 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,16 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,16 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        if (provider.findValueSerializer(delegateType) != null) {\n            delSer = provider.findValueSerializer(delegateType);\n        }\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = provider.handleSecondaryContextualization(delSer, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,18 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n-    }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        if (provider.findValueSerializer(delegateType) != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n         }\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n     }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,7 +7,9 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        if (provider.findValueSerializer(delegateType) != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n     }\n     if (delSer instanceof ContextualSerializer) {\n         delSer = provider.handleSecondaryContextualization(delSer, property);\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,18 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        if (provider.findValueSerializer(delegateType) != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,18 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        if (provider.findValueSerializer(delegateType) != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,18 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        if (provider.findValueSerializer(delegateType) != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,18 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        if (provider.findValueSerializer(delegateType) != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,18 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        if (provider.findValueSerializer(delegateType) != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        delSer = provider.findValueSerializer(delegateType);\n    } else if (delSer instanceof ContextualSerializer) {\n        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,15 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n-    }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,10 +7,9 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n-    }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n     }\n     return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,15 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,15 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,15 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,15 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,15 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        delSer = provider.findValueSerializer(delegateType);\n        if (delSer instanceof ContextualSerializer) {\n            delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n        }\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,16 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n-    }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n         }\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,10 +7,10 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n-    }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+        }\n     }\n     return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,16 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+        }\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,16 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+        }\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,16 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+        }\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,16 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+        }\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,16 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+        }\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        delSer = provider.findValueSerializer(delegateType);\n        if (delSer instanceof ContextualSerializer) {\n            delSer = provider.handleSecondaryContextualization(delSer, property);\n        }\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,16 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n-    }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = provider.handleSecondaryContextualization(delSer, property);\n         }\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,10 +7,10 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n-    }\n-    if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = provider.handleSecondaryContextualization(delSer, property);\n+        }\n     }\n     return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,16 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = provider.handleSecondaryContextualization(delSer, property);\n+        }\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,16 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = provider.handleSecondaryContextualization(delSer, property);\n+        }\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,16 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = provider.handleSecondaryContextualization(delSer, property);\n+        }\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,16 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = provider.handleSecondaryContextualization(delSer, property);\n+        }\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,16 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ContextualSerializer) {\n+            delSer = provider.handleSecondaryContextualization(delSer, property);\n+        }\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        delSer = provider.findValueSerializer(delegateType, property);\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = provider.handleSecondaryContextualization(delSer, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,16 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,7 +7,7 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n     if (delSer instanceof ContextualSerializer) {\n         delSer = provider.handleSecondaryContextualization(delSer, property);\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,16 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,16 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,16 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,16 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,16 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        // Fixed code: check if the delegate type is not null before trying to find the serializer\n        if (delegateType != null) {\n            delSer = provider.findValueSerializer(delegateType);\n        }\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = provider.handleSecondaryContextualization(delSer, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,19 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n-    }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fixed code: check if the delegate type is not null before trying to find the serializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n         }\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n     }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,7 +7,10 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        // Fixed code: check if the delegate type is not null before trying to find the serializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n     }\n     if (delSer instanceof ContextualSerializer) {\n         delSer = provider.handleSecondaryContextualization(delSer, property);\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,19 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fixed code: check if the delegate type is not null before trying to find the serializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,19 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fixed code: check if the delegate type is not null before trying to find the serializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,19 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fixed code: check if the delegate type is not null before trying to find the serializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,19 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fixed code: check if the delegate type is not null before trying to find the serializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,19 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fixed code: check if the delegate type is not null before trying to find the serializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        delSer = provider.findValueSerializer(delegateType);\n        if (delSer instanceof ResolvableSerializer) {\n            ((ResolvableSerializer)delSer).resolve(provider);\n        }\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,19 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n-    }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ResolvableSerializer) {\n+            ((ResolvableSerializer)delSer).resolve(provider);\n         }\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n     }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,10 +7,13 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ResolvableSerializer) {\n+            ((ResolvableSerializer)delSer).resolve(provider);\n+        }\n     }\n     if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n     }\n     return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,19 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ResolvableSerializer) {\n+            ((ResolvableSerializer)delSer).resolve(provider);\n+        }\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,19 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ResolvableSerializer) {\n+            ((ResolvableSerializer)delSer).resolve(provider);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,19 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ResolvableSerializer) {\n+            ((ResolvableSerializer)delSer).resolve(provider);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,19 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ResolvableSerializer) {\n+            ((ResolvableSerializer)delSer).resolve(provider);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,19 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+        if (delSer instanceof ResolvableSerializer) {\n+            ((ResolvableSerializer)delSer).resolve(provider);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        // Use the provider from the parameter instead of the previous one\n        delSer = provider.findValueSerializer(delegateType, property);\n    }\n    if (delSer instanceof ContextualSerializer) {\n        // Use the provider from the parameter instead of the previous one\n        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,18 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    if (delSer instanceof ContextualSerializer) {\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,10 +7,12 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n     if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n     }\n     return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,18 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,18 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,18 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,18 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,18 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        // Use the provider from the parameter instead of the previous one\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        // Fix: Check if the delegateType is null and return null if so.\n        if (delegateType == null) {\n            return null;\n        }\n        delSer = provider.findValueSerializer(delegateType);\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = provider.handleSecondaryContextualization(delSer, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,20 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Check if the delegateType is null and return null if so.\n+        if (delegateType == null) {\n+            return null;\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,7 +7,11 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        // Fix: Check if the delegateType is null and return null if so.\n+        if (delegateType == null) {\n+            return null;\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n     if (delSer instanceof ContextualSerializer) {\n         delSer = provider.handleSecondaryContextualization(delSer, property);\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,20 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Check if the delegateType is null and return null if so.\n+        if (delegateType == null) {\n+            return null;\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,20 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Check if the delegateType is null and return null if so.\n+        if (delegateType == null) {\n+            return null;\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,20 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Check if the delegateType is null and return null if so.\n+        if (delegateType == null) {\n+            return null;\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,20 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Check if the delegateType is null and return null if so.\n+        if (delegateType == null) {\n+            return null;\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,20 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Check if the delegateType is null and return null if so.\n+        if (delegateType == null) {\n+            return null;\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        // Fix: Contextualize the found value serializer\n        delSer = provider.handlePrimaryContextualization(provider.findValueSerializer(delegateType), property);\n    }\n    if (delSer instanceof ContextualSerializer) {\n        // Fix: Contextualize the secondary serializer\n        delSer = provider.handleSecondaryContextualization(delSer, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,18 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Contextualize the found value serializer\n+        delSer = provider.handlePrimaryContextualization(provider.findValueSerializer(delegateType), property);\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    if (delSer instanceof ContextualSerializer) {\n+        // Fix: Contextualize the secondary serializer\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,9 +7,11 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        // Fix: Contextualize the found value serializer\n+        delSer = provider.handlePrimaryContextualization(provider.findValueSerializer(delegateType), property);\n     }\n     if (delSer instanceof ContextualSerializer) {\n+        // Fix: Contextualize the secondary serializer\n         delSer = provider.handleSecondaryContextualization(delSer, property);\n     }\n     return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,18 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Contextualize the found value serializer\n+        delSer = provider.handlePrimaryContextualization(provider.findValueSerializer(delegateType), property);\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        // Fix: Contextualize the secondary serializer\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,18 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Contextualize the found value serializer\n+        delSer = provider.handlePrimaryContextualization(provider.findValueSerializer(delegateType), property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        // Fix: Contextualize the secondary serializer\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,18 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Contextualize the found value serializer\n+        delSer = provider.handlePrimaryContextualization(provider.findValueSerializer(delegateType), property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        // Fix: Contextualize the secondary serializer\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,18 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Contextualize the found value serializer\n+        delSer = provider.handlePrimaryContextualization(provider.findValueSerializer(delegateType), property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        // Fix: Contextualize the secondary serializer\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,18 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix: Contextualize the found value serializer\n+        delSer = provider.handlePrimaryContextualization(provider.findValueSerializer(delegateType), property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        // Fix: Contextualize the secondary serializer\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n            // fix: use \"delegateType\" instead of \"provider.getTypeFactory()\" to get the type information for the serializer to delegate to\n        }\n        delSer = provider.findValueSerializer(delegateType);\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = ((ContextualSerializer) delSer).createContextual(provider, property); // fix: call the createContextual() method of the delegate serializer instead of using \"handleSecondaryContextualization()\"\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,17 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // fix: use \"delegateType\" instead of \"provider.getTypeFactory()\" to get the type information for the serializer to delegate to\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property); // fix: call the createContextual() method of the delegate serializer instead of using \"handleSecondaryContextualization()\"\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -6,11 +6,12 @@\n         // Otherwise, need to locate serializer to delegate to. For that we need type information...\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // fix: use \"delegateType\" instead of \"provider.getTypeFactory()\" to get the type information for the serializer to delegate to\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n     if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property); // fix: call the createContextual() method of the delegate serializer instead of using \"handleSecondaryContextualization()\"\n     }\n     return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,17 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // fix: use \"delegateType\" instead of \"provider.getTypeFactory()\" to get the type information for the serializer to delegate to\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property); // fix: call the createContextual() method of the delegate serializer instead of using \"handleSecondaryContextualization()\"\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,17 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // fix: use \"delegateType\" instead of \"provider.getTypeFactory()\" to get the type information for the serializer to delegate to\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property); // fix: call the createContextual() method of the delegate serializer instead of using \"handleSecondaryContextualization()\"\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,17 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // fix: use \"delegateType\" instead of \"provider.getTypeFactory()\" to get the type information for the serializer to delegate to\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property); // fix: call the createContextual() method of the delegate serializer instead of using \"handleSecondaryContextualization()\"\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,17 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // fix: use \"delegateType\" instead of \"provider.getTypeFactory()\" to get the type information for the serializer to delegate to\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property); // fix: call the createContextual() method of the delegate serializer instead of using \"handleSecondaryContextualization()\"\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,17 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // fix: use \"delegateType\" instead of \"provider.getTypeFactory()\" to get the type information for the serializer to delegate to\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property); // fix: call the createContextual() method of the delegate serializer instead of using \"handleSecondaryContextualization()\"\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        delSer = provider.findValueSerializer(delegateType);\n    } else {\n        delSer = provider.handlePrimaryContextualization(delSer, property);\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,18 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else {\n+        delSer = provider.handlePrimaryContextualization(delSer, property);\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,10 +7,12 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else {\n+        delSer = provider.handlePrimaryContextualization(delSer, property);\n     }\n     if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n     }\n     return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,18 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else {\n+        delSer = provider.handlePrimaryContextualization(delSer, property);\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,18 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else {\n+        delSer = provider.handlePrimaryContextualization(delSer, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,18 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else {\n+        delSer = provider.handlePrimaryContextualization(delSer, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,18 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else {\n+        delSer = provider.handlePrimaryContextualization(delSer, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,18 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    } else {\n+        delSer = provider.handlePrimaryContextualization(delSer, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        delSer = provider.findValueSerializer(delegateType, property);\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,16 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,10 +7,10 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n     if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n     }\n     return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,16 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,16 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,16 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,16 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,16 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType, property);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer)delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n            // Set delegateType to Object if the converter returns a null type\n            if (delegateType == null) {\n              delegateType = provider.constructType(Object.class);\n            }\n        }\n        delSer = provider.findValueSerializer(delegateType);\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = provider.handleSecondaryContextualization(delSer, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,20 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // Set delegateType to Object if the converter returns a null type\n+            if (delegateType == null) {\n+              delegateType = provider.constructType(Object.class);\n+            }\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -6,8 +6,12 @@\n         // Otherwise, need to locate serializer to delegate to. For that we need type information...\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // Set delegateType to Object if the converter returns a null type\n+            if (delegateType == null) {\n+              delegateType = provider.constructType(Object.class);\n+            }\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n     if (delSer instanceof ContextualSerializer) {\n         delSer = provider.handleSecondaryContextualization(delSer, property);\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,20 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // Set delegateType to Object if the converter returns a null type\n+            if (delegateType == null) {\n+              delegateType = provider.constructType(Object.class);\n+            }\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,20 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // Set delegateType to Object if the converter returns a null type\n+            if (delegateType == null) {\n+              delegateType = provider.constructType(Object.class);\n+            }\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,20 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // Set delegateType to Object if the converter returns a null type\n+            if (delegateType == null) {\n+              delegateType = provider.constructType(Object.class);\n+            }\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,20 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // Set delegateType to Object if the converter returns a null type\n+            if (delegateType == null) {\n+              delegateType = provider.constructType(Object.class);\n+            }\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,20 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+            // Set delegateType to Object if the converter returns a null type\n+            if (delegateType == null) {\n+              delegateType = provider.constructType(Object.class);\n+            }\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        // Fix bug: Added null check before calling provider.findValueSerializer\n        if (delegateType != null) {\n            delSer = provider.findValueSerializer(delegateType);\n        }\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = provider.handleSecondaryContextualization(delSer, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,19 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n-    }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix bug: Added null check before calling provider.findValueSerializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n         }\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n     }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,7 +7,10 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        // Fix bug: Added null check before calling provider.findValueSerializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n     }\n     if (delSer instanceof ContextualSerializer) {\n         delSer = provider.handleSecondaryContextualization(delSer, property);\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,19 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix bug: Added null check before calling provider.findValueSerializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,19 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix bug: Added null check before calling provider.findValueSerializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,19 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix bug: Added null check before calling provider.findValueSerializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,19 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix bug: Added null check before calling provider.findValueSerializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,19 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        // Fix bug: Added null check before calling provider.findValueSerializer\n+        if (delegateType != null) {\n+            delSer = provider.findValueSerializer(delegateType);\n+        }\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = provider.handleSecondaryContextualization(delSer, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n        delSer = provider.findValueSerializer(delegateType);\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "diff": "--- com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n+++ com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java@createSerializer\n@@ -1,42 +1,16 @@\n @Override\n-@SuppressWarnings(\"unchecked\")\n-public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n-    // Very first thing, let's check if there is explicit serializer annotation:\n-    final SerializationConfig config = prov.getConfig();\n-    BeanDescription beanDesc = config.introspect(origType);\n-    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    if (ser != null) {\n-        return (JsonSerializer<Object>) ser;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n-    boolean staticTyping;\n-    // Next: we may have annotations that further define types to use...\n-    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-    if (type == origType) {\n-        // no changes, won't force static typing\n-        staticTyping = false;\n-    } else {\n-        // changes; assume static typing; plus, need to re-introspect if class differs\n-        staticTyping = true;\n-        if (!type.hasRawClass(origType.getRawClass())) {\n-            beanDesc = config.introspect(type);\n-        }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n     }\n-    // Slight detour: do we have a Converter to consider?\n-    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n-    if (conv == null) {\n-        // no, simple\n-        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n-    }\n-    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n-    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n-    if (!delegateType.hasRawClass(type.getRawClass())) {\n-        beanDesc = config.introspect(delegateType);\n-        // [#359]: explicitly check (again) for @JsonSerializer...\n-        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n-    }\n-    // [databind#731]: Should skip if nominally java.lang.Object\n-    if (ser == null) {\n-        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n-    }\n-    return new StdDelegatingSerializer(conv, delegateType, ser);\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@createContextual\n@@ -7,10 +7,10 @@\n         if (delegateType == null) {\n             delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n-                delSer = provider.findValueSerializer(delegateType);\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n     if (delSer instanceof ContextualSerializer) {\n-        delSer = provider.handleSecondaryContextualization(delSer, property);\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n     }\n     return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serialize\n@@ -1,11 +1,16 @@\n @Override\n-public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n-    Object delegateValue = convertValue(value);\n-    // should we accept nulls?\n-    if (delegateValue == null) {\n-        provider.defaultSerializeNull(gen);\n-        return;\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n     }\n-    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n-    _delegateSerializer.serialize(delegateValue, gen, provider);\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@serializeWithType\n@@ -1,5 +1,16 @@\n @Override\n-public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n-        Object delegateValue = convertValue(value);\n-    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty\n@@ -1,7 +1,16 @@\n @Override\n-// since 2.5\n-@Deprecated\n-public boolean isEmpty(Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@isEmpty4\n@@ -1,5 +1,16 @@\n @Override\n-public boolean isEmpty(SerializerProvider prov, Object value) {\n-    Object delegateValue = convertValue(value);\n-    return _delegateSerializer.isEmpty(prov, delegateValue);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n--- com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n+++ com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java@acceptJsonFormatVisitor\n@@ -1,5 +1,16 @@\n @Override\n-public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n-        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n-    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n+public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer<?> delSer = _delegateSerializer;\n+    JavaType delegateType = _delegateType;\n+    if (delSer == null) {\n+        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n+        if (delegateType == null) {\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n+        }\n+        delSer = provider.findValueSerializer(delegateType);\n+    }\n+    if (delSer instanceof ContextualSerializer) {\n+        delSer = ((ContextualSerializer) delSer).createContextual(provider, property);\n+    }\n+    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]