[{"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.nodeName() == null) // fix: added null check for nodeName\n            break;\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,8 +1,7 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.nodeName() == null) // fix: added null check for nodeName\n             break;\n         else if (next.nodeName().equals(nodeName))\n             return next;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.nodeName().equals(\"template\")) {\n            break;\n        }\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,9 +1,9 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.nodeName().equals(\"template\")) {\n             break;\n+        }\n         else if (next.nodeName().equals(nodeName))\n             return next;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.nodeName().equals(\"marker\")) // fix to check for scope marker\n            break;\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,8 +1,7 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.nodeName().equals(\"marker\")) // fix to check for scope marker\n             break;\n         else if (next.nodeName().equals(nodeName))\n             return next;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.nodeName().equals(\"html\")) {\n            break;\n        } else if (next.nodeName().equals(nodeName)) {\n            return next;\n        }\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,11 +1,11 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.nodeName().equals(\"html\")) {\n             break;\n-        else if (next.nodeName().equals(nodeName))\n+        } else if (next.nodeName().equals(nodeName)) {\n             return next;\n+        }\n     }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.nodeName().equals(\"template\")) {\n            break;\n        } else if (next.nodeName().equals(nodeName)) {\n            return next;\n        }\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,11 +1,11 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.nodeName().equals(\"template\")) {\n             break;\n-        else if (next.nodeName().equals(nodeName))\n+        } else if (next.nodeName().equals(nodeName)) {\n             return next;\n+        }\n     }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.nodeName().equals(\"marker\"))\n            break;\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,8 +1,7 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.nodeName().equals(\"marker\"))\n             break;\n         else if (next.nodeName().equals(nodeName))\n             return next;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null) {\n            break;\n        } else if (next.nodeName().equals(nodeName)) {\n            return next;\n        } else if (isMarker(next)) {\n            // do nothing, just skip the marker\n        }\n    }\n    return null;\n}\n\n// helper function to check if an element is a formatting element marker\nprivate boolean isMarker(Element el) {\n    return el.nodeName().equals(\"html\") && el.hasAttr(\"data-marker\");\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,11 +1,13 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null) {\n             break;\n-        else if (next.nodeName().equals(nodeName))\n+        } else if (next.nodeName().equals(nodeName)) {\n             return next;\n+        } else if (isMarker(next)) {\n+            // do nothing, just skip the marker\n+        }\n     }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.nodeName().equals(\"body\")) { // check for scope marker and body element\n            break;\n        } else if (next.nodeName().equals(nodeName)) {\n            return next;\n        }\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,11 +1,11 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.nodeName().equals(\"body\")) { // check for scope marker and body element\n             break;\n-        else if (next.nodeName().equals(nodeName))\n+        } else if (next.nodeName().equals(nodeName)) {\n             return next;\n+        }\n     }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null)\n            continue;  // skip null markup elements\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,9 +1,8 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n-            break;\n+        if (next == null)\n+            continue;  // skip null markup elements\n         else if (next.nodeName().equals(nodeName))\n             return next;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null) {\n            break;\n        } else if (next.nodeName().equals(nodeName)) {\n            return next;\n        } else if (pos == 0) {\n            return null;\n        }\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,11 +1,13 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null) {\n             break;\n-        else if (next.nodeName().equals(nodeName))\n+        } else if (next.nodeName().equals(nodeName)) {\n             return next;\n+        } else if (pos == 0) {\n+            return null;\n+        }\n     }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.isMarker())\n            break;\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,8 +1,7 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.isMarker())\n             break;\n         else if (next.nodeName().equals(nodeName))\n             return next;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.tagName().equals(\"html\")) // check for scope marker\n            break;\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,8 +1,7 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.tagName().equals(\"html\")) // check for scope marker\n             break;\n         else if (next.nodeName().equals(nodeName))\n             return next;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null) {\n            break;\n        } else if (\"*\".equals(next.nodeName()) || next.nodeName().equalsIgnoreCase(nodeName)) {\n            return next;\n        }\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,11 +1,11 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null) {\n             break;\n-        else if (next.nodeName().equals(nodeName))\n+        } else if (\"*\".equals(next.nodeName()) || next.nodeName().equalsIgnoreCase(nodeName)) {\n             return next;\n+        }\n     }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null) //Moved the scope marker check after null check\n            break;\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,8 +1,7 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null) //Moved the scope marker check after null check\n             break;\n         else if (next.nodeName().equals(nodeName))\n             return next;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || isMarker(next)) // check for null and marker\n            break;\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}\n\nprivate boolean isMarker(Element element) {\n    return element.nodeName().equals(\"html\") && element.hasAttr(\"data-FormatMark\");\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,8 +1,7 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || isMarker(next)) // check for null and marker\n             break;\n         else if (next.nodeName().equals(nodeName))\n             return next;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.nodeName().equals(\"marker\")) // fixed to check for scope marker\n            break;\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,8 +1,7 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.nodeName().equals(\"marker\")) // fixed to check for scope marker\n             break;\n         else if (next.nodeName().equals(nodeName))\n             return next;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.nodeName().equals(\"html\")) // check for scope marker \"html\"\n            break;\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,8 +1,7 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.nodeName().equals(\"html\")) // check for scope marker \"html\"\n             break;\n         else if (next.nodeName().equals(nodeName))\n             return next;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null) {\n            break;\n        } else if (next.tag().getName().equals(nodeName)) {\n            return next;\n        }\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,11 +1,11 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null) {\n             break;\n-        else if (next.nodeName().equals(nodeName))\n+        } else if (next.tag().getName().equals(nodeName)) {\n             return next;\n+        }\n     }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == null || next.nodeName().equals(\"html\")) { // fixed condition\n            break;\n        }\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n+++ org/jsoup/parser/HtmlTreeBuilder.java@getActiveFormattingElement\n@@ -1,9 +1,9 @@\n Element getActiveFormattingElement(String nodeName) {\n     for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n         Element next = formattingElements.get(pos);\n-        if (// scope marker\n-        next == null)\n+        if (next == null || next.nodeName().equals(\"html\")) { // fixed condition\n             break;\n+        }\n         else if (next.nodeName().equals(nodeName))\n             return next;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]