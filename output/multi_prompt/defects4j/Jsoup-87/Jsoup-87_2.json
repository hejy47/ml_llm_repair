[{"output": "void popStackToClose(String... elNames) {\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (inSorted(next.nodeName(), elNames)) {\n            stack.remove(pos);\n            break;\n        }\n        stack.remove(pos);\n    }\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@popStackToClose2\n+++ org/jsoup/parser/HtmlTreeBuilder.java@popStackToClose2\n@@ -1,8 +1,10 @@\n void popStackToClose(String... elNames) {\n     for (int pos = stack.size() - 1; pos >= 0; pos--) {\n         Element next = stack.get(pos);\n+        if (inSorted(next.nodeName(), elNames)) {\n+            stack.remove(pos);\n+            break;\n+        }\n         stack.remove(pos);\n-        if (inSorted(next.nodeName(), elNames))\n-            break;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 12}, {"output": "void popStackToClose(String... elNames) {\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (inSorted(next.nodeName(), elNames)) {\n            stack.remove(pos);\n            break;\n        } else {\n            stack.remove(pos);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@popStackToClose2\n+++ org/jsoup/parser/HtmlTreeBuilder.java@popStackToClose2\n@@ -1,8 +1,11 @@\n void popStackToClose(String... elNames) {\n     for (int pos = stack.size() - 1; pos >= 0; pos--) {\n         Element next = stack.get(pos);\n-        stack.remove(pos);\n-        if (inSorted(next.nodeName(), elNames))\n+        if (inSorted(next.nodeName(), elNames)) {\n+            stack.remove(pos);\n             break;\n+        } else {\n+            stack.remove(pos);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "void popStackToClose(String... elNames) {\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (inSorted(next.nodeName(), elNames)){\n            stack.remove(pos);\n            break;\n        }else{\n            stack.remove(pos);\n        }\n    }\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@popStackToClose2\n+++ org/jsoup/parser/HtmlTreeBuilder.java@popStackToClose2\n@@ -1,8 +1,11 @@\n void popStackToClose(String... elNames) {\n     for (int pos = stack.size() - 1; pos >= 0; pos--) {\n         Element next = stack.get(pos);\n-        stack.remove(pos);\n-        if (inSorted(next.nodeName(), elNames))\n+        if (inSorted(next.nodeName(), elNames)){\n+            stack.remove(pos);\n             break;\n+        }else{\n+            stack.remove(pos);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "void popStackToClose(String... elNames) {\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (inSorted(next.nodeName(), elNames))\n            break;\n        stack.remove(pos);\n    }\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@popStackToClose2\n+++ org/jsoup/parser/HtmlTreeBuilder.java@popStackToClose2\n@@ -1,8 +1,8 @@\n void popStackToClose(String... elNames) {\n     for (int pos = stack.size() - 1; pos >= 0; pos--) {\n         Element next = stack.get(pos);\n-        stack.remove(pos);\n         if (inSorted(next.nodeName(), elNames))\n             break;\n+        stack.remove(pos);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "void popStackToClose(String... elNames) {\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (inSorted(next.nodeName(), elNames)) {\n            stack.remove(pos);\n            break;\n        }\n        stack.remove(pos); // remove element if not matching the elNames\n    }\n}", "diff": "--- org/jsoup/parser/HtmlTreeBuilder.java@popStackToClose2\n+++ org/jsoup/parser/HtmlTreeBuilder.java@popStackToClose2\n@@ -1,8 +1,10 @@\n void popStackToClose(String... elNames) {\n     for (int pos = stack.size() - 1; pos >= 0; pos--) {\n         Element next = stack.get(pos);\n-        stack.remove(pos);\n-        if (inSorted(next.nodeName(), elNames))\n+        if (inSorted(next.nodeName(), elNames)) {\n+            stack.remove(pos);\n             break;\n+        }\n+        stack.remove(pos); // remove element if not matching the elNames\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]