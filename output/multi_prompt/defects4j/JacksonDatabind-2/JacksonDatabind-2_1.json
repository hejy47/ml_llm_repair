[{"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    _writeSimpleObject(node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,5 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    _writeSimpleObject(node);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,5 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    _writeSimpleObject(node);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    if (node == null) {\n        _append(JsonToken.VALUE_NULL, null);\n    } else {\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    if (node == null) {\n+        _append(JsonToken.VALUE_NULL, null);\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,9 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    if (node == null) {\n+        _append(JsonToken.VALUE_NULL, null);\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    if (node == null) {\n        _writeNull();\n    } else {\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    if (node == null) {\n+        _writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,9 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    if (node == null) {\n+        _writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    writeStartArray(); // add this line to start writing an array\n    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    writeEndArray(); // add this line to end writing the array\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    writeStartArray(); // add this line to start writing an array\n+    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    writeEndArray(); // add this line to end writing the array\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n+    writeStartArray(); // add this line to start writing an array\n     _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    writeEndArray(); // add this line to end writing the array\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    _codec.writeTree(_generator, node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,5 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    _codec.writeTree(_generator, node);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,5 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    _codec.writeTree(_generator, node);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n    _serializerProvider().serializeValue(this, node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,6 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _serializerProvider().serializeValue(this, node);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,6 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    _write(JsonToken.VALUE_EMBEDDED_OBJECT);\n+    _serializerProvider().serializeValue(this, node);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    if (_getBufferedContext().writeValue()) {\n        // If we are serializing the value that contains TreeNode, we need to write it as JSON\n        _append(JsonToken.START_OBJECT);\n        _writeTreeNode(node);\n        _append(JsonToken.END_OBJECT);\n    } else {\n        // Otherwise, we can just write it as the embedded object\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,13 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    if (_getBufferedContext().writeValue()) {\n+        // If we are serializing the value that contains TreeNode, we need to write it as JSON\n+        _append(JsonToken.START_OBJECT);\n+        _writeTreeNode(node);\n+        _append(JsonToken.END_OBJECT);\n+    } else {\n+        // Otherwise, we can just write it as the embedded object\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,13 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    if (_getBufferedContext().writeValue()) {\n+        // If we are serializing the value that contains TreeNode, we need to write it as JSON\n+        _append(JsonToken.START_OBJECT);\n+        _writeTreeNode(node);\n+        _append(JsonToken.END_OBJECT);\n+    } else {\n+        // Otherwise, we can just write it as the embedded object\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    if (node == null) {\n        writeNull();\n    } else {\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    if (node == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,9 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    if (node == null) {\n+        writeNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    if (node == null) {\n        _nullToken();\n    } else {\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    if (node == null) {\n+        _nullToken();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,9 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    if (node == null) {\n+        _nullToken();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    writeObject(node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,5 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    writeObject(node);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,5 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    writeObject(node);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    if (_codec == null) {\n        throw new IllegalStateException(\"No ObjectCodec defined\");\n    }\n    _codec.writeTree(_jsonGenerator, node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,7 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    if (_codec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec defined\");\n+    }\n+    _codec.writeTree(_jsonGenerator, node);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,7 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    if (_codec == null) {\n+        throw new IllegalStateException(\"No ObjectCodec defined\");\n+    }\n+    _codec.writeTree(_jsonGenerator, node);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    if (node == null) {\n        _nullToken();\n    } else {\n        _append(JsonToken.START_OBJECT);\n        _writeChildren(node);\n        _append(JsonToken.END_OBJECT);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,11 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    if (node == null) {\n+        _nullToken();\n+    } else {\n+        _append(JsonToken.START_OBJECT);\n+        _writeChildren(node);\n+        _append(JsonToken.END_OBJECT);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,11 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    if (node == null) {\n+        _nullToken();\n+    } else {\n+        _append(JsonToken.START_OBJECT);\n+        _writeChildren(node);\n+        _append(JsonToken.END_OBJECT);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // codec is mandatory to write tree as JSON\n    _verifyValueWrite(\"write tree\");\n    if (node == null) {\n        writeNull();\n    } else {\n        _codec().writeTree(_generator(), node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,10 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // codec is mandatory to write tree as JSON\n+    _verifyValueWrite(\"write tree\");\n+    if (node == null) {\n+        writeNull();\n+    } else {\n+        _codec().writeTree(_generator(), node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,10 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    // codec is mandatory to write tree as JSON\n+    _verifyValueWrite(\"write tree\");\n+    if (node == null) {\n+        writeNull();\n+    } else {\n+        _codec().writeTree(_generator(), node);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    _writeScalar(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,5 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    _writeScalar(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,5 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    _writeScalar(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // as with 'writeObject()', is codec optional?\n    if (node == null) {\n        _appendNull();\n    } else {\n        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n    }\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,9 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // as with 'writeObject()', is codec optional?\n+    if (node == null) {\n+        _appendNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,9 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n     // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    if (node == null) {\n+        _appendNull();\n+    } else {\n+        _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\npublic void writeTree(TreeNode node) throws IOException {\n    // codec is mandatory to write a tree\n    _assertNotNull(_getCodec(), \"JsonGenerator's codec is null\");\n    _getCodec().writeTree(_generator, node);\n}", "diff": "--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeObject\n@@ -1,5 +1,6 @@\n @Override\n-public void writeObject(Object value) throws IOException {\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-        //          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+public void writeTree(TreeNode node) throws IOException {\n+    // codec is mandatory to write a tree\n+    _assertNotNull(_getCodec(), \"JsonGenerator's codec is null\");\n+    _getCodec().writeTree(_generator, node);\n }\n--- com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n+++ com/fasterxml/jackson/databind/util/TokenBuffer.java@writeTree\n@@ -1,5 +1,6 @@\n @Override\n public void writeTree(TreeNode node) throws IOException {\n-    // as with 'writeObject()', is codec optional?\n-    _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+    // codec is mandatory to write a tree\n+    _assertNotNull(_getCodec(), \"JsonGenerator's codec is null\");\n+    _getCodec().writeTree(_generator, node);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]