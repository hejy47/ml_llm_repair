[{"output": "public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = (classLoader != null) ? classLoader : Thread.currentThread().getContextClassLoader();\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,4 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    this.classLoader = (classLoader != null) ? classLoader : Thread.currentThread().getContextClassLoader();\n }\n", "finish_reason": "stop", "valid": false, "num": 5}, {"output": "public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    if (classLoader == null) {\n        this.classLoader = Thread.currentThread().getContextClassLoader();\n    } else {\n        this.classLoader = classLoader;\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,8 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    if (classLoader == null) {\n+        this.classLoader = Thread.currentThread().getContextClassLoader();\n+    } else {\n+        this.classLoader = classLoader;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n}\n\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    try {\n        String name = desc.getName();\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return super.resolveClass(desc);\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -1,9 +1,9 @@\n @Override\n protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n-    String name = desc.getName();\n     try {\n+        String name = desc.getName();\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        return super.resolveClass(desc);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n}\n\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        Class<?> clazz = Class.forName(name, false, classLoader);\n        if (clazz != null) {\n            return clazz;\n        }\n    } catch (ClassNotFoundException ignored) {\n    }\n    return super.resolveClass(desc);\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 3}, {"output": "public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n}\n\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    Class<?> clazz;\n    try {\n        clazz = Class.forName(desc.getName(), false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        clazz = super.resolveClass(desc);\n    }\n    return clazz;\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -1,9 +1,10 @@\n @Override\n protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n-    String name = desc.getName();\n+    Class<?> clazz;\n     try {\n-        return Class.forName(name, false, classLoader);\n+        clazz = Class.forName(desc.getName(), false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        clazz = super.resolveClass(desc);\n     }\n+    return clazz;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n    enableResolveObject(true);\n}\n\n// The fix adds the line \"enableResolveObject(true);\" to enable object resolution.", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,5 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n     this.classLoader = classLoader;\n+    enableResolveObject(true);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = classLoader;\n    enableResolveObject(true);\n}\n\n// Add the following method to enable object resolution using the specified ClassLoader\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    if (classLoader != null) {\n        return Class.forName(desc.getName(), false, classLoader);\n    }\n    return super.resolveClass(desc);\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,5 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n     this.classLoader = classLoader;\n+    enableResolveObject(true);\n }\n--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -1,9 +1,7 @@\n @Override\n protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n-    String name = desc.getName();\n-    try {\n-        return Class.forName(name, false, classLoader);\n-    } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+    if (classLoader != null) {\n+        return Class.forName(desc.getName(), false, classLoader);\n     }\n+    return super.resolveClass(desc);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    if(classLoader == null){\n        this.classLoader = Thread.currentThread().getContextClassLoader();\n    } else {\n        this.classLoader = classLoader;\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,8 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    if(classLoader == null){\n+        this.classLoader = Thread.currentThread().getContextClassLoader();\n+    } else {\n+        this.classLoader = classLoader;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n    super(in);\n    this.classLoader = (classLoader == null) ? ClassLoader.getSystemClassLoader() : classLoader;\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n+++ org/apache/commons/lang3/SerializationUtils.java@ClassLoaderAwareObjectInputStream\n@@ -1,4 +1,4 @@\n public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n     super(in);\n-    this.classLoader = classLoader;\n+    this.classLoader = (classLoader == null) ? ClassLoader.getSystemClassLoader() : classLoader;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]