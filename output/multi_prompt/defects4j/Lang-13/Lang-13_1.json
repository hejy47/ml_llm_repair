[{"output": "@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        return super.resolveClass(desc);\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -4,6 +4,6 @@\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        return super.resolveClass(desc);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 15}, {"output": "@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        // Instead of using the current thread's context class loader, use the class loader\n        // that loaded this ObjectInputStream\n        return super.resolveClass(desc);\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -4,6 +4,8 @@\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        // Instead of using the current thread's context class loader, use the class loader\n+        // that loaded this ObjectInputStream\n+        return super.resolveClass(desc);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex1) {\n        try {\n            // try Thread.currentThread().getContextClassLoader() if class not found using the specified classLoader\n            return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n        } catch (ClassNotFoundException ex2) {\n            // re-throw the original exception if the class cannot be found using either classLoader\n            throw ex1;\n        }\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -3,7 +3,13 @@\n     String name = desc.getName();\n     try {\n         return Class.forName(name, false, classLoader);\n-    } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+    } catch (ClassNotFoundException ex1) {\n+        try {\n+            // try Thread.currentThread().getContextClassLoader() if class not found using the specified classLoader\n+            return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        } catch (ClassNotFoundException ex2) {\n+            // re-throw the original exception if the class cannot be found using either classLoader\n+            throw ex1;\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        // check the context class loader first before defaulting to the system class loader\n        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n        if (contextClassLoader != null) {\n            return Class.forName(name, false, contextClassLoader);\n        }\n        // if context class loader is null, use the system class loader\n        return Class.forName(name);\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -4,6 +4,12 @@\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        // check the context class loader first before defaulting to the system class loader\n+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        if (contextClassLoader != null) {\n+            return Class.forName(name, false, contextClassLoader);\n+        }\n+        // if context class loader is null, use the system class loader\n+        return Class.forName(name);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        // checking if the class can be found using context class loader\n        // before throwing ClassNotFoundException\n        Class<?> clazz = Thread.currentThread().getContextClassLoader().loadClass(name);\n        if (clazz != null) {\n            return clazz;\n        }\n        throw ex;\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -4,6 +4,12 @@\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        // checking if the class can be found using context class loader\n+        // before throwing ClassNotFoundException\n+        Class<?> clazz = Thread.currentThread().getContextClassLoader().loadClass(name);\n+        if (clazz != null) {\n+            return clazz;\n+        }\n+        throw ex;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "@Override\nprotected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n    String name = desc.getName();\n    try {\n        return Class.forName(name, false, classLoader);\n    } catch (ClassNotFoundException ex) {\n        // The class might be available through the system class loader\n        return Class.forName(name);\n    }\n}", "diff": "--- org/apache/commons/lang3/SerializationUtils.java@resolveClass\n+++ org/apache/commons/lang3/SerializationUtils.java@resolveClass\n@@ -4,6 +4,7 @@\n     try {\n         return Class.forName(name, false, classLoader);\n     } catch (ClassNotFoundException ex) {\n-        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+        // The class might be available through the system class loader\n+        return Class.forName(name);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]