[{"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        if (fnNameNode.getType() == Token.NAME) {\n            String fnName = fnNameNode.getString();\n            if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n                declareVar(fnName, fnNameNode, n, null, null, n);\n            }\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, n);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -6,9 +6,11 @@\n         final Node body = args.getNext();\n         // Bleed the function name into the scope, if it hasn't\n         // been declared in the outer scope.\n-        String fnName = fnNameNode.getString();\n-        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n-            declareVar(fnName, fnNameNode, n, null, null, n);\n+        if (fnNameNode.getType() == Token.NAME) {\n+            String fnName = fnNameNode.getString();\n+            if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n+                declareVar(fnName, fnNameNode, n, null, null, n);\n+            }\n         }\n         // Args: Declare function variables\n         Preconditions.checkState(args.getType() == Token.LP);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.PARAM_LIST); // Changed from Token.LP\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, n);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -11,7 +11,7 @@\n             declareVar(fnName, fnNameNode, n, null, null, n);\n         }\n         // Args: Declare function variables\n-        Preconditions.checkState(args.getType() == Token.LP);\n+        Preconditions.checkState(args.getType() == Token.PARAM_LIST); // Changed from Token.LP\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n             declareVar(a.getString(), a, args, n, null, n);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        if (fnNameNode != null) {\n            String fnName = fnNameNode.getString();\n            if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n                declareVar(fnName, fnNameNode, n, null, null, n);\n            }\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, n);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -6,9 +6,11 @@\n         final Node body = args.getNext();\n         // Bleed the function name into the scope, if it hasn't\n         // been declared in the outer scope.\n-        String fnName = fnNameNode.getString();\n-        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n-            declareVar(fnName, fnNameNode, n, null, null, n);\n+        if (fnNameNode != null) {\n+            String fnName = fnNameNode.getString();\n+            if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n+                declareVar(fnName, fnNameNode, n, null, null, n);\n+            }\n         }\n         // Args: Declare function variables\n         Preconditions.checkState(args.getType() == Token.LP);\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, null);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -14,7 +14,7 @@\n         Preconditions.checkState(args.getType() == Token.LP);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n-            declareVar(a.getString(), a, args, n, null, n);\n+            declareVar(a.getString(), a, args, n, null, null);\n         }\n         // Body\n         scanVars(body, n);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        String fnName = \"\";\n        if (fnNameNode != null) {\n            fnName = fnNameNode.getString();\n        }\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, n);\n        }\n        scanVars(body, n);\n    } else {\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -4,22 +4,20 @@\n         final Node fnNameNode = n.getFirstChild();\n         final Node args = fnNameNode.getNext();\n         final Node body = args.getNext();\n-        // Bleed the function name into the scope, if it hasn't\n-        // been declared in the outer scope.\n-        String fnName = fnNameNode.getString();\n+        String fnName = \"\";\n+        if (fnNameNode != null) {\n+            fnName = fnNameNode.getString();\n+        }\n         if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n             declareVar(fnName, fnNameNode, n, null, null, n);\n         }\n-        // Args: Declare function variables\n         Preconditions.checkState(args.getType() == Token.LP);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n             declareVar(a.getString(), a, args, n, null, n);\n         }\n-        // Body\n         scanVars(body, n);\n     } else {\n-        // It's the global block\n         Preconditions.checkState(scope.getParent() == null);\n         scanVars(n, null);\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && !NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, n);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -7,7 +7,7 @@\n         // Bleed the function name into the scope, if it hasn't\n         // been declared in the outer scope.\n         String fnName = fnNameNode.getString();\n-        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n+        if (!fnName.isEmpty() && !NodeUtil.isFunctionExpression(n)) {\n             declareVar(fnName, fnNameNode, n, null, null, n);\n         }\n         // Args: Declare function variables\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, true, n);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, true, n);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -8,13 +8,13 @@\n         // been declared in the outer scope.\n         String fnName = fnNameNode.getString();\n         if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n-            declareVar(fnName, fnNameNode, n, null, null, n);\n+            declareVar(fnName, fnNameNode, n, null, null, true, n);\n         }\n         // Args: Declare function variables\n         Preconditions.checkState(args.getType() == Token.LP);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n-            declareVar(a.getString(), a, args, n, null, n);\n+            declareVar(a.getString(), a, args, n, null, true, n);\n         }\n         // Body\n         scanVars(body, n);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, null);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, null);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -8,13 +8,13 @@\n         // been declared in the outer scope.\n         String fnName = fnNameNode.getString();\n         if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n-            declareVar(fnName, fnNameNode, n, null, null, n);\n+            declareVar(fnName, fnNameNode, n, null, null, null);\n         }\n         // Args: Declare function variables\n         Preconditions.checkState(args.getType() == Token.LP);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n-            declareVar(a.getString(), a, args, n, null, n);\n+            declareVar(a.getString(), a, args, n, null, null);\n         }\n         // Body\n         scanVars(body, n);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n) &&\n                !NodeUtil.isNameDeclaredBefore(fnNameNode, n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, n);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -7,7 +7,8 @@\n         // Bleed the function name into the scope, if it hasn't\n         // been declared in the outer scope.\n         String fnName = fnNameNode.getString();\n-        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n+        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n) &&\n+                !NodeUtil.isNameDeclaredBefore(fnNameNode, n)) {\n             declareVar(fnName, fnNameNode, n, null, null, n);\n         }\n         // Args: Declare function variables\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.PARAM_LIST); // Change Token.LP to Token.PARAM_LIST\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, n);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -11,7 +11,7 @@\n             declareVar(fnName, fnNameNode, n, null, null, n);\n         }\n         // Args: Declare function variables\n-        Preconditions.checkState(args.getType() == Token.LP);\n+        Preconditions.checkState(args.getType() == Token.PARAM_LIST); // Change Token.LP to Token.PARAM_LIST\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n             declareVar(a.getString(), a, args, n, null, n);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, parent); //Changed to parent instead of \"n\"\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, parent, null, parent); //Changed to parent instead of \"n\"\n        }\n        // Body\n        scanVars(body, parent); //Changed to parent instead of \"n\"\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null); //Changed to null instead of \"parent\"\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -8,19 +8,19 @@\n         // been declared in the outer scope.\n         String fnName = fnNameNode.getString();\n         if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n-            declareVar(fnName, fnNameNode, n, null, null, n);\n+            declareVar(fnName, fnNameNode, n, null, null, parent); //Changed to parent instead of \"n\"\n         }\n         // Args: Declare function variables\n         Preconditions.checkState(args.getType() == Token.LP);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n-            declareVar(a.getString(), a, args, n, null, n);\n+            declareVar(a.getString(), a, args, parent, null, parent); //Changed to parent instead of \"n\"\n         }\n         // Body\n-        scanVars(body, n);\n+        scanVars(body, parent); //Changed to parent instead of \"n\"\n     } else {\n         // It's the global block\n         Preconditions.checkState(scope.getParent() == null);\n-        scanVars(n, null);\n+        scanVars(n, null); //Changed to null instead of \"parent\"\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, parent); // Fixed: pass parent scope instead of \"n\"\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, parent, null, n); // Fixed: pass parent scope instead of \"n\"\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -8,13 +8,13 @@\n         // been declared in the outer scope.\n         String fnName = fnNameNode.getString();\n         if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n-            declareVar(fnName, fnNameNode, n, null, null, n);\n+            declareVar(fnName, fnNameNode, n, null, null, parent); // Fixed: pass parent scope instead of \"n\"\n         }\n         // Args: Declare function variables\n         Preconditions.checkState(args.getType() == Token.LP);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n-            declareVar(a.getString(), a, args, n, null, n);\n+            declareVar(a.getString(), a, args, parent, null, n); // Fixed: pass parent scope instead of \"n\"\n         }\n         // Body\n         scanVars(body, n);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, scope, n, null, n);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -14,7 +14,7 @@\n         Preconditions.checkState(args.getType() == Token.LP);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n-            declareVar(a.getString(), a, args, n, null, n);\n+            declareVar(a.getString(), a, scope, n, null, n);\n         }\n         // Body\n         scanVars(body, n);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, parent); // fixed variable reference from n to parent\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, parent); // fixed variable reference from n to parent\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -8,13 +8,13 @@\n         // been declared in the outer scope.\n         String fnName = fnNameNode.getString();\n         if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n-            declareVar(fnName, fnNameNode, n, null, null, n);\n+            declareVar(fnName, fnNameNode, n, null, null, parent); // fixed variable reference from n to parent\n         }\n         // Args: Declare function variables\n         Preconditions.checkState(args.getType() == Token.LP);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n-            declareVar(a.getString(), a, args, n, null, n);\n+            declareVar(a.getString(), a, args, n, null, parent); // fixed variable reference from n to parent\n         }\n         // Body\n         scanVars(body, n);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.PARAM_LIST); // changed from Token.LP\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, n);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -11,7 +11,7 @@\n             declareVar(fnName, fnNameNode, n, null, null, n);\n         }\n         // Args: Declare function variables\n-        Preconditions.checkState(args.getType() == Token.LP);\n+        Preconditions.checkState(args.getType() == Token.PARAM_LIST); // changed from Token.LP\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n             declareVar(a.getString(), a, args, n, null, n);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n.getParent(), null, n);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -14,7 +14,7 @@\n         Preconditions.checkState(args.getType() == Token.LP);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n-            declareVar(a.getString(), a, args, n, null, n);\n+            declareVar(a.getString(), a, args, n.getParent(), null, n);\n         }\n         // Body\n         scanVars(body, n);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, parent); // fix #1 - pass parent scope\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, parent); // fix #1 - pass parent scope\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, parent); // fix #2 - pass parent scope\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -8,19 +8,19 @@\n         // been declared in the outer scope.\n         String fnName = fnNameNode.getString();\n         if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n-            declareVar(fnName, fnNameNode, n, null, null, n);\n+            declareVar(fnName, fnNameNode, n, null, null, parent); // fix #1 - pass parent scope\n         }\n         // Args: Declare function variables\n         Preconditions.checkState(args.getType() == Token.LP);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n-            declareVar(a.getString(), a, args, n, null, n);\n+            declareVar(a.getString(), a, args, n, null, parent); // fix #1 - pass parent scope\n         }\n         // Body\n         scanVars(body, n);\n     } else {\n         // It's the global block\n         Preconditions.checkState(scope.getParent() == null);\n-        scanVars(n, null);\n+        scanVars(n, parent); // fix #2 - pass parent scope\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.LP);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n.getScope(), null, n.getParent());\n        }\n        // Body\n        scanVars(body, n.getScope());\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -14,10 +14,10 @@\n         Preconditions.checkState(args.getType() == Token.LP);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n-            declareVar(a.getString(), a, args, n, null, n);\n+            declareVar(a.getString(), a, args, n.getScope(), null, n.getParent());\n         }\n         // Body\n-        scanVars(body, n);\n+        scanVars(body, n.getScope());\n     } else {\n         // It's the global block\n         Preconditions.checkState(scope.getParent() == null);\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        final Node fnNameNode = n.getFirstChild();\n        final Node args = fnNameNode.getNext();\n        final Node body = args.getNext();\n        // Bleed the function name into the scope, if it hasn't\n        // been declared in the outer scope.\n        String fnName = fnNameNode.getString();\n        if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n            declareVar(fnName, fnNameNode, n, null, null, n);\n        }\n        // Args: Declare function variables\n        Preconditions.checkState(args.getType() == Token.PARAM_LIST);\n        for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n            Preconditions.checkState(a.getType() == Token.NAME);\n            declareVar(a.getString(), a, args, n, null, n);\n        }\n        // Body\n        scanVars(body, n);\n    } else {\n        // It's the global block\n        Preconditions.checkState(scope.getParent() == null);\n        scanVars(n, null);\n    }\n}", "diff": "--- com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n+++ com/google/javascript/jscomp/SyntacticScopeCreator.java@scanRoot\n@@ -11,7 +11,7 @@\n             declareVar(fnName, fnNameNode, n, null, null, n);\n         }\n         // Args: Declare function variables\n-        Preconditions.checkState(args.getType() == Token.LP);\n+        Preconditions.checkState(args.getType() == Token.PARAM_LIST);\n         for (Node a = args.getFirstChild(); a != null; a = a.getNext()) {\n             Preconditions.checkState(a.getType() == Token.NAME);\n             declareVar(a.getString(), a, args, n, null, n);\n", "finish_reason": "stop", "valid": false, "num": 1}]