[{"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop) && !instance.getImplicitPrototype().hasProperty(prop)) { // check for prototypal inheritance as well\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.hasProperty(prop) && !instance.getImplicitPrototype().hasProperty(prop)) { // check for prototypal inheritance as well\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n    } else if(!instance.getPropertyRegardlessofType(prop).isEquivalentTo(implementedInterface.getPropertyType(prop))){\n        // Implemented, but not correctly typed\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_TYPE_MISMATCH, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -7,6 +7,13 @@\n             compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n         }\n         registerMismatch(instance, implementedInterface);\n+    } else if(!instance.getPropertyRegardlessofType(prop).isEquivalentTo(implementedInterface.getPropertyType(prop))){\n         // Implemented, but not correctly typed\n+        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n+        sourceName = sourceName == null ? \"\" : sourceName;\n+        if (shouldReport) {\n+            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_TYPE_MISMATCH, prop, implementedInterface.toString(), instance.toString()));\n+        }\n+        registerMismatch(instance, implementedInterface);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -4,7 +4,7 @@\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n         if (shouldReport) {\n-            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n+            compiler.report(JSError.make(n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n         }\n         registerMismatch(instance, implementedInterface);\n         // Implemented, but not correctly typed\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(n, INTERFACE_METHOD_NOT_IMPLEMENTED, sourceName, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -4,7 +4,7 @@\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n         if (shouldReport) {\n-            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n+            compiler.report(JSError.make(n, INTERFACE_METHOD_NOT_IMPLEMENTED, sourceName, prop, implementedInterface.toString(), instance.toString()));\n         }\n         registerMismatch(instance, implementedInterface);\n         // Implemented, but not correctly typed\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!implementedInterface.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!implementedInterface.hasProperty(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n    } else if (!instance.getPropertyType(prop).isSubtype(implementedInterface.getPropertyType(prop))) {\n        // Implemented, but not correctly typed\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_TYPE_MISMATCH, prop, implementedInterface.toString(), instance.getPropertyType(prop).toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -7,6 +7,13 @@\n             compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n         }\n         registerMismatch(instance, implementedInterface);\n+    } else if (!instance.getPropertyType(prop).isSubtype(implementedInterface.getPropertyType(prop))) {\n         // Implemented, but not correctly typed\n+        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n+        sourceName = sourceName == null ? \"\" : sourceName;\n+        if (shouldReport) {\n+            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_TYPE_MISMATCH, prop, implementedInterface.toString(), instance.getPropertyType(prop).toString()));\n+        }\n+        registerMismatch(instance, implementedInterface);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.getPropertyNames().contains(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.getPropertyNames().contains(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n    } else if (!instance.getPropertyType(prop).equals(implementedInterface.getPropertyType(prop))) {\n        // Implemented, but not correctly typed\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = (sourceName == null ? \"\" : sourceName);\n        if (shouldReport) {\n            String expectedType = implementedInterface.getPropertyType(prop).toString();\n            String actualType = instance.getPropertyType(prop).toString();\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_PARAM_MISMATCH, prop, expectedType, actualType));\n        }\n        registerMismatch(instance, implementedInterface);\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -7,6 +7,15 @@\n             compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n         }\n         registerMismatch(instance, implementedInterface);\n+    } else if (!instance.getPropertyType(prop).equals(implementedInterface.getPropertyType(prop))) {\n         // Implemented, but not correctly typed\n+        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n+        sourceName = (sourceName == null ? \"\" : sourceName);\n+        if (shouldReport) {\n+            String expectedType = implementedInterface.getPropertyType(prop).toString();\n+            String actualType = instance.getPropertyType(prop).toString();\n+            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_PARAM_MISMATCH, prop, expectedType, actualType));\n+        }\n+        registerMismatch(instance, implementedInterface);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (compiler.getErrorManager().isNewerThan(CheckLevel.WARNING)) {\n            compiler.report(t.makeError(n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -3,8 +3,8 @@\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n-        if (shouldReport) {\n-            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n+        if (compiler.getErrorManager().isNewerThan(CheckLevel.WARNING)) {\n+            compiler.report(t.makeError(n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n         }\n         registerMismatch(instance, implementedInterface);\n         // Implemented, but not correctly typed\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasOwnProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,5 +1,5 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n+    if (!instance.hasOwnProperty(prop)) {\n         // Not implemented\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            t.report(n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString());\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -4,7 +4,7 @@\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n         if (shouldReport) {\n-            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n+            t.report(n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString());\n         }\n         registerMismatch(instance, implementedInterface);\n         // Implemented, but not correctly typed\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n    } else if (!instance.getPropertyType(prop).isEquivalentTo(implementedInterface.getPropertyType(prop))) {\n        // Implemented, but not correctly typed\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(n, INTERFACE_METHOD_TYPE_MISMATCH, prop, implementedInterface.toString(), instance.getPropertyType(prop).toString(), sourceName));\n        }\n        registerMismatch(instance, implementedInterface);\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -4,9 +4,16 @@\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n         if (shouldReport) {\n-            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n+            compiler.report(JSError.make(n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n         }\n         registerMismatch(instance, implementedInterface);\n+    } else if (!instance.getPropertyType(prop).isEquivalentTo(implementedInterface.getPropertyType(prop))) {\n         // Implemented, but not correctly typed\n+        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n+        sourceName = sourceName == null ? \"\" : sourceName;\n+        if (shouldReport) {\n+            compiler.report(JSError.make(n, INTERFACE_METHOD_TYPE_MISMATCH, prop, implementedInterface.toString(), instance.getPropertyType(prop).toString(), sourceName));\n+        }\n+        registerMismatch(instance, implementedInterface);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop) || !instance.getPropertyType(prop).equals(implementedInterface.getPropertyType(prop))) {\n        // Not implemented or not correctly typed\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -1,12 +1,11 @@\n private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n-    if (!instance.hasProperty(prop)) {\n-        // Not implemented\n+    if (!instance.hasProperty(prop) || !instance.getPropertyType(prop).equals(implementedInterface.getPropertyType(prop))) {\n+        // Not implemented or not correctly typed\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n         if (shouldReport) {\n             compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n         }\n         registerMismatch(instance, implementedInterface);\n-        // Implemented, but not correctly typed\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n    } else {\n        JSType propertyType = instance.getOwnPropertyType(prop);\n        ObjectType interfaceType = implementedInterface.getReferenceName().getTypedReference().getObjectType();\n        JSType interfacePropertyType = interfaceType.getOwnPropertyType(prop);\n        if (interfacePropertyType != null && !propertyType.isSubtype(interfacePropertyType)) {\n            // Implemented, but not correctly typed\n            String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n            sourceName = sourceName == null ? \"\" : sourceName;\n            if (shouldReport) {\n                compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_TYPE_MISMATCH, prop, implementedInterface.toString(), instance.toString()));\n            }\n            registerMismatch(instance, implementedInterface);\n        }\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -7,6 +7,18 @@\n             compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n         }\n         registerMismatch(instance, implementedInterface);\n-        // Implemented, but not correctly typed\n+    } else {\n+        JSType propertyType = instance.getOwnPropertyType(prop);\n+        ObjectType interfaceType = implementedInterface.getReferenceName().getTypedReference().getObjectType();\n+        JSType interfacePropertyType = interfaceType.getOwnPropertyType(prop);\n+        if (interfacePropertyType != null && !propertyType.isSubtype(interfacePropertyType)) {\n+            // Implemented, but not correctly typed\n+            String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n+            sourceName = sourceName == null ? \"\" : sourceName;\n+            if (shouldReport) {\n+                compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_TYPE_MISMATCH, prop, implementedInterface.toString(), instance.toString()));\n+            }\n+            registerMismatch(instance, implementedInterface);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(n, CheckInterfaces.INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -4,7 +4,7 @@\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n         if (shouldReport) {\n-            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n+            compiler.report(JSError.make(n, CheckInterfaces.INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n         }\n         registerMismatch(instance, implementedInterface);\n         // Implemented, but not correctly typed\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(\n                n,\n                CheckInterfaces.INTERFACE_METHOD_NOT_IMPLEMENTED,\n                prop,\n                implementedInterface.toString(),\n                instance.toString()\n            ));\n        }\n        registerMismatch(instance, implementedInterface);\n    } else {\n        // Implemented, but not correctly typed\n        JSType methodType = instance.getPropertyType(prop);\n        if (methodType == null || !implementedInterface.getPropertyType(prop).isSubtypeOf(methodType)) {\n            String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n            sourceName = sourceName == null ? \"\" : sourceName;\n            if (shouldReport) {\n                compiler.report(JSError.make(\n                    n,\n                    CheckInterfaces.INTERFACE_METHOD_NOT_IMPLEMENTED,\n                    prop,\n                    implementedInterface.toString(),\n                    instance.toString(),\n                    methodType == null ? \"?\" : methodType.toString()\n                ));\n            }\n            registerMismatch(instance, implementedInterface);\n        }\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -4,9 +4,32 @@\n         String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n         sourceName = sourceName == null ? \"\" : sourceName;\n         if (shouldReport) {\n-            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n+            compiler.report(JSError.make(\n+                n,\n+                CheckInterfaces.INTERFACE_METHOD_NOT_IMPLEMENTED,\n+                prop,\n+                implementedInterface.toString(),\n+                instance.toString()\n+            ));\n         }\n         registerMismatch(instance, implementedInterface);\n+    } else {\n         // Implemented, but not correctly typed\n+        JSType methodType = instance.getPropertyType(prop);\n+        if (methodType == null || !implementedInterface.getPropertyType(prop).isSubtypeOf(methodType)) {\n+            String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n+            sourceName = sourceName == null ? \"\" : sourceName;\n+            if (shouldReport) {\n+                compiler.report(JSError.make(\n+                    n,\n+                    CheckInterfaces.INTERFACE_METHOD_NOT_IMPLEMENTED,\n+                    prop,\n+                    implementedInterface.toString(),\n+                    instance.toString(),\n+                    methodType == null ? \"?\" : methodType.toString()\n+                ));\n+            }\n+            registerMismatch(instance, implementedInterface);\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    } else {\n        JSType instancePropType = instance.getPropertyType(prop);\n        JSType expectedPropType = implementedInterface.getPropertyType(prop);\n        if (!instancePropType.isSubtypeOf(expectedPropType)) {\n            registerMismatch(instance, implementedInterface);\n            // Not implemented correctly\n            String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n            sourceName = sourceName == null ? \"\" : sourceName;\n            if (shouldReport) {\n                compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(),\n                        instancePropType.toString(), expectedPropType.toString()));\n            }\n        }\n    }\n}", "diff": "--- com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n+++ com/google/javascript/jscomp/TypeValidator.java@expectInterfaceProperty\n@@ -8,5 +8,18 @@\n         }\n         registerMismatch(instance, implementedInterface);\n         // Implemented, but not correctly typed\n+    } else {\n+        JSType instancePropType = instance.getPropertyType(prop);\n+        JSType expectedPropType = implementedInterface.getPropertyType(prop);\n+        if (!instancePropType.isSubtypeOf(expectedPropType)) {\n+            registerMismatch(instance, implementedInterface);\n+            // Not implemented correctly\n+            String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n+            sourceName = sourceName == null ? \"\" : sourceName;\n+            if (shouldReport) {\n+                compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(),\n+                        instancePropType.toString(), expectedPropType.toString()));\n+            }\n+        }\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]