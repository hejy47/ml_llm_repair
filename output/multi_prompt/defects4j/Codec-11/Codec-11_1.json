[{"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c & 0xff; // fix for signed byte issue\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -10,10 +10,7 @@\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n     for (byte c : bytes) {\n-        int b = c;\n-        if (b < 0) {\n-            b = 256 + b;\n-        }\n+        int b = c & 0xff; // fix for signed byte issue\n         if (printable.get(b)) {\n             buffer.write(b);\n         } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    int i=0;\n    while(i<bytes.length) {\n        byte c = bytes[i];\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        }\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            i = encodeQuotedPrintable(i, bytes, buffer); //modified to pass current index and bytes array to function\n        }\n        i++;\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -9,7 +9,9 @@\n     // encode up to buffer.length - 3, the last three octets will be treated\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n-    for (byte c : bytes) {\n+    int i=0;\n+    while(i<bytes.length) {\n+        byte c = bytes[i];\n         int b = c;\n         if (b < 0) {\n             b = 256 + b;\n@@ -19,8 +21,9 @@\n         } else {\n             // rule #3: whitespace at the end of a line *must* be encoded\n             // rule #5: soft line break\n-            encodeQuotedPrintable(b, buffer);\n+            i = encodeQuotedPrintable(i, bytes, buffer); //modified to pass current index and bytes array to function\n         }\n+        i++;\n     }\n     // rule #3: whitespace at the end of a line *must* be encoded\n     // if we would do a soft break line after this octet, encode whitespace\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c & 0xff; // Fix for signed bytes\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -10,10 +10,7 @@\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n     for (byte c : bytes) {\n-        int b = c;\n-        if (b < 0) {\n-            b = 256 + b;\n-        }\n+        int b = c & 0xff; // Fix for signed bytes\n         if (printable.get(b)) {\n             buffer.write(b);\n         } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    int i = 0; // add a counter variable for simplification of note #3\n    for (byte c : bytes) {\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        }\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n        i++; // increment counter variable for simplification of note #3\n        if (i >= buffer.size() - 3 && i < bytes.length - 6) { // add check for line break\n            buffer.write('=');\n            buffer.write(CRLF);\n            i = 0; // reset counter\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -9,6 +9,7 @@\n     // encode up to buffer.length - 3, the last three octets will be treated\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n+    int i = 0; // add a counter variable for simplification of note #3\n     for (byte c : bytes) {\n         int b = c;\n         if (b < 0) {\n@@ -21,6 +22,12 @@\n             // rule #5: soft line break\n             encodeQuotedPrintable(b, buffer);\n         }\n+        i++; // increment counter variable for simplification of note #3\n+        if (i >= buffer.size() - 3 && i < bytes.length - 6) { // add check for line break\n+            buffer.write('=');\n+            buffer.write(CRLF);\n+            i = 0; // reset counter\n+        }\n     }\n     // rule #3: whitespace at the end of a line *must* be encoded\n     // if we would do a soft break line after this octet, encode whitespace\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c & 0xff; // fix for signed byte values\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -10,10 +10,7 @@\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n     for (byte c : bytes) {\n-        int b = c;\n-        if (b < 0) {\n-            b = 256 + b;\n-        }\n+        int b = c & 0xff; // fix for signed byte values\n         if (printable.get(b)) {\n             buffer.write(b);\n         } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c & 0xff; // Fix for bytes with sign bit set\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -10,10 +10,7 @@\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n     for (byte c : bytes) {\n-        int b = c;\n-        if (b < 0) {\n-            b = 256 + b;\n-        }\n+        int b = c & 0xff; // Fix for bytes with sign bit set\n         if (printable.get(b)) {\n             buffer.write(b);\n         } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c & 0xFF; // Correctly handle negative bytes\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -10,10 +10,7 @@\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n     for (byte c : bytes) {\n-        int b = c;\n-        if (b < 0) {\n-            b = 256 + b;\n-        }\n+        int b = c & 0xFF; // Correctly handle negative bytes\n         if (printable.get(b)) {\n             buffer.write(b);\n         } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    int count = 0; // counter for number of bytes added to buffer\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        }\n        if (printable.get(b)) {\n            buffer.write(b);\n            count++;\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n            count += 3; // increment count by 3 for the added encoded characters\n        }\n        if (count >= buffer.length() - 3) { // check if last 3 octets are reached\n            break;\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -6,6 +6,7 @@\n         printable = PRINTABLE_CHARS;\n     }\n     ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+    int count = 0; // counter for number of bytes added to buffer\n     // encode up to buffer.length - 3, the last three octets will be treated\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n@@ -16,10 +17,15 @@\n         }\n         if (printable.get(b)) {\n             buffer.write(b);\n+            count++;\n         } else {\n             // rule #3: whitespace at the end of a line *must* be encoded\n             // rule #5: soft line break\n             encodeQuotedPrintable(b, buffer);\n+            count += 3; // increment count by 3 for the added encoded characters\n+        }\n+        if (count >= buffer.length() - 3) { // check if last 3 octets are reached\n+            break;\n         }\n     }\n     // rule #3: whitespace at the end of a line *must* be encoded\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        }\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n        // rule #3: whitespace at the end of a line *must* be encoded\n        // if we would do a soft break line after this octet, encode whitespace\n        // note #3: '=' *must not* be the ultimate or penultimate character\n        // simplification: if < 6 bytes left, do a soft line break as we may need\n        //                 exactly 6 bytes space for the last 2 bytes\n        // rule #3: trailing whitespace shall be encoded\n        if (buffer.size() >= 73) {\n            encodeQuotedPrintable(CR_CHARACTER, buffer);\n            encodeQuotedPrintable(LF_CHARACTER, buffer);\n        }\n    }\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -21,12 +21,16 @@\n             // rule #5: soft line break\n             encodeQuotedPrintable(b, buffer);\n         }\n+        // rule #3: whitespace at the end of a line *must* be encoded\n+        // if we would do a soft break line after this octet, encode whitespace\n+        // note #3: '=' *must not* be the ultimate or penultimate character\n+        // simplification: if < 6 bytes left, do a soft line break as we may need\n+        //                 exactly 6 bytes space for the last 2 bytes\n+        // rule #3: trailing whitespace shall be encoded\n+        if (buffer.size() >= 73) {\n+            encodeQuotedPrintable(CR_CHARACTER, buffer);\n+            encodeQuotedPrintable(LF_CHARACTER, buffer);\n+        }\n     }\n-    // rule #3: whitespace at the end of a line *must* be encoded\n-    // if we would do a soft break line after this octet, encode whitespace\n-    // note #3: '=' *must not* be the ultimate or penultimate character\n-    // simplification: if < 6 bytes left, do a soft line break as we may need\n-    //                 exactly 6 bytes space for the last 2 bytes\n-    // rule #3: trailing whitespace shall be encoded\n     return buffer.toByteArray();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c & 0xff; // fix signed/unsigned bug\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -10,10 +10,7 @@\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n     for (byte c : bytes) {\n-        int b = c;\n-        if (b < 0) {\n-            b = 256 + b;\n-        }\n+        int b = c & 0xff; // fix signed/unsigned bug\n         if (printable.get(b)) {\n             buffer.write(b);\n         } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        }\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else if (b == ' ' || b == '\\t') {\n            // whitespace at the end of a line must be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        } else {\n            // encode as quoted printable\n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: trailing whitespace shall be encoded\n    if (bytes.length >= 2) {\n        int secondLastByte = bytes[bytes.length - 2] & 0xFF;\n        int lastByte = bytes[bytes.length - 1] & 0xFF;\n        if (secondLastByte == '\\r' && lastByte == ' ') {\n            // last byte is whitespace, needs to be encoded\n            buffer.write('=');\n            buffer.write('0');\n            buffer.write('D');\n        }\n    }\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -16,17 +16,25 @@\n         }\n         if (printable.get(b)) {\n             buffer.write(b);\n+        } else if (b == ' ' || b == '\\t') {\n+            // whitespace at the end of a line must be encoded\n+            // rule #5: soft line break\n+            encodeQuotedPrintable(b, buffer);\n         } else {\n-            // rule #3: whitespace at the end of a line *must* be encoded\n-            // rule #5: soft line break\n+            // encode as quoted printable\n             encodeQuotedPrintable(b, buffer);\n         }\n     }\n-    // rule #3: whitespace at the end of a line *must* be encoded\n-    // if we would do a soft break line after this octet, encode whitespace\n-    // note #3: '=' *must not* be the ultimate or penultimate character\n-    // simplification: if < 6 bytes left, do a soft line break as we may need\n-    //                 exactly 6 bytes space for the last 2 bytes\n     // rule #3: trailing whitespace shall be encoded\n+    if (bytes.length >= 2) {\n+        int secondLastByte = bytes[bytes.length - 2] & 0xFF;\n+        int lastByte = bytes[bytes.length - 1] & 0xFF;\n+        if (secondLastByte == '\\r' && lastByte == ' ') {\n+            // last byte is whitespace, needs to be encoded\n+            buffer.write('=');\n+            buffer.write('0');\n+            buffer.write('D');\n+        }\n+    }\n     return buffer.toByteArray();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    int count = 0;\n    boolean softBreak = false;\n    for (byte c : bytes) {\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        }\n        if (printable.get(b)) {\n            if (softBreak) {\n                encodeQuotedPrintable('\\n', buffer);\n                softBreak = false;\n                count = 0;\n            }\n            buffer.write(b);\n            count++;\n            if (count >= 76) {\n                encodeQuotedPrintable('\\n', buffer);\n                count = 0;\n            }\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            if (count >= 73) {\n                encodeQuotedPrintable('=',\n                        buffer);\n                encodeQuotedPrintable('\\n', buffer);\n                count = 0;\n                softBreak = false;\n            }\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n            count += 3;\n            softBreak = true;\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    if (count >= 73) {\n        encodeQuotedPrintable('=',\n                buffer);\n        encodeQuotedPrintable('\\n', buffer);\n        count = 0;\n    }\n    // rule #3: trailing whitespace shall be encoded\n    if (softBreak) {\n        encodeQuotedPrintable('\\n', buffer);\n    }\n    return buffer.toByteArray();\n}\n\nprivate static final byte[] HEX_BYTES = new byte[] { (byte) '0',\n                                                       (byte) '1',\n                                                       (byte) '2',\n                                                       (byte) '3',\n                                                       (byte) '4',\n                                                       (byte) '5',\n                                                       (byte) '6',\n                                                       (byte) '7',\n                                                       (byte) '8',\n                                                       (byte) '9',\n                                                       (byte) 'A',\n                                                       (byte) 'B',\n                                                       (byte) 'C',\n                                                       (byte) 'D',\n                                                       (byte) 'E',\n                                                       (byte) 'F' };\n\nprivate static void encodeQuotedPrintable(byte b, ByteArrayOutputStream buffer) {\n    buffer.write('=');\n    buffer.write(HEX_BYTES[(b >> 4) & 0x0F]);\n    buffer.write(HEX_BYTES[b & 0x0F]);\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -6,27 +6,50 @@\n         printable = PRINTABLE_CHARS;\n     }\n     ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n-    // encode up to buffer.length - 3, the last three octets will be treated\n-    // separately for simplification of note #3\n-    // up to this length it is safe to add any byte, encoded or not\n+    int count = 0;\n+    boolean softBreak = false;\n     for (byte c : bytes) {\n         int b = c;\n         if (b < 0) {\n             b = 256 + b;\n         }\n         if (printable.get(b)) {\n+            if (softBreak) {\n+                encodeQuotedPrintable('\\n', buffer);\n+                softBreak = false;\n+                count = 0;\n+            }\n             buffer.write(b);\n+            count++;\n+            if (count >= 76) {\n+                encodeQuotedPrintable('\\n', buffer);\n+                count = 0;\n+            }\n         } else {\n             // rule #3: whitespace at the end of a line *must* be encoded\n+            if (count >= 73) {\n+                encodeQuotedPrintable('=',\n+                        buffer);\n+                encodeQuotedPrintable('\\n', buffer);\n+                count = 0;\n+                softBreak = false;\n+            }\n             // rule #5: soft line break\n             encodeQuotedPrintable(b, buffer);\n+            count += 3;\n+            softBreak = true;\n         }\n     }\n     // rule #3: whitespace at the end of a line *must* be encoded\n-    // if we would do a soft break line after this octet, encode whitespace\n-    // note #3: '=' *must not* be the ultimate or penultimate character\n-    // simplification: if < 6 bytes left, do a soft line break as we may need\n-    //                 exactly 6 bytes space for the last 2 bytes\n+    if (count >= 73) {\n+        encodeQuotedPrintable('=',\n+                buffer);\n+        encodeQuotedPrintable('\\n', buffer);\n+        count = 0;\n+    }\n     // rule #3: trailing whitespace shall be encoded\n+    if (softBreak) {\n+        encodeQuotedPrintable('\\n', buffer);\n+    }\n     return buffer.toByteArray();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    int lineLength = 0; // keep track of line length to enforce rule #2\n    for (byte b : bytes) {\n        if (b < 0) {\n            b += 256;\n        }\n        if (printable.get(b)) {\n            // rule #2: lines must not exceed 76 characters\n            if (lineLength + 1 > 76) {\n                buffer.write('=');\n                buffer.write('\\r');\n                buffer.write('\\n');\n                lineLength = 0;\n            }\n            buffer.write(b);\n            lineLength++;\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            if (lineLength + 3 > 76) {\n                buffer.write('=');\n                buffer.write('\\r');\n                buffer.write('\\n');\n                lineLength = 0;\n            }\n            encodeQuotedPrintable(b, buffer);\n            lineLength += 3;\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    if (lineLength + 3 > 76) {\n        buffer.write('=');\n        buffer.write('\\r');\n        buffer.write('\\n');\n    }\n    buffer.write('='); // encode final trailing space\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -6,20 +6,32 @@\n         printable = PRINTABLE_CHARS;\n     }\n     ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n-    // encode up to buffer.length - 3, the last three octets will be treated\n-    // separately for simplification of note #3\n-    // up to this length it is safe to add any byte, encoded or not\n-    for (byte c : bytes) {\n-        int b = c;\n+    int lineLength = 0; // keep track of line length to enforce rule #2\n+    for (byte b : bytes) {\n         if (b < 0) {\n-            b = 256 + b;\n+            b += 256;\n         }\n         if (printable.get(b)) {\n+            // rule #2: lines must not exceed 76 characters\n+            if (lineLength + 1 > 76) {\n+                buffer.write('=');\n+                buffer.write('\\r');\n+                buffer.write('\\n');\n+                lineLength = 0;\n+            }\n             buffer.write(b);\n+            lineLength++;\n         } else {\n             // rule #3: whitespace at the end of a line *must* be encoded\n             // rule #5: soft line break\n+            if (lineLength + 3 > 76) {\n+                buffer.write('=');\n+                buffer.write('\\r');\n+                buffer.write('\\n');\n+                lineLength = 0;\n+            }\n             encodeQuotedPrintable(b, buffer);\n+            lineLength += 3;\n         }\n     }\n     // rule #3: whitespace at the end of a line *must* be encoded\n@@ -28,5 +40,11 @@\n     // simplification: if < 6 bytes left, do a soft line break as we may need\n     //                 exactly 6 bytes space for the last 2 bytes\n     // rule #3: trailing whitespace shall be encoded\n+    if (lineLength + 3 > 76) {\n+        buffer.write('=');\n+        buffer.write('\\r');\n+        buffer.write('\\n');\n+    }\n+    buffer.write('='); // encode final trailing space\n     return buffer.toByteArray();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        }\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            // fix: add check for when buffer length is close to maximum\n            if (buffer.size() >= MAX_LINE_LENGTH - 4) {\n                encodeQuotedPrintable(' ', buffer);\n            } \n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -19,6 +19,10 @@\n         } else {\n             // rule #3: whitespace at the end of a line *must* be encoded\n             // rule #5: soft line break\n+            // fix: add check for when buffer length is close to maximum\n+            if (buffer.size() >= MAX_LINE_LENGTH - 4) {\n+                encodeQuotedPrintable(' ', buffer);\n+            } \n             encodeQuotedPrintable(b, buffer);\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c & 0xFF; // change to unsigned int\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -10,10 +10,7 @@\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n     for (byte c : bytes) {\n-        int b = c;\n-        if (b < 0) {\n-            b = 256 + b;\n-        }\n+        int b = c & 0xFF; // change to unsigned int\n         if (printable.get(b)) {\n             buffer.write(b);\n         } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c & 0xff; // mask the sign bit to get a positive value\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -10,10 +10,7 @@\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n     for (byte c : bytes) {\n-        int b = c;\n-        if (b < 0) {\n-            b = 256 + b;\n-        }\n+        int b = c & 0xff; // mask the sign bit to get a positive value\n         if (printable.get(b)) {\n             buffer.write(b);\n         } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        }\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    // fix: add soft line break and encode last 3 octets\n    if (buffer.size() >= 1 && buffer.size() % 3 == 0) {\n        buffer.write('=\\r\\n');\n    }\n    if (buffer.size() >= 2 && (buffer.size() + 1) % 3 == 0) {\n        buffer.write('=');\n    }\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -28,5 +28,12 @@\n     // simplification: if < 6 bytes left, do a soft line break as we may need\n     //                 exactly 6 bytes space for the last 2 bytes\n     // rule #3: trailing whitespace shall be encoded\n+    // fix: add soft line break and encode last 3 octets\n+    if (buffer.size() >= 1 && buffer.size() % 3 == 0) {\n+        buffer.write('=\\r\\n');\n+    }\n+    if (buffer.size() >= 2 && (buffer.size() + 1) % 3 == 0) {\n+        buffer.write('=');\n+    }\n     return buffer.toByteArray();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c & 0xFF; // fix for handling negative byte values correctly\n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -10,10 +10,7 @@\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n     for (byte c : bytes) {\n-        int b = c;\n-        if (b < 0) {\n-            b = 256 + b;\n-        }\n+        int b = c & 0xFF; // fix for handling negative byte values correctly\n         if (printable.get(b)) {\n             buffer.write(b);\n         } else {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    int count = 0;\n    // encode up to buffer.length - 3, the last three octets will be treated\n    // separately for simplification of note #3\n    // up to this length it is safe to add any byte, encoded or not\n    for (byte c : bytes) {\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        }\n        if (printable.get(b)) {\n            buffer.write(b);\n            count++;\n        } else {\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            encodeQuotedPrintable(b, buffer);\n            count += 3;\n        }\n        if (count >= 73) {\n            buffer.write('=');\n            buffer.write('\\n');\n            count = 0;\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    return buffer.toByteArray();\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -6,6 +6,7 @@\n         printable = PRINTABLE_CHARS;\n     }\n     ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+    int count = 0;\n     // encode up to buffer.length - 3, the last three octets will be treated\n     // separately for simplification of note #3\n     // up to this length it is safe to add any byte, encoded or not\n@@ -16,10 +17,17 @@\n         }\n         if (printable.get(b)) {\n             buffer.write(b);\n+            count++;\n         } else {\n             // rule #3: whitespace at the end of a line *must* be encoded\n             // rule #5: soft line break\n             encodeQuotedPrintable(b, buffer);\n+            count += 3;\n+        }\n+        if (count >= 73) {\n+            buffer.write('=');\n+            buffer.write('\\n');\n+            count = 0;\n         }\n     }\n     // rule #3: whitespace at the end of a line *must* be encoded\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n    if (bytes == null) {\n        return null;\n    }\n    if (printable == null) {\n        printable = PRINTABLE_CHARS;\n    }\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    int lineLength = 0; // keep track of the current line length\n    for (byte c : bytes) {\n        int b = c & 0xff; // convert signed byte to unsigned int\n        if (printable.get(b)) {\n            buffer.write(b);\n            lineLength++;\n        } else {\n            // calculate the length of the encoded byte sequence\n            int encodedLength = getEncodedLength(b);\n            // rule #3: whitespace at the end of a line *must* be encoded\n            // rule #5: soft line break\n            if (lineLength + encodedLength > MAX_LINE_LENGTH - 1) {\n                buffer.write('=');\n                buffer.write(CRLF_BYTES);\n                lineLength = 0; // reset line length after soft line break\n            }\n            encodeQuotedPrintable(b, buffer); // encode the byte\n            lineLength += encodedLength; // add the encoded length to the line length\n        }\n    }\n    // rule #3: whitespace at the end of a line *must* be encoded\n    // if we would do a soft break line after this octet, encode whitespace\n    // note #3: '=' *must not* be the ultimate or penultimate character\n    // simplification: if < 6 bytes left, do a soft line break as we may need\n    //                 exactly 6 bytes space for the last 2 bytes\n    // rule #3: trailing whitespace shall be encoded\n    if (lineLength + 3 > MAX_LINE_LENGTH) {\n        buffer.write('=');\n        buffer.write(CRLF_BYTES);\n    }\n    return buffer.toByteArray();\n}\n\n// Helper function to calculate the encoded length of a byte\nprivate static int getEncodedLength(int b) {\n    if (b == 9 || b == 32) { // HTAB or SP\n        return 3; // encoded as =XX\n    } else if (b >= 0 && b <= 127) { // ASCII printable\n        return 1; // encoded as a single byte\n    } else { // non-ASCII byte\n        return 3; // encoded as =XX\n    }\n}", "diff": "--- org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n+++ org/apache/commons/codec/net/QuotedPrintableCodec.java@encodeQuotedPrintable1\n@@ -6,20 +6,24 @@\n         printable = PRINTABLE_CHARS;\n     }\n     ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n-    // encode up to buffer.length - 3, the last three octets will be treated\n-    // separately for simplification of note #3\n-    // up to this length it is safe to add any byte, encoded or not\n+    int lineLength = 0; // keep track of the current line length\n     for (byte c : bytes) {\n-        int b = c;\n-        if (b < 0) {\n-            b = 256 + b;\n-        }\n+        int b = c & 0xff; // convert signed byte to unsigned int\n         if (printable.get(b)) {\n             buffer.write(b);\n+            lineLength++;\n         } else {\n+            // calculate the length of the encoded byte sequence\n+            int encodedLength = getEncodedLength(b);\n             // rule #3: whitespace at the end of a line *must* be encoded\n             // rule #5: soft line break\n-            encodeQuotedPrintable(b, buffer);\n+            if (lineLength + encodedLength > MAX_LINE_LENGTH - 1) {\n+                buffer.write('=');\n+                buffer.write(CRLF_BYTES);\n+                lineLength = 0; // reset line length after soft line break\n+            }\n+            encodeQuotedPrintable(b, buffer); // encode the byte\n+            lineLength += encodedLength; // add the encoded length to the line length\n         }\n     }\n     // rule #3: whitespace at the end of a line *must* be encoded\n@@ -28,5 +32,9 @@\n     // simplification: if < 6 bytes left, do a soft line break as we may need\n     //                 exactly 6 bytes space for the last 2 bytes\n     // rule #3: trailing whitespace shall be encoded\n+    if (lineLength + 3 > MAX_LINE_LENGTH) {\n+        buffer.write('=');\n+        buffer.write(CRLF_BYTES);\n+    }\n     return buffer.toByteArray();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]