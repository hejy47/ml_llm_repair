[{"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType != null && propType instanceof FunctionType) { //added null check\n        return (FunctionType) propType;\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -2,7 +2,7 @@\n     // First, check to see if the property is implemented\n     // on a superclass.\n     JSType propType = ownerType.getPropertyType(propName);\n-    if (propType instanceof FunctionType) {\n+    if (propType != null && propType instanceof FunctionType) { //added null check\n         return (FunctionType) propType;\n     }\n     // If it's not, then check to see if it's implemented\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    for (ObjectType interfaceType : ownerType.getImplementedInterfaces()) {\n        JSType interfacePropType = interfaceType.getPropertyType(propName);\n        if (interfacePropType instanceof FunctionType) {\n            return (FunctionType) interfacePropType;\n        }\n    }\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -7,5 +7,11 @@\n     }\n     // If it's not, then check to see if it's implemented\n     // on an implemented interface.\n+    for (ObjectType interfaceType : ownerType.getImplementedInterfaces()) {\n+        JSType interfacePropType = interfaceType.getPropertyType(propName);\n+        if (interfacePropType instanceof FunctionType) {\n+            return (FunctionType) interfacePropType;\n+        }\n+    }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n    // If it's not, then check to see if it's implemented on an implemented interface.\n    for (InterfaceType interfaceType : ownerType.getImplementedInterfaces()) {\n        JSType interfacePropType = interfaceType.getPropertyType(propName);\n        if (interfacePropType instanceof FunctionType) {\n            return (FunctionType) interfacePropType;\n        }\n    }\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -1,11 +1,15 @@\n private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n-    // First, check to see if the property is implemented\n-    // on a superclass.\n+    // First, check to see if the property is implemented on a superclass.\n     JSType propType = ownerType.getPropertyType(propName);\n     if (propType instanceof FunctionType) {\n         return (FunctionType) propType;\n     }\n-    // If it's not, then check to see if it's implemented\n-    // on an implemented interface.\n+    // If it's not, then check to see if it's implemented on an implemented interface.\n+    for (InterfaceType interfaceType : ownerType.getImplementedInterfaces()) {\n+        JSType interfacePropType = interfaceType.getPropertyType(propName);\n+        if (interfacePropType instanceof FunctionType) {\n+            return (FunctionType) interfacePropType;\n+        }\n+    }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    if(ownerType.getImplementedInterfaces() != null){\n        for(ObjectType implementedInterface: ownerType.getImplementedInterfaces()){\n            propType = implementedInterface.getPropertyType(propName);\n            if(propType instanceof FunctionType){\n                return (FunctionType) propType;\n            }\n        }\n    }\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -7,5 +7,13 @@\n     }\n     // If it's not, then check to see if it's implemented\n     // on an implemented interface.\n+    if(ownerType.getImplementedInterfaces() != null){\n+        for(ObjectType implementedInterface: ownerType.getImplementedInterfaces()){\n+            propType = implementedInterface.getPropertyType(propName);\n+            if(propType instanceof FunctionType){\n+                return (FunctionType) propType;\n+            }\n+        }\n+    }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    FunctionType propType = ownerType.getPropFunctionType(propName);\n    if (propType != null) {\n        return propType;\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -1,9 +1,9 @@\n private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n     // First, check to see if the property is implemented\n     // on a superclass.\n-    JSType propType = ownerType.getPropertyType(propName);\n-    if (propType instanceof FunctionType) {\n-        return (FunctionType) propType;\n+    FunctionType propType = ownerType.getPropFunctionType(propName);\n+    if (propType != null) {\n+        return propType;\n     }\n     // If it's not, then check to see if it's implemented\n     // on an implemented interface.\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    for (ObjectType interfaceType : ownerType.getImplementedInterfaces()) {\n        propType = interfaceType.getPropertyType(propName);\n        if (propType instanceof FunctionType) {\n            return (FunctionType) propType;\n        }\n    }\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -7,5 +7,11 @@\n     }\n     // If it's not, then check to see if it's implemented\n     // on an implemented interface.\n+    for (ObjectType interfaceType : ownerType.getImplementedInterfaces()) {\n+        propType = interfaceType.getPropertyType(propName);\n+        if (propType instanceof FunctionType) {\n+            return (FunctionType) propType;\n+        }\n+    }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType != null && propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -2,7 +2,7 @@\n     // First, check to see if the property is implemented\n     // on a superclass.\n     JSType propType = ownerType.getPropertyType(propName);\n-    if (propType instanceof FunctionType) {\n+    if (propType != null && propType instanceof FunctionType) {\n         return (FunctionType) propType;\n     }\n     // If it's not, then check to see if it's implemented\n", "finish_reason": "stop", "valid": false, "num": 4}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface or a superclass interface.\n    for (JSType intfType : ownerType.getImplementedInterfaces()) {\n        if (intfType instanceof ObjectType) {\n            FunctionType intfFuncType = findOverriddenFunction((ObjectType) intfType, propName);\n            if (intfFuncType != null) {\n                return intfFuncType;\n            }\n        }\n    }\n    // If still not found, check superclass for interface implementation\n    if (ownerType.getPrototype() instanceof ObjectType) {\n        return findOverriddenFunction((ObjectType) ownerType.getPrototype(), propName);\n    }\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -6,6 +6,18 @@\n         return (FunctionType) propType;\n     }\n     // If it's not, then check to see if it's implemented\n-    // on an implemented interface.\n+    // on an implemented interface or a superclass interface.\n+    for (JSType intfType : ownerType.getImplementedInterfaces()) {\n+        if (intfType instanceof ObjectType) {\n+            FunctionType intfFuncType = findOverriddenFunction((ObjectType) intfType, propName);\n+            if (intfFuncType != null) {\n+                return intfFuncType;\n+            }\n+        }\n+    }\n+    // If still not found, check superclass for interface implementation\n+    if (ownerType.getPrototype() instanceof ObjectType) {\n+        return findOverriddenFunction((ObjectType) ownerType.getPrototype(), propName);\n+    }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    while (ownerType != null && !(propType instanceof FunctionType)) {\n        ownerType = ownerType.getImplicitPrototype();\n        if (ownerType != null) {\n            propType = ownerType.getPropertyType(propName);\n        }\n    }\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -2,6 +2,12 @@\n     // First, check to see if the property is implemented\n     // on a superclass.\n     JSType propType = ownerType.getPropertyType(propName);\n+    while (ownerType != null && !(propType instanceof FunctionType)) {\n+        ownerType = ownerType.getImplicitPrototype();\n+        if (ownerType != null) {\n+            propType = ownerType.getPropertyType(propName);\n+        }\n+    }\n     if (propType instanceof FunctionType) {\n         return (FunctionType) propType;\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n    // If it's not found, check implemented interfaces.\n    for (ObjectType interfaceType : ownerType.getImplementedInterfaces()) {\n        propType = interfaceType.getPropertyType(propName);\n        if (propType instanceof FunctionType) {\n            return (FunctionType) propType;\n        }\n    }\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -1,11 +1,14 @@\n private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n-    // First, check to see if the property is implemented\n-    // on a superclass.\n     JSType propType = ownerType.getPropertyType(propName);\n     if (propType instanceof FunctionType) {\n         return (FunctionType) propType;\n     }\n-    // If it's not, then check to see if it's implemented\n-    // on an implemented interface.\n+    // If it's not found, check implemented interfaces.\n+    for (ObjectType interfaceType : ownerType.getImplementedInterfaces()) {\n+        propType = interfaceType.getPropertyType(propName);\n+        if (propType instanceof FunctionType) {\n+            return (FunctionType) propType;\n+        }\n+    }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    ObjectType parent = ownerType.getPrototype();\n    while (parent != null) {\n        JSType propType = parent.getPropertyType(propName);\n        if (propType instanceof FunctionType) {\n            return (FunctionType) propType;\n        }\n        parent = parent.getPrototype();\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -1,9 +1,13 @@\n private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n     // First, check to see if the property is implemented\n     // on a superclass.\n-    JSType propType = ownerType.getPropertyType(propName);\n-    if (propType instanceof FunctionType) {\n-        return (FunctionType) propType;\n+    ObjectType parent = ownerType.getPrototype();\n+    while (parent != null) {\n+        JSType propType = parent.getPropertyType(propName);\n+        if (propType instanceof FunctionType) {\n+            return (FunctionType) propType;\n+        }\n+        parent = parent.getPrototype();\n     }\n     // If it's not, then check to see if it's implemented\n     // on an implemented interface.\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass or an implemented interface.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    } else if (ownerType.getImplicitPrototype() != null) {\n        // If it's not found on the current object type, check its implicit prototype\n        return findOverriddenFunction(ownerType.getImplicitPrototype(), propName);\n    }\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -1,11 +1,12 @@\n private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n     // First, check to see if the property is implemented\n-    // on a superclass.\n+    // on a superclass or an implemented interface.\n     JSType propType = ownerType.getPropertyType(propName);\n     if (propType instanceof FunctionType) {\n         return (FunctionType) propType;\n+    } else if (ownerType.getImplicitPrototype() != null) {\n+        // If it's not found on the current object type, check its implicit prototype\n+        return findOverriddenFunction(ownerType.getImplicitPrototype(), propName);\n     }\n-    // If it's not, then check to see if it's implemented\n-    // on an implemented interface.\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    if (ownerType.getImplementedInterfaces() != null) {\n        for (ObjectType interfaceType : ownerType.getImplementedInterfaces()) {\n            JSType interfacePropType = interfaceType.getPropertyType(propName);\n            if (interfacePropType instanceof FunctionType) {\n                return (FunctionType) interfacePropType;\n            }\n        }\n    }\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -7,5 +7,13 @@\n     }\n     // If it's not, then check to see if it's implemented\n     // on an implemented interface.\n+    if (ownerType.getImplementedInterfaces() != null) {\n+        for (ObjectType interfaceType : ownerType.getImplementedInterfaces()) {\n+            JSType interfacePropType = interfaceType.getPropertyType(propName);\n+            if (interfacePropType instanceof FunctionType) {\n+                return (FunctionType) interfacePropType;\n+            }\n+        }\n+    }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    for (ObjectType interfaceType : ownerType.getInterfaces()) {\n        propType = interfaceType.getPropertyType(propName);\n        if (propType instanceof FunctionType) {\n            return (FunctionType) propType;\n        }\n    }\n    return null;\n}", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -7,5 +7,11 @@\n     }\n     // If it's not, then check to see if it's implemented\n     // on an implemented interface.\n+    for (ObjectType interfaceType : ownerType.getInterfaces()) {\n+        propType = interfaceType.getPropertyType(propName);\n+        if (propType instanceof FunctionType) {\n+            return (FunctionType) propType;\n+        }\n+    }\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    for (FunctionType interfaceFunction : ownerType.getFunctionsImplementing(propName)) {\n        return interfaceFunction;\n    }\n\n    return null;\n}\n", "diff": "--- com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n+++ com/google/javascript/jscomp/TypedScopeCreator.java@findOverriddenFunction\n@@ -5,7 +5,12 @@\n     if (propType instanceof FunctionType) {\n         return (FunctionType) propType;\n     }\n+\n     // If it's not, then check to see if it's implemented\n     // on an implemented interface.\n+    for (FunctionType interfaceFunction : ownerType.getFunctionsImplementing(propName)) {\n+        return interfaceFunction;\n+    }\n+\n     return null;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]