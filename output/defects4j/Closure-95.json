[{"output": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n    Preconditions.checkArgument(inferred || type != null);\n    // Only allow declarations of NAMEs and qualified names.\n    boolean shouldDeclareOnGlobalThis = false;\n    if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(parent.getType() == Token.FUNCTION ||\n                                    parent.getType() == Token.VAR ||\n                                    parent.getType() == Token.LET ||\n                                    parent.getType() == Token.CONST ||\n                                    parent.getType() == Token.PARAM_LIST ||\n                                    parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n    } else if (n.getType() == Token.STRING_KEY || n.getType() == Token.GETTER_DEF || n.getType() == Token.SETTER_DEF) {\n        Preconditions.checkArgument(parent.getType() == Token.OBJECTLIT || parent.getType() == Token.CLASS_MEMBERS);\n    } else if (n.getType() == Token.LSH || n.getType() == Token.RSH || n.getType() == Token.ASSIGN_SHL || n.getType() == Token.ASSIGN_SHR || n.getType() == Token.ASSIGN_SAR) {\n        Preconditions.checkArgument(parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT);\n    } else {\n        throw new IllegalStateException(\"Unexpected node type \" + n.getType() + \" in defineSlot\");\n    }\n\n    String variableName = n.getQualifiedName();\n    Preconditions.checkArgument(variableName != null && !variableName.isEmpty());\n    // If n is a property, then we should really declare it in the\n    // scope where the root object appears. This helps out people\n    // who declare \"global\" names in an anonymous namespace.\n    Scope scopeToDeclareIn = scope.getClosestHoistScope();\n\n    // Don't try to declare in the global scope if there's already a symbol there with this name.\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    if (oldVar != null) {\n        validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n    } else {\n        if (!inferred) {\n            // Only supporting inferred fields on named type objects\n            // and class declarations.\n            ObjectType declaringType = scope.getAbstractThisObjecType();\n            if (declaringType == null || declaringType.isNamedType() ||\n                (declaringType.isFunctionPrototypeType() &&\n                 n.getParent().getType() == Token.MEMBER_FUNCTION_DEF)) {\n                setDeferredType(n, type);\n            }\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n            boolean isExtern = input.isExtern();\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, isExtern);\n            }\n        }\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n            FunctionType fnType = (FunctionType) type;\n            if (fnType.isConstructor() || fnType.isInterface()) {\n                FunctionType superClassCtor = fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                                         fnType.getPrototype(), compiler.getInput(sourceName),\n                                         /* declared iff there's an explicit supertype */\n                                         superClassCtor == null ||\n                                         superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n            }\n        }\n    }\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 5}]