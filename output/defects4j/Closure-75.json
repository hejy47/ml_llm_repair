[{"output": "## Fixed Function 1\nstatic Double getStringNumberValue(String rawJsString) {\n    String s = trimJsWhiteSpace(rawJsString);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        return Double.NaN;\n    }\n    if (s.equalsIgnoreCase(\"infinity\")) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (s.equalsIgnoreCase(\"-infinity\")) {\n        return Double.NEGATIVE_INFINITY;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}\n\n## Fixed Function 2\nstatic TernaryValue isStrWhiteSpaceChar(int c) {\n    switch(c) {\n        case '\\u000B':\n        case ' ':\n        case '\\n':\n        case '\\r':\n        case '\\t':\n        case '\\u00A0':\n        case '\\u000C':\n        case '\\u2028':\n        case '\\u2029':\n        case '\\uFEFF':\n            return TernaryValue.TRUE;\n        default:\n            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.javagetStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.javagetStringNumberValue\n@@ -1,30 +1,17 @@\n-static Double getStringNumberValue(String rawJsString) {\n-    // vertical tab is not always whitespace\n-    String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-        return 0.0;\n-    }\n-    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-        // Attempt to convert hex numbers.\n-        try {\n-            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-        } catch (NumberFormatException e) {\n-            return Double.NaN;\n-        }\n-    }\n-    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-        // hex numbers with explicit signs vary between browsers.\n-        return null;\n-    }\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n-    }\n-    try {\n-        return Double.parseDouble(s);\n-    } catch (NumberFormatException e) {\n-        return Double.NaN;\n+static TernaryValue isStrWhiteSpaceChar(int c) {\n+    switch(c) {\n+        case '\\u000B':\n+        case ' ':\n+        case '\\n':\n+        case '\\r':\n+        case '\\t':\n+        case '\\u00A0':\n+        case '\\u000C':\n+        case '\\u2028':\n+        case '\\u2029':\n+        case '\\uFEFF':\n+            return TernaryValue.TRUE;\n+        default:\n+            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Double getStringNumberValue(String rawJsString) {\n    String s = trimJsWhiteSpace(rawJsString);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        return Double.NaN;\n    }\n    if (s.equalsIgnoreCase(\"infinity\")) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (s.equalsIgnoreCase(\"-infinity\")) {\n        return Double.NEGATIVE_INFINITY;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}\n\n## Fixed Function 2\nstatic TernaryValue isStrWhiteSpaceChar(int c) {\n    switch(c) {\n        case '\\u000B': // <VT>\n        case ' ':     // <SP>\n        case '\\n':    // <LF>\n        case '\\r':    // <CR>\n        case '\\t':    // <TAB>\n        case '\\u00A0': // <NBSP>\n        case '\\u000C': // <FF>\n        case '\\u2028': // <LS>\n        case '\\u2029': // <PS>\n        case '\\uFEFF': // <BOM>\n            return TernaryValue.TRUE;\n        default:\n            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.javagetStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.javagetStringNumberValue\n@@ -1,30 +1,17 @@\n-static Double getStringNumberValue(String rawJsString) {\n-    // vertical tab is not always whitespace\n-    String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-        return 0.0;\n-    }\n-    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-        // Attempt to convert hex numbers.\n-        try {\n-            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-        } catch (NumberFormatException e) {\n-            return Double.NaN;\n-        }\n-    }\n-    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-        // hex numbers with explicit signs vary between browsers.\n-        return null;\n-    }\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n-    }\n-    try {\n-        return Double.parseDouble(s);\n-    } catch (NumberFormatException e) {\n-        return Double.NaN;\n+static TernaryValue isStrWhiteSpaceChar(int c) {\n+    switch(c) {\n+        case '\\u000B': // <VT>\n+        case ' ':     // <SP>\n+        case '\\n':    // <LF>\n+        case '\\r':    // <CR>\n+        case '\\t':    // <TAB>\n+        case '\\u00A0': // <NBSP>\n+        case '\\u000C': // <FF>\n+        case '\\u2028': // <LS>\n+        case '\\u2029': // <PS>\n+        case '\\uFEFF': // <BOM>\n+            return TernaryValue.TRUE;\n+        default:\n+            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        // hex numbers with explicit signs vary between browsers.\n        return null;\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        if (s.startsWith(\"-\")) {\n            return Double.NEGATIVE_INFINITY;\n        } else {\n            return Double.POSITIVE_INFINITY;\n        }\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}\n\n## Fixed Function 2\nstatic TernaryValue isStrWhiteSpaceChar(int c) {\n    switch(c) {\n        case '\\u000B': // <VT>\n        case ' ': // <SP>\n        case '\\n': // <LF>\n        case '\\r': // <CR>\n        case '\\t': // <TAB>\n        case '\\u00A0': // <NBSP>\n        case '\\u000C': // <FF>\n        case '\\u2028': // <LS>\n        case '\\u2029': // <PS>\n        case '\\uFEFF': // <BOM>\n            return TernaryValue.TRUE;\n        default:\n            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.javagetStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.javagetStringNumberValue\n@@ -1,30 +1,17 @@\n-static Double getStringNumberValue(String rawJsString) {\n-    // vertical tab is not always whitespace\n-    String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-        return 0.0;\n-    }\n-    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-        // Attempt to convert hex numbers.\n-        try {\n-            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-        } catch (NumberFormatException e) {\n-            return Double.NaN;\n-        }\n-    }\n-    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-        // hex numbers with explicit signs vary between browsers.\n-        return null;\n-    }\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n-    }\n-    try {\n-        return Double.parseDouble(s);\n-    } catch (NumberFormatException e) {\n-        return Double.NaN;\n+static TernaryValue isStrWhiteSpaceChar(int c) {\n+    switch(c) {\n+        case '\\u000B': // <VT>\n+        case ' ': // <SP>\n+        case '\\n': // <LF>\n+        case '\\r': // <CR>\n+        case '\\t': // <TAB>\n+        case '\\u00A0': // <NBSP>\n+        case '\\u000C': // <FF>\n+        case '\\u2028': // <LS>\n+        case '\\u2029': // <PS>\n+        case '\\uFEFF': // <BOM>\n+            return TernaryValue.TRUE;\n+        default:\n+            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        // hex numbers with explicit signs vary between browsers.\n        return null;\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        return null;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}\n\n## Fixed Function 2\nstatic TernaryValue isStrWhiteSpaceChar(int c) {\n    switch(c) {\n        case // <VT>\n        '\\u000B':\n            return TernaryValue.TRUE;\n        // <SP>\n        case ' ':\n        // <LF>\n        case '\\n':\n        // <CR>\n        case '\\r':\n        // <TAB>\n        case '\\t':\n        // <NBSP>\n        case '\\u00A0':\n        // <FF>\n        case '\\u000C':\n        // <LS>\n        case '\\u2028':\n        // <PS>\n        case '\\u2029':\n        case // <BOM>\n        '\\uFEFF':\n            return TernaryValue.TRUE;\n        default:\n            return (Character.getType(c) == Character.SPACE_SEPARATOR || Character.getType(c) == Character.LINE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.javagetStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.javagetStringNumberValue\n@@ -1,30 +1,28 @@\n-static Double getStringNumberValue(String rawJsString) {\n-    // vertical tab is not always whitespace\n-    String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-        return 0.0;\n-    }\n-    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-        // Attempt to convert hex numbers.\n-        try {\n-            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-        } catch (NumberFormatException e) {\n-            return Double.NaN;\n-        }\n-    }\n-    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-        // hex numbers with explicit signs vary between browsers.\n-        return null;\n-    }\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n-    }\n-    try {\n-        return Double.parseDouble(s);\n-    } catch (NumberFormatException e) {\n-        return Double.NaN;\n+static TernaryValue isStrWhiteSpaceChar(int c) {\n+    switch(c) {\n+        case // <VT>\n+        '\\u000B':\n+            return TernaryValue.TRUE;\n+        // <SP>\n+        case ' ':\n+        // <LF>\n+        case '\\n':\n+        // <CR>\n+        case '\\r':\n+        // <TAB>\n+        case '\\t':\n+        // <NBSP>\n+        case '\\u00A0':\n+        // <FF>\n+        case '\\u000C':\n+        // <LS>\n+        case '\\u2028':\n+        // <PS>\n+        case '\\u2029':\n+        case // <BOM>\n+        '\\uFEFF':\n+            return TernaryValue.TRUE;\n+        default:\n+            return (Character.getType(c) == Character.SPACE_SEPARATOR || Character.getType(c) == Character.LINE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Double getStringNumberValue(String rawJsString) {\n    // vertical tab is not always whitespace\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n        return 0.0;\n    }\n    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n        // Attempt to convert hex numbers.\n        try {\n            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n        } catch (NumberFormatException e) {\n            return Double.NaN;\n        }\n    }\n    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n        // hex numbers with explicit signs vary between browsers.\n        return Double.NaN;\n    }\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equalsIgnoreCase(\"infinity\") || s.equalsIgnoreCase(\"-infinity\") || s.equalsIgnoreCase(\"+infinity\")) {\n        return Double.POSITIVE_INFINITY;\n    }\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        return Double.NaN;\n    }\n}\n\n## Fixed Function 2\nstatic TernaryValue isStrWhiteSpaceChar(int c) {\n    switch(c) {\n        case // <VT>\n        '\\u000B':\n            return TernaryValue.TRUE;\n        // <SP>\n        case ' ':\n        // <LF>\n        case '\\n':\n        // <CR>\n        case '\\r':\n        // <TAB>\n        case '\\t':\n        // <NBSP>\n        case '\\u00A0':\n        // <FF>\n        case '\\u000C':\n        // <LS>\n        case '\\u2028':\n        // <PS>\n        case '\\u2029':\n        case // <BOM>\n        '\\uFEFF':\n            return TernaryValue.TRUE;\n        default:\n            int type = Character.getType(c);\n            return (type == Character.SPACE_SEPARATOR || type == Character.LINE_SEPARATOR || type == Character.PARAGRAPH_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }\n}", "diff": "--- com/google/javascript/jscomp/NodeUtil.javagetStringNumberValue\n+++ com/google/javascript/jscomp/NodeUtil.javagetStringNumberValue\n@@ -1,30 +1,29 @@\n-static Double getStringNumberValue(String rawJsString) {\n-    // vertical tab is not always whitespace\n-    String s = trimJsWhiteSpace(rawJsString);\n-    // return ScriptRuntime.toNumber(s);\n-    if (s.length() == 0) {\n-        return 0.0;\n-    }\n-    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n-        // Attempt to convert hex numbers.\n-        try {\n-            return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n-        } catch (NumberFormatException e) {\n-            return Double.NaN;\n-        }\n-    }\n-    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n-        // hex numbers with explicit signs vary between browsers.\n-        return null;\n-    }\n-    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n-    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n-    if (s.equals(\"infinity\") || s.equals(\"-infinity\") || s.equals(\"+infinity\")) {\n-        return null;\n-    }\n-    try {\n-        return Double.parseDouble(s);\n-    } catch (NumberFormatException e) {\n-        return Double.NaN;\n+static TernaryValue isStrWhiteSpaceChar(int c) {\n+    switch(c) {\n+        case // <VT>\n+        '\\u000B':\n+            return TernaryValue.TRUE;\n+        // <SP>\n+        case ' ':\n+        // <LF>\n+        case '\\n':\n+        // <CR>\n+        case '\\r':\n+        // <TAB>\n+        case '\\t':\n+        // <NBSP>\n+        case '\\u00A0':\n+        // <FF>\n+        case '\\u000C':\n+        // <LS>\n+        case '\\u2028':\n+        // <PS>\n+        case '\\u2029':\n+        case // <BOM>\n+        '\\uFEFF':\n+            return TernaryValue.TRUE;\n+        default:\n+            int type = Character.getType(c);\n+            return (type == Character.SPACE_SEPARATOR || type == Character.LINE_SEPARATOR || type == Character.PARAGRAPH_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]