[{"output": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(getprop.getFirstChild().getJSType());\n    String propertyName = getprop.getLastChild().getString();\n    if (objectType != null) {\n        // Is this a normal property access, or are we trying to override\n        // an existing property?\n        boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;\n        // Find the lowest property defined on a class with visibility\n        // information.\n        if (isOverride) {\n            objectType = objectType.getImplicitPrototype();\n        }\n        JSDocInfo docInfo = null;\n        for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n            docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n            if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n                break;\n            }\n        }\n        if (objectType == null) {\n            // We couldn't find a visibility modifier; assume it's public.\n            return;\n        }\n        boolean sameInput = t.getInput().getName().equals(docInfo.getSourceFile().getName());\n        Visibility visibility = docInfo.getVisibility();\n        JSType ownerType = normalizeClassType(objectType);\n        if (isOverride) {\n            // Check an ASSIGN statement that's trying to override a property\n            // on a superclass.\n            JSDocInfo overridingInfo = parent.getJSDocInfo();\n            Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();\n            // Check that (a) the property *can* be overridden, and\n            // (b) that the visibility of the override is the same as the\n            // visibility of the original property.\n            if (visibility == Visibility.PRIVATE && !sameInput) {\n                compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n            } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {\n                compiler.report(t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name()));\n            }\n        } else {\n            if (sameInput) {\n                // private access is always allowed in the same file.\n                return;\n            } else if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) {\n                if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n                    return;\n                }\n                // private access is not allowed outside the file from a different\n                // enclosing class.\n                compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n            } else if (visibility == Visibility.PROTECTED) {\n                // There are 3 types of legal accesses of a protected property:\n                // 1) Accesses in the same file\n                // 2) Overriding the property in a subclass\n                // 3) Accessing the property from inside a subclass\n                // The first two have already been checked for.\n                if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n                    compiler.report(t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n                }\n            }\n        }\n    }\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 5}]