[{"output": "@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    if (flags.processJqueryPrimitives) {\n        options.setCodingConvention(new JqueryCodingConvention());\n    } else {\n        options.setCodingConvention(new ClosureCodingConvention());\n    }\n    options.setExtraAnnotationNames(flags.extraAnnotationName);\n    CompilationLevel level = flags.compilationLevel;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    if (flags.useTypesForOptimization) {\n        level.setTypeBasedOptimizationOptions(options);\n    }\n    if (flags.generateExports) {\n        options.setGenerateExports(flags.generateExports);\n    }\n    WarningLevel wLevel = flags.warningLevel;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setClosurePassEnabled(flags.processClosurePrimitives); // changed from options.closurePass = flags.processClosurePrimitives;\n    options.setJqueryPassEnabled(CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives); // changed from options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives;\n    options.setAngularPassEnabled(flags.angularPass); // changed from options.angularPass = flags.angularPass;\n    if (!flags.translationsFile.isEmpty()) {\n        try {\n            options.setMessagesBundle(new XtbMessageBundle(new FileInputStream(flags.translationsFile), flags.translationsProject));\n        } catch (IOException e) {\n            throw new RuntimeException(\"Reading XTB file\", e);\n        }\n    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n        options.setMessagesBundle(new EmptyMessageBundle());\n    }\n    return options;\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 5}]