[{"output": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch(value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is the effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.test(value.getFirstChild()) && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.test(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.test(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties.\n            return locals.test(value.getFirstChild()) || evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.CALL:\n            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.test(value);\n        case Token.NEW:\n            // TODO(nicksantos): This needs to be changed so that it\n            // returns true iff we're sure the value was never aliased from inside\n            // the constructor (similar to callHasLocalResult)\n            return true;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n            return true;\n        default:\n            // Other op force a local value:\n            //  x = '' + g (x is now an local string)\n            //  x -= g (x is now an local number)\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 5}]