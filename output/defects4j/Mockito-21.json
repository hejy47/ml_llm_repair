[{"output": "## Fixed Function 1\npublic <T> T newInstance(Class<T> cls) {\n    if (outerClassInstance != null) {\n        return withOuterClass(cls);\n    }\n    return noArgConstructor(cls);\n}\n\n## Fixed Function 2\nprivate <T> T withOuterClass(Class<T> cls) {\n    try {\n        Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n        c.setAccessible(true); // to access private constructors\n        return c.newInstance(outerClassInstance);\n    } catch (Exception e) {\n        throw new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'\", e);\n    }\n}\n\n## Fixed Function 3\nprivate static <T> InstantiationException paramsException(Class<T> cls, Exception e) {\n    return new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n}", "diff": "--- org/mockito/internal/creation/instance/ConstructorInstantiator.javanewInstance\n+++ org/mockito/internal/creation/instance/ConstructorInstantiator.javanewInstance\n@@ -1,6 +1,6 @@\n public <T> T newInstance(Class<T> cls) {\n-    if (outerClassInstance == null) {\n-        return noArgConstructor(cls);\n+    if (outerClassInstance != null) {\n+        return withOuterClass(cls);\n     }\n-    return withOuterClass(cls);\n+    return noArgConstructor(cls);\n }\n--- org/mockito/internal/creation/instance/ConstructorInstantiator.javawithOuterClass\n+++ org/mockito/internal/creation/instance/ConstructorInstantiator.javawithOuterClass\n@@ -1,10 +1,9 @@\n private <T> T withOuterClass(Class<T> cls) {\n     try {\n-        //this is kind of overengineered because we don't need to support more params\n-        //however, I know we will be needing it :)\n         Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n+        c.setAccessible(true); // to access private constructors\n         return c.newInstance(outerClassInstance);\n     } catch (Exception e) {\n-        throw paramsException(cls, e);\n+        throw new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'\", e);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic <T> T newInstance(Class<T> cls) {\n    if (outerClassInstance != null) {\n        return withOuterClass(cls);\n    }\n    return noArgConstructor(cls);\n}\n\n## Fixed Function 2\nprivate <T> T withOuterClass(Class<T> cls) {\n    try {\n        Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n        return c.newInstance(outerClassInstance);\n    } catch (Exception e) {\n        throw new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type.\", e);\n    }\n}\n\n## Fixed Function 3\nprivate static <T> InstantiationException paramsException(Class<T> cls, Exception e) {\n    return new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n}", "diff": "--- org/mockito/internal/creation/instance/ConstructorInstantiator.javanewInstance\n+++ org/mockito/internal/creation/instance/ConstructorInstantiator.javanewInstance\n@@ -1,6 +1,6 @@\n public <T> T newInstance(Class<T> cls) {\n-    if (outerClassInstance == null) {\n-        return noArgConstructor(cls);\n+    if (outerClassInstance != null) {\n+        return withOuterClass(cls);\n     }\n-    return withOuterClass(cls);\n+    return noArgConstructor(cls);\n }\n--- org/mockito/internal/creation/instance/ConstructorInstantiator.javawithOuterClass\n+++ org/mockito/internal/creation/instance/ConstructorInstantiator.javawithOuterClass\n@@ -1,10 +1,8 @@\n private <T> T withOuterClass(Class<T> cls) {\n     try {\n-        //this is kind of overengineered because we don't need to support more params\n-        //however, I know we will be needing it :)\n         Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n         return c.newInstance(outerClassInstance);\n     } catch (Exception e) {\n-        throw paramsException(cls, e);\n+        throw new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type.\", e);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic <T> T newInstance(Class<T> cls) {\n    if (outerClassInstance != null) {\n        return withOuterClass(cls);\n    }\n    return noArgConstructor(cls);\n}\n\n## Fixed Function 2\nprivate <T> T withOuterClass(Class<T> cls) {\n    try {\n        Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n        c.setAccessible(true); // need to set accessible to true\n        return c.newInstance(outerClassInstance);\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\", e);\n    }\n}\n\n## Fixed Function 3\nprivate static <T> InstantiationException paramsException(Class<T> cls, Exception e) {\n    return new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n}", "diff": "--- org/mockito/internal/creation/instance/ConstructorInstantiator.javanewInstance\n+++ org/mockito/internal/creation/instance/ConstructorInstantiator.javanewInstance\n@@ -1,6 +1,6 @@\n public <T> T newInstance(Class<T> cls) {\n-    if (outerClassInstance == null) {\n-        return noArgConstructor(cls);\n+    if (outerClassInstance != null) {\n+        return withOuterClass(cls);\n     }\n-    return withOuterClass(cls);\n+    return noArgConstructor(cls);\n }\n--- org/mockito/internal/creation/instance/ConstructorInstantiator.javawithOuterClass\n+++ org/mockito/internal/creation/instance/ConstructorInstantiator.javawithOuterClass\n@@ -1,10 +1,9 @@\n private <T> T withOuterClass(Class<T> cls) {\n     try {\n-        //this is kind of overengineered because we don't need to support more params\n-        //however, I know we will be needing it :)\n         Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n+        c.setAccessible(true); // need to set accessible to true\n         return c.newInstance(outerClassInstance);\n     } catch (Exception e) {\n-        throw paramsException(cls, e);\n+        throw new IllegalStateException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\", e);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic <T> T newInstance(Class<T> cls) {\n    if (outerClassInstance != null) {\n        return withOuterClass(cls);\n    }\n    return noArgConstructor(cls);\n}\n\n## Fixed Function 2\nprivate <T> T withOuterClass(Class<T> cls) {\n    try {\n        Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n        return c.newInstance(outerClassInstance);\n    } catch (Exception e) {\n        throw new InstantiationException(\"Unable to create mock instance with outer class\", e);\n    }\n}\n\n## Fixed Function 3\nprivate static <T> InstantiationException paramsException(Class<T> cls, Exception e) {\n    return new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n}", "diff": "--- org/mockito/internal/creation/instance/ConstructorInstantiator.javanewInstance\n+++ org/mockito/internal/creation/instance/ConstructorInstantiator.javanewInstance\n@@ -1,6 +1,6 @@\n public <T> T newInstance(Class<T> cls) {\n-    if (outerClassInstance == null) {\n-        return noArgConstructor(cls);\n+    if (outerClassInstance != null) {\n+        return withOuterClass(cls);\n     }\n-    return withOuterClass(cls);\n+    return noArgConstructor(cls);\n }\n--- org/mockito/internal/creation/instance/ConstructorInstantiator.javawithOuterClass\n+++ org/mockito/internal/creation/instance/ConstructorInstantiator.javawithOuterClass\n@@ -1,10 +1,8 @@\n private <T> T withOuterClass(Class<T> cls) {\n     try {\n-        //this is kind of overengineered because we don't need to support more params\n-        //however, I know we will be needing it :)\n         Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n         return c.newInstance(outerClassInstance);\n     } catch (Exception e) {\n-        throw paramsException(cls, e);\n+        throw new InstantiationException(\"Unable to create mock instance with outer class\", e);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic <T> T newInstance(Class<T> cls) {\n    try {\n        if (outerClassInstance == null) {\n            return cls.newInstance();\n        } else {\n            Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n            return c.newInstance(outerClassInstance);\n        }\n    } catch (Exception e) {\n        throw new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n    }\n}\n\n## Fixed Function 2\nprivate <T> T withOuterClass(Class<T> cls) {\n    try {\n        Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n        return c.newInstance(outerClassInstance);\n    } catch (Exception e) {\n        throw new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n    }\n}\n\n## Fixed Function 3\nprivate static <T> InstantiationException paramsException(Class<T> cls, Exception e) {\n    return new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n}", "diff": "--- org/mockito/internal/creation/instance/ConstructorInstantiator.javanewInstance\n+++ org/mockito/internal/creation/instance/ConstructorInstantiator.javanewInstance\n@@ -1,6 +1,12 @@\n public <T> T newInstance(Class<T> cls) {\n-    if (outerClassInstance == null) {\n-        return noArgConstructor(cls);\n+    try {\n+        if (outerClassInstance == null) {\n+            return cls.newInstance();\n+        } else {\n+            Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n+            return c.newInstance(outerClassInstance);\n+        }\n+    } catch (Exception e) {\n+        throw new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n     }\n-    return withOuterClass(cls);\n }\n--- org/mockito/internal/creation/instance/ConstructorInstantiator.javawithOuterClass\n+++ org/mockito/internal/creation/instance/ConstructorInstantiator.javawithOuterClass\n@@ -1,10 +1,8 @@\n private <T> T withOuterClass(Class<T> cls) {\n     try {\n-        //this is kind of overengineered because we don't need to support more params\n-        //however, I know we will be needing it :)\n         Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass());\n         return c.newInstance(outerClassInstance);\n     } catch (Exception e) {\n-        throw paramsException(cls, e);\n+        throw new InstantiationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e);\n     }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]