[{"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        if (diff == 0.0) {\n            res[i] = 0.0;\n        } else {\n            res[i] = (x[i] - boundaries[0][i]) / diff;\n        }\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        if (diff == 0.0) {\n            res[i] = x[i];\n        } else {\n            res[i] = diff * x[i] + boundaries[0][i];\n        }\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) {\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -5,7 +5,11 @@\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n-        res[i] = (x[i] - boundaries[0][i]) / diff;\n+        if (diff == 0.0) {\n+            res[i] = 0.0;\n+        } else {\n+            res[i] = (x[i] - boundaries[0][i]) / diff;\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n@@ -5,7 +5,11 @@\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n-        res[i] = diff * x[i] + boundaries[0][i];\n+        if (diff == 0.0) {\n+            res[i] = x[i];\n+        } else {\n+            res[i] = diff * x[i] + boundaries[0][i];\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) {\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        if (diff == 0) {\n            res[i] = 0;\n        } else {\n            res[i] = (x[i] - boundaries[0][i]) / diff;\n        }\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        if (diff == 0) {\n            res[i] = boundaries[0][i];\n        } else {\n            res[i] = diff * x[i] + boundaries[0][i];\n        }\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) {\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -5,7 +5,11 @@\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n-        res[i] = (x[i] - boundaries[0][i]) / diff;\n+        if (diff == 0) {\n+            res[i] = 0;\n+        } else {\n+            res[i] = (x[i] - boundaries[0][i]) / diff;\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n@@ -5,7 +5,11 @@\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n-        res[i] = diff * x[i] + boundaries[0][i];\n+        if (diff == 0) {\n+            res[i] = boundaries[0][i];\n+        } else {\n+            res[i] = diff * x[i] + boundaries[0][i];\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) {\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        res[i] = Math.min(1.0, Math.max(0.0, res[i])); // ensure result is between 0.0 and 1.0\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n        res[i] = Math.min(boundaries[1][i], Math.max(boundaries[0][i], res[i])); // ensure result is within boundaries\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i] || x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,7 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        res[i] = Math.min(1.0, Math.max(0.0, res[i])); // ensure result is between 0.0 and 1.0\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n@@ -6,6 +6,7 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = diff * x[i] + boundaries[0][i];\n+        res[i] = Math.min(boundaries[1][i], Math.max(boundaries[0][i], res[i])); // ensure result is within boundaries\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,7 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n-            return false;\n-        }\n-        if (x[i] > 1.0) {\n+        if (x[i] < boundaries[0][i] || x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        if (diff == 0) {\n            res[i] = 1;\n        } else {\n            res[i] = (x[i] - boundaries[0][i]) / diff;\n        }\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        if (diff == 0) {\n            res[i] = boundaries[0][i];\n        } else {\n            res[i] = diff * x[i] + boundaries[0][i];\n        }\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i] || x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -5,7 +5,11 @@\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n-        res[i] = (x[i] - boundaries[0][i]) / diff;\n+        if (diff == 0) {\n+            res[i] = 1;\n+        } else {\n+            res[i] = (x[i] - boundaries[0][i]) / diff;\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n@@ -5,7 +5,11 @@\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n-        res[i] = diff * x[i] + boundaries[0][i];\n+        if (diff == 0) {\n+            res[i] = boundaries[0][i];\n+        } else {\n+            res[i] = diff * x[i] + boundaries[0][i];\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,7 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n-            return false;\n-        }\n-        if (x[i] > 1.0) {\n+        if (x[i] < boundaries[0][i] || x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        res[i] = Math.min(1.0, Math.max(0.0, res[i])); // add boundary check\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) { // check lower bound\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) { // check upper bound\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,7 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        res[i] = Math.min(1.0, Math.max(0.0, res[i])); // add boundary check\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) { // check lower bound\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) { // check upper bound\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        if (diff == 0) {\n            res[i] = 0.5;\n        } else {\n            res[i] = (x[i] - boundaries[0][i]) / diff;\n        }\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        if (diff == 0) {\n            res[i] = boundaries[0][i];\n        } else {\n            res[i] = diff * x[i] + boundaries[0][i];\n        }\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) {\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -5,7 +5,11 @@\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n-        res[i] = (x[i] - boundaries[0][i]) / diff;\n+        if (diff == 0) {\n+            res[i] = 0.5;\n+        } else {\n+            res[i] = (x[i] - boundaries[0][i]) / diff;\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n@@ -5,7 +5,11 @@\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n-        res[i] = diff * x[i] + boundaries[0][i];\n+        if (diff == 0) {\n+            res[i] = boundaries[0][i];\n+        } else {\n+            res[i] = diff * x[i] + boundaries[0][i];\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) {\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        if (res[i] > 1.0) {\n            res[i] = 1.0;\n        } else if (res[i] < 0.0) {\n            res[i] = 0.0;\n        }\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i] || x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,11 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        if (res[i] > 1.0) {\n+            res[i] = 1.0;\n+        } else if (res[i] < 0.0) {\n+            res[i] = 0.0;\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,7 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n-            return false;\n-        }\n-        if (x[i] > 1.0) {\n+        if (x[i] < boundaries[0][i] || x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        res[i] = Math.max(0.0, Math.min(1.0, res[i])); // add boundary check\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) { // fix lower boundary check\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) { // fix upper boundary check\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,7 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        res[i] = Math.max(0.0, Math.min(1.0, res[i])); // add boundary check\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) { // fix lower boundary check\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) { // fix upper boundary check\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        // Fix: Check if diff is 0 to avoid division by zero\n        if (diff == 0) {\n            res[i] = 0;\n        }\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        // Fix: Check if diff is 0 to avoid division by zero\n        if (diff == 0) {\n            res[i] = boundaries[0][i]; // Set to lower boundary value\n        } else {\n            res[i] = diff * x[i] + boundaries[0][i];\n        }\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) { // Fix: Check if x is less than lower boundary\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) { // Fix: Check if x is greater than upper boundary\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,10 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        // Fix: Check if diff is 0 to avoid division by zero\n+        if (diff == 0) {\n+            res[i] = 0;\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n@@ -5,7 +5,12 @@\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n-        res[i] = diff * x[i] + boundaries[0][i];\n+        // Fix: Check if diff is 0 to avoid division by zero\n+        if (diff == 0) {\n+            res[i] = boundaries[0][i]; // Set to lower boundary value\n+        } else {\n+            res[i] = diff * x[i] + boundaries[0][i];\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) { // Fix: Check if x is less than lower boundary\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) { // Fix: Check if x is greater than upper boundary\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[0][i] - boundaries[1][i]; // fixed flipping of boundary values\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) { // fixed comparison with lower boundary\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -4,7 +4,7 @@\n     }\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n-        double diff = boundaries[1][i] - boundaries[0][i];\n+        double diff = boundaries[0][i] - boundaries[1][i]; // fixed flipping of boundary values\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n     }\n     return res;\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) { // fixed comparison with lower boundary\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        if (res[i] < 0) {\n            res[i] = 0.0;\n        } else if (res[i] > 1.0) {\n            res[i] = 1.0;\n        }\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i] || x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,11 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        if (res[i] < 0) {\n+            res[i] = 0.0;\n+        } else if (res[i] > 1.0) {\n+            res[i] = 1.0;\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,7 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n-            return false;\n-        }\n-        if (x[i] > 1.0) {\n+        if (x[i] < boundaries[0][i] || x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        res[i] = Math.max(0, Math.min(1, res[i])); // add boundary check\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) { // check lower bound\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) { // check upper bound\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,7 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        res[i] = Math.max(0, Math.min(1, res[i])); // add boundary check\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) { // check lower bound\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) { // check upper bound\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        if (res[i] > 1.0) {\n            res[i] = 1.0;\n        }\n        if (res[i] < 0.0) {\n            res[i] = 0.0;\n        }\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n        if (res[i] > boundaries[1][i]) {\n            res[i] = boundaries[1][i];\n        }\n        if (res[i] < boundaries[0][i]) {\n            res[i] = boundaries[0][i];\n        }\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) {\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,12 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        if (res[i] > 1.0) {\n+            res[i] = 1.0;\n+        }\n+        if (res[i] < 0.0) {\n+            res[i] = 0.0;\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n@@ -6,6 +6,12 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = diff * x[i] + boundaries[0][i];\n+        if (res[i] > boundaries[1][i]) {\n+            res[i] = boundaries[1][i];\n+        }\n+        if (res[i] < boundaries[0][i]) {\n+            res[i] = boundaries[0][i];\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) {\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        if (res[i] < 0) {\n            res[i] = 0;\n        }\n        if (res[i] > 1.0) {\n            res[i] = 1.0;\n        }\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i] || x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,12 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        if (res[i] < 0) {\n+            res[i] = 0;\n+        }\n+        if (res[i] > 1.0) {\n+            res[i] = 1.0;\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,7 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n-            return false;\n-        }\n-        if (x[i] > 1.0) {\n+        if (x[i] < boundaries[0][i] || x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        res[i] = Math.min(Math.max(res[i], 0.0), 1.0);\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        double val = boundaries[0][i] + diff * x[i];\n        res[i] = Math.min(Math.max(val, boundaries[0][i]), boundaries[1][i]);\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) {\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,7 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        res[i] = Math.min(Math.max(res[i], 0.0), 1.0);\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n@@ -5,7 +5,8 @@\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n-        res[i] = diff * x[i] + boundaries[0][i];\n+        double val = boundaries[0][i] + diff * x[i];\n+        res[i] = Math.min(Math.max(val, boundaries[0][i]), boundaries[1][i]);\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) {\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        res[i] = Math.max(res[i], 0.0);\n        res[i] = Math.min(res[i], 1.0);\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n        res[i] = Math.max(res[i], boundaries[0][i]);\n        res[i] = Math.min(res[i], boundaries[1][i]);\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) {\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,8 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        res[i] = Math.max(res[i], 0.0);\n+        res[i] = Math.min(res[i], 1.0);\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n@@ -6,6 +6,8 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = diff * x[i] + boundaries[0][i];\n+        res[i] = Math.max(res[i], boundaries[0][i]);\n+        res[i] = Math.min(res[i], boundaries[1][i]);\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) {\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) {\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) {\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n        if(res[i] < 0.0 || res[i] > 1.0){\n            res[i] = Math.max(0.0, Math.min(1.0, res[i]));\n        }\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        double tempRes = diff * x[i] + boundaries[0][i];\n        if(tempRes < boundaries[0][i] || tempRes > boundaries[1][i]){\n            res[i] = Math.max(boundaries[0][i], Math.min(boundaries[1][i], tempRes));\n        } else{\n            res[i] = tempRes;\n        }\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) {\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) {\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@encode\n@@ -6,6 +6,9 @@\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n         res[i] = (x[i] - boundaries[0][i]) / diff;\n+        if(res[i] < 0.0 || res[i] > 1.0){\n+            res[i] = Math.max(0.0, Math.min(1.0, res[i]));\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@decode\n@@ -5,7 +5,12 @@\n     double[] res = new double[x.length];\n     for (int i = 0; i < x.length; i++) {\n         double diff = boundaries[1][i] - boundaries[0][i];\n-        res[i] = diff * x[i] + boundaries[0][i];\n+        double tempRes = diff * x[i] + boundaries[0][i];\n+        if(tempRes < boundaries[0][i] || tempRes > boundaries[1][i]){\n+            res[i] = Math.max(boundaries[0][i], Math.min(boundaries[1][i], tempRes));\n+        } else{\n+            res[i] = tempRes;\n+        }\n     }\n     return res;\n }\n--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) {\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) {\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n    }\n    return res;\n}\n\n## Fixed Function 2\npublic double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n    }\n    return res;\n}\n\n## Fixed Function 3\npublic boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < boundaries[0][i]) { // changed condition\n            return false;\n        }\n        if (x[i] > boundaries[1][i]) { // changed condition\n            return false;\n        }\n    }\n    return true;\n}", "diff": "--- org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n+++ org/apache/commons/math3/optimization/direct/CMAESOptimizer.java@isFeasible\n@@ -3,10 +3,10 @@\n         return true;\n     }\n     for (int i = 0; i < x.length; i++) {\n-        if (x[i] < 0) {\n+        if (x[i] < boundaries[0][i]) { // changed condition\n             return false;\n         }\n-        if (x[i] > 1.0) {\n+        if (x[i] > boundaries[1][i]) { // changed condition\n             return false;\n         }\n     }\n", "finish_reason": "stop", "valid": false, "num": 1}]