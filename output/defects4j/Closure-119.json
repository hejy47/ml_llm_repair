[{"output": "public void collect(JSModule module, Scope scope, Node n) {\n    Node parent = n.getParent();\n    String name;\n    boolean isSet = false;\n    Name.Type type = Name.Type.OTHER;\n    boolean isPropAssign = false;\n    switch(n.getToken()) { // using getToken() instead of getType()\n        case GETTER_DEF: // removing Token prefix\n        case SETTER_DEF:\n        case STRING_KEY:\n            name = null;\n            if (parent != null && parent.isObjectLit()) {\n                name = getNameForObjLitKey(n);\n            }\n            if (name == null) {\n                return;\n            }\n            isSet = true;\n            switch(n.getToken()) {\n                case STRING_KEY:\n                    type = getValueType(n.getFirstChild());\n                    break;\n                case GETTER_DEF:\n                    type = Name.Type.GET;\n                    break;\n                case SETTER_DEF:\n                    type = Name.Type.SET;\n                    break;\n                default:\n                    throw new IllegalStateException(\"unexpected:\" + n);\n            }\n            break;\n        case NAME:\n            if (parent != null) {\n                switch(parent.getToken()) { // using getToken() instead of getType()\n                    case VAR:\n                        isSet = true;\n                        Node rvalue = n.getFirstChild();\n                        type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                        break;\n                    case ASSIGN:\n                        if (parent.getFirstChild() == n) {\n                            isSet = true;\n                            type = getValueType(n.getNext());\n                        }\n                        break;\n                    case GETPROP:\n                        return;\n                    case FUNCTION:\n                        Node gramps = parent.getParent();\n                        if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                            return;\n                        }\n                        isSet = true;\n                        type = Name.Type.FUNCTION;\n                        break;\n                    case INC:\n                    case DEC:\n                        isSet = true;\n                        type = Name.Type.OTHER;\n                        break;\n                    default:\n                        if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n                            isSet = true;\n                            type = Name.Type.OTHER;\n                        }\n                }\n            }\n            name = n.getString();\n            break;\n        case GETPROP:\n            if (parent != null) {\n                switch(parent.getToken()) { // using getToken() instead of getType()\n                    case ASSIGN:\n                        if (parent.getFirstChild() == n) {\n                            isSet = true;\n                            type = getValueType(n.getNext());\n                            isPropAssign = true;\n                        }\n                        break;\n                    case INC:\n                    case DEC:\n                        isSet = true;\n                        type = Name.Type.OTHER;\n                        break;\n                    case GETPROP:\n                        return;\n                    default:\n                        if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n                            isSet = true;\n                            type = Name.Type.OTHER;\n                        }\n                }\n            }\n            name = n.getQualifiedName();\n            if (name == null) {\n                return;\n            }\n            break;\n        default:\n            return;\n    }\n    if (!isGlobalNameReference(name, scope)) {\n        return;\n    }\n    if (isSet) {\n        if (isGlobalScope(scope)) {\n            handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n        } else {\n            handleSetFromLocal(module, scope, n, parent, name);\n        }\n    } else {\n        handleGet(module, scope, n, parent, name);\n    }\n}", "diff": "", "finish_reason": "stop", "valid": false, "num": 5}]