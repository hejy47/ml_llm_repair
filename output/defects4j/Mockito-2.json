[{"output": "## Fixed Function 1\npublic Timer(long durationMillis) {\n    if(durationMillis < 0) {\n        throw new IllegalArgumentException(\"Duration cannot be negative\");\n    }\n    this.durationMillis = durationMillis;\n}", "diff": "--- org/mockito/internal/util/Timer.javaTimer\n+++ org/mockito/internal/util/Timer.javaTimer\n@@ -1,3 +1,6 @@\n public Timer(long durationMillis) {\n+    if(durationMillis < 0) {\n+        throw new IllegalArgumentException(\"Duration cannot be negative\");\n+    }\n     this.durationMillis = durationMillis;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\npublic Timer(long durationMillis) {\n    this.durationMillis = durationMillis;\n    this.remainingTimeMillis = durationMillis;\n}", "diff": "--- org/mockito/internal/util/Timer.javaTimer\n+++ org/mockito/internal/util/Timer.javaTimer\n@@ -1,3 +1,4 @@\n public Timer(long durationMillis) {\n     this.durationMillis = durationMillis;\n+    this.remainingTimeMillis = durationMillis;\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\npublic Timer(long durationMillis) {\n    this.durationMillis = durationMillis;\n    this.remainingMillis = durationMillis;\n}", "diff": "--- org/mockito/internal/util/Timer.javaTimer\n+++ org/mockito/internal/util/Timer.javaTimer\n@@ -1,3 +1,4 @@\n public Timer(long durationMillis) {\n     this.durationMillis = durationMillis;\n+    this.remainingMillis = durationMillis;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]