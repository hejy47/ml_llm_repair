[{"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    if (REGISTRY.get() == null) {\n        REGISTRY.set(Collections.synchronizedMap(new HashMap<Object, Object>()));\n    }\n    return REGISTRY.get();\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    synchronized(m) {\n        return m.containsKey(value);\n    }\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,6 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    if (REGISTRY.get() == null) {\n+        REGISTRY.set(Collections.synchronizedMap(new HashMap<Object, Object>()));\n+    }\n+    return REGISTRY.get();\n }\n--- org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n@@ -1,4 +1,6 @@\n static boolean isRegistered(Object value) {\n     Map<Object, Object> m = getRegistry();\n-    return m.containsKey(value);\n+    synchronized(m) {\n+        return m.containsKey(value);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    Map<Object, Object> registry = REGISTRY.get();\n    if (registry != null) {\n        return registry;\n    } else {\n        registry = Collections.emptyMap();\n        REGISTRY.set(registry);\n        return registry;\n    }\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,10 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    Map<Object, Object> registry = REGISTRY.get();\n+    if (registry != null) {\n+        return registry;\n+    } else {\n+        registry = Collections.emptyMap();\n+        REGISTRY.set(registry);\n+        return registry;\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    return REGISTRY.get() != null ? REGISTRY.get() : Collections.synchronizedMap(new HashMap<Object, Object>());\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    synchronized (m) {\n        return m.containsKey(value);\n    }\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,3 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    return REGISTRY.get() != null ? REGISTRY.get() : Collections.synchronizedMap(new HashMap<Object, Object>());\n }\n--- org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n@@ -1,4 +1,6 @@\n static boolean isRegistered(Object value) {\n     Map<Object, Object> m = getRegistry();\n-    return m.containsKey(value);\n+    synchronized (m) {\n+        return m.containsKey(value);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    Map<Object, Object> registry = REGISTRY.get();\n    if (registry == null) {\n        registry = new HashMap<Object, Object>();\n        REGISTRY.set(registry);\n    }\n    return registry;\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,8 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    Map<Object, Object> registry = REGISTRY.get();\n+    if (registry == null) {\n+        registry = new HashMap<Object, Object>();\n+        REGISTRY.set(registry);\n+    }\n+    return registry;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    if(REGISTRY.get() == null){\n        REGISTRY.set(new HashMap<Object, Object>());\n    }\n    return REGISTRY.get();\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m != null && m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,6 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    if(REGISTRY.get() == null){\n+        REGISTRY.set(new HashMap<Object, Object>());\n+    }\n+    return REGISTRY.get();\n }\n--- org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n@@ -1,4 +1,4 @@\n static boolean isRegistered(Object value) {\n     Map<Object, Object> m = getRegistry();\n-    return m.containsKey(value);\n+    return m != null && m.containsKey(value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    Map<Object, Object> registry = REGISTRY.get();\n    if (registry != null) {\n        return registry;\n    }\n    return Collections.emptyMap();\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m != null && m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,7 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    Map<Object, Object> registry = REGISTRY.get();\n+    if (registry != null) {\n+        return registry;\n+    }\n+    return Collections.emptyMap();\n }\n--- org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n@@ -1,4 +1,4 @@\n static boolean isRegistered(Object value) {\n     Map<Object, Object> m = getRegistry();\n-    return m.containsKey(value);\n+    return m != null && m.containsKey(value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    Map<Object, Object> registry = REGISTRY.get();\n    return registry != null ? registry : Collections.emptyMap();\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m != null && m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,4 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    Map<Object, Object> registry = REGISTRY.get();\n+    return registry != null ? registry : Collections.emptyMap();\n }\n--- org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n@@ -1,4 +1,4 @@\n static boolean isRegistered(Object value) {\n     Map<Object, Object> m = getRegistry();\n-    return m.containsKey(value);\n+    return m != null && m.containsKey(value);\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    if (REGISTRY.get() != null) {\n        return REGISTRY.get();\n    } else {\n        REGISTRY.set(new HashMap<>());\n        return REGISTRY.get();\n    }\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m != null && m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,8 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    if (REGISTRY.get() != null) {\n+        return REGISTRY.get();\n+    } else {\n+        REGISTRY.set(new HashMap<>());\n+        return REGISTRY.get();\n+    }\n }\n--- org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n@@ -1,4 +1,4 @@\n static boolean isRegistered(Object value) {\n     Map<Object, Object> m = getRegistry();\n-    return m.containsKey(value);\n+    return m != null && m.containsKey(value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    if (REGISTRY.get() != null) {\n        return REGISTRY.get();\n    } else {\n        REGISTRY.set(new HashMap<Object, Object>());\n        return REGISTRY.get();\n    }\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,8 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    if (REGISTRY.get() != null) {\n+        return REGISTRY.get();\n+    } else {\n+        REGISTRY.set(new HashMap<Object, Object>());\n+        return REGISTRY.get();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    Map<Object, Object> registry = REGISTRY.get();\n    if (registry == null) {\n        registry = new HashMap<Object, Object>();\n        REGISTRY.set(registry);\n    }\n    return registry;\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m != null && m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,8 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    Map<Object, Object> registry = REGISTRY.get();\n+    if (registry == null) {\n+        registry = new HashMap<Object, Object>();\n+        REGISTRY.set(registry);\n+    }\n+    return registry;\n }\n--- org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n@@ -1,4 +1,4 @@\n static boolean isRegistered(Object value) {\n     Map<Object, Object> m = getRegistry();\n-    return m.containsKey(value);\n+    return m != null && m.containsKey(value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    return Optional.ofNullable(REGISTRY.get()).orElse(Collections.emptyMap());\n}\n\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,3 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    return Optional.ofNullable(REGISTRY.get()).orElse(Collections.emptyMap());\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    Map<Object, Object> registry = REGISTRY.get();\n    if (registry != null) {\n        return registry;\n    } else {\n        return Collections.emptyMap();\n    }\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,8 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    Map<Object, Object> registry = REGISTRY.get();\n+    if (registry != null) {\n+        return registry;\n+    } else {\n+        return Collections.emptyMap();\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    return REGISTRY.get() != null ? REGISTRY.get() : Collections.synchronizedMap(new HashMap<Object, Object>());\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    synchronized(m) {\n        return m.containsKey(value);\n    }\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,3 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    return REGISTRY.get() != null ? REGISTRY.get() : Collections.synchronizedMap(new HashMap<Object, Object>());\n }\n--- org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n@@ -1,4 +1,6 @@\n static boolean isRegistered(Object value) {\n     Map<Object, Object> m = getRegistry();\n-    return m.containsKey(value);\n+    synchronized(m) {\n+        return m.containsKey(value);\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    Map<Object, Object> registry = REGISTRY.get();\n    return (registry != null) ? registry : Collections.emptyMap();\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,4 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    Map<Object, Object> registry = REGISTRY.get();\n+    return (registry != null) ? registry : Collections.emptyMap();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    if(REGISTRY.get() == null) {\n        REGISTRY.set(new HashMap<Object, Object>());\n    }\n    return REGISTRY.get();\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m != null && m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,6 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    if(REGISTRY.get() == null) {\n+        REGISTRY.set(new HashMap<Object, Object>());\n+    }\n+    return REGISTRY.get();\n }\n--- org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n@@ -1,4 +1,4 @@\n static boolean isRegistered(Object value) {\n     Map<Object, Object> m = getRegistry();\n-    return m.containsKey(value);\n+    return m != null && m.containsKey(value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    return REGISTRY.get() != null ? REGISTRY.get() : Collections.emptyMap();\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m != null && m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,3 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    return REGISTRY.get() != null ? REGISTRY.get() : Collections.emptyMap();\n }\n--- org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@isRegistered\n@@ -1,4 +1,4 @@\n static boolean isRegistered(Object value) {\n     Map<Object, Object> m = getRegistry();\n-    return m.containsKey(value);\n+    return m != null && m.containsKey(value);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nstatic Map<Object, Object> getRegistry() {\n    if (REGISTRY.get() == null) {\n        REGISTRY.set(new HashMap<Object, Object>());\n    }\n    return REGISTRY.get();\n}\n\n## Fixed Function 2\nstatic boolean isRegistered(Object value) {\n    Map<Object, Object> m = getRegistry();\n    return m.containsKey(value);\n}", "diff": "--- org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n+++ org/apache/commons/lang3/builder/ToStringStyle.java@getRegistry\n@@ -1,3 +1,6 @@\n static Map<Object, Object> getRegistry() {\n-    return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+    if (REGISTRY.get() == null) {\n+        REGISTRY.set(new HashMap<Object, Object>());\n+    }\n+    return REGISTRY.get();\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]