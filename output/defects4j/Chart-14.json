[{"output": "## Fixed Function 1\npublic boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundDomainMarkers.get(index);\n    } else {\n        markers = this.backgroundDomainMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 2\npublic boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n    if (marker == null) {\n        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n    }\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundRangeMarkers.get(index);\n    } else {\n        markers = this.backgroundRangeMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n         fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 3\npublic boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundDomainMarkers.get(index);\n    } else {\n        markers = this.backgroundDomainMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 4\npublic boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n    if (marker == null) {\n        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n    }\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundRangeMarkers.get(index);\n    } else {\n        markers = this.backgroundRangeMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}", "diff": "--- org/jfree/chart/plot/CategoryPlot.javaremoveDomainMarker\n+++ org/jfree/chart/plot/CategoryPlot.javaremoveDomainMarker\n@@ -1,13 +1,16 @@\n-public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    ArrayList markers;\n+public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    if (marker == null) {\n+        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n+    }\n+    List<Marker> markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));\n+        markers = this.foregroundRangeMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));\n+        markers = this.backgroundRangeMarkers.get(index);\n     }\n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n-        fireChangeEvent();\n+         fireChangeEvent();\n     }\n     return removed;\n }\n--- org/jfree/chart/plot/CategoryPlot.javaremoveRangeMarker\n+++ org/jfree/chart/plot/CategoryPlot.javaremoveRangeMarker\n@@ -1,12 +1,9 @@\n-public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    if (marker == null) {\n-        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n-    }\n-    ArrayList markers;\n+public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    List<Marker> markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(index));\n+        markers = this.foregroundDomainMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(index));\n+        markers = this.backgroundDomainMarkers.get(index);\n     }\n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n--- org/jfree/chart/plot/XYPlot.javaremoveDomainMarker\n+++ org/jfree/chart/plot/XYPlot.javaremoveDomainMarker\n@@ -1,9 +1,12 @@\n-public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    ArrayList markers;\n+public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    if (marker == null) {\n+        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n+    }\n+    List<Marker> markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));\n+        markers = this.foregroundRangeMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));\n+        markers = this.backgroundRangeMarkers.get(index);\n     }\n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundDomainMarkers.get(Integer.valueOf(index));\n    } else {\n        markers = this.backgroundDomainMarkers.get(Integer.valueOf(index));\n    }\n    if (markers != null && markers.remove(marker)) {\n        if (notify) {\n            fireChangeEvent();\n        }\n        return true;\n    }\n    return false;\n}\n\n## Fixed Function 2\npublic boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n    if (marker == null) {\n        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n    }\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundRangeMarkers.get(Integer.valueOf(index));\n    } else {\n        markers = this.backgroundRangeMarkers.get(Integer.valueOf(index));\n    }\n    if (markers != null && markers.remove(marker)) {\n        if (notify) {\n            fireChangeEvent();\n        }\n        return true;\n    }\n    return false;\n}\n\n## Fixed Function 3\npublic boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundDomainMarkers.get(Integer.valueOf(index));\n    } else {\n        markers = this.backgroundDomainMarkers.get(Integer.valueOf(index));\n    }\n    if (markers != null && markers.remove(marker)) {\n        if (notify) {\n            fireChangeEvent();\n        }\n        return true;\n    }\n    return false;\n}\n\n## Fixed Function 4\npublic boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n    if (marker == null) {\n        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n    }\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundRangeMarkers.get(Integer.valueOf(index));\n    } else {\n        markers = this.backgroundRangeMarkers.get(Integer.valueOf(index));\n    }\n    if (markers != null && markers.remove(marker)) {\n        if (notify) {\n            fireChangeEvent();\n        }\n        return true;\n    }\n    return false;\n}", "diff": "--- org/jfree/chart/plot/CategoryPlot.javaremoveDomainMarker\n+++ org/jfree/chart/plot/CategoryPlot.javaremoveDomainMarker\n@@ -1,13 +1,18 @@\n-public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    ArrayList markers;\n+public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    if (marker == null) {\n+        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n+    }\n+    List<Marker> markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));\n+        markers = this.foregroundRangeMarkers.get(Integer.valueOf(index));\n     } else {\n-        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));\n+        markers = this.backgroundRangeMarkers.get(Integer.valueOf(index));\n     }\n-    boolean removed = markers.remove(marker);\n-    if (removed && notify) {\n-        fireChangeEvent();\n+    if (markers != null && markers.remove(marker)) {\n+        if (notify) {\n+            fireChangeEvent();\n+        }\n+        return true;\n     }\n-    return removed;\n+    return false;\n }\n--- org/jfree/chart/plot/CategoryPlot.javaremoveRangeMarker\n+++ org/jfree/chart/plot/CategoryPlot.javaremoveRangeMarker\n@@ -1,16 +1,15 @@\n-public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    if (marker == null) {\n-        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n+public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    List<Marker> markers;\n+    if (layer == Layer.FOREGROUND) {\n+        markers = this.foregroundDomainMarkers.get(Integer.valueOf(index));\n+    } else {\n+        markers = this.backgroundDomainMarkers.get(Integer.valueOf(index));\n     }\n-    ArrayList markers;\n-    if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(index));\n-    } else {\n-        markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(index));\n+    if (markers != null && markers.remove(marker)) {\n+        if (notify) {\n+            fireChangeEvent();\n+        }\n+        return true;\n     }\n-    boolean removed = markers.remove(marker);\n-    if (removed && notify) {\n-        fireChangeEvent();\n-    }\n-    return removed;\n+    return false;\n }\n--- org/jfree/chart/plot/XYPlot.javaremoveDomainMarker\n+++ org/jfree/chart/plot/XYPlot.javaremoveDomainMarker\n@@ -1,13 +1,18 @@\n-public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    ArrayList markers;\n+public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    if (marker == null) {\n+        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n+    }\n+    List<Marker> markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));\n+        markers = this.foregroundRangeMarkers.get(Integer.valueOf(index));\n     } else {\n-        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));\n+        markers = this.backgroundRangeMarkers.get(Integer.valueOf(index));\n     }\n-    boolean removed = markers.remove(marker);\n-    if (removed && notify) {\n-        fireChangeEvent();\n+    if (markers != null && markers.remove(marker)) {\n+        if (notify) {\n+            fireChangeEvent();\n+        }\n+        return true;\n     }\n-    return removed;\n+    return false;\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n    List markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundDomainMarkers.get(index);\n    } else {\n        markers = this.backgroundDomainMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 2\npublic boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n    if (marker == null) {\n        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n    }\n    List markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundRangeMarkers.get(index);\n    } else {\n        markers = this.backgroundRangeMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 3\npublic boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n    List markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundDomainMarkers.get(index);\n    } else {\n        markers = this.backgroundDomainMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 4\npublic boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n    if (marker == null) {\n        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n    }\n    List markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundRangeMarkers.get(index);\n    } else {\n        markers = this.backgroundRangeMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}", "diff": "--- org/jfree/chart/plot/CategoryPlot.javaremoveDomainMarker\n+++ org/jfree/chart/plot/CategoryPlot.javaremoveDomainMarker\n@@ -1,9 +1,12 @@\n-public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    ArrayList markers;\n+public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    if (marker == null) {\n+        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n+    }\n+    List markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));\n+        markers = this.foregroundRangeMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));\n+        markers = this.backgroundRangeMarkers.get(index);\n     }\n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n--- org/jfree/chart/plot/CategoryPlot.javaremoveRangeMarker\n+++ org/jfree/chart/plot/CategoryPlot.javaremoveRangeMarker\n@@ -1,12 +1,9 @@\n-public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    if (marker == null) {\n-        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n-    }\n-    ArrayList markers;\n+public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    List markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(index));\n+        markers = this.foregroundDomainMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(index));\n+        markers = this.backgroundDomainMarkers.get(index);\n     }\n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n--- org/jfree/chart/plot/XYPlot.javaremoveDomainMarker\n+++ org/jfree/chart/plot/XYPlot.javaremoveDomainMarker\n@@ -1,9 +1,12 @@\n-public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    ArrayList markers;\n+public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    if (marker == null) {\n+        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n+    }\n+    List markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));\n+        markers = this.foregroundRangeMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));\n+        markers = this.backgroundRangeMarkers.get(index);\n     }\n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundDomainMarkers.get(index);\n    } else {\n        markers = this.backgroundDomainMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 2\npublic boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n    if (marker == null) {\n        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n    }\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundRangeMarkers.get(index);\n    } else {\n        markers = this.backgroundRangeMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 3\npublic boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundDomainMarkers.get(index);\n    } else {\n        markers = this.backgroundDomainMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 4\npublic boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n    if (marker == null) {\n        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n    }\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundRangeMarkers.get(index);\n    } else {\n        markers = this.backgroundRangeMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}", "diff": "--- org/jfree/chart/plot/CategoryPlot.javaremoveDomainMarker\n+++ org/jfree/chart/plot/CategoryPlot.javaremoveDomainMarker\n@@ -1,9 +1,12 @@\n-public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    ArrayList markers;\n+public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    if (marker == null) {\n+        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n+    }\n+    List<Marker> markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));\n+        markers = this.foregroundRangeMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));\n+        markers = this.backgroundRangeMarkers.get(index);\n     }\n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n--- org/jfree/chart/plot/CategoryPlot.javaremoveRangeMarker\n+++ org/jfree/chart/plot/CategoryPlot.javaremoveRangeMarker\n@@ -1,12 +1,9 @@\n-public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    if (marker == null) {\n-        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n-    }\n-    ArrayList markers;\n+public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    List<Marker> markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(index));\n+        markers = this.foregroundDomainMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(index));\n+        markers = this.backgroundDomainMarkers.get(index);\n     }\n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n--- org/jfree/chart/plot/XYPlot.javaremoveDomainMarker\n+++ org/jfree/chart/plot/XYPlot.javaremoveDomainMarker\n@@ -1,9 +1,12 @@\n-public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    ArrayList markers;\n+public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    if (marker == null) {\n+        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n+    }\n+    List<Marker> markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));\n+        markers = this.foregroundRangeMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));\n+        markers = this.backgroundRangeMarkers.get(index);\n     }\n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\npublic boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundDomainMarkers.get(index);\n    } else {\n        markers = this.backgroundDomainMarkers.get(index);\n    }\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 2\npublic boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n    if (marker == null) {\n        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n    }\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundRangeMarkers.get(index);\n    } else {\n        markers = this.backgroundRangeMarkers.get(index);\n    } \n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 3\npublic boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundDomainMarkers.get(index);\n    } else {\n        markers = this.backgroundDomainMarkers.get(index);\n    } \n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}\n\n## Fixed Function 4\npublic boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n    if (marker == null) {\n        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n    }\n    List<Marker> markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = this.foregroundRangeMarkers.get(index);\n    } else {\n        markers = this.backgroundRangeMarkers.get(index);\n    } \n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}", "diff": "--- org/jfree/chart/plot/CategoryPlot.javaremoveDomainMarker\n+++ org/jfree/chart/plot/CategoryPlot.javaremoveDomainMarker\n@@ -1,10 +1,13 @@\n-public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    ArrayList markers;\n+public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    if (marker == null) {\n+        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n+    }\n+    List<Marker> markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));\n+        markers = this.foregroundRangeMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));\n-    }\n+        markers = this.backgroundRangeMarkers.get(index);\n+    } \n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n         fireChangeEvent();\n--- org/jfree/chart/plot/CategoryPlot.javaremoveRangeMarker\n+++ org/jfree/chart/plot/CategoryPlot.javaremoveRangeMarker\n@@ -1,13 +1,10 @@\n-public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    if (marker == null) {\n-        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n-    }\n-    ArrayList markers;\n+public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    List<Marker> markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(index));\n+        markers = this.foregroundDomainMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(index));\n-    }\n+        markers = this.backgroundDomainMarkers.get(index);\n+    } \n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n         fireChangeEvent();\n--- org/jfree/chart/plot/XYPlot.javaremoveDomainMarker\n+++ org/jfree/chart/plot/XYPlot.javaremoveDomainMarker\n@@ -1,10 +1,13 @@\n-public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {\n-    ArrayList markers;\n+public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {\n+    if (marker == null) {\n+        throw new IllegalArgumentException(\"Null 'marker' argument.\");\n+    }\n+    List<Marker> markers;\n     if (layer == Layer.FOREGROUND) {\n-        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));\n+        markers = this.foregroundRangeMarkers.get(index);\n     } else {\n-        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));\n-    }\n+        markers = this.backgroundRangeMarkers.get(index);\n+    } \n     boolean removed = markers.remove(marker);\n     if (removed && notify) {\n         fireChangeEvent();\n", "finish_reason": "stop", "valid": false, "num": 1}]