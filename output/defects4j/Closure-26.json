[{"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.copyInformationFrom(script);\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = prop.getLastChild();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.copyInformationFrom(script);\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = prop.getLastChild();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 2}, {"output": "## Fixed Function 1\n/**\n * Emits an optional module.exports override for CommonJS modules.\n * @param script The script node containing the module.\n * @param moduleName The name of the CommonJS module.\n */\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n     Node ifNode = IR.ifNode(moduleExportsProp.cloneTree(), IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp))));\n     ifNode.copyInformationFrom(script);\n     script.addChildToBack(ifNode);\n }\n\n## Fixed Function 2\n/**\n * Visits the module.exports statement and sets the node's original name and string value.\n * @param prop The node representing the module.exports statement.\n */\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = module.getNext();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,21 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n-    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n+     Node ifNode = IR.ifNode(moduleExportsProp.cloneTree(), IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp))));\n+     ifNode.copyInformationFrom(script);\n+     script.addChildToBack(ifNode);\n+ }\n+\n+## Fixed Function 2\n+/**\n+ * Visits the module.exports statement and sets the node's original name and string value.\n+ * @param prop The node representing the module.exports statement.\n+ */\n+private void visitModuleExports(Node prop) {\n+    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n+    Node module = prop.getFirstChild();\n+    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n+    module.setString(moduleName);\n+    Node exports = module.getNext();\n+    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n+    exports.setString(\"module$exports\");\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = module.getNext();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.useSourceInfoFrom(script);\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = IR.name(\"module\");\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    prop.replaceChild(prop.getFirstChild(), module);\n    prop.putBooleanProp(Node.EXPORT_DEFAULT, true);\n    Node exports = prop.getSecondChild();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.useSourceInfoFrom(script);\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,11 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = IR.name(\"module\");\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    prop.replaceChild(prop.getFirstChild(), module);\n+    prop.putBooleanProp(Node.EXPORT_DEFAULT, true);\n+    Node exports = prop.getSecondChild();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.setJSDocInfo(\n        (new JSDocInfoBuilder(true))\n            .addSuppressions(\"uselessCode\", \"12345\")\n            .build());\n    script.addChildToBack(ifNode.copyInformationFromForTree(script));\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = prop.getFirstChild().getString();\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    Node exports = prop.getLastChild();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n    module.setString(moduleName);\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,9 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.setJSDocInfo(\n+        (new JSDocInfoBuilder(true))\n+            .addSuppressions(\"uselessCode\", \"12345\")\n+            .build());\n+    script.addChildToBack(ifNode.copyInformationFromForTree(script));\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n-    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    String moduleName = prop.getFirstChild().getString();\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n-    module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = prop.getLastChild();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n+    module.setString(moduleName);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.useSourceInfoIfMissingFromForTree(script);\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = prop.getLastChild();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.useSourceInfoIfMissingFromForTree(script);\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = prop.getLastChild();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node moduleExportsCheck = IR.not(IR.sheq(moduleExportsProp, IR.nullNode()));\n    Node ifNode = IR.ifNode(moduleExportsCheck, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    script.addChildToBack(ifNode);\n    ifNode.copyInformationFrom(script);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = prop.getLastChild();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,7 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node moduleExportsCheck = IR.not(IR.sheq(moduleExportsProp, IR.nullNode()));\n+    Node ifNode = IR.ifNode(moduleExportsCheck, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    script.addChildToBack(ifNode);\n+    ifNode.copyInformationFrom(script);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = prop.getLastChild();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp!=null ? IR.TRUE : IR.FALSE,\n                            IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.setLineno(script.getLineno());\n    ifNode.setCharno(script.getCharno());\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = module.getNext();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,8 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp!=null ? IR.TRUE : IR.FALSE,\n+                            IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.setLineno(script.getLineno());\n+    ifNode.setCharno(script.getCharno());\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = module.getNext();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifBlock = IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())));\n    Node ifNode = IR.ifNode(moduleExportsProp, ifBlock);\n    ifNode.copyInformationFrom(script);\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = prop.getLastChild();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(moduleName + \"$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,7 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifBlock = IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())));\n+    Node ifNode = IR.ifNode(moduleExportsProp, ifBlock);\n+    ifNode.copyInformationFrom(script);\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = prop.getLastChild();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n-    exports.setString(\"module$exports\");\n+    exports.setString(moduleName + \"$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.copyInformationFromForTree(script);\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = module.getNext();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.copyInformationFromForTree(script);\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = module.getNext();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp,\n                             IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.copyInformationFromForTree(script);\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = prop.getLastChild();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,7 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp,\n+                             IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.copyInformationFromForTree(script);\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = prop.getLastChild();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp != null && moduleExportsProp.isStringKey() && moduleExportsProp.getString().equals(\"module$exports\"),\n                            IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    script.addChildToBack(ifNode.copyInformationFromForTree(script));\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    if (module != null) {\n        module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n        module.setString(moduleName);\n    }\n    Node exports = prop.getLastChild();\n    if (exports != null) {\n        exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n        exports.setString(\"module$exports\");\n    }\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp != null && moduleExportsProp.isStringKey() && moduleExportsProp.getString().equals(\"module$exports\"),\n+                            IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    script.addChildToBack(ifNode.copyInformationFromForTree(script));\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,13 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n-    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n-    module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n-    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n-    exports.setString(\"module$exports\");\n+    Node module = prop.getFirstChild();\n+    if (module != null) {\n+        module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n+        module.setString(moduleName);\n+    }\n+    Node exports = prop.getLastChild();\n+    if (exports != null) {\n+        exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n+        exports.setString(\"module$exports\");\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifStatement = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifStatement.copyInformationFrom(script);\n    script.addChildToBack(ifStatement);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = prop.getLastChild();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(moduleName + \"$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifStatement = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifStatement.copyInformationFrom(script);\n+    script.addChildToBack(ifStatement);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = prop.getLastChild();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n-    exports.setString(\"module$exports\");\n+    exports.setString(moduleName + \"$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.useSourceInfoIfMissingFromForTree(script);\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = NodeUtil.newQNameNode(CompilerConstants.MODULE, moduleName);\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    prop.replaceChild(prop.getChildAtIndex(0), module);\n    Node exports = NodeUtil.newQNameNode(CompilerConstants.EXPORTS, \"module$exports\");\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    prop.replaceChild(prop.getChildAtIndex(1), exports);\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.useSourceInfoIfMissingFromForTree(script);\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = NodeUtil.newQNameNode(CompilerConstants.MODULE, moduleName);\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n-    module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    prop.replaceChild(prop.getChildAtIndex(0), module);\n+    Node exports = NodeUtil.newQNameNode(CompilerConstants.EXPORTS, \"module$exports\");\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n-    exports.setString(\"module$exports\");\n+    prop.replaceChild(prop.getChildAtIndex(1), exports);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.setStaticSourceFile(script.getStaticSourceFile());\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\n\tprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getStaticSourceFile().getName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = prop.getLastChild();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(moduleName + \"$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.setStaticSourceFile(script.getStaticSourceFile());\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n-    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    String moduleName = guessCJSModuleName(prop.getStaticSourceFile().getName());\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = prop.getLastChild();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n-    exports.setString(\"module$exports\");\n+    exports.setString(moduleName + \"$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifBlock = IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())));\n    Node ifNode = IR.ifNode(moduleExportsProp, ifBlock);\n    // Set source information for the new nodes\n    ifNode.copyInformationFrom(script);\n    ifBlock.copyInformationFrom(script);\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, null); // Clear original name property\n    module.setString(moduleName);\n    Node exports = prop.getLastChild();\n    exports.putProp(Node.ORIGINALNAME_PROP, null); // Clear original name property\n    exports.setString(\"module$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,9 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifBlock = IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())));\n+    Node ifNode = IR.ifNode(moduleExportsProp, ifBlock);\n+    // Set source information for the new nodes\n+    ifNode.copyInformationFrom(script);\n+    ifBlock.copyInformationFrom(script);\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n-    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n+    Node module = prop.getFirstChild();\n+    module.putProp(Node.ORIGINALNAME_PROP, null); // Clear original name property\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n-    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n+    Node exports = prop.getLastChild();\n+    exports.putProp(Node.ORIGINALNAME_PROP, null); // Clear original name property\n     exports.setString(\"module$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp != null && moduleExportsProp.getBooleanProp(Node.IS_CONSTANT_BOOLEAN) && !moduleExportsProp.getBooleanProp(Node.IS_CONSTANT_NAME), IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n    ifNode.copyInformationFrom(script);\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getParent().getParent().getFirstFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = prop.getNext();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,6 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp != null && moduleExportsProp.getBooleanProp(Node.IS_CONSTANT_BOOLEAN) && !moduleExportsProp.getBooleanProp(Node.IS_CONSTANT_NAME), IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree()))));\n+    ifNode.copyInformationFrom(script);\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = prop.getParent().getParent().getFirstFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = prop.getNext();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = new Node(Token.IF);\n    Node condition = IR.not(IR.isNull(moduleExportsProp));\n    Node block = IR.block(\n        IR.exprResult(\n            IR.assign(\n                IR.name(moduleName),\n                moduleExportsProp.cloneTree()\n            )\n        )\n    );\n    ifNode.addChildToBack(condition);\n    ifNode.addChildToBack(block);\n    script.addChildToBack(ifNode.copyInformationFromForTree(script));\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = Node.newString(Token.NAME, \"module\");\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = Node.newString(Token.NAME, \"exports\");\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n    prop.replaceChild(prop.getChildAtIndex(0), module);\n    prop.replaceChild(prop.getChildAtIndex(1), exports);\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,16 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = new Node(Token.IF);\n+    Node condition = IR.not(IR.isNull(moduleExportsProp));\n+    Node block = IR.block(\n+        IR.exprResult(\n+            IR.assign(\n+                IR.name(moduleName),\n+                moduleExportsProp.cloneTree()\n+            )\n+        )\n+    );\n+    ifNode.addChildToBack(condition);\n+    ifNode.addChildToBack(block);\n+    script.addChildToBack(ifNode.copyInformationFromForTree(script));\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,11 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = Node.newString(Token.NAME, \"module\");\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = Node.newString(Token.NAME, \"exports\");\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n+    prop.replaceChild(prop.getChildAtIndex(0), module);\n+    prop.replaceChild(prop.getChildAtIndex(1), exports);\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script);\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    // Added null check to avoid NullPointerException\n    if (prop != null && prop.hasChildren()) {\n        String moduleName = guessCJSModuleName(prop.getSourceFileName());\n        Node module = prop.getFirstChild();\n        if (module != null) {\n            module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n            module.setString(moduleName);\n        }\n        Node exports = prop.getLastChild();\n        if (exports != null) {\n            exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n            exports.setString(\"module$exports\");\n        }\n    }\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,5 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script);\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,16 @@\n private void visitModuleExports(Node prop) {\n-    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n-    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n-    module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n-    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n-    exports.setString(\"module$exports\");\n+    // Added null check to avoid NullPointerException\n+    if (prop != null && prop.hasChildren()) {\n+        String moduleName = guessCJSModuleName(prop.getSourceFileName());\n+        Node module = prop.getFirstChild();\n+        if (module != null) {\n+            module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n+            module.setString(moduleName);\n+        }\n+        Node exports = prop.getLastChild();\n+        if (exports != null) {\n+            exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n+            exports.setString(\"module$exports\");\n+        }\n+    }\n }\n", "finish_reason": "stop", "valid": false, "num": 1}, {"output": "## Fixed Function 1\nprivate void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n    Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n    Node ifNode = IR.ifNode(\n        moduleExportsProp.cloneTree(),\n        IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp)))\n    );\n    ifNode.copyInformationFrom(script);\n    script.addChildToBack(ifNode);\n}\n\n## Fixed Function 2\nprivate void visitModuleExports(Node prop) {\n    String moduleName = guessCJSModuleName(prop.getSourceFileName());\n    Node module = prop.getFirstChild();\n    module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n    module.setString(moduleName);\n    Node exports = prop.getLastChild();\n    exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n    exports.setString(\"module$exports\");\n}", "diff": "--- com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javaemitOptionalModuleExportsOverride\n@@ -1,4 +1,9 @@\n private void emitOptionalModuleExportsOverride(Node script, String moduleName) {\n     Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\"));\n-    script.addChildToBack(IR.ifNode(moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));\n+    Node ifNode = IR.ifNode(\n+        moduleExportsProp.cloneTree(),\n+        IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp)))\n+    );\n+    ifNode.copyInformationFrom(script);\n+    script.addChildToBack(ifNode);\n }\n--- com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n+++ com/google/javascript/jscomp/ProcessCommonJSModules.javavisitModuleExports\n@@ -1,9 +1,9 @@\n private void visitModuleExports(Node prop) {\n     String moduleName = guessCJSModuleName(prop.getSourceFileName());\n-    Node module = prop.getChildAtIndex(0);\n+    Node module = prop.getFirstChild();\n     module.putProp(Node.ORIGINALNAME_PROP, \"module\");\n     module.setString(moduleName);\n-    Node exports = prop.getChildAtIndex(1);\n+    Node exports = prop.getLastChild();\n     exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n     exports.setString(\"module$exports\");\n }\n", "finish_reason": "stop", "valid": false, "num": 1}]