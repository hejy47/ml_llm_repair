{"org.jsoup.select.Selector.select": {"buggy_content": "private Elements select() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        // if starts with a combinator, use root as elements\n        elements.add(root);\n        combinator(tq.consume().toString());\n    } else {\n        // chomp first element matcher off queue\n        addElements(findElements());\n    }\n    while (!tq.isEmpty()) {\n        // hierarchy and extras\n        boolean seenWhite = tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            // group or\n            while (!tq.isEmpty()) {\n                String subQuery = tq.chompTo(\",\");\n                elements.addAll(select(subQuery, root));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume().toString());\n        } else if (seenWhite) {\n            combinator(\" \");\n        } else {\n            // E.class, E#id, E[attr] etc. AND\n            // take next el, #. etc off queue\n            Elements candidates = findElements();\n            intersectElements(filterForSelf(elements, candidates));\n        }\n    }\n    return new Elements(elements);\n}", "method_range": "104-133", "fault_locations": "109,110"}, "org.jsoup.select.Selector.findElements": {"buggy_content": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matches(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\")) {\n        return contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        return contains(true);\n    } else if (tq.matches(\":matches(\")) {\n        return matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        return matches(true);\n    } else {\n        // unhandled\n        throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n    }\n}", "method_range": "154-184", "fault_locations": "180,181"}}