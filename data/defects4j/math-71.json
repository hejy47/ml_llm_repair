{"org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate": {"buggy_content": "@Override\npublic double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException {\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n    // create some internal working arrays\n    final int stages = c.length + 1;\n    if (y != y0) {\n        System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][y0.length];\n    final double[] yTmp = new double[y0.length];\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {\n        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n        rki.reinitialize(this, yTmp, yDotK, forward);\n        interpolator = rki;\n    } else {\n        interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);\n    }\n    interpolator.storeTime(t0);\n    // set up integration control objects\n    stepStart = t0;\n    double hNew = 0;\n    boolean firstTime = true;\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n    // main integration loop\n    while (!lastStep) {\n        interpolator.shift();\n        double error = 0;\n        for (boolean loop = true; loop; ) {\n            if (firstTime || !fsal) {\n                // first stage\n                computeDerivatives(stepStart, y, yDotK[0]);\n            }\n            if (firstTime) {\n                final double[] scale = new double[y0.length];\n                if (vecAbsoluteTolerance == null) {\n                    for (int i = 0; i < scale.length; ++i) {\n                        scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);\n                    }\n                } else {\n                    for (int i = 0; i < scale.length; ++i) {\n                        scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);\n                    }\n                }\n                hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]);\n                firstTime = false;\n            }\n            stepSize = hNew;\n            // next stages\n            for (int k = 1; k < stages; ++k) {\n                for (int j = 0; j < y0.length; ++j) {\n                    double sum = a[k - 1][0] * yDotK[0][j];\n                    for (int l = 1; l < k; ++l) {\n                        sum += a[k - 1][l] * yDotK[l][j];\n                    }\n                    yTmp[j] = y[j] + stepSize * sum;\n                }\n                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);\n            }\n            // estimate the state at the end of the step\n            for (int j = 0; j < y0.length; ++j) {\n                double sum = b[0] * yDotK[0][j];\n                for (int l = 1; l < stages; ++l) {\n                    sum += b[l] * yDotK[l][j];\n                }\n                yTmp[j] = y[j] + stepSize * sum;\n            }\n            // estimate the error at the end of the step\n            error = estimateError(yDotK, y, yTmp, stepSize);\n            if (error <= 1.0) {\n                // discrete events handling\n                interpolator.storeTime(stepStart + stepSize);\n                if (manager.evaluateStep(interpolator)) {\n                    final double dt = manager.getEventTime() - stepStart;\n                    if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                        // we cannot simply truncate the step, reject the current computation\n                        // and let the loop compute another state with the truncated step.\n                        // it is so small (much probably exactly 0 due to limited accuracy)\n                        // that the code above would fail handling it.\n                        // So we set up an artificial 0 size step by copying states\n                        loop = false;\n                    } else {\n                        // reject the step to match exactly the next switch time\n                        hNew = dt;\n                    }\n                } else {\n                    // accept the step\n                    loop = false;\n                }\n            } else {\n                // reject the step and attempt to reduce error by stepsize control\n                final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));\n                hNew = filterStep(stepSize * factor, forward, false);\n            }\n        }\n        // the step has been accepted\n        final double nextStep = stepStart + stepSize;\n        System.arraycopy(yTmp, 0, y, 0, y0.length);\n        manager.stepAccepted(nextStep, y);\n        lastStep = manager.stop();\n        // provide the step data to the step handler\n        interpolator.storeTime(nextStep);\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, lastStep);\n        }\n        stepStart = nextStep;\n        if (fsal) {\n            // save the last evaluation for the next step\n            System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n        }\n        if (manager.reset(stepStart, y) && !lastStep) {\n            // some event handler has triggered changes that\n            // invalidate the derivatives, we need to recompute them\n            computeDerivatives(stepStart, y, yDotK[0]);\n        }\n        if (!lastStep) {\n            // in some rare cases we may get here with stepSize = 0, for example\n            // when an event occurs at integration start, reducing the first step\n            // to zero; we have to reset the step to some safe non zero value\n            stepSize = filterStep(stepSize, forward, true);\n            // stepsize control for next step\n            final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));\n            final double scaledH = stepSize * factor;\n            final double nextT = stepStart + scaledH;\n            final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n            hNew = filterStep(scaledH, forward, nextIsLast);\n        }\n    }\n    final double stopTime = stepStart;\n    resetInternalState();\n    return stopTime;\n}", "method_range": "191-366", "fault_locations": "300"}, "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.integrate": {"buggy_content": "public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException {\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n    // create some internal working arrays\n    final int stages = c.length + 1;\n    if (y != y0) {\n        System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][];\n    for (int i = 0; i < stages; ++i) {\n        yDotK[i] = new double[y0.length];\n    }\n    final double[] yTmp = new double[y0.length];\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {\n        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n        rki.reinitialize(this, yTmp, yDotK, forward);\n        interpolator = rki;\n    } else {\n        interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);\n    }\n    interpolator.storeTime(t0);\n    // set up integration control objects\n    stepStart = t0;\n    stepSize = forward ? step : -step;\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n    // main integration loop\n    while (!lastStep) {\n        interpolator.shift();\n        for (boolean loop = true; loop; ) {\n            // first stage\n            computeDerivatives(stepStart, y, yDotK[0]);\n            // next stages\n            for (int k = 1; k < stages; ++k) {\n                for (int j = 0; j < y0.length; ++j) {\n                    double sum = a[k - 1][0] * yDotK[0][j];\n                    for (int l = 1; l < k; ++l) {\n                        sum += a[k - 1][l] * yDotK[l][j];\n                    }\n                    yTmp[j] = y[j] + stepSize * sum;\n                }\n                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);\n            }\n            // estimate the state at the end of the step\n            for (int j = 0; j < y0.length; ++j) {\n                double sum = b[0] * yDotK[0][j];\n                for (int l = 1; l < stages; ++l) {\n                    sum += b[l] * yDotK[l][j];\n                }\n                yTmp[j] = y[j] + stepSize * sum;\n            }\n            // discrete events handling\n            interpolator.storeTime(stepStart + stepSize);\n            if (manager.evaluateStep(interpolator)) {\n                final double dt = manager.getEventTime() - stepStart;\n                if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                    // we cannot simply truncate the step, reject the current computation\n                    // and let the loop compute another state with the truncated step.\n                    // it is so small (much probably exactly 0 due to limited accuracy)\n                    // that the code above would fail handling it.\n                    // So we set up an artificial 0 size step by copying states\n                    loop = false;\n                } else {\n                    // reject the step to match exactly the next switch time\n                    stepSize = dt;\n                }\n            } else {\n                loop = false;\n            }\n        }\n        // the step has been accepted\n        final double nextStep = stepStart + stepSize;\n        System.arraycopy(yTmp, 0, y, 0, y0.length);\n        manager.stepAccepted(nextStep, y);\n        lastStep = manager.stop();\n        // provide the step data to the step handler\n        interpolator.storeTime(nextStep);\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, lastStep);\n        }\n        stepStart = nextStep;\n        if (manager.reset(stepStart, y) && !lastStep) {\n            // some events handler has triggered changes that\n            // invalidate the derivatives, we need to recompute them\n            computeDerivatives(stepStart, y, yDotK[0]);\n        }\n        // make sure step size is set to default before next step\n        stepSize = forward ? step : -step;\n    }\n    final double stopTime = stepStart;\n    stepStart = Double.NaN;\n    stepSize = Double.NaN;\n    return stopTime;\n}", "method_range": "95-220", "fault_locations": "180"}}