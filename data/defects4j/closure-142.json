{"com.google.javascript.jscomp.CoalesceVariableNames.enterScope": {"buggy_content": "@Override\npublic void enterScope(NodeTraversal t) {\n    // TODO(user): We CAN do this in the global scope, just need to be\n    // careful when something is exported. Liveness uses bit-vector for live\n    // sets so I don't see compilation time will be a problem for running this\n    // pass in the global scope.\n    Scope scope = t.getScope();\n    if (scope.isGlobal()) {\n        return;\n    }\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    LiveVariablesAnalysis liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    // If the function has exactly 2 params, mark them as escaped. This is\n    // a work-around for an IE bug where it throws an exception if you\n    // write to the parameters of the callback in a sort(). See:\n    // http://code.google.com/p/closure-compiler/issues/detail?id=58\n    liveness.analyze();\n    UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph(t, cfg, liveness.getEscapedLocals());\n    GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void>(interferenceGraph, coloringTieBreaker);\n    coloring.color();\n    colorings.push(coloring);\n}", "method_range": "90-120", "fault_locations": "107,108"}, "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractMultilineTextualBlock": {"buggy_content": "@SuppressWarnings(\"fallthrough\")\nprivate ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n        return new ExtractionInfo(\"\", token);\n    }\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n        line = line.trim();\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n    boolean ignoreStar = false;\n    do {\n        switch(token) {\n            case STAR:\n                if (!ignoreStar) {\n                    if (builder.length() > 0) {\n                        builder.append(' ');\n                    }\n                    builder.append('*');\n                }\n                token = next();\n                continue;\n            case EOL:\n                if (option != WhitespaceOption.SINGLE_LINE) {\n                    builder.append(\"\\n\");\n                }\n                ignoreStar = true;\n                token = next();\n                continue;\n            case ANNOTATION:\n            case EOC:\n            case EOF:\n                // When we're capturing a license block, annotations\n                // in the block are ok.\n                String multilineText = builder.toString();\n                if (option != WhitespaceOption.PRESERVE) {\n                    multilineText = multilineText.trim();\n                }\n                int endLineno = stream.getLineno();\n                int endCharno = stream.getCharno();\n                if (multilineText.length() > 0) {\n                    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n                }\n                return new ExtractionInfo(multilineText, token);\n            // FALL THROUGH\n            default:\n                ignoreStar = false;\n                state = State.SEARCHING_ANNOTATION;\n                if (builder.length() > 0) {\n                    builder.append(' ');\n                }\n                builder.append(toString(token));\n                line = stream.getRemainingJSDocLine();\n                if (option != WhitespaceOption.PRESERVE) {\n                    line = trimEnd(line);\n                }\n                builder.append(line);\n                token = next();\n        }\n    } while (true);\n}", "method_range": "1112-1206", "fault_locations": "1167,1168,1182,1183"}}