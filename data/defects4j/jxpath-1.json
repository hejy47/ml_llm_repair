{"org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode": {"buggy_content": "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n            return equalStrings(namespaceURI, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType = node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType == Node.ELEMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType == Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}", "method_range": "87-135", "fault_locations": "116"}, "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.testNode": {"buggy_content": "public static boolean testNode(NodePointer pointer, Object node, NodeTest test) {\n    if (test == null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (!(node instanceof Element)) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard || testName.getName().equals(JDOMNodePointer.getLocalName(node))) {\n            String nodeNS = JDOMNodePointer.getNamespaceURI(node);\n            return equalStrings(namespaceURI, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return node instanceof Element;\n            case Compiler.NODE_TYPE_TEXT:\n                return (node instanceof Text) || (node instanceof CDATA);\n            case Compiler.NODE_TYPE_COMMENT:\n                return node instanceof Comment;\n            case Compiler.NODE_TYPE_PI:\n                return node instanceof ProcessingInstruction;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node instanceof ProcessingInstruction) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}", "method_range": "343-395", "fault_locations": "376"}}