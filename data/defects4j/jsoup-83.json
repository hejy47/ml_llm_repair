{"org.jsoup.parser.CharacterReader.consumeTagName": {"buggy_content": "String consumeTagName() {\n    // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n    // NOTE: out of spec, added '<' to fix common author bugs\n    bufferUp();\n    final int start = bufPos;\n    final int remaining = bufLength;\n    final char[] val = charBuf;\n    while (bufPos < remaining) {\n        final char c = val[bufPos];\n        if (c == '\\t' || c == '\\n' || c == '\\r' || c == '\\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)\n            break;\n        bufPos++;\n    }\n    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}", "method_range": "244-260", "fault_locations": "254"}, "org.jsoup.parser.TokeniserState.read": {"buggy_content": "void read(Tokeniser t, CharacterReader r) {\n    // previous TagOpen state did NOT consume, will have a letter char in current\n    //String tagName = r.consumeToAnySorted(tagCharsSorted).toLowerCase();\n    String tagName = r.consumeTagName();\n    t.tagPending.appendTagName(tagName);\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            t.transition(BeforeAttributeName);\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through to next >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case // replacement\n        nullChar:\n            t.tagPending.appendTagName(replacementStr);\n            break;\n        case // should emit pending tag?\n        eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        default:\n            // buffer underrun\n            t.tagPending.appendTagName(c);\n    }\n}", "method_range": "143-176", "fault_locations": "160,161"}, "org.jsoup.parser.TokeniserState.read1": {"buggy_content": "void read(Tokeniser t, CharacterReader r) {\n    char c = r.consume();\n    switch(c) {\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case '\\f':\n        case ' ':\n            // ignore whitespace\n            break;\n        case '/':\n            t.transition(SelfClosingStartTag);\n            break;\n        // intended fall through as if >\n        case '>':\n            t.emitTagPending();\n            t.transition(Data);\n            break;\n        case nullChar:\n            t.error(this);\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n            break;\n        case eof:\n            t.eofError(this);\n            t.transition(Data);\n            break;\n        case '\"':\n        case '\\'':\n        case '<':\n        case '=':\n            t.error(this);\n            t.tagPending.newAttribute();\n            t.tagPending.appendAttributeName(c);\n            t.transition(AttributeName);\n            break;\n        default:\n            // A-Z, anything else\n            t.tagPending.newAttribute();\n            r.unconsume();\n            t.transition(AttributeName);\n    }\n}", "method_range": "552-593", "fault_locations": "563,564,581"}}