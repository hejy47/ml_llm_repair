{"com.google.javascript.jscomp.TypedScopeCreator.isQualifiedNameInferred": {"buggy_content": "private boolean isQualifiedNameInferred(String qName, Node n, JSDocInfo info, Node rhsValue, JSType valueType) {\n    if (valueType == null) {\n        return true;\n    }\n    // Prototypes of constructors and interfaces are always declared.\n    if (qName != null && qName.endsWith(\".prototype\")) {\n        return false;\n    }\n    boolean inferred = true;\n    if (info != null) {\n        inferred = !(info.hasType() || info.hasEnumParameterType() || (isConstantSymbol(info, n) && valueType != null && !valueType.isUnknownType()) || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n    }\n    if (inferred && rhsValue != null && rhsValue.isFunction()) {\n        if (info != null) {\n            return false;\n        } else if (!scope.isDeclared(qName, false) && n.isUnscopedQualifiedName()) {\n            // Check if this is in a conditional block.\n            // Functions assigned in conditional blocks are inferred.\n            for (Node current = n.getParent(); !(current.isScript() || current.isFunction()); current = current.getParent()) {\n                if (NodeUtil.isControlStructure(current)) {\n                    return true;\n                }\n            }\n            // Check if this is assigned in an inner scope.\n            // Functions assigned in inner scopes are inferred.\n            AstFunctionContents contents = getFunctionAnalysisResults(scope.getRootNode());\n            if (contents == null || !contents.getEscapedQualifiedNames().contains(qName)) {\n                return false;\n            }\n        }\n    }\n    return inferred;\n}", "method_range": "1661-1709", "fault_locations": "1669,1670,1671"}}