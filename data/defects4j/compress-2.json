{"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry": {"buggy_content": "public ArArchiveEntry getNextArEntry() throws IOException {\n    // hit EOF before previous entry was complete\n    // TODO: throw an exception instead?\n    if (offset == 0) {\n        final byte[] expected = ArArchiveEntry.HEADER.getBytes();\n        final byte[] realized = new byte[expected.length];\n        final int read = read(realized);\n        if (read != expected.length) {\n            throw new IOException(\"failed to read header\");\n        }\n        for (int i = 0; i < expected.length; i++) {\n            if (expected[i] != realized[i]) {\n                throw new IOException(\"invalid header \" + new String(realized));\n            }\n        }\n    }\n    // hit eof\n    if (input.available() == 0) {\n        return null;\n    }\n    if (offset % 2 != 0) {\n        read();\n    }\n    final byte[] name = new byte[16];\n    final byte[] lastmodified = new byte[12];\n    final byte[] userid = new byte[6];\n    final byte[] groupid = new byte[6];\n    final byte[] filemode = new byte[8];\n    final byte[] length = new byte[10];\n    read(name);\n    read(lastmodified);\n    read(userid);\n    read(groupid);\n    read(filemode);\n    read(length);\n    {\n        final byte[] expected = ArArchiveEntry.TRAILER.getBytes();\n        final byte[] realized = new byte[expected.length];\n        final int read = read(realized);\n        if (read != expected.length) {\n            throw new IOException(\"failed to read entry header\");\n        }\n        for (int i = 0; i < expected.length; i++) {\n            if (expected[i] != realized[i]) {\n                throw new IOException(\"invalid entry header. not read the content?\");\n            }\n        }\n    }\n    return new ArArchiveEntry(new String(name).trim(), Long.parseLong(new String(length).trim()));\n}", "method_range": "59-117", "fault_locations": "59,60,61,62,76,77,78,83,84,85,110,111,112,113,114"}, "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close": {"buggy_content": "public void close() throws IOException {\n    if (!closed) {\n        closed = true;\n        input.close();\n    }\n}", "method_range": "124-129", "fault_locations": "124,125,127,128"}, "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read": {"buggy_content": "public int read() throws IOException {\n    final int ret = input.read();\n    offset += (ret > 0 ? 1 : 0);\n    return ret;\n}", "method_range": "131-135", "fault_locations": "132,133,134,135"}}