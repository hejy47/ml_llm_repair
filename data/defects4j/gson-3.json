{"com.google.gson.internal.ConstructorConstructor.newDefaultImplementationConstructor": {"buggy_content": "// use runtime checks to guarantee that 'T' is what it is\n@SuppressWarnings(\"unchecked\")\nprivate <T> ObjectConstructor<T> newDefaultImplementationConstructor(final Type type, Class<? super T> rawType) {\n    if (Collection.class.isAssignableFrom(rawType)) {\n        if (SortedSet.class.isAssignableFrom(rawType)) {\n            return new ObjectConstructor<T>() {\n\n                @Override\n                public T construct() {\n                    return (T) new TreeSet<Object>();\n                }\n            };\n        } else if (EnumSet.class.isAssignableFrom(rawType)) {\n            return new ObjectConstructor<T>() {\n\n                @SuppressWarnings(\"rawtypes\")\n                @Override\n                public T construct() {\n                    if (type instanceof ParameterizedType) {\n                        Type elementType = ((ParameterizedType) type).getActualTypeArguments()[0];\n                        if (elementType instanceof Class) {\n                            return (T) EnumSet.noneOf((Class) elementType);\n                        } else {\n                            throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n                        }\n                    } else {\n                        throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());\n                    }\n                }\n            };\n        } else if (Set.class.isAssignableFrom(rawType)) {\n            return new ObjectConstructor<T>() {\n\n                @Override\n                public T construct() {\n                    return (T) new LinkedHashSet<Object>();\n                }\n            };\n        } else if (Queue.class.isAssignableFrom(rawType)) {\n            return new ObjectConstructor<T>() {\n\n                @Override\n                public T construct() {\n                    return (T) new LinkedList<Object>();\n                }\n            };\n        } else {\n            return new ObjectConstructor<T>() {\n\n                @Override\n                public T construct() {\n                    return (T) new ArrayList<Object>();\n                }\n            };\n        }\n    }\n    if (Map.class.isAssignableFrom(rawType)) {\n        if (SortedMap.class.isAssignableFrom(rawType)) {\n            return new ObjectConstructor<T>() {\n\n                @Override\n                public T construct() {\n                    return (T) new TreeMap<Object, Object>();\n                }\n            };\n        } else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType) type).getActualTypeArguments()[0]).getRawType()))) {\n            return new ObjectConstructor<T>() {\n\n                @Override\n                public T construct() {\n                    return (T) new LinkedHashMap<Object, Object>();\n                }\n            };\n        } else {\n            return new ObjectConstructor<T>() {\n\n                @Override\n                public T construct() {\n                    return (T) new LinkedTreeMap<String, Object>();\n                }\n            };\n        }\n    }\n    return null;\n}", "method_range": "127-198", "fault_locations": "175"}}