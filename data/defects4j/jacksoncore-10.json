{"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findOffsetForAdd": {"buggy_content": "private int _findOffsetForAdd(int hash) {\n    // first, check the primary:\n    int offset = _calcOffset(hash);\n    final int[] hashArea = _hashArea;\n    if (hashArea[offset + 3] == 0) {\n        //System.err.printf(\" PRImary slot #%d, hash %X\\n\", (offset>>2), hash & 0x7F);\n        return offset;\n    }\n    // then secondary\n    int offset2 = _secondaryStart + ((offset >> 3) << 2);\n    if (hashArea[offset2 + 3] == 0) {\n        //System.err.printf(\" SECondary slot #%d (start x%X), hash %X\\n\",(offset >> 3), _secondaryStart, (hash & 0x7F));\n        return offset2;\n    }\n    // if not, tertiary?\n    offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);\n    final int bucketSize = (1 << _tertiaryShift);\n    for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4) {\n        if (hashArea[offset2 + 3] == 0) {\n            //System.err.printf(\" TERtiary slot x%X (from x%X, start x%X), hash %X.\\n\", offset2, ((offset >> (_tertiaryShift + 2)) << _tertiaryShift), _tertiaryStart, (hash & 0x7F));\n            return offset2;\n        }\n    }\n    // and if even tertiary full, append at the end of spill area\n    offset = _spilloverEnd;\n    _spilloverEnd += 4;\n    //System.err.printf(\" SPIll-over at x%X; start x%X; end x%X, hash %X\\n\", offset, _spilloverStart(), _hashArea.length, (hash & 0x7F));\n    // one caveat: in the unlikely event if spill-over filling up,\n    // check if that could be considered a DoS attack; handle appropriately\n    // (NOTE: approximate for now; we could verify details if that becomes necessary)\n        if (_spilloverEnd >= hashArea.length) {\n        if (_failOnDoS) {\n            _reportTooManyCollisions();\n        }\n        // and if we didn't fail, we'll simply force rehash for next add\n        // (which, in turn, may double up or nuke contents, depending on size etc)\n        _needRehash = true;\n    }\n    return offset;\n}", "method_range": "887-934", "fault_locations": "925"}, "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash": {"buggy_content": "public int calcHash(int q1) {\n    int hash = q1 ^ _seed;\n        // to xor hi- and low- 16-bits\n    hash += (hash >>> 16);\n    hash ^= (hash >>> 12);\n    return hash;\n}", "method_range": "975-986", "fault_locations": "982,983,984"}}