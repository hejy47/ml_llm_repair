{"org.apache.commons.math.linear.SingularValueDecompositionImpl.getU": {"buggy_content": "public RealMatrix getU() throws InvalidMatrixException {\n    if (cachedU == null) {\n        final int p = singularValues.length;\n        if (m >= n) {\n            // the tridiagonal matrix is Bt.B, where B is upper bidiagonal\n            final RealMatrix e = eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);\n            final double[][] eData = e.getData();\n            final double[][] wData = new double[m][p];\n            double[] ei1 = eData[0];\n            for (int i = 0; i < p - 1; ++i) {\n                // compute W = B.E.S^(-1) where E is the eigenvectors matrix\n                final double mi = mainBidiagonal[i];\n                final double[] ei0 = ei1;\n                final double[] wi = wData[i];\n                ei1 = eData[i + 1];\n                final double si = secondaryBidiagonal[i];\n                for (int j = 0; j < p; ++j) {\n                    wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                }\n            }\n            for (int j = 0; j < p; ++j) {\n                wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];\n            }\n            for (int i = p; i < m; ++i) {\n                wData[i] = new double[p];\n            }\n            cachedU = transformer.getU().multiply(MatrixUtils.createRealMatrix(wData));\n        } else {\n            // the tridiagonal matrix is B.Bt, where B is lower bidiagonal\n            final RealMatrix e = eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);\n            cachedU = transformer.getU().multiply(e);\n        }\n    }\n    // return the cached matrix\n    return cachedU;\n}", "method_range": "153-198", "fault_locations": "162,164,165,166,168,169,173,174,175,176,178"}, "org.apache.commons.math.linear.SingularValueDecompositionImpl.getV": {"buggy_content": "public RealMatrix getV() throws InvalidMatrixException {\n    if (cachedV == null) {\n        final int p = singularValues.length;\n        if (m >= n) {\n            // the tridiagonal matrix is Bt.B, where B is upper bidiagonal\n            final RealMatrix e = eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);\n            cachedV = transformer.getV().multiply(e);\n        } else {\n            // the tridiagonal matrix is B.Bt, where B is lower bidiagonal\n            // compute W = Bt.E.S^(-1) where E is the eigenvectors matrix\n            final RealMatrix e = eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);\n            final double[][] eData = e.getData();\n            final double[][] wData = new double[n][p];\n            double[] ei1 = eData[0];\n            for (int i = 0; i < p - 1; ++i) {\n                final double mi = mainBidiagonal[i];\n                final double[] ei0 = ei1;\n                final double[] wi = wData[i];\n                ei1 = eData[i + 1];\n                final double si = secondaryBidiagonal[i];\n                for (int j = 0; j < p; ++j) {\n                    wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                }\n            }\n            for (int j = 0; j < p; ++j) {\n                wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];\n            }\n            for (int i = p; i < n; ++i) {\n                wData[i] = new double[p];\n            }\n            cachedV = transformer.getV().multiply(MatrixUtils.createRealMatrix(wData));\n        }\n    }\n    // return the cached matrix\n    return cachedV;\n}", "method_range": "233-277", "fault_locations": "243,244,246,247,248,249,250,252,254,255,256,257,261,263"}}