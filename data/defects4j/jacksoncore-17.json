{"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw": {"buggy_content": "@Override\npublic void writeRaw(String text, int offset, int len) throws IOException {\n    final char[] buf = _charBuffer;\n    // minor optimization: see if we can just get and copy\n    // If not, need segmented approach. For speed, let's also use input buffer\n    // size that is guaranteed to fit in output buffer; each char can expand to\n    // at most 3 bytes, so at most 1/3 of buffer size.\n    while (len > 0) {\n        int len2 = Math.min(buf.length, len);\n        text.getChars(offset, offset + len2, buf, 0);\n        writeRaw(buf, 0, len2);\n        // If this is NOT the last segment and if the last character looks like\n        // split surrogate second half, drop it\n        offset += len2;\n        len -= len2;\n    }\n}", "method_range": "522-542", "fault_locations": "527,528,531,532,534,535,536,537"}, "com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar": {"buggy_content": "private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {\n    // Let's handle surrogates gracefully (as 4 byte output):\n    if (ch >= SURR1_FIRST) {\n        if (ch <= SURR2_LAST) {\n            // yes, outside of BMP\n            // Do we have second part?\n            if (inputOffset >= inputEnd || cbuf == null) {\n                // nope... have to note down\n                _reportError(\"Split surrogate on writeRaw() input (last character)\");\n            }\n            _outputSurrogates(ch, cbuf[inputOffset]);\n            return inputOffset + 1;\n        }\n    }\n    final byte[] bbuf = _outputBuffer;\n    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));\n    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));\n    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n    return inputOffset;\n}", "method_range": "1879-1898", "fault_locations": "1884,1885,1887"}}