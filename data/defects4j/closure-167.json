{"com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseEquality": {"buggy_content": "private FlowScope caseEquality(Node left, Node right, FlowScope blindScope, Function<TypePair, TypePair> merging) {\n    // left type\n    JSType leftType = getTypeIfRefinable(left, blindScope);\n    boolean leftIsRefineable;\n    if (leftType != null) {\n        leftIsRefineable = true;\n    } else {\n        leftIsRefineable = false;\n        leftType = left.getJSType();\n    }\n    // right type\n    JSType rightType = getTypeIfRefinable(right, blindScope);\n    boolean rightIsRefineable;\n    if (rightType != null) {\n        rightIsRefineable = true;\n    } else {\n        rightIsRefineable = false;\n        rightType = right.getJSType();\n    }\n    // merged types\n    TypePair merged = merging.apply(new TypePair(leftType, rightType));\n    // creating new scope\n    if (merged != null) {\n        return maybeRestrictTwoNames(blindScope, left, leftIsRefineable, merged.typeA, right, rightIsRefineable, merged.typeB);\n    }\n    return blindScope;\n}", "method_range": "272-305", "fault_locations": "301,302"}, "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseAndOrNotShortCircuiting": {"buggy_content": "private FlowScope caseAndOrNotShortCircuiting(Node left, Node right, FlowScope blindScope, boolean condition) {\n    // left type\n    JSType leftType = getTypeIfRefinable(left, blindScope);\n    boolean leftIsRefineable;\n    if (leftType != null) {\n        leftIsRefineable = true;\n    } else {\n        leftIsRefineable = false;\n        leftType = left.getJSType();\n        blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);\n    }\n    // restricting left type\n    JSType restrictedLeftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);\n    if (restrictedLeftType == null) {\n        return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);\n    }\n    // right type\n    JSType rightType = getTypeIfRefinable(right, blindScope);\n    boolean rightIsRefineable;\n    if (rightType != null) {\n        rightIsRefineable = true;\n    } else {\n        rightIsRefineable = false;\n        rightType = right.getJSType();\n        blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);\n    }\n    if (condition) {\n        JSType restrictedRightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);\n        // creating new scope\n        return maybeRestrictTwoNames(blindScope, left, leftIsRefineable, restrictedLeftType, right, rightIsRefineable, restrictedRightType);\n    }\n    return blindScope;\n}", "method_range": "307-352", "fault_locations": "345,346,348,349"}, "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.maybeRestrictName": {"buggy_content": "private FlowScope maybeRestrictName(FlowScope blindScope, Node node, JSType originalType, JSType restrictedType) {\n    if (restrictedType != null && !restrictedType.equals(originalType)) {\n        FlowScope informed = blindScope.createChildFlowScope();\n        declareNameInScope(informed, node, restrictedType);\n        return informed;\n    }\n    return blindScope;\n}", "method_range": "392-400", "fault_locations": "394"}, "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.maybeRestrictTwoNames": {"buggy_content": "private FlowScope maybeRestrictTwoNames(FlowScope blindScope, Node left, boolean leftIsRefineable, JSType restrictedLeftType, Node right, boolean rightIsRefineable, JSType restrictedRightType) {\n    boolean shouldRefineLeft = leftIsRefineable && restrictedLeftType != null;\n    boolean shouldRefineRight = rightIsRefineable && restrictedRightType != null;\n    if (shouldRefineLeft || shouldRefineRight) {\n        FlowScope informed = blindScope.createChildFlowScope();\n        if (shouldRefineLeft) {\n            declareNameInScope(informed, left, restrictedLeftType);\n        }\n        if (shouldRefineRight) {\n            declareNameInScope(informed, right, restrictedRightType);\n        }\n        return informed;\n    }\n    return blindScope;\n}", "method_range": "405-424", "fault_locations": "407,408,410,412,420,421"}, "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseNameOrGetProp": {"buggy_content": "private FlowScope caseNameOrGetProp(Node name, FlowScope blindScope, boolean outcome) {\n    JSType type = getTypeIfRefinable(name, blindScope);\n    if (type != null) {\n        JSType restrictedType = type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n        FlowScope informed = blindScope.createChildFlowScope();\n        declareNameInScope(informed, name, restrictedType);\n        return informed;\n    }\n    return blindScope;\n}", "method_range": "426-437", "fault_locations": "430,431,432,433,434"}, "com.google.javascript.rhino.jstype.JSType.getRestrictedTypeGivenToBooleanOutcome": {"buggy_content": "public JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome) {\n    BooleanLiteralSet literals = getPossibleToBooleanOutcomes();\n    if (literals.contains(outcome)) {\n        return this;\n    } else {\n        return getNativeType(JSTypeNative.NO_TYPE);\n    }\n}", "method_range": "882-890", "fault_locations": "882,883"}}