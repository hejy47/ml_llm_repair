{"org.apache.commons.math3.util.FastMath.cosh": {"buggy_content": "public static double cosh(double x) {\n    if (x != x) {\n        return x;\n    }\n    // cosh[z] = (exp(z) + exp(-z))/2\n    // for numbers with magnitude 20 or so,\n    // exp(-z) can be ignored in comparison with exp(z)\n    if (x > 20) {\n        // Avoid overflow (MATH-905).\n        return 0.5 * exp(x);\n    }\n    if (x < -20) {\n        // Avoid overflow (MATH-905).\n        return 0.5 * exp(-x);\n    }\n    final double[] hiPrec = new double[2];\n    if (x < 0.0) {\n        x = -x;\n    }\n    exp(x, 0.0, hiPrec);\n    double ya = hiPrec[0] + hiPrec[1];\n    double yb = -(ya - hiPrec[0] - hiPrec[1]);\n    double temp = ya * HEX_40000000;\n    double yaa = ya + temp - temp;\n    double yab = ya - yaa;\n    // recip = 1/y\n    double recip = 1.0 / ya;\n    temp = recip * HEX_40000000;\n    double recipa = recip + temp - temp;\n    double recipb = recip - recipa;\n    // Correct for rounding in division\n    recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;\n    // Account for yb\n    recipb += -yb * recip * recip;\n    // y = y + 1/y\n    temp = ya + recipa;\n    yb += -(temp - ya - recipa);\n    ya = temp;\n    temp = ya + recipb;\n    yb += -(temp - ya - recipb);\n    ya = temp;\n    double result = ya + yb;\n    result *= 0.5;\n    return result;\n}", "method_range": "383-437", "fault_locations": "393,394,395,397,398,399"}, "org.apache.commons.math3.util.FastMath.sinh": {"buggy_content": "public static double sinh(double x) {\n    boolean negate = false;\n    if (x != x) {\n        return x;\n    }\n    // sinh[z] = (exp(z) - exp(-z) / 2\n    // for values of z larger than about 20,\n    // exp(-z) can be ignored in comparison with exp(z)\n    if (x > 20) {\n        // Avoid overflow (MATH-905).\n        return 0.5 * exp(x);\n    }\n    if (x < -20) {\n        // Avoid overflow (MATH-905).\n        return -0.5 * exp(-x);\n    }\n    if (x == 0) {\n        return x;\n    }\n    if (x < 0.0) {\n        x = -x;\n        negate = true;\n    }\n    double result;\n    if (x > 0.25) {\n        double[] hiPrec = new double[2];\n        exp(x, 0.0, hiPrec);\n        double ya = hiPrec[0] + hiPrec[1];\n        double yb = -(ya - hiPrec[0] - hiPrec[1]);\n        double temp = ya * HEX_40000000;\n        double yaa = ya + temp - temp;\n        double yab = ya - yaa;\n        // recip = 1/y\n        double recip = 1.0 / ya;\n        temp = recip * HEX_40000000;\n        double recipa = recip + temp - temp;\n        double recipb = recip - recipa;\n        // Correct for rounding in division\n        recipb += (1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;\n        // Account for yb\n        recipb += -yb * recip * recip;\n        recipa = -recipa;\n        recipb = -recipb;\n        // y = y + 1/y\n        temp = ya + recipa;\n        yb += -(temp - ya - recipa);\n        ya = temp;\n        temp = ya + recipb;\n        yb += -(temp - ya - recipb);\n        ya = temp;\n        result = ya + yb;\n        result *= 0.5;\n    } else {\n        double[] hiPrec = new double[2];\n        expm1(x, hiPrec);\n        double ya = hiPrec[0] + hiPrec[1];\n        double yb = -(ya - hiPrec[0] - hiPrec[1]);\n                double denom = 1.0 + ya;\n        double denomr = 1.0 / denom;\n        double denomb = -(denom - 1.0 - ya) + yb;\n        double ratio = ya * denomr;\n        double temp = ratio * HEX_40000000;\n        double ra = ratio + temp - temp;\n        double rb = ratio - ra;\n        temp = denom * HEX_40000000;\n        double za = denom + temp - temp;\n        double zb = denom - za;\n        rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;\n        // Adjust for yb\n        // numerator\n        rb += yb * denomr;\n        // denominator\n        rb += -ya * denomb * denomr * denomr;\n        // y = y - 1/y\n        temp = ya + ra;\n        yb += -(temp - ya - ra);\n        ya = temp;\n        temp = ya + rb;\n        yb += -(temp - ya - rb);\n        ya = temp;\n        result = ya + yb;\n        result *= 0.5;\n    }\n    if (negate) {\n        result = -result;\n    }\n    return result;\n}", "method_range": "443-553", "fault_locations": "453,454,455,456,457,458,459"}}