{"com.google.gson.TypeInfoFactory.getActualType": {"buggy_content": "private static Type getActualType(Type typeToEvaluate, Type parentType, Class<?> rawParentClass) {\n    if (typeToEvaluate instanceof Class<?>) {\n        return typeToEvaluate;\n    } else if (typeToEvaluate instanceof ParameterizedType) {\n        ParameterizedType castedType = (ParameterizedType) typeToEvaluate;\n        Type owner = castedType.getOwnerType();\n        Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass);\n        Type rawType = castedType.getRawType();\n        return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner);\n    } else if (typeToEvaluate instanceof GenericArrayType) {\n        GenericArrayType castedType = (GenericArrayType) typeToEvaluate;\n        Type componentType = castedType.getGenericComponentType();\n        Type actualType = getActualType(componentType, parentType, rawParentClass);\n        if (componentType.equals(actualType)) {\n            return castedType;\n        }\n        return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType);\n    } else if (typeToEvaluate instanceof TypeVariable<?>) {\n        if (parentType instanceof ParameterizedType) {\n            // The class definition has the actual types used for the type variables.\n            // Find the matching actual type for the Type Variable used for the field.\n            // For example, class Foo<A> { A a; }\n            // new Foo<Integer>(); defines the actual type of A to be Integer.\n            // So, to find the type of the field a, we will have to look at the class'\n            // actual type arguments.\n            TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;\n            TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();\n            ParameterizedType objParameterizedType = (ParameterizedType) parentType;\n            int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);\n            Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();\n            return actualTypeArguments[indexOfActualTypeArgument];\n        }\n        throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType + \".\\n Are you missing the use of TypeToken idiom?\\n See \" + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\");\n    } else if (typeToEvaluate instanceof WildcardType) {\n        WildcardType castedType = (WildcardType) typeToEvaluate;\n        return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);\n    } else {\n        throw new IllegalArgumentException(\"Type \\'\" + typeToEvaluate + \"\\' is not a Class, \" + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\");\n    }\n}", "method_range": "58-107", "fault_locations": "92,93,94,107"}}