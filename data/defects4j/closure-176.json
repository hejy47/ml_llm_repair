{"com.google.javascript.jscomp.TypeInference.updateScopeForTypeChange": {"buggy_content": "private void updateScopeForTypeChange(FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch(left.getType()) {\n        case Token.NAME:\n            String varName = left.getString();\n            Var var = syntacticScope.getVar(varName);\n            boolean isVarDeclaration = left.hasChildren();\n            // When looking at VAR initializers for declared VARs, we tend\n            // to use the declared type over the type it's being\n            // initialized to in the global scope.\n            //\n            // For example,\n            // /** @param {number} */ var f = goog.abstractMethod;\n            // it's obvious that the programmer wants you to use\n            // the declared function signature, not the inferred signature.\n            //\n            // Or,\n            // /** @type {Object.<string>} */ var x = {};\n            // the one-time anonymous object on the right side\n            // is as narrow as it can possibly be, but we need to make\n            // sure we back-infer the <string> element constraint on\n            // the left hand side, so we use the left hand side.\n            boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n            // Makes it easier to check for NPEs.\n            // TODO(nicksantos): This might be a better check once we have\n            // back-inference of object/array constraints.  It will probably\n            // introduce more type warnings.  It uses the result type iff it's\n            // strictly narrower than the declared var type.\n            //\n            //boolean isVarTypeBetter = isVarDeclaration &&\n            //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)\n            //     || !resultType.isSubtype(varType));\n            if (isVarTypeBetter) {\n                redeclareSimpleVar(scope, left, resultType);\n            }\n            left.setJSType(isVarDeclaration || leftType == null ? resultType : null);\n            if (var != null && var.isTypeInferred()) {\n                JSType oldType = var.getType();\n                var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType));\n            }\n            break;\n        case Token.GETPROP:\n            String qualifiedName = left.getQualifiedName();\n            if (qualifiedName != null) {\n                scope.inferQualifiedSlot(left, qualifiedName, leftType == null ? unknownType : leftType, resultType);\n            }\n            left.setJSType(resultType);\n            ensurePropertyDefined(left, resultType);\n            break;\n    }\n}", "method_range": "523-585", "fault_locations": "530,546,547,548,559,560,561,562,564,565"}}