{"com.google.javascript.jscomp.InlineVariables.canInline": {"buggy_content": "private boolean canInline(Reference declaration, Reference initialization, Reference reference) {\n    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {\n        return false;\n    }\n    // If the value is read more than once, skip it.\n    // VAR declarations and EXPR_RESULT don't need the value, but other\n    // ASSIGN expressions parents do.\n    if (declaration != initialization && !initialization.getGrandparent().isExprResult()) {\n        return false;\n    }\n    // Be very conservative and do no cross control structures or\n    // scope boundaries\n    if (declaration.getBasicBlock() != initialization.getBasicBlock() || declaration.getBasicBlock() != reference.getBasicBlock()) {\n        return false;\n    }\n    // Do not inline into a call node. This would change\n    // the context in which it was being called. For example,\n    //   var a = b.c;\n    //   a();\n    // should not be inlined, because it calls a in the context of b\n    // rather than the context of the window.\n    //   var a = b.c;\n    //   f(a)\n    // is ok.\n    Node value = initialization.getAssignedValue();\n    Preconditions.checkState(value != null);\n    if (value.isGetProp() && reference.getParent().isCall() && reference.getParent().getFirstChild() == reference.getNode()) {\n        return false;\n    }\n    if (value.isFunction()) {\n        Node callNode = reference.getParent();\n        if (reference.getParent().isCall()) {\n            CodingConvention convention = compiler.getCodingConvention();\n            // Bug 2388531: Don't inline subclass definitions into class defining\n            // calls as this confused class removing logic.\n            SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);\n            if (relationship != null) {\n                return false;\n            }\n            // issue 668: Don't inline singleton getter methods\n            // calls as this confused class removing logic.\n        }\n    }\n    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n}", "method_range": "519-580", "fault_locations": "574,575"}}