{"com.google.javascript.jscomp.MethodCompilerPass.addPossibleSignature": {"buggy_content": "private void addPossibleSignature(String name, Node node, NodeTraversal t) {\n    boolean signatureAdded = false;\n    if (node.getType() == Token.FUNCTION) {\n        // The node we're looking at is a function, so we can add it directly\n        addSignature(name, node, t.getSourceName());\n        signatureAdded = true;\n    } else if (node.getType() == Token.NAME) {\n        String functionName = node.getString();\n        Scope.Var v = t.getScope().getVar(functionName);\n        if (v == null) {\n            if (compiler.isIdeMode()) {\n                return;\n            } else {\n                throw new IllegalStateException(\"VarCheck should have caught this undefined function\");\n            }\n        }\n        Node function = v.getInitialValue();\n        if (function != null && function.getType() == Token.FUNCTION) {\n            addSignature(name, function, v.getInputName());\n            signatureAdded = true;\n        }\n    }\n    if (!signatureAdded) {\n        nonMethodProperties.add(name);\n    }\n}", "method_range": "101-128", "fault_locations": "102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125"}, "com.google.javascript.jscomp.RenameVars.visit": {"buggy_content": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() != Token.NAME) {\n        return;\n    }\n    String name = n.getString();\n    // Ignore anonymous functions\n    if (name.length() == 0) {\n        return;\n    }\n    // Is this local or Global?\n    Scope.Var var = t.getScope().getVar(name);\n    boolean local = (var != null) && var.isLocal();\n    // Are we renaming global variables?\n    if (!local && localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n    }\n    // Are we renaming anonymous function names?\n    if (preserveAnonymousFunctionNames && var != null && NodeUtil.isAnonymousFunction(var.getParentNode())) {\n        reservedNames.add(name);\n        return;\n    }\n    // Check if we can rename this.\n    if (!okToRenameVar(name, local)) {\n        // Blindly de-uniquify for the Prototype library for issue 103.\n        return;\n    }\n    if (isExternsPass_) {\n        // Keep track of extern globals.\n        if (!local) {\n            externNames.add(name);\n        }\n        return;\n    }\n    if (local) {\n        // Local var: assign a new name\n        String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n        incCount(tempName, null);\n        localNameNodes.add(n);\n        localTempNames.add(tempName);\n    } else if (var != null) {\n        // Not an extern\n        // If it's global, increment global count\n        incCount(name, var.input);\n        globalNameNodes.add(n);\n    }\n}", "method_range": "170-226", "fault_locations": "202,203,204"}}