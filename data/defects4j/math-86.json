{"org.apache.commons.math.linear.CholeskyDecompositionImpl.CholeskyDecompositionImpl": {"buggy_content": "public CholeskyDecompositionImpl(final RealMatrix matrix, final double relativeSymmetryThreshold, final double absolutePositivityThreshold) throws NonSquareMatrixException, NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());\n    }\n    final int order = matrix.getRowDimension();\n    lTData = matrix.getData();\n    cachedL = null;\n    cachedLT = null;\n    // check the matrix before transformation\n    for (int i = 0; i < order; ++i) {\n        final double[] lI = lTData[i];\n        if (lTData[i][i] < absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        // check off-diagonal elements (and reset them to 0)\n        for (int j = i + 1; j < order; ++j) {\n            final double[] lJ = lTData[j];\n            final double lIJ = lI[j];\n            final double lJI = lJ[i];\n            final double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n            if (Math.abs(lIJ - lJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n            lJ[i] = 0;\n        }\n    }\n    // transform the matrix\n    for (int i = 0; i < order; ++i) {\n        final double[] ltI = lTData[i];\n        // check diagonal element\n        ltI[i] = Math.sqrt(ltI[i]);\n        final double inverse = 1.0 / ltI[i];\n        for (int q = order - 1; q > i; --q) {\n            ltI[q] *= inverse;\n            final double[] ltQ = lTData[q];\n            for (int p = q; p < order; ++p) {\n                ltQ[p] -= ltI[q] * ltI[p];\n            }\n        }\n    }\n}", "method_range": "93-151", "fault_locations": "114,115,138"}}