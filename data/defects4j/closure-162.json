{"com.google.javascript.jscomp.ScopedAliases.enterScope": {"buggy_content": "@Override\npublic void enterScope(NodeTraversal t) {\n    Node n = t.getCurrentNode().getParent();\n    if (n != null && isCallToScopeMethod(n)) {\n        transformation = transformationHandler.logAliasTransformation(n.getSourceFileName(), getSourceRegion(n));\n    }\n}", "method_range": "220-227", "fault_locations": "225,226"}, "com.google.javascript.jscomp.ScopedAliases.visit": {"buggy_content": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (isCallToScopeMethod(n)) {\n        validateScopeCall(t, n, n.getParent());\n    }\n    // Validate the top level of the goog.scope block.\n    if (t.getScopeDepth() == 2) {\n        int type = n.getType();\n        if (type == Token.NAME && parent.getType() == Token.VAR) {\n            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n                String name = n.getString();\n                Var aliasVar = t.getScope().getVar(name);\n                aliases.put(name, aliasVar);\n                aliasDefinitionsInOrder.add(n);\n                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                transformation.addAlias(name, qualifiedName);\n                // Return early, to ensure that we don't record a definition\n                // twice.\n                return;\n            } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        }\n        if (type == Token.NAME && NodeUtil.isAssignmentOp(parent) && n == parent.getFirstChild()) {\n            report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n        }\n        if (type == Token.RETURN) {\n            report(t, n, GOOG_SCOPE_USES_RETURN);\n        } else if (type == Token.THIS) {\n            report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n        } else if (type == Token.THROW) {\n            report(t, n, GOOG_SCOPE_USES_THROW);\n        }\n    }\n    // Validate all descendent scopes of the goog.scope block.\n    if (t.getScopeDepth() >= 2) {\n        // Check if this name points to an alias.\n        if (n.getType() == Token.NAME) {\n            String name = n.getString();\n            Var aliasVar = aliases.get(name);\n            if (aliasVar != null && t.getScope().getVar(name) == aliasVar) {\n                // Note, to support the transitive case, it's important we don't\n                // clone aliasedNode here.  For example,\n                // var g = goog; var d = g.dom; d.createElement('DIV');\n                // The node in aliasedNode (which is \"g\") will be replaced in the\n                // changes pass above with \"goog\".  If we cloned here, we'd end up\n                // with <code>g.dom.createElement('DIV')</code>.\n                Node aliasedNode = aliasVar.getInitialValue();\n                aliasUsages.add(new AliasedNode(n, aliasedNode));\n            }\n        }\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null) {\n            for (Node node : info.getTypeNodes()) {\n                fixTypeNode(node);\n            }\n        }\n        // TODO(robbyw): Error for goog.scope not at root.\n    }\n}", "method_range": "297-367", "fault_locations": "302,303,304,307,308,309,310,311,312,313,315,316,317,322,323,324,325,326,327,342,343,344,345,346,355"}}