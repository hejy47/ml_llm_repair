{"com.fasterxml.jackson.databind.deser.impl.CreatorCollector.addDelegatingCreator": {"buggy_content": "public void addDelegatingCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] injectables) {\n    if (creator.getParameterType(0).isCollectionLikeType()) {\n        verifyNonDup(creator, C_ARRAY_DELEGATE, explicit);\n        _arrayDelegateArgs = injectables;\n    } else {\n        verifyNonDup(creator, C_DELEGATE, explicit);\n        _delegateArgs = injectables;\n    }\n}", "method_range": "161-171", "fault_locations": "165,166,167,168"}, "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.addPropertyCreator": {"buggy_content": "public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {\n    verifyNonDup(creator, C_PROPS, explicit);\n    // Better ensure we have no duplicate names either...\n    if (properties.length > 1) {\n        HashMap<String, Integer> names = new HashMap<String, Integer>();\n        for (int i = 0, len = properties.length; i < len; ++i) {\n            String name = properties[i].getName();\n                        if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n                continue;\n            }\n            Integer old = names.put(name, Integer.valueOf(i));\n            if (old != null) {\n                throw new IllegalArgumentException(\"Duplicate creator property \\\"\" + name + \"\\\" (index \" + old + \" vs \" + i + \")\");\n            }\n        }\n    }\n    _propertyBasedArgs = properties;\n}", "method_range": "173-195", "fault_locations": "173,174,176,191,192"}, "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.verifyNonDup": {"buggy_content": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n        boolean verify;\n        if ((_explicitCreators & mask) != 0) {\n            // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n            verify = true;\n        } else {\n            // otherwise only verify if neither explicitly annotated.\n            verify = !explicit;\n        }\n        // one more thing: ok to override in sub-class\n        if (verify && (oldOne.getClass() == newOne.getClass())) {\n            // [databind#667]: avoid one particular class of bogus problems\n            Class<?> oldType = oldOne.getRawParameterType(0);\n            Class<?> newType = newOne.getRawParameterType(0);\n            if (oldType == newType) {\n                throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex] + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n            }\n            // otherwise, which one to choose?\n            if (newType.isAssignableFrom(oldType)) {\n                // new type more generic, use old\n                return;\n            }\n            // new type more specific, use it\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}", "method_range": "299-341", "fault_locations": "299,305,306,310,326,327,332,334,335"}}