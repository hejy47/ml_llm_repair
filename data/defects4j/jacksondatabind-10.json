{"com.fasterxml.jackson.databind.ser.AnyGetterWriter.AnyGetterWriter": {"buggy_content": "@SuppressWarnings(\"unchecked\")\npublic AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) {\n    _accessor = accessor;\n    _property = property;\n    _mapSerializer = (MapSerializer) serializer;\n}", "method_range": "27-34", "fault_locations": "29,31,32,33"}, "com.fasterxml.jackson.databind.ser.AnyGetterWriter.getAndSerialize": {"buggy_content": "public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 23-Feb-2015, tatu: Nasty, but has to do (for now)\n    if (_mapSerializer != null) {\n        _mapSerializer.serializeFields((Map<?, ?>) value, gen, provider);\n        return;\n    }\n}", "method_range": "36-52", "fault_locations": "50,51"}, "com.fasterxml.jackson.databind.ser.AnyGetterWriter.getAndFilter": {"buggy_content": "public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception {\n    Object value = _accessor.getValue(bean);\n    if (value == null) {\n        return;\n    }\n    if (!(value instanceof Map<?, ?>)) {\n        throw new JsonMappingException(\"Value returned by 'any-getter' (\" + _accessor.getName() + \"()) not java.util.Map but \" + value.getClass().getName());\n    }\n    // 19-Oct-2014, tatu: Should we try to support @JsonInclude options here?\n    if (_mapSerializer != null) {\n        _mapSerializer.serializeFilteredFields((Map<?, ?>) value, gen, provider, filter, null);\n        return;\n    }\n    // ... not sure how custom handler would do it\n}", "method_range": "57-75", "fault_locations": "73,74"}, "com.fasterxml.jackson.databind.ser.AnyGetterWriter.resolve": {"buggy_content": "@SuppressWarnings(\"unchecked\")\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    // 05-Sep-2013, tatu: I _think_ this can be considered a primary property...\n    _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);\n}", "method_range": "78-83", "fault_locations": "80,81,82"}, "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer": {"buggy_content": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n    // 05-Jul-2012, tatu: ... but we should be able to just return \"unknown type\" serializer, right?\n    if (beanDesc.getBeanClass() == Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n        //            throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config = prov.getConfig();\n    BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    // First: any detectable (auto-detect, annotations) properties to serialize?\n    List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n    if (props == null) {\n        props = new ArrayList<BeanPropertyWriter>();\n    }\n    // [databind#638]: Allow injection of \"virtual\" properties:\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    // [JACKSON-440] Need to allow modification bean properties to serialize:\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    // Any properties to suppress?\n    props = filterBeanProperties(config, beanDesc, props);\n    // [JACKSON-440] Need to allow reordering of properties to serialize\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props = mod.orderProperties(config, beanDesc, props);\n        }\n    }\n        builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter = beanDesc.findAnyGetter();\n    if (anyGetter != null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType());\n        // copied from BasicSerializerFactory.buildMapSerializer():\n        boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType = type.getContentType();\n        TypeSerializer typeSer = createTypeSerializer(config, valueType);\n        // last 2 nulls; don't know key, value serializers (yet)\n        // 23-Feb-2015, tatu: As per [#705], need to support custom serializers\n        MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        // TODO: support '@JsonIgnoreProperties' with any setter?\n        // TODO: can we find full PropertyName?\n        PropertyName name = new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    // Next: need to gather view information, if any:\n    processViews(config, builder);\n    // Finally: let interested parties mess with the result bit more...\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder = mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n    if (ser == null) {\n        // If we get this far, there were no properties found, so no regular BeanSerializer\n        // would be constructed. But, couple of exceptions.\n        // First: if there are known annotations, just create 'empty bean' serializer\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}", "method_range": "334-424", "fault_locations": "395,396"}}