{"com.google.javascript.jscomp.PeepholeFoldConstants.tryFoldShift": {"buggy_content": "private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n        double result;\n        double lval = left.getDouble();\n        double rval = right.getDouble();\n        // check ranges.  We do not do anything that would clip the double to\n        // a 32-bit range, since the user likely does not intend that.\n        if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n        }\n        // only the lower 5 bits are used when shifting, so don't do anything\n        // if the shift amount is outside [0,32)\n        if (!(rval >= 0 && rval < 32)) {\n            error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n            return n;\n        }\n        // Convert the numbers to ints\n        int lvalInt = (int) lval;\n        if (lvalInt != lval) {\n            error(FRACTIONAL_BITWISE_OPERAND, left);\n            return n;\n        }\n        int rvalInt = (int) rval;\n        if (rvalInt != rval) {\n            error(FRACTIONAL_BITWISE_OPERAND, right);\n            return n;\n        }\n        switch(n.getType()) {\n            case Token.LSH:\n                result = lvalInt << rvalInt;\n                break;\n            case Token.RSH:\n                result = lvalInt >> rvalInt;\n                break;\n            case Token.URSH:\n                // JavaScript handles zero shifts on signed numbers differently than\n                // Java as an Java int can not represent the unsigned 32-bit number\n                // where JavaScript can so use a long here.\n                result = lvalInt >>> rvalInt;\n                break;\n            default:\n                throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType()));\n        }\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n        return newNumber;\n    }\n    return n;\n}", "method_range": "652-713", "fault_locations": "698"}}