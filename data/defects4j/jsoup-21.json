{"org.jsoup.select.QueryParser.parse": {"buggy_content": "Evaluator parse() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        // if starts with a combinator, use root as elements\n        evals.add(new StructuralEvaluator.Root());\n        combinator(tq.consume());\n    } else {\n        findElements();\n    }\n    while (!tq.isEmpty()) {\n        // hierarchy and extras\n        boolean seenWhite = tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            CombiningEvaluator.Or or = new CombiningEvaluator.Or(evals);\n            evals.clear();\n            evals.add(or);\n            while (!tq.isEmpty()) {\n                String subQuery = tq.chompTo(\",\");\n                or.add(parse(subQuery));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(' ');\n        } else {\n            // E.class, E#id, E[attr] etc. AND\n            // take next el, #. etc off queue\n            findElements();\n        }\n    }\n    if (evals.size() == 1)\n        return evals.get(0);\n    return new CombiningEvaluator.And(evals);\n}", "method_range": "44-79", "fault_locations": "58,59,60,61,62,63,64,65,66"}, "org.jsoup.select.QueryParser.combinator": {"buggy_content": "private void combinator(char combinator) {\n    tq.consumeWhitespace();\n    // support multi > childs\n    String subQuery = consumeSubQuery();\n    Evaluator e;\n    if (evals.size() == 1)\n        e = evals.get(0);\n    else\n        e = new CombiningEvaluator.And(evals);\n    evals.clear();\n    Evaluator f = parse(subQuery);\n    if (combinator == '>')\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediateParent(e)));\n    else if (combinator == ' ')\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.Parent(e)));\n    else if (combinator == '+')\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediatePreviousSibling(e)));\n    else if (combinator == '~')\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.PreviousSibling(e)));\n    else\n        throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n}", "method_range": "81-103", "fault_locations": "91,92"}}