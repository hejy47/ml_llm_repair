{"com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException": {"buggy_content": "private static boolean mayThrowException(Node n) {\n    switch(n.getType()) {\n        case Token.CALL:\n        case Token.GETPROP:\n        case Token.GETELEM:\n        case Token.THROW:\n        case Token.NEW:\n        case Token.ASSIGN:\n        case Token.INC:\n        case Token.DEC:\n            return true;\n        case Token.FUNCTION:\n            return false;\n    }\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {\n            return true;\n        }\n    }\n    return false;\n}", "method_range": "884-904", "fault_locations": "885,894"}, "com.google.javascript.jscomp.DisambiguateProperties.getTypeWithProperty": {"buggy_content": "@Override\npublic ObjectType getTypeWithProperty(String field, JSType type) {\n    if (!(type instanceof ObjectType)) {\n        if (type.autoboxesTo() != null) {\n            type = type.autoboxesTo();\n        } else {\n            return null;\n        }\n    }\n    // Ignore the prototype itself at all times.\n    if (\"prototype\".equals(field)) {\n        return null;\n    }\n    // We look up the prototype chain to find the highest place (if any) that\n    // this appears.  This will make references to overriden properties look\n    // like references to the initial property, so they are renamed alike.\n    ObjectType foundType = null;\n    ObjectType objType = ObjectType.cast(type);\n    while (objType != null && objType.getImplicitPrototype() != objType) {\n        if (objType.hasOwnProperty(field)) {\n            foundType = objType;\n        }\n        objType = objType.getImplicitPrototype();\n    }\n    // If the property does not exist on the referenced type but the original\n    // type is an object type, see if any subtype has the property.\n    // getGreatestSubtypeWithProperty does not guarantee that the property\n    // is defined on the returned type, it just indicates that it might be,\n    // so we have to double check.\n    return foundType;\n}", "method_range": "736-767", "fault_locations": "766"}}