{"com.google.javascript.jscomp.AmbiguateProperties.process": {"buggy_content": "public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n    NodeTraversal.traverse(compiler, root, new ProcessProperties());\n    Set<String> reservedNames = new HashSet<String>(externedNames.size() + quotedNames.size());\n    reservedNames.addAll(externedNames);\n    reservedNames.addAll(quotedNames);\n    int numRenamedPropertyNames = 0;\n    int numSkippedPropertyNames = 0;\n    Set<Property> propsByFreq = new TreeSet<Property>(FREQUENCY_COMPARATOR);\n    for (Property p : propertyMap.values()) {\n        if (!p.skipAmbiguating) {\n            ++numRenamedPropertyNames;\n            computeRelatedTypes(p.type);\n            propsByFreq.add(p);\n        } else {\n            ++numSkippedPropertyNames;\n            reservedNames.add(p.oldName);\n        }\n    }\n    PropertyGraph graph = new PropertyGraph(Lists.newLinkedList(propsByFreq));\n    GraphColoring<Property, Void> coloring = new GreedyGraphColoring<Property, Void>(graph, FREQUENCY_COMPARATOR);\n    int numNewPropertyNames = coloring.color();\n    NameGenerator nameGen = new NameGenerator(reservedNames, \"\", reservedCharacters);\n    for (int i = 0; i < numNewPropertyNames; ++i) {\n        colorMap.put(i, nameGen.generateNextName());\n    }\n    for (GraphNode<Property, Void> node : graph.getNodes()) {\n        node.getValue().newName = colorMap.get(node.getAnnotation().hashCode());\n        renamingMap.put(node.getValue().oldName, node.getValue().newName);\n    }\n    // Update the string nodes.\n    for (Node n : stringNodesToRename) {\n        String oldName = n.getString();\n        Property p = propertyMap.get(oldName);\n        if (p != null && p.newName != null) {\n            Preconditions.checkState(oldName.equals(p.oldName));\n            if (!p.newName.equals(oldName)) {\n                n.setString(p.newName);\n                compiler.reportCodeChange();\n            }\n        }\n    }\n    logger.info(\"Collapsed \" + numRenamedPropertyNames + \" properties into \" + numNewPropertyNames + \" and skipped renaming \" + numSkippedPropertyNames + \" properties.\");\n}", "method_range": "195-249", "fault_locations": "210"}, "com.google.javascript.jscomp.AmbiguateProperties.isIndependentOf": {"buggy_content": "public boolean isIndependentOf(Property prop) {\n    if (typesRelatedToSet.intersects(prop.typesSet)) {\n        return false;\n    }\n    return !getRelated(prop.type).intersects(typesInSet);\n}", "method_range": "352-357", "fault_locations": "354,355,356"}, "com.google.javascript.jscomp.AmbiguateProperties.addNode": {"buggy_content": "public void addNode(Property prop) {\n    typesInSet.or(prop.typesSet);\n    typesRelatedToSet.or(getRelated(prop.type));\n}", "method_range": "364-367", "fault_locations": "364,366"}, "com.google.javascript.jscomp.AmbiguateProperties.addNonUnionType": {"buggy_content": "private void addNonUnionType(JSType newType) {\n    if (skipAmbiguating || isInvalidatingType(newType)) {\n        skipAmbiguating = true;\n        return;\n    }\n    if (type == null) {\n        type = newType;\n    } else {\n        type = type.getLeastSupertype(newType);\n    }\n    typesSet.set(getIntForType(newType));\n}", "method_range": "588-600", "fault_locations": "589,590,594,595,596,597,599"}, "com.google.javascript.jscomp.TypedScopeCreator.findOverriddenFunction": {"buggy_content": "private FunctionType findOverriddenFunction(ObjectType ownerType, String propName) {\n    // First, check to see if the property is implemented\n    // on a superclass.\n    JSType propType = ownerType.getPropertyType(propName);\n    if (propType instanceof FunctionType) {\n        return (FunctionType) propType;\n    }\n    // If it's not, then check to see if it's implemented\n    // on an implemented interface.\n    return null;\n}", "method_range": "553-565", "fault_locations": "560,561,562"}}