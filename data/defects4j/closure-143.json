{"com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineReplacements": {"buggy_content": "@VisibleForTesting\nstatic void createDefineReplacements(List<String> definitions, CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n        String[] assignment = override.split(\"=\", 2);\n        String defName = assignment[0];\n        if (defName.length() > 0) {\n            if (assignment.length == 1) {\n                options.setDefineToBooleanLiteral(defName, true);\n                continue;\n            } else {\n                String defValue = assignment[1];\n                if (defValue.equals(\"true\")) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else if (defValue.equals(\"false\")) {\n                    options.setDefineToBooleanLiteral(defName, false);\n                    continue;\n                } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\''))) {\n                    // If the value starts and ends with a single quote,\n                    // we assume that it's a string.\n                    String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n                        options.setDefineToStringLiteral(defName, maybeStringVal);\n                        continue;\n                    }\n                } else {\n                    try {\n                        options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue));\n                        continue;\n                    } catch (NumberFormatException e) {\n                        // do nothing, it will be caught at the end\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"--define flag syntax invalid: \" + override);\n    }\n}", "method_range": "847-895", "fault_locations": "871"}, "com.google.javascript.jscomp.RemoveConstantExpressions.trySimplify": {"buggy_content": "private void trySimplify(Node parent, Node node) {\n    if (node.getType() != Token.EXPR_RESULT) {\n        return;\n    }\n    Node exprBody = node.getFirstChild();\n    if (!NodeUtil.nodeTypeMayHaveSideEffects(exprBody)) {\n        changeProxy.replaceWith(parent, node, getSideEffectNodes(exprBody));\n    }\n}", "method_range": "84-94", "fault_locations": "91"}}