{"com.google.javascript.jscomp.AbstractCommandLineRunner.setRunOptions": {"buggy_content": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.jsOutputFile = config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    options.sourceMapFormat = config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"' specified.\");\n        }\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}", "method_range": "193-257", "fault_locations": "197,198,199,200,201,202"}, "com.google.javascript.jscomp.AbstractCommandLineRunner.setSourceMapFormat": {"buggy_content": "CommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n    this.sourceMapFormat = format;\n    return this;\n}", "method_range": "1492-1495", "fault_locations": "1494,1495"}, "com.google.javascript.jscomp.AbstractCommandLineRunner.setJscompError": {"buggy_content": "CommandLineConfig setJscompError(List<String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}", "method_range": "1502-1506", "fault_locations": "1502,1503,1504,1505,1506"}, "com.google.javascript.jscomp.AbstractCommandLineRunner.setJscompWarning": {"buggy_content": "CommandLineConfig setJscompWarning(List<String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}", "method_range": "1508-1512", "fault_locations": "1508,1509,1510,1511,1512"}, "com.google.javascript.jscomp.AbstractCommandLineRunner.setJscompOff": {"buggy_content": "CommandLineConfig setJscompOff(List<String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}", "method_range": "1514-1518", "fault_locations": "1514,1515,1516"}, "com.google.javascript.jscomp.AbstractCommandLineRunner.setAcceptConstKeyword": {"buggy_content": "CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n    this.acceptConstKeyword = acceptConstKeyword;\n    return this;\n}", "method_range": "1607-1610", "fault_locations": "1607,1608,1609,1610"}, "com.google.javascript.jscomp.CommandLineRunner.processFlagFile": {"buggy_content": "private void processFlagFile(PrintStream err) throws CmdLineException, IOException {\n    List<String> argsInFile = Lists.newArrayList();\n    File flagFileInput = new File(flags.flag_file);\n    StringTokenizer tokenizer = new StringTokenizer(Files.toString(flagFileInput, Charset.defaultCharset()));\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken());\n    }\n    flags.flag_file = \"\";\n    List<String> processedFileArgs = processArgs(argsInFile.toArray(new String[] {}));\n    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n    // Currently we are not supporting this (prevent direct/indirect loops)\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}", "method_range": "470-493", "fault_locations": "483,484"}, "com.google.javascript.jscomp.CommandLineRunner.initConfigFromFlags": {"buggy_content": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    List<String> processedArgs = processArgs(args);\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n        // For contains --flagfile flag\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (IOException ioErr) {\n        err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        ResourceBundle config = ResourceBundle.getBundle(configResource);\n        err.println(\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" + \"Built on: \" + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}", "method_range": "495-563", "fault_locations": "498,499,550,551,552,553,554"}, "com.google.javascript.jscomp.DiagnosticGroups.setWarningLevels": {"buggy_content": "void setWarningLevels(CompilerOptions options, List<String> diagnosticGroups, CheckLevel level) {\n    for (String name : diagnosticGroups) {\n        DiagnosticGroup group = forName(name);\n        Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}", "method_range": "186-193", "fault_locations": "186,187,188,192"}}