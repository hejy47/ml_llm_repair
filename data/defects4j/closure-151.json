{"com.google.javascript.jscomp.CommandLineRunner.initConfigFromFlags": {"buggy_content": "private void initConfigFromFlags(String[] args, PrintStream err) {\n    // Args4j has a different format that the old command-line parser.\n    // So we use some voodoo to get the args into the format that args4j\n    // expects.\n    Pattern argPattern = Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");\n    Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n    List<String> processedArgs = Lists.newArrayList();\n    for (String arg : args) {\n        Matcher matcher = argPattern.matcher(arg);\n        if (matcher.matches()) {\n            processedArgs.add(matcher.group(1));\n            String value = matcher.group(2);\n            Matcher quotesMatcher = quotesPattern.matcher(value);\n            if (quotesMatcher.matches()) {\n                processedArgs.add(quotesMatcher.group(1));\n            } else {\n                processedArgs.add(value);\n            }\n        } else {\n            processedArgs.add(arg);\n        }\n    }\n    CmdLineParser parser = new CmdLineParser(flags);\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new String[] {}));\n    } catch (CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    }\n    if (!isConfigValid || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new DefaultCodingConvention() : new ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setOutputWrapperMarker(flags.output_wrapper_marker).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setOutputManifest(flags.output_manifest);\n    }\n}", "method_range": "385-456", "fault_locations": "417,418"}}