{"com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.serializeWithType": {"buggy_content": "@Override\npublic void serializeWithType(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer0) throws IOException {\n    // Regardless of other parts, first need to find value to serialize:\n    Object value = null;\n    try {\n        value = _accessorMethod.getValue(bean);\n        // and if we got null, can also just write it directly\n        if (value == null) {\n            provider.defaultSerializeNull(gen);\n            return;\n        }\n        JsonSerializer<Object> ser = _valueSerializer;\n        if (ser == null) {\n            // no serializer yet? Need to fetch\n            //                ser = provider.findTypedValueSerializer(value.getClass(), true, _property);\n            ser = provider.findValueSerializer(value.getClass(), _property);\n        } else {\n                        if (_forceTypeInformation) {\n                typeSer0.writeTypePrefixForScalar(bean, gen);\n                ser.serialize(value, gen, provider);\n                typeSer0.writeTypeSuffixForScalar(bean, gen);\n                return;\n            }\n        }\n        // 28-Sep-2016, tatu: As per [databind#1385], we do need to do some juggling\n        //    to use different Object for type id (logical type) and actual serialization\n        //    (delegat type).\n        ser.serializeWithType(value, gen, provider, typeSer0);\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        Throwable t = e;\n        // Need to unwrap this specific type, to see infinite recursion...\n        while (t instanceof InvocationTargetException && t.getCause() != null) {\n            t = t.getCause();\n        }\n        // Errors shouldn't be wrapped (and often can't, as well)\n        if (t instanceof Error) {\n            throw (Error) t;\n        }\n        // let's try to indicate the path best we can...\n        throw JsonMappingException.wrapWithPath(t, bean, _accessorMethod.getName() + \"()\");\n    }\n}", "method_range": "195-242", "fault_locations": "226"}}