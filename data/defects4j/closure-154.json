{"com.google.javascript.jscomp.TypeCheck.checkDeclaredPropertyInheritance": {"buggy_content": "private void checkDeclaredPropertyInheritance(NodeTraversal t, Node n, FunctionType ctorType, String propertyName, JSDocInfo info, JSType propertyType) {\n    // If the supertype doesn't resolve correctly, we've warned about this\n    // already.\n    if (hasUnknownOrEmptySupertype(ctorType)) {\n        return;\n    }\n    FunctionType superClass = ctorType.getSuperClassConstructor();\n    boolean superClassHasProperty = superClass != null && superClass.getPrototype().hasProperty(propertyName);\n    boolean declaredOverride = info != null && info.isOverride();\n    boolean foundInterfaceProperty = false;\n    if (ctorType.isConstructor()) {\n        for (JSType implementedInterface : ctorType.getImplementedInterfaces()) {\n            if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {\n                continue;\n            }\n            FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();\n            Preconditions.checkNotNull(interfaceType);\n            boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);\n            foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;\n            if (reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty) {\n                // @override not present, but the property does override an interface\n                // property\n                compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));\n            }\n            if (interfaceHasProperty) {\n                JSType interfacePropType = interfaceType.getPrototype().getPropertyType(propertyName);\n                if (!propertyType.canAssignTo(interfacePropType)) {\n                    compiler.report(t.makeError(n, HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString(), interfacePropType.toString(), propertyType.toString()));\n                }\n            }\n        }\n    }\n    if (!declaredOverride && !superClassHasProperty) {\n        // nothing to do here, it's just a plain new property\n        return;\n    }\n    JSType topInstanceType = superClassHasProperty ? superClass.getTopMostDefiningType(propertyName) : null;\n    if (reportMissingOverride.isOn() && ctorType.isConstructor() && !declaredOverride && superClassHasProperty) {\n        // @override not present, but the property does override a superclass\n        // property\n        compiler.report(t.makeError(n, reportMissingOverride, HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));\n    }\n    if (!declaredOverride) {\n        // there's no @override to check\n        return;\n    }\n    // @override is present and we have to check that it is ok\n    if (superClassHasProperty) {\n        // there is a superclass implementation\n        JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);\n        if (!propertyType.canAssignTo(superClassPropType)) {\n            compiler.report(t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));\n        }\n    } else if (!foundInterfaceProperty) {\n        // there is no superclass nor interface implementation\n        compiler.report(t.makeError(n, UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));\n    }\n}", "method_range": "1014-1098", "fault_locations": "1049,1050,1051,1052,1053,1054,1055,1056,1057,1058"}, "com.google.javascript.jscomp.TypeValidator.expectInterfaceProperty": {"buggy_content": "private void expectInterfaceProperty(NodeTraversal t, Node n, ObjectType instance, ObjectType implementedInterface, String prop) {\n    if (!instance.hasProperty(prop)) {\n        // Not implemented\n        String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        sourceName = sourceName == null ? \"\" : sourceName;\n        if (shouldReport) {\n            compiler.report(JSError.make(sourceName, n, INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString()));\n        }\n        registerMismatch(instance, implementedInterface);\n        // Implemented, but not correctly typed\n    }\n}", "method_range": "576-590", "fault_locations": "586,587,588"}}