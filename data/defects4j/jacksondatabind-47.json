{"com.fasterxml.jackson.databind.AnnotationIntrospector.refineSerializationType": {"buggy_content": "public JavaType refineSerializationType(final MapperConfig<?> config, final Annotated a, final JavaType baseType) throws JsonMappingException {\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to\n    //    now-deprecated secondary methods; this because while\n    //    direct sub-class not yet retrofitted may only override\n    //    those methods. With 2.8 or later we may consider removal\n    //    of these methods\n    // Ok: start by refining the main type itself; common to all types\n    Class<?> serClass = findSerializationType(a);\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of\n            //    static typing this way\n            type = type.withStaticTyping();\n        } else {\n            try {\n                // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,\n                //   may be needed here too in future?\n                type = tf.constructGeneralizedType(type, serClass);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null, String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\", type, serClass.getName(), a.getName(), iae.getMessage()), iae);\n            }\n        }\n    }\n    // Then further processing for container types\n    // First, key type (for Maps, Map-like types):\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        Class<?> keyClass = findSerializationKeyType(a, keyType);\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually\n                    //   specialize (narrow) type sometimes, even if more commonly opposite\n                    //   is needed.\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        // common case\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        // specialization, ok as well\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                    } else {\n                        throw new JsonMappingException(null, String.format(\"Can not refine serialization key type %s into %s; types not related\", keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null, String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\", type, keyClass.getName(), a.getName(), iae.getMessage()), iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        // collection[like], map[like], array, reference\n        // And then value types for all containers:\n        Class<?> contentClass = findSerializationContentType(a, contentType);\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                // 03-Apr-2016, tatu: As per [databind#1178], may need to actually\n                //   specialize (narrow) type sometimes, even if more commonly opposite\n                //   is needed.\n                Class<?> currRaw = contentType.getRawClass();\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) {\n                        // common case\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\n                        // specialization, ok as well\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                    } else {\n                        throw new JsonMappingException(null, String.format(\"Can not refine serialization content type %s into %s; types not related\", contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    // shouldn't really happen\n                    throw new JsonMappingException(null, String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\", type, contentClass.getName(), a.getName(), iae.getMessage()), iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}", "method_range": "795-896", "fault_locations": "815,816,818,819,820"}}