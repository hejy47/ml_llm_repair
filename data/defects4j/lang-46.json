{"org.apache.commons.lang.StringEscapeUtils.escapeJava": {"buggy_content": "// Java and JavaScript\n//--------------------------------------------------------------------------\npublic static String escapeJava(String str) {\n    return escapeJavaStyleString(str, false);\n}", "method_range": "85-87", "fault_locations": "86"}, "org.apache.commons.lang.StringEscapeUtils.escapeJava1": {"buggy_content": "public static void escapeJava(Writer out, String str) throws IOException {\n    escapeJavaStyleString(out, str, false);\n}", "method_range": "101-103", "fault_locations": "101,102"}, "org.apache.commons.lang.StringEscapeUtils.escapeJavaScript": {"buggy_content": "public static String escapeJavaScript(String str) {\n    return escapeJavaStyleString(str, true);\n}", "method_range": "126-128", "fault_locations": "127"}, "org.apache.commons.lang.StringEscapeUtils.escapeJavaScript3": {"buggy_content": "public static void escapeJavaScript(Writer out, String str) throws IOException {\n    escapeJavaStyleString(out, str, true);\n}", "method_range": "142-144", "fault_locations": "143"}, "org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString": {"buggy_content": "private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n    if (str == null) {\n        return null;\n    }\n    try {\n        StringWriter writer = new StringWriter(str.length() * 2);\n        escapeJavaStyleString(writer, str, escapeSingleQuotes);\n        return writer.toString();\n    } catch (IOException ioe) {\n        // this should never ever happen while writing to a StringWriter\n        ioe.printStackTrace();\n        return null;\n    }\n}", "method_range": "154-167", "fault_locations": "154,155,160"}, "org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString5": {"buggy_content": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (str == null) {\n        return;\n    }\n    int sz;\n    sz = str.length();\n    for (int i = 0; i < sz; i++) {\n        char ch = str.charAt(i);\n        // handle unicode\n        if (ch > 0xfff) {\n            out.write(\"\\\\u\" + hex(ch));\n        } else if (ch > 0xff) {\n            out.write(\"\\\\u0\" + hex(ch));\n        } else if (ch > 0x7f) {\n            out.write(\"\\\\u00\" + hex(ch));\n        } else if (ch < 32) {\n            switch(ch) {\n                case '\\b':\n                    out.write('\\\\');\n                    out.write('b');\n                    break;\n                case '\\n':\n                    out.write('\\\\');\n                    out.write('n');\n                    break;\n                case '\\t':\n                    out.write('\\\\');\n                    out.write('t');\n                    break;\n                case '\\f':\n                    out.write('\\\\');\n                    out.write('f');\n                    break;\n                case '\\r':\n                    out.write('\\\\');\n                    out.write('r');\n                    break;\n                default:\n                    if (ch > 0xf) {\n                        out.write(\"\\\\u00\" + hex(ch));\n                    } else {\n                        out.write(\"\\\\u000\" + hex(ch));\n                    }\n                    break;\n            }\n        } else {\n            switch(ch) {\n                case '\\'':\n                    if (escapeSingleQuote) {\n                        out.write('\\\\');\n                    }\n                    out.write('\\'');\n                    break;\n                case '\"':\n                    out.write('\\\\');\n                    out.write('\"');\n                    break;\n                case '\\\\':\n                    out.write('\\\\');\n                    out.write('\\\\');\n                    break;\n                case '/':\n                    out.write('\\\\');\n                    out.write('/');\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n            }\n        }\n    }\n}", "method_range": "178-253", "fault_locations": "178,236,237,238"}}