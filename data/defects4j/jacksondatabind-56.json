{"com.fasterxml.jackson.databind.deser.std.FromStringDeserializer._deserialize": {"buggy_content": "@Override\nprotected Object _deserialize(String value, DeserializationContext ctxt) throws IOException {\n    switch(_kind) {\n        case STD_FILE:\n            return new File(value);\n        case STD_URL:\n            return new URL(value);\n        case STD_URI:\n            return URI.create(value);\n        case STD_CLASS:\n            try {\n                return ctxt.findClass(value);\n            } catch (Exception e) {\n                throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));\n            }\n        case STD_JAVA_TYPE:\n            return ctxt.getTypeFactory().constructFromCanonical(value);\n        case STD_CURRENCY:\n            // will throw IAE if unknown:\n            return Currency.getInstance(value);\n        case STD_PATTERN:\n            // will throw IAE (or its subclass) if malformed\n            return Pattern.compile(value);\n        case STD_LOCALE:\n            {\n                int ix = value.indexOf('_');\n                if (ix < 0) {\n                    // single argument\n                    return new Locale(value);\n                }\n                String first = value.substring(0, ix);\n                value = value.substring(ix + 1);\n                ix = value.indexOf('_');\n                if (ix < 0) {\n                    // two pieces\n                    return new Locale(first, value);\n                }\n                String second = value.substring(0, ix);\n                return new Locale(first, second, value.substring(ix + 1));\n            }\n        case STD_CHARSET:\n            return Charset.forName(value);\n        case STD_TIME_ZONE:\n            return TimeZone.getTimeZone(value);\n        case STD_INET_ADDRESS:\n            return InetAddress.getByName(value);\n        case STD_INET_SOCKET_ADDRESS:\n            if (value.startsWith(\"[\")) {\n                // bracketed IPv6 (with port number)\n                int i = value.lastIndexOf(']');\n                if (i == -1) {\n                    throw new InvalidFormatException(ctxt.getParser(), \"Bracketed IPv6 address must contain closing bracket\", value, InetSocketAddress.class);\n                }\n                int j = value.indexOf(':', i);\n                int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;\n                return new InetSocketAddress(value.substring(0, i + 1), port);\n            } else {\n                int ix = value.indexOf(':');\n                if (ix >= 0 && value.indexOf(':', ix + 1) < 0) {\n                    // host:port\n                    int port = Integer.parseInt(value.substring(ix + 1));\n                    return new InetSocketAddress(value.substring(0, ix), port);\n                }\n                // host or unbracketed IPv6, without port number\n                return new InetSocketAddress(value, 0);\n            }\n    }\n    throw new IllegalArgumentException();\n}", "method_range": "205-276", "fault_locations": "231,235,236,237"}, "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer._deserializeFromEmptyString": {"buggy_content": "@Override\nprotected Object _deserializeFromEmptyString() throws IOException {\n    // As per [databind#398], URI requires special handling\n    if (_kind == STD_URI) {\n        return URI.create(\"\");\n    }\n    // As per [databind#1123], Locale too\n    if (_kind == STD_LOCALE) {\n        return Locale.ROOT;\n    }\n    return super._deserializeFromEmptyString();\n}", "method_range": "278-289", "fault_locations": "289"}}