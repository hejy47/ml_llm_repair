{"org.apache.commons.math3.optimization.direct.CMAESOptimizer.encode": {"buggy_content": "public double[] encode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = (x[i] - boundaries[0][i]) / diff;\n    }\n    return res;\n}", "method_range": "925-935", "fault_locations": "932"}, "org.apache.commons.math3.optimization.direct.CMAESOptimizer.decode": {"buggy_content": "public double[] decode(final double[] x) {\n    if (boundaries == null) {\n        return x;\n    }\n    double[] res = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        double diff = boundaries[1][i] - boundaries[0][i];\n        res[i] = diff * x[i] + boundaries[0][i];\n    }\n    return res;\n}", "method_range": "951-961", "fault_locations": "956,957,958"}, "org.apache.commons.math3.optimization.direct.CMAESOptimizer.isFeasible": {"buggy_content": "public boolean isFeasible(final double[] x) {\n    if (boundaries == null) {\n        return true;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (x[i] < 0) {\n            return false;\n        }\n        if (x[i] > 1.0) {\n            return false;\n        }\n    }\n    return true;\n}", "method_range": "985-1000", "fault_locations": "987,988,989,990,992,995"}}