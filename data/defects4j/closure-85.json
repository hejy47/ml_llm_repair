{"com.google.javascript.jscomp.UnreachableCodeElimination.tryRemoveUnconditionalBranching": {"buggy_content": "@SuppressWarnings(\"fallthrough\")\nprivate Node tryRemoveUnconditionalBranching(Node n) {\n        // If n is null the target is the end of the function, nothing to do.\n    if (n == null) {\n        return n;\n    }\n    DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);\n    if (gNode == null) {\n        return n;\n    }\n    if (n.getParent() == null) {\n        List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n        if (outEdges.size() == 1) {\n            return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());\n        }\n    }\n    switch(n.getType()) {\n        case Token.BLOCK:\n            if (n.hasChildren()) {\n                Node first = n.getFirstChild();\n                return tryRemoveUnconditionalBranching(first);\n            } else {\n                return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));\n            }\n        case Token.RETURN:\n            if (n.hasChildren()) {\n                break;\n            }\n        case Token.BREAK:\n        case Token.CONTINUE:\n            // We are looking for a control flow changing statement that always\n            // branches to the same node. If removing it the control flow still\n            // branches to that same node. It is safe to remove it.\n            List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n            if (outEdges.size() == 1 && // If there is a next node, there is no chance this jump is useless.\n            (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n                Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n                Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));\n                Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n                if (nextCfgNode == fallThrough) {\n                    removeDeadExprStatementSafely(n);\n                    return fallThrough;\n                }\n            }\n    }\n    return n;\n}", "method_range": "130-192", "fault_locations": "153,154,155,156,157,158,160,161,162,163,164,165,166,169,170,181,182,183"}}