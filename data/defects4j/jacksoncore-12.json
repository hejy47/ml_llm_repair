{"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken": {"buggy_content": "@Override\npublic final JsonToken nextToken() throws IOException {\n        if (_currToken == JsonToken.FIELD_NAME) {\n        return _nextAfterName();\n    }\n    // But if we didn't already have a name, and (partially?) decode number,\n    // need to ensure no numeric information is leaked\n    _numTypesValid = NR_UNKNOWN;\n    if (_tokenIncomplete) {\n        // only strings can be partial\n        _skipString();\n    }\n    int i = _skipWSOrEnd();\n    if (i < 0) {\n        // end-of-input\n                close();\n        return (_currToken = null);\n    }\n    // clear any data retained so far\n    _binaryValue = null;\n    // Closing scope?\n    if (i == INT_RBRACKET) {\n        _updateLocation();\n        if (!_parsingContext.inArray()) {\n            _reportMismatchedEndMarker(i, '}');\n        }\n        _parsingContext = _parsingContext.getParent();\n        return (_currToken = JsonToken.END_ARRAY);\n    }\n    if (i == INT_RCURLY) {\n        _updateLocation();\n        if (!_parsingContext.inObject()) {\n            _reportMismatchedEndMarker(i, ']');\n        }\n        _parsingContext = _parsingContext.getParent();\n        return (_currToken = JsonToken.END_OBJECT);\n    }\n    // Nope: do we then expect a comma?\n    if (_parsingContext.expectComma()) {\n        i = _skipComma(i);\n    }\n    _updateLocation();\n        boolean inObject = _parsingContext.inObject();\n    if (inObject) {\n        // First, field name itself:\n        String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n        _parsingContext.setCurrentName(name);\n        _currToken = JsonToken.FIELD_NAME;\n        i = _skipColon();\n    }\n    // Ok: we must have a value... what is it?\n    JsonToken t;\n    switch(i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case '-':\n                        t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n    }\n    if (inObject) {\n        _nextToken = t;\n        return _currToken;\n    }\n    _currToken = t;\n    return t;\n}", "method_range": "573-705", "fault_locations": "622,628,629,633,634"}, "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName": {"buggy_content": "@Override\npublic boolean nextFieldName(SerializableString sstr) throws IOException {\n    // // // Note: most of code below is copied from nextToken()\n    _numTypesValid = NR_UNKNOWN;\n    if (_currToken == JsonToken.FIELD_NAME) {\n        _nextAfterName();\n        return false;\n    }\n    if (_tokenIncomplete) {\n        _skipString();\n    }\n    int i = _skipWSOrEnd();\n    if (i < 0) {\n        close();\n        _currToken = null;\n        return false;\n    }\n    _binaryValue = null;\n    if (i == INT_RBRACKET) {\n        _updateLocation();\n        if (!_parsingContext.inArray()) {\n            _reportMismatchedEndMarker(i, '}');\n        }\n        _parsingContext = _parsingContext.getParent();\n        _currToken = JsonToken.END_ARRAY;\n        return false;\n    }\n    if (i == INT_RCURLY) {\n        _updateLocation();\n        if (!_parsingContext.inObject()) {\n            _reportMismatchedEndMarker(i, ']');\n        }\n        _parsingContext = _parsingContext.getParent();\n        _currToken = JsonToken.END_OBJECT;\n        return false;\n    }\n    if (_parsingContext.expectComma()) {\n        i = _skipComma(i);\n    }\n    _updateLocation();\n    if (!_parsingContext.inObject()) {\n        _nextTokenNotInObject(i);\n        return false;\n    }\n    if (i == INT_QUOTE) {\n        // when doing literal match, must consider escaping:\n        char[] nameChars = sstr.asQuotedChars();\n        final int len = nameChars.length;\n        // Require 4 more bytes for faster skipping of colon that follows name\n        if ((_inputPtr + len + 4) < _inputEnd) {\n            // maybe...\n            // first check length match by\n            final int end = _inputPtr + len;\n            if (_inputBuffer[end] == '\"') {\n                int offset = 0;\n                int ptr = _inputPtr;\n                while (true) {\n                    if (ptr == end) {\n                        // yes, match!\n                        _parsingContext.setCurrentName(sstr.getValue());\n                        _isNextTokenNameYes(_skipColonFast(ptr + 1));\n                        return true;\n                    }\n                    if (nameChars[offset] != _inputBuffer[ptr]) {\n                        break;\n                    }\n                    ++offset;\n                    ++ptr;\n                }\n            }\n        }\n    }\n    return _isNextTokenNameMaybe(i, sstr.getValue());\n}", "method_range": "731-808", "fault_locations": "773,774,777,778"}, "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName2": {"buggy_content": "@Override\npublic String nextFieldName() throws IOException {\n    // // // Note: this is almost a verbatim copy of nextToken() (minus comments)\n    _numTypesValid = NR_UNKNOWN;\n    if (_currToken == JsonToken.FIELD_NAME) {\n        _nextAfterName();\n        return null;\n    }\n    if (_tokenIncomplete) {\n        _skipString();\n    }\n    int i = _skipWSOrEnd();\n    if (i < 0) {\n        close();\n        _currToken = null;\n        return null;\n    }\n    _binaryValue = null;\n    if (i == INT_RBRACKET) {\n        _updateLocation();\n        if (!_parsingContext.inArray()) {\n            _reportMismatchedEndMarker(i, '}');\n        }\n        _parsingContext = _parsingContext.getParent();\n        _currToken = JsonToken.END_ARRAY;\n        return null;\n    }\n    if (i == INT_RCURLY) {\n        _updateLocation();\n        if (!_parsingContext.inObject()) {\n            _reportMismatchedEndMarker(i, ']');\n        }\n        _parsingContext = _parsingContext.getParent();\n        _currToken = JsonToken.END_OBJECT;\n        return null;\n    }\n    if (_parsingContext.expectComma()) {\n        i = _skipComma(i);\n    }\n    _updateLocation();\n    if (!_parsingContext.inObject()) {\n        _nextTokenNotInObject(i);\n        return null;\n    }\n    String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n    _parsingContext.setCurrentName(name);\n    _currToken = JsonToken.FIELD_NAME;\n    i = _skipColon();\n    if (i == INT_QUOTE) {\n        _tokenIncomplete = true;\n        _nextToken = JsonToken.VALUE_STRING;\n        return name;\n    }\n    // Ok: we must have a value... what is it?\n    JsonToken t;\n    switch(i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n    }\n    _nextToken = t;\n    return name;\n}", "method_range": "810-912", "fault_locations": "849,850,851,853,854,858,859"}, "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameYes": {"buggy_content": "private final void _isNextTokenNameYes(int i) throws IOException {\n    _currToken = JsonToken.FIELD_NAME;\n    switch(i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n    }\n    _nextToken = _handleOddValue(i);\n}", "method_range": "914-958", "fault_locations": "914"}, "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameMaybe": {"buggy_content": "protected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException {\n    // // // and this is back to standard nextToken()\n    String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n    _parsingContext.setCurrentName(name);\n    _currToken = JsonToken.FIELD_NAME;\n    i = _skipColon();\n    if (i == INT_QUOTE) {\n        _tokenIncomplete = true;\n        _nextToken = JsonToken.VALUE_STRING;\n        return nameToMatch.equals(name);\n    }\n    // Ok: we must have a value... what is it?\n    JsonToken t;\n    switch(i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n    }\n    _nextToken = t;\n    return nameToMatch.equals(name);\n}", "method_range": "960-1014", "fault_locations": "963,964"}, "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTokenLocation": {"buggy_content": "@Override\npublic JsonLocation getTokenLocation() {\n    final Object src = _ioContext.getSourceReference();\n    return new JsonLocation(src, -1L, getTokenCharacterOffset(), getTokenLineNr(), getTokenColumnNr());\n}", "method_range": "2667-2675", "fault_locations": "2667,2668,2669,2672,2673"}, "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTokenLocation": {"buggy_content": "@Override\npublic JsonLocation getTokenLocation() {\n    final Object src = _ioContext.getSourceReference();\n    if (_currToken == JsonToken.FIELD_NAME) {\n        return new JsonLocation(src, _nameInputTotal, -1L, _nameInputRow, _tokenInputCol);\n    }\n    return new JsonLocation(src, getTokenCharacterOffset(), -1L, getTokenLineNr(), getTokenColumnNr());\n}", "method_range": "3613-3624", "fault_locations": "3622"}}