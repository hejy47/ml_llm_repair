{"org.apache.commons.math3.linear.OpenMapRealVector.ebeDivide": {"buggy_content": "@Override\npublic OpenMapRealVector ebeDivide(RealVector v) {\n    checkVectorDimensions(v.getDimension());\n    OpenMapRealVector res = new OpenMapRealVector(this);\n    /*\n         * MATH-803: it is not sufficient to loop through non zero entries of\n         * this only. Indeed, if this[i] = 0d and v[i] = 0d, then\n         * this[i] / v[i] = NaN, and not 0d.\n         */\n    Iterator iter = entries.iterator();\n    while (iter.hasNext()) {\n        iter.advance();\n        res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n    }\n    return res;\n}", "method_range": "340-355", "fault_locations": "349,350,351,352"}, "org.apache.commons.math3.linear.OpenMapRealVector.ebeMultiply": {"buggy_content": "@Override\npublic OpenMapRealVector ebeMultiply(RealVector v) {\n    checkVectorDimensions(v.getDimension());\n    OpenMapRealVector res = new OpenMapRealVector(this);\n    Iterator iter = entries.iterator();\n    while (iter.hasNext()) {\n        iter.advance();\n        res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n    }\n    /*\n         * MATH-803: the above loop assumes that 0d * x  = 0d for any double x,\n         * which allows to consider only the non-zero entries of this. However,\n         * this fails if this[i] == 0d and (v[i] = NaN or v[i] = Infinity).\n         *\n         * These special cases are handled below.\n         */\n    return res;\n}", "method_range": "358-375", "fault_locations": "374"}}