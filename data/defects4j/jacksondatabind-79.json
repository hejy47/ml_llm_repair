{"com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findObjectReferenceInfo": {"buggy_content": "@Override\npublic ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n    JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);\n    if (ref != null) {\n        objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n    }\n    return objectIdInfo;\n}", "method_range": "576-583", "fault_locations": "579,580,582"}, "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.createContextual": {"buggy_content": "@SuppressWarnings(\"incomplete-switch\")\n@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor = (property == null || intr == null) ? null : property.getMember();\n    final SerializationConfig config = provider.getConfig();\n    // Let's start with one big transmutation: Enums that are annotated\n    // to serialize as Objects may want to revert\n    JsonFormat.Shape shape = null;\n    if (accessor != null) {\n        JsonFormat.Value format = intr.findFormat((Annotated) accessor);\n        if (format != null) {\n            shape = format.getShape();\n            // or, alternatively, asked to revert \"back to\" other representations...\n            if (shape != _serializationShape) {\n                if (_handledType.isEnum()) {\n                    switch(shape) {\n                        case STRING:\n                        case NUMBER:\n                        case NUMBER_INT:\n                            // 12-Oct-2014, tatu: May need to introspect full annotations... but\n                            //   for now, just do class ones\n                            BeanDescription desc = config.introspectClassAnnotations(_handledType);\n                            JsonSerializer<?> ser = EnumSerializer.construct(_handledType, provider.getConfig(), desc, format);\n                            return provider.handlePrimaryContextualization(ser, property);\n                    }\n                }\n            }\n        }\n    }\n    ObjectIdWriter oiw = _objectIdWriter;\n    String[] ignorals = null;\n    Object newFilterId = null;\n    // Then we may have an override for Object Id\n    if (accessor != null) {\n        ignorals = intr.findPropertiesToIgnore(accessor, true);\n        ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n        if (objectIdInfo == null) {\n            // no ObjectId override, but maybe ObjectIdRef?\n            if (oiw != null) {\n                objectIdInfo = intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n                oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n            }\n        } else {\n            // Ugh: mostly copied from BeanDeserializerBase: but can't easily change it\n            // to be able to move to SerializerProvider (where it really belongs)\n            // 2.1: allow modifications by \"id ref\" annotations as well:\n            objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            ObjectIdGenerator<?> gen;\n            Class<?> implClass = objectIdInfo.getGeneratorType();\n            JavaType type = provider.constructType(implClass);\n            JavaType idType = provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            // Property-based generator is trickier\n            if (implClass == ObjectIdGenerators.PropertyGenerator.class) {\n                // most special one, needs extra work\n                String propName = objectIdInfo.getPropertyName().getSimpleName();\n                BeanPropertyWriter idProp = null;\n                for (int i = 0, len = _props.length; ; ++i) {\n                    if (i == len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name '\" + propName + \"'\");\n                    }\n                    BeanPropertyWriter prop = _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp = prop;\n                                                if (i > 0) {\n                            // note: must shuffle both regular properties and filtered\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] = idProp;\n                            if (_filteredProps != null) {\n                                BeanPropertyWriter fp = _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] = fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType = idProp.getType();\n                gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw = ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n            } else {\n                // other types need to be simpler\n                gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n            }\n        }\n        // Or change Filter Id in use?\n        Object filterId = intr.findFilterId(accessor);\n        if (filterId != null) {\n            // but only consider case of adding a new filter id (no removal via annotation)\n            if (_propertyFilterId == null || !filterId.equals(_propertyFilterId)) {\n                newFilterId = filterId;\n            }\n        }\n    }\n    // either way, need to resolve serializer:\n    BeanSerializerBase contextual = this;\n    if (oiw != null) {\n        JsonSerializer<?> ser = provider.findValueSerializer(oiw.idType, property);\n        oiw = oiw.withSerializer(ser);\n        if (oiw != _objectIdWriter) {\n            contextual = contextual.withObjectIdWriter(oiw);\n        }\n    }\n    // And possibly add more properties to ignore\n    if (ignorals != null && ignorals.length != 0) {\n        contextual = contextual.withIgnorals(ignorals);\n    }\n    if (newFilterId != null) {\n        contextual = contextual.withFilterId(newFilterId);\n    }\n    if (shape == null) {\n        shape = _serializationShape;\n    }\n    if (shape == JsonFormat.Shape.ARRAY) {\n        return contextual.asArraySerializer();\n    }\n    return contextual;\n}", "method_range": "383-516", "fault_locations": "432,433"}}