{"com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer.deserialize": {"buggy_content": "@Override\npublic String[] deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n    // Ok: must point to START_ARRAY (or equivalent)\n    if (!jp.isExpectedStartArrayToken()) {\n        return handleNonArray(jp, ctxt);\n    }\n    if (_elementDeserializer != null) {\n        return _deserializeCustom(jp, ctxt);\n    }\n    final ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n    Object[] chunk = buffer.resetAndStart();\n    int ix = 0;\n    JsonToken t;\n    while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n        // Ok: no need to convert Strings, but must recognize nulls\n        String value;\n        if (t == JsonToken.VALUE_STRING) {\n            value = jp.getText();\n        } else if (t == JsonToken.VALUE_NULL) {\n            // since we have established that '_elementDeserializer == null' earlier\n            value = null;\n        } else {\n            value = _parseString(jp, ctxt);\n        }\n        if (ix >= chunk.length) {\n            chunk = buffer.appendCompletedChunk(chunk);\n            ix = 0;\n        }\n        chunk[ix++] = value;\n    }\n    // note: pass String.class, not String[].class, as we need element type for error info\n    String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n    ctxt.returnObjectBuffer(buffer);\n    return result;\n}", "method_range": "42-79", "fault_locations": "58,59,74,75,76"}, "com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer._deserializeCustom": {"buggy_content": "protected final String[] _deserializeCustom(JsonParser jp, DeserializationContext ctxt) throws IOException {\n    final ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n    Object[] chunk = buffer.resetAndStart();\n    final JsonDeserializer<String> deser = _elementDeserializer;\n    int ix = 0;\n    JsonToken t;\n    while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {\n        // Ok: no need to convert Strings, but must recognize nulls\n        String value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n        if (ix >= chunk.length) {\n            chunk = buffer.appendCompletedChunk(chunk);\n            ix = 0;\n        }\n        chunk[ix++] = value;\n    }\n    // note: pass String.class, not String[].class, as we need element type for error info\n    String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);\n    ctxt.returnObjectBuffer(buffer);\n    return result;\n}", "method_range": "84-106", "fault_locations": "92,93,101,102,103"}}