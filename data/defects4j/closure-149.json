{"com.google.javascript.jscomp.AbstractCommandLineRunner.setRunOptions": {"buggy_content": "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.jsOutputFile = config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}", "method_range": "141-179", "fault_locations": "158,159"}, "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun": {"buggy_content": "protected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n    List<JSSourceFile> externsList = createExterns();\n    JSSourceFile[] externs = new JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    B options = createOptions();\n    JSModule[] modules = null;\n    Result result;\n    setRunOptions(options);\n    if (inputCharset == Charsets.UTF_8) {\n        options.outputCharset = Charsets.US_ASCII;\n    } else {\n        options.outputCharset = inputCharset;\n    }\n    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.jsOutputFile, inputCharset.name());\n    }\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        List<JSSourceFile> inputList = createSourceInputs(jsFiles);\n        JSSourceFile[] inputs = new JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    // Close the output if we are writing to a file.\n    if (writeOutputToFile) {\n        ((Writer) out).close();\n    }\n    return errCode;\n}", "method_range": "504-547", "fault_locations": "518,519,520,521,522"}, "com.google.javascript.jscomp.CommandLineRunner.createOptions": {"buggy_content": "@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.closurePass = flags.process_closure_primitives;\n    initOptionsFromFlags(options);\n    return options;\n}", "method_range": "454-473", "fault_locations": "471"}, "com.google.javascript.jscomp.Compiler.toSource": {"buggy_content": "private String toSource(Node n, SourceMap sourceMap) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    Charset charset = options.outputCharset;\n    builder.setOutputCharset(charset);\n    return builder.build();\n}", "method_range": "1355-1366", "fault_locations": "1362"}}