{"org.jsoup.helper.DataUtil.parseByteData": {"buggy_content": "// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\n// switching the chartset midstream when a meta http-equiv tag defines the charset.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    // look for BOM - overrides any other header or input\n    charsetName = detectCharsetFromBom(byteData, charsetName);\n    if (charsetName == null) {\n        // determine from meta. safe first parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        // if not found, will keep utf-8 as best attempt\n        String foundCharset = null;\n        if (meta != null) {\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n        }\n        // look for <?xml encoding='ISO-8859-1'?>\n        if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) {\n            XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);\n            if (prolog.name().equals(\"xml\")) {\n                foundCharset = prolog.attr(\"encoding\");\n            }\n        }\n        foundCharset = validateCharset(foundCharset);\n        if (foundCharset != null && !foundCharset.equals(defaultCharset)) {\n            // need to re-decode\n            foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n            charsetName = foundCharset;\n            byteData.rewind();\n            docData = Charset.forName(foundCharset).decode(byteData).toString();\n            doc = null;\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}", "method_range": "94-146", "fault_locations": "112,113,115,116,117,118"}, "org.jsoup.nodes.XmlDeclaration.getWholeDeclaration": {"buggy_content": "public String getWholeDeclaration() {\n    final String decl = this.name;\n    if (decl.equals(\"xml\") && attributes.size() > 1) {\n        StringBuilder sb = new StringBuilder(decl);\n        final String version = attributes.get(\"version\");\n        if (version != null) {\n            sb.append(\" version=\\\"\").append(version).append(\"\\\"\");\n        }\n        final String encoding = attributes.get(\"encoding\");\n        if (encoding != null) {\n            sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");\n        }\n        return sb.toString();\n    } else {\n        return this.name;\n    }\n}", "method_range": "45-62", "fault_locations": "46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61"}, "org.jsoup.nodes.XmlDeclaration.outerHtmlHead": {"buggy_content": "void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    accum.append(\"<\").append(isProcessingInstruction ? \"!\" : \"?\").append(getWholeDeclaration()).append(\">\");\n}", "method_range": "64-70", "fault_locations": "68"}, "org.jsoup.parser.XmlTreeBuilder.insert": {"buggy_content": "void insert(Token.Comment commentToken) {\n    Comment comment = new Comment(commentToken.getData(), baseUri);\n    Node insert = comment;\n    if (commentToken.bogus) {\n        // xml declarations are emitted as bogus comments (which is right for html, but not xml)\n        // so we do a bit of a hack and parse the data as an element to pull the attributes out\n        String data = comment.getData();\n        if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n            String declaration = data.substring(1);\n            insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));\n        }\n    }\n    insertNode(insert);\n}", "method_range": "69-81", "fault_locations": "76,77"}}