{"com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer": {"buggy_content": "@Override\n@SuppressWarnings(\"unchecked\")\npublic JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException {\n    // Very first thing, let's check if there is explicit serializer annotation:\n    final SerializationConfig config = prov.getConfig();\n    BeanDescription beanDesc = config.introspect(origType);\n    JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n    if (ser != null) {\n        return (JsonSerializer<Object>) ser;\n    }\n    boolean staticTyping;\n    // Next: we may have annotations that further define types to use...\n    JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n    if (type == origType) {\n        // no changes, won't force static typing\n        staticTyping = false;\n    } else {\n        // changes; assume static typing; plus, need to re-introspect if class differs\n        staticTyping = true;\n        if (!type.hasRawClass(origType.getRawClass())) {\n            beanDesc = config.introspect(type);\n        }\n    }\n    // Slight detour: do we have a Converter to consider?\n    Converter<Object, Object> conv = beanDesc.findSerializationConverter();\n    if (conv == null) {\n        // no, simple\n        return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n    }\n    JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n    // One more twist, as per [Issue#288]; probably need to get new BeanDesc\n    if (!delegateType.hasRawClass(type.getRawClass())) {\n        beanDesc = config.introspect(delegateType);\n        // [#359]: explicitly check (again) for @JsonSerializer...\n        ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());\n    }\n    // [databind#731]: Should skip if nominally java.lang.Object\n    if (ser == null) {\n        ser = _createSerializer2(prov, delegateType, beanDesc, true);\n    }\n    return new StdDelegatingSerializer(conv, delegateType, ser);\n}", "method_range": "125-167", "fault_locations": "163"}, "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.findConvertingSerializer": {"buggy_content": "protected JsonSerializer<Object> findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException {\n    final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n    if (intr != null) {\n        AnnotatedMember m = prop.getMember();\n        if (m != null) {\n            Object convDef = intr.findSerializationConverter(m);\n            if (convDef != null) {\n                Converter<Object, Object> conv = provider.converterInstance(prop.getMember(), convDef);\n                JavaType delegateType = conv.getOutputType(provider.getTypeFactory());\n                // [databind#731]: Should skip if nominally java.lang.Object\n                JsonSerializer<?> ser = provider.findValueSerializer(delegateType, prop);\n                return new StdDelegatingSerializer(conv, delegateType, ser);\n            }\n        }\n    }\n    return null;\n}", "method_range": "357-376", "fault_locations": "370"}, "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.createContextual": {"buggy_content": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    JsonSerializer<?> delSer = _delegateSerializer;\n    JavaType delegateType = _delegateType;\n    if (delSer == null) {\n        // Otherwise, need to locate serializer to delegate to. For that we need type information...\n        if (delegateType == null) {\n            delegateType = _converter.getOutputType(provider.getTypeFactory());\n        }\n                delSer = provider.findValueSerializer(delegateType);\n    }\n    if (delSer instanceof ContextualSerializer) {\n        delSer = provider.handleSecondaryContextualization(delSer, property);\n    }\n    return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);\n}", "method_range": "106-128", "fault_locations": "120,121,122,126,127"}, "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize": {"buggy_content": "@Override\npublic void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {\n    Object delegateValue = convertValue(value);\n    // should we accept nulls?\n    if (delegateValue == null) {\n        provider.defaultSerializeNull(gen);\n        return;\n    }\n    // 02-Apr-2015, tatu: As per [databind#731] may need to do dynamic lookup\n    _delegateSerializer.serialize(delegateValue, gen, provider);\n}", "method_range": "151-162", "fault_locations": "158,159,161"}, "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serializeWithType": {"buggy_content": "@Override\npublic void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n        Object delegateValue = convertValue(value);\n    _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);\n}", "method_range": "164-173", "fault_locations": "168,169,172"}, "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.isEmpty": {"buggy_content": "@Override\n// since 2.5\n@Deprecated\npublic boolean isEmpty(Object value) {\n    Object delegateValue = convertValue(value);\n    return _delegateSerializer.isEmpty(delegateValue);\n}", "method_range": "175-181", "fault_locations": "175,176"}, "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.isEmpty4": {"buggy_content": "@Override\npublic boolean isEmpty(SerializerProvider prov, Object value) {\n    Object delegateValue = convertValue(value);\n    return _delegateSerializer.isEmpty(prov, delegateValue);\n}", "method_range": "183-188", "fault_locations": "183"}, "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.acceptJsonFormatVisitor": {"buggy_content": "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n        // 02-Apr-2015, tatu: For dynamic case, very little we can do\n    _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);\n}", "method_range": "216-225", "fault_locations": "219,220,224"}, "com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer": {"buggy_content": "protected JsonSerializer<?> findConvertingContentSerializer(SerializerProvider provider, BeanProperty prop, JsonSerializer<?> existingSerializer) throws JsonMappingException {\n        final AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n    if (intr != null && prop != null) {\n        AnnotatedMember m = prop.getMember();\n        if (m != null) {\n            Object convDef = intr.findSerializationContentConverter(m);\n            if (convDef != null) {\n                Converter<Object, Object> conv = provider.converterInstance(prop.getMember(), convDef);\n                JavaType delegateType = conv.getOutputType(provider.getTypeFactory());\n                // [databind#731]: Should skip if nominally java.lang.Object\n                if (existingSerializer == null) {\n                    existingSerializer = provider.findValueSerializer(delegateType);\n                }\n                return new StdDelegatingSerializer(conv, delegateType, existingSerializer);\n            }\n        }\n    }\n    return existingSerializer;\n}", "method_range": "245-270", "fault_locations": "262"}}