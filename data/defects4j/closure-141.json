{"com.google.javascript.jscomp.NodeUtil.canBeSideEffected": {"buggy_content": "static boolean canBeSideEffected(Node n, Set<String> knownConstants) {\n    switch(n.getType()) {\n        case Token.CALL:\n        case Token.NEW:\n            // Function calls or constructor can reference changed values.\n            // TODO(johnlenz): Add some mechanism for determining that functions\n            // are unaffected by side effects.\n            return true;\n        case Token.NAME:\n            // Non-constant names values may have been changed.\n            return !NodeUtil.isConstantName(n) && !knownConstants.contains(n.getString());\n        // Properties on constant NAMEs can still be side-effected.\n        case Token.GETPROP:\n        case Token.GETELEM:\n            return true;\n    }\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (canBeSideEffected(c, knownConstants)) {\n            return true;\n        }\n    }\n    return false;\n}", "method_range": "584-613", "fault_locations": "601,602,603,604"}, "com.google.javascript.jscomp.PureFunctionIdentifier.getCallableDefinitions": {"buggy_content": "private static Collection<Definition> getCallableDefinitions(DefinitionProvider definitionProvider, Node name) {\n    List<Definition> result = Lists.newArrayList();\n    if (!NodeUtil.isGetProp(name) && !NodeUtil.isName(name)) {\n        return null;\n    }\n    Collection<Definition> decls = definitionProvider.getDefinitionsReferencedAt(name);\n    if (decls == null) {\n        return null;\n    }\n    for (Definition current : decls) {\n        Node rValue = current.getRValue();\n        if ((rValue != null) && NodeUtil.isFunction(rValue)) {\n            result.add(current);\n        } else {\n            return null;\n        }\n    }\n    return result;\n}", "method_range": "175-198", "fault_locations": "176,177,179,180,181,194,195"}}