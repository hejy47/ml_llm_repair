{"com.google.javascript.jscomp.ProcessCommonJSModules.normalizeSourceName": {"buggy_content": "private String normalizeSourceName(String filename) {\n    // The DOS command shell will normalize \"/\" to \"\\\", so we have to\n    // wrestle it back.\n    if (filename.indexOf(filenamePrefix) == 0) {\n        filename = filename.substring(filenamePrefix.length());\n    }\n    return filename;\n}", "method_range": "116-125", "fault_locations": "118,119"}, "com.google.javascript.jscomp.ProcessCommonJSModules.visitScript": {"buggy_content": "private void visitScript(NodeTraversal t, Node script) {\n    Preconditions.checkArgument(scriptNodeCount == 1, \"ProcessCommonJSModules supports only one invocation per \" + \"CompilerInput / script node\");\n    String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));\n    script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()).copyInformationFromForTree(script));\n    if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n    }\n    script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")), IR.string(moduleName))).copyInformationFromForTree(script));\n    emitOptionalModuleExportsOverride(script, moduleName);\n    // Rename vars to not conflict in global scope.\n    NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName));\n    compiler.reportCodeChange();\n}", "method_range": "179-204", "fault_locations": "183"}}