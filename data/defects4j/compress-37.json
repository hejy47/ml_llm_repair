{"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders": {"buggy_content": "// NOTE, using a Map here makes it impossible to ever support GNU\n// sparse files using the PAX Format 0.0, see\nMap<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while (true) {\n        // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                // Get keyword\n                final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                while ((ch = i.read()) != -1) {\n                    read++;\n                    if (ch == '=') {\n                        // end of keyword\n                        final String keyword = coll.toString(CharsetNames.UTF_8);\n                        // Get rest of entry\n                        final int restLen = len - read;\n                        if (restLen == 1) {\n                            // only NL\n                            headers.remove(keyword);\n                        } else {\n                            final byte[] rest = new byte[restLen];\n                            final int got = IOUtils.readFully(i, rest);\n                            if (got != restLen) {\n                                throw new IOException(\"Failed to read \" + \"Paxheader. Expected \" + restLen + \" bytes, read \" + got);\n                            }\n                            // Drop trailing NL\n                            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n                            headers.put(keyword, value);\n                        }\n                        break;\n                    }\n                    coll.write((byte) ch);\n                }\n                // Processed single header\n                break;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1) {\n            // EOF\n            break;\n        }\n    }\n    return headers;\n}", "method_range": "452-502", "fault_locations": "462"}}