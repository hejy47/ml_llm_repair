{"com.google.javascript.jscomp.FunctionToBlockMutator.makeLocalNamesUnique": {"buggy_content": "private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {\n    Supplier<String> idSupplier = compiler.getUniqueNameIdSupplier();\n    // Make variable names unique to this instance.\n    NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, \"inline_\", isCallInLoop)));\n    // Make label names unique to this instance.\n}", "method_range": "142-152", "fault_locations": "151,152"}, "com.google.javascript.jscomp.RenameLabels.visitLabel": {"buggy_content": "private void visitLabel(Node node, Node parent) {\n    Node nameNode = node.getFirstChild();\n    Preconditions.checkState(nameNode != null);\n    String name = nameNode.getString();\n    LabelInfo li = getLabelInfo(name);\n    // This is a label...\n    if (li.referenced) {\n        String newName = getNameForId(li.id);\n        if (!name.equals(newName)) {\n            // ... and it is used, give it the short name.\n            nameNode.setString(newName);\n            compiler.reportCodeChange();\n        }\n    } else {\n        // ... and it is not referenced, just remove it.\n        Node newChild = node.getLastChild();\n        node.removeChild(newChild);\n        parent.replaceChild(node, newChild);\n        if (newChild.getType() == Token.BLOCK) {\n            NodeUtil.tryMergeBlock(newChild);\n        }\n        compiler.reportCodeChange();\n    }\n    // Remove the label from the current stack of labels.\n    namespaceStack.peek().renameMap.remove(name);\n}", "method_range": "209-235", "fault_locations": "215"}}