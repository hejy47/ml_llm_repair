{"org.jsoup.nodes.DocumentType.DocumentType": {"buggy_content": "// todo: quirk mode from publicId and systemId\npublic DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n    attr(NAME, name);\n    attr(PUBLIC_ID, publicId);\n    attr(SYSTEM_ID, systemId);\n}", "method_range": "26-32", "fault_locations": "30,31"}, "org.jsoup.nodes.DocumentType.outerHtmlHead": {"buggy_content": "@Override\nvoid outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n    if (out.syntax() == Syntax.html && !has(PUBLIC_ID) && !has(SYSTEM_ID)) {\n        // looks like a html5 doctype, go lowercase for aesthetics\n        accum.append(\"<!doctype\");\n    } else {\n        accum.append(\"<!DOCTYPE\");\n    }\n    if (has(NAME))\n        accum.append(\" \").append(attr(NAME));\n    if (has(PUBLIC_ID))\n        accum.append(\" PUBLIC \\\"\").append(attr(PUBLIC_ID)).append('\"');\n    if (has(SYSTEM_ID))\n        accum.append(\" \\\"\").append(attr(SYSTEM_ID)).append('\"');\n    accum.append('>');\n}", "method_range": "48-63", "fault_locations": "57,58,59"}, "org.jsoup.parser.HtmlTreeBuilderState.process": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (isWhitespace(t)) {\n        // ignore whitespace\n        return true;\n    } else if (t.isComment()) {\n        tb.insert(t.asComment());\n    } else if (t.isDoctype()) {\n        // todo: parse error check on expected doctypes\n        // todo: quirk state check on doctype ids\n        Token.Doctype d = t.asDoctype();\n        DocumentType doctype = new DocumentType(tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());\n        tb.getDocument().appendChild(doctype);\n        if (d.isForceQuirks())\n            tb.getDocument().quirksMode(Document.QuirksMode.quirks);\n        tb.transition(BeforeHtml);\n    } else {\n        // todo: check not iframe srcdoc\n        tb.transition(BeforeHtml);\n        // re-process token\n        return tb.process(t);\n    }\n    return true;\n}", "method_range": "13-34", "fault_locations": "23"}, "org.jsoup.parser.TokeniserState.read": {"buggy_content": "void read(Tokeniser t, CharacterReader r) {\n    if (r.isEmpty()) {\n        t.eofError(this);\n        t.doctypePending.forceQuirks = true;\n        t.emitDoctypePending();\n        t.transition(Data);\n        return;\n    }\n    if (r.matchesAny('\\t', '\\n', '\\r', '\\f', ' '))\n        // ignore whitespace\n        r.advance();\n    else if (r.matches('>')) {\n        t.emitDoctypePending();\n        t.advanceTransition(Data);\n    } else if (r.matchConsumeIgnoreCase(DocumentType.PUBLIC_KEY)) {\n        t.transition(AfterDoctypePublicKeyword);\n    } else if (r.matchConsumeIgnoreCase(DocumentType.SYSTEM_KEY)) {\n        t.transition(AfterDoctypeSystemKeyword);\n    } else {\n        t.error(this);\n        t.doctypePending.forceQuirks = true;\n        t.advanceTransition(BogusDoctype);\n    }\n}", "method_range": "1181-1204", "fault_locations": "1194,1195,1196,1197"}, "org.jsoup.parser.Token.reset": {"buggy_content": "@Override\nToken reset() {\n    reset(name);\n    reset(publicIdentifier);\n    reset(systemIdentifier);\n    forceQuirks = false;\n    return this;\n}", "method_range": "43-50", "fault_locations": "45,46"}, "org.jsoup.parser.XmlTreeBuilder.insert": {"buggy_content": "void insert(Token.Doctype d) {\n    DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier(), baseUri);\n    insertNode(doctypeNode);\n}", "method_range": "99-102", "fault_locations": "100"}}