{"com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.deserialize": {"buggy_content": "@Override\npublic Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    switch(p.getCurrentTokenId()) {\n        case JsonTokenId.ID_START_OBJECT:\n        case JsonTokenId.ID_FIELD_NAME:\n            // 28-Oct-2015, tatu: [databind#989] We may also be given END_OBJECT (similar to FIELD_NAME),\n            //    if caller has advanced to the first token of Object, but for empty Object\n            if (_mapDeserializer != null) {\n                return _mapDeserializer.deserialize(p, ctxt);\n            }\n            return mapObject(p, ctxt);\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n                return mapArrayToArray(p, ctxt);\n            }\n            if (_listDeserializer != null) {\n                return _listDeserializer.deserialize(p, ctxt);\n            }\n            return mapArray(p, ctxt);\n        case JsonTokenId.ID_EMBEDDED_OBJECT:\n            return p.getEmbeddedObject();\n        case JsonTokenId.ID_STRING:\n            if (_stringDeserializer != null) {\n                return _stringDeserializer.deserialize(p, ctxt);\n            }\n            return p.getText();\n        case JsonTokenId.ID_NUMBER_INT:\n            if (_numberDeserializer != null) {\n                return _numberDeserializer.deserialize(p, ctxt);\n            }\n                        if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\n                return _coerceIntegral(p, ctxt);\n            }\n            // should be optimal, whatever it is\n            return p.getNumberValue();\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            if (_numberDeserializer != null) {\n                return _numberDeserializer.deserialize(p, ctxt);\n            }\n                        if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                return p.getDecimalValue();\n            }\n            return p.getDoubleValue();\n        case JsonTokenId.ID_TRUE:\n            return Boolean.TRUE;\n        case JsonTokenId.ID_FALSE:\n            return Boolean.FALSE;\n        case // should not get this but...\n        JsonTokenId.ID_NULL:\n            return null;\n        //        case JsonTokenId.ID_END_ARRAY: // invalid\n        default:\n    }\n    throw ctxt.mappingException(Object.class);\n}", "method_range": "213-277", "fault_locations": "220,221"}, "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.deserialize1": {"buggy_content": "@Override\npublic Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    switch(p.getCurrentTokenId()) {\n        case JsonTokenId.ID_START_OBJECT:\n            {\n                JsonToken t = p.nextToken();\n                if (t == JsonToken.END_OBJECT) {\n                    return new LinkedHashMap<String, Object>(2);\n                }\n            }\n        case JsonTokenId.ID_FIELD_NAME:\n            return mapObject(p, ctxt);\n        case JsonTokenId.ID_START_ARRAY:\n            {\n                JsonToken t = p.nextToken();\n                if (t == JsonToken.END_ARRAY) {\n                    // and empty one too\n                    if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n                        return NO_OBJECTS;\n                    }\n                    return new ArrayList<Object>(2);\n                }\n            }\n            if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n                return mapArrayToArray(p, ctxt);\n            }\n            return mapArray(p, ctxt);\n        case JsonTokenId.ID_EMBEDDED_OBJECT:\n            return p.getEmbeddedObject();\n        case JsonTokenId.ID_STRING:\n            return p.getText();\n        case JsonTokenId.ID_NUMBER_INT:\n            if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\n                return _coerceIntegral(p, ctxt);\n            }\n            // should be optimal, whatever it is\n            return p.getNumberValue();\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                return p.getDecimalValue();\n            }\n            return Double.valueOf(p.getDoubleValue());\n        case JsonTokenId.ID_TRUE:\n            return Boolean.TRUE;\n        case JsonTokenId.ID_FALSE:\n            return Boolean.FALSE;\n        case // should not get this but...\n        JsonTokenId.ID_NULL:\n            return null;\n        // 28-Oct-2015, tatu: [databind#989] We may also be given END_OBJECT (similar to FIELD_NAME),\n        //    if caller has advanced to the first token of Object, but for empty Object\n        //case JsonTokenId.ID_END_ARRAY: // invalid\n        default:\n            throw ctxt.mappingException(Object.class);\n    }\n}", "method_range": "483-542", "fault_locations": "534,535,536,537"}}