{"com.google.gson.stream.JsonReader.doPeek": {"buggy_content": "int doPeek() throws IOException {\n    int peekStack = stack[stackSize - 1];\n    if (peekStack == JsonScope.EMPTY_ARRAY) {\n        stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;\n    } else if (peekStack == JsonScope.NONEMPTY_ARRAY) {\n        // Look for a comma before the next element.\n        int c = nextNonWhitespace(true);\n        switch(c) {\n            case ']':\n                return peeked = PEEKED_END_ARRAY;\n            case ';':\n                // fall-through\n                checkLenient();\n            case ',':\n                break;\n            default:\n                throw syntaxError(\"Unterminated array\");\n        }\n    } else if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) {\n        stack[stackSize - 1] = JsonScope.DANGLING_NAME;\n        // Look for a comma before the next element.\n        if (peekStack == JsonScope.NONEMPTY_OBJECT) {\n            int c = nextNonWhitespace(true);\n            switch(c) {\n                case '}':\n                    return peeked = PEEKED_END_OBJECT;\n                case ';':\n                    // fall-through\n                    checkLenient();\n                case ',':\n                    break;\n                default:\n                    throw syntaxError(\"Unterminated object\");\n            }\n        }\n        int c = nextNonWhitespace(true);\n        switch(c) {\n            case '\"':\n                return peeked = PEEKED_DOUBLE_QUOTED_NAME;\n            case '\\'':\n                checkLenient();\n                return peeked = PEEKED_SINGLE_QUOTED_NAME;\n            case '}':\n                if (peekStack != JsonScope.NONEMPTY_OBJECT) {\n                    return peeked = PEEKED_END_OBJECT;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n            default:\n                checkLenient();\n                // Don't consume the first character in an unquoted string.\n                pos--;\n                if (isLiteral((char) c)) {\n                    return peeked = PEEKED_UNQUOTED_NAME;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n        }\n    } else if (peekStack == JsonScope.DANGLING_NAME) {\n        stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;\n        // Look for a colon before the value.\n        int c = nextNonWhitespace(true);\n        switch(c) {\n            case ':':\n                break;\n            case '=':\n                checkLenient();\n                if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\n                    pos++;\n                }\n                break;\n            default:\n                throw syntaxError(\"Expected ':'\");\n        }\n    } else if (peekStack == JsonScope.EMPTY_DOCUMENT) {\n        if (lenient) {\n            consumeNonExecutePrefix();\n        }\n        stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;\n    } else if (peekStack == JsonScope.NONEMPTY_DOCUMENT) {\n        int c = nextNonWhitespace(false);\n        if (c == -1) {\n            return peeked = PEEKED_EOF;\n        } else {\n            checkLenient();\n            pos--;\n        }\n    } else if (peekStack == JsonScope.CLOSED) {\n        throw new IllegalStateException(\"JsonReader is closed\");\n    }\n    int c = nextNonWhitespace(true);\n    switch(c) {\n        case ']':\n            if (peekStack == JsonScope.EMPTY_ARRAY) {\n                return peeked = PEEKED_END_ARRAY;\n            }\n        // fall-through to handle \",]\"\n        case ';':\n        case ',':\n            // In lenient mode, a 0-length literal in an array means 'null'.\n            if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\n                checkLenient();\n                pos--;\n                return peeked = PEEKED_NULL;\n            } else {\n                throw syntaxError(\"Unexpected value\");\n            }\n        case '\\'':\n            checkLenient();\n            return peeked = PEEKED_SINGLE_QUOTED;\n        case '\"':\n            if (stackSize == 1) {\n                checkLenient();\n            }\n            return peeked = PEEKED_DOUBLE_QUOTED;\n        case '[':\n            return peeked = PEEKED_BEGIN_ARRAY;\n        case '{':\n            return peeked = PEEKED_BEGIN_OBJECT;\n        default:\n            // Don't consume the first character in a literal value.\n            pos--;\n    }\n    if (stackSize == 1) {\n        checkLenient();\n    }\n    int result = peekKeyword();\n    if (result != PEEKED_NONE) {\n        return result;\n    }\n    result = peekNumber();\n    if (result != PEEKED_NONE) {\n        return result;\n    }\n    if (!isLiteral(buffer[pos])) {\n        throw syntaxError(\"Expected value\");\n    }\n    checkLenient();\n    return peeked = PEEKED_UNQUOTED;\n}", "method_range": "465-605", "fault_locations": "574,575,576,585,586,587"}, "com.google.gson.stream.JsonWriter.open": {"buggy_content": "private JsonWriter open(int empty, String openBracket) throws IOException {\n    beforeValue(true);\n    push(empty);\n    out.write(openBracket);\n    return this;\n}", "method_range": "324-329", "fault_locations": "325"}, "com.google.gson.stream.JsonWriter.value": {"buggy_content": "public JsonWriter value(String value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    beforeValue(false);\n    string(value);\n    return this;\n}", "method_range": "413-421", "fault_locations": "416,417,418"}, "com.google.gson.stream.JsonWriter.jsonValue": {"buggy_content": "public JsonWriter jsonValue(String value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    beforeValue(false);\n    out.append(value);\n    return this;\n}", "method_range": "430-438", "fault_locations": "432,433,435"}, "com.google.gson.stream.JsonWriter.nullValue": {"buggy_content": "public JsonWriter nullValue() throws IOException {\n    if (deferredName != null) {\n        if (serializeNulls) {\n            writeDeferredName();\n        } else {\n            deferredName = null;\n            // skip the name and the value\n            return this;\n        }\n    }\n    beforeValue(false);\n    out.write(\"null\");\n    return this;\n}", "method_range": "445-457", "fault_locations": "450,451,454"}, "com.google.gson.stream.JsonWriter.value4": {"buggy_content": "public JsonWriter value(boolean value) throws IOException {\n    writeDeferredName();\n    beforeValue(false);\n    out.write(value ? \"true\" : \"false\");\n    return this;\n}", "method_range": "464-469", "fault_locations": "466"}, "com.google.gson.stream.JsonWriter.value5": {"buggy_content": "public JsonWriter value(double value) throws IOException {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    writeDeferredName();\n    beforeValue(false);\n    out.append(Double.toString(value));\n    return this;\n}", "method_range": "478-486", "fault_locations": "478,483"}, "com.google.gson.stream.JsonWriter.value6": {"buggy_content": "public JsonWriter value(long value) throws IOException {\n    writeDeferredName();\n    beforeValue(false);\n    out.write(Long.toString(value));\n    return this;\n}", "method_range": "493-498", "fault_locations": "495"}, "com.google.gson.stream.JsonWriter.value7": {"buggy_content": "public JsonWriter value(Number value) throws IOException {\n    if (value == null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string = value.toString();\n    if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}", "method_range": "507-521", "fault_locations": "510,511,518"}, "com.google.gson.stream.JsonWriter.beforeName": {"buggy_content": "private void beforeName() throws IOException {\n    int context = peek();\n    if (context == NONEMPTY_OBJECT) {\n        // first in object\n        out.write(',');\n    } else if (context != EMPTY_OBJECT) {\n        // not in an object!\n        throw new IllegalStateException(\"Nesting problem.\");\n    }\n    newline();\n    replaceTop(DANGLING_NAME);\n}", "method_range": "596-605", "fault_locations": "604,605"}, "com.google.gson.stream.JsonWriter.beforeValue": {"buggy_content": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n        // fall-through\n        case // first in document\n        EMPTY_DOCUMENT:\n            if (!lenient && !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case // first in array\n        EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case // another in array\n        NONEMPTY_ARRAY:\n            out.append(',');\n            newline();\n            break;\n        case // value for name\n        DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}", "method_range": "612-647", "fault_locations": "613,622,623,624,625"}}