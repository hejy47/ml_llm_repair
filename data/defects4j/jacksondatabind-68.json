{"com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault": {"buggy_content": "protected Object deserializeFromObjectUsingNonDefault(JsonParser p, DeserializationContext ctxt) throws IOException {\n    if (_delegateDeserializer != null) {\n        return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n    }\n    if (_propertyBasedCreator != null) {\n        return _deserializeUsingPropertyBased(p, ctxt);\n    }\n    // should only occur for abstract types...\n    if (_beanType.isAbstract()) {\n        return ctxt.handleMissingInstantiator(handledType(), p, \"abstract type (need to add/enable type information?)\");\n    }\n    return ctxt.handleMissingInstantiator(_beanType.getRawClass(), p, \"no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)\");\n}", "method_range": "1189-1206", "fault_locations": "1192,1193,1194"}, "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromNumber": {"buggy_content": "@SuppressWarnings(\"incomplete-switch\")\npublic Object deserializeFromNumber(JsonParser p, DeserializationContext ctxt) throws IOException {\n    // First things first: id Object Id is used, most likely that's it\n    if (_objectIdReader != null) {\n        return deserializeFromObjectId(p, ctxt);\n    }\n    switch(p.getNumberType()) {\n        case INT:\n            if (_delegateDeserializer != null) {\n                if (!_valueInstantiator.canCreateFromInt()) {\n                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n                    if (_injectables != null) {\n                        injectValues(ctxt, bean);\n                    }\n                    return bean;\n                }\n            }\n            return _valueInstantiator.createFromInt(ctxt, p.getIntValue());\n        case LONG:\n            if (_delegateDeserializer != null) {\n                if (!_valueInstantiator.canCreateFromInt()) {\n                    Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n                    if (_injectables != null) {\n                        injectValues(ctxt, bean);\n                    }\n                    return bean;\n                }\n            }\n            return _valueInstantiator.createFromLong(ctxt, p.getLongValue());\n    }\n    // actually, could also be BigInteger, so:\n    if (_delegateDeserializer != null) {\n        Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        return bean;\n    }\n    return ctxt.handleMissingInstantiator(handledType(), p, \"no suitable creator method found to deserialize from Number value (%s)\", p.getNumberValue());\n}", "method_range": "1212-1258", "fault_locations": "1217,1218,1219,1220,1222,1225,1229,1230,1231,1232,1234,1237,1240,1241,1242,1247,1249"}, "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString": {"buggy_content": "public Object deserializeFromString(JsonParser p, DeserializationContext ctxt) throws IOException {\n    // First things first: id Object Id is used, most likely that's it\n    if (_objectIdReader != null) {\n        return deserializeFromObjectId(p, ctxt);\n    }\n        if (_delegateDeserializer != null) {\n        if (!_valueInstantiator.canCreateFromString()) {\n            Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            return bean;\n        }\n    }\n    return _valueInstantiator.createFromString(ctxt, p.getText());\n}", "method_range": "1260-1280", "fault_locations": "1260,1261,1262,1263,1269,1272,1280"}, "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromDouble": {"buggy_content": "public Object deserializeFromDouble(JsonParser p, DeserializationContext ctxt) throws IOException {\n    NumberType t = p.getNumberType();\n    // no separate methods for taking float...\n    if ((t == NumberType.DOUBLE) || (t == NumberType.FLOAT)) {\n        if (_delegateDeserializer != null) {\n            if (!_valueInstantiator.canCreateFromDouble()) {\n                Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n                if (_injectables != null) {\n                    injectValues(ctxt, bean);\n                }\n                return bean;\n            }\n        }\n        return _valueInstantiator.createFromDouble(ctxt, p.getDoubleValue());\n    }\n    // actually, could also be BigDecimal, so:\n    if (_delegateDeserializer != null) {\n        return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n    }\n    return ctxt.handleMissingInstantiator(handledType(), p, \"no suitable creator method found to deserialize from Number value (%s)\", p.getNumberValue());\n}", "method_range": "1286-1311", "fault_locations": "1291,1292,1293,1294,1304,1306"}, "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromBoolean": {"buggy_content": "public Object deserializeFromBoolean(JsonParser p, DeserializationContext ctxt) throws IOException {\n    if (_delegateDeserializer != null) {\n        if (!_valueInstantiator.canCreateFromBoolean()) {\n            Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            return bean;\n        }\n    }\n    boolean value = (p.getCurrentToken() == JsonToken.VALUE_TRUE);\n    return _valueInstantiator.createFromBoolean(ctxt, value);\n}", "method_range": "1316-1330", "fault_locations": "1318,1319,1320,1321"}, "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromArray": {"buggy_content": "public Object deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException {\n    // note: can not call `_delegateDeserializer()` since order reversed here:\n    if (_arrayDelegateDeserializer != null) {\n        try {\n            Object bean = _valueInstantiator.createUsingArrayDelegate(ctxt, _arrayDelegateDeserializer.deserialize(p, ctxt));\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            return bean;\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }\n    // fallback to non-array delegate\n    if (_delegateDeserializer != null) {\n        try {\n            Object bean = _valueInstantiator.createUsingArrayDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            return bean;\n        } catch (Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null;\n        }\n    }\n    if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n        JsonToken t = p.nextToken();\n        if (t == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n            return null;\n        }\n        final Object value = deserialize(p, ctxt);\n        if (p.nextToken() != JsonToken.END_ARRAY) {\n            handleMissingEndArrayForSingle(p, ctxt);\n        }\n        return value;\n    }\n    if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n        JsonToken t = p.nextToken();\n        if (t == JsonToken.END_ARRAY) {\n            return null;\n        }\n        return ctxt.handleUnexpectedToken(handledType(), JsonToken.START_ARRAY, p, null);\n    }\n    return ctxt.handleUnexpectedToken(handledType(), p);\n}", "method_range": "1332-1380", "fault_locations": "1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1347,1348,1350,1355,1356,1357,1358,1364,1365"}}