{"com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.deserializeKey": {"buggy_content": "@Override\npublic Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {\n    if (key == null) {\n        // is this even legal call?\n        return null;\n    }\n    try {\n        Object result = _parse(key, ctxt);\n        if (result != null) {\n            return result;\n        }\n    } catch (Exception re) {\n        return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: %s\", re.getMessage());\n    }\n    if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n        return null;\n    }\n    return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");\n}", "method_range": "115-134", "fault_locations": "128"}, "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findFactoryMethod": {"buggy_content": "@Override\npublic Method findFactoryMethod(Class<?>... expArgTypes) {\n    // So, of all single-arg static methods:\n    for (AnnotatedMethod am : _classInfo.getStaticMethods()) {\n        // 24-Oct-2016, tatu: Better ensure it only takes 1 arg, no matter what\n        if (isFactoryMethod(am)) {\n            // And must take one of expected arg types (or supertype)\n            Class<?> actualArgType = am.getRawParameterType(0);\n            for (Class<?> expArgType : expArgTypes) {\n                // And one that matches what we would pass in\n                if (actualArgType.isAssignableFrom(expArgType)) {\n                    return am.getAnnotated();\n                }\n            }\n        }\n    }\n    return null;\n}", "method_range": "519-537", "fault_locations": "525"}, "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.isFactoryMethod": {"buggy_content": "protected boolean isFactoryMethod(AnnotatedMethod am) {\n        Class<?> rt = am.getRawReturnType();\n    if (!getBeanClass().isAssignableFrom(rt)) {\n        return false;\n    }\n        if (_annotationIntrospector.hasCreatorAnnotation(am)) {\n        return true;\n    }\n    final String name = am.getName();\n    // 24-Oct-2016, tatu: As per [databind#1429] must ensure takes exactly one arg\n    if (\"valueOf\".equals(name)) {\n        return true;\n    }\n    // [databind#208] Also accept \"fromString()\", if takes String or CharSequence\n    if (\"fromString\".equals(name)) {\n        if (am.getParameterCount() == 1) {\n            Class<?> cls = am.getRawParameterType(0);\n            if (cls == String.class || CharSequence.class.isAssignableFrom(cls)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "method_range": "539-570", "fault_locations": "556,557,558"}}