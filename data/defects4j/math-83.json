{"org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow": {"buggy_content": "private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n    Integer row = null;\n    int start = getNumObjectiveFunctions();\n    for (int i = start; i < getHeight(); i++) {\n        if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n            row = i;\n        } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n            return null;\n        }\n    }\n    return row;\n}", "method_range": "290-301", "fault_locations": "292"}, "org.apache.commons.math.optimization.linear.SimplexTableau.getSolution": {"buggy_content": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n    Set<Integer> basicRows = new HashSet<Integer>();\n    for (int i = 0; i < coefficients.length; i++) {\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRows.contains(basicRow)) {\n            // if multiple variables can take a given value\n            // then we choose the first and set the rest equal to 0\n            coefficients[i] = 0;\n        } else {\n            basicRows.add(basicRow);\n            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}", "method_range": "339-358", "fault_locations": "341,345"}}