{"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream": {"buggy_content": "public CompressorInputStream createCompressorInputStream(final InputStream in) throws CompressorException {\n    if (in == null) {\n        throw new IllegalArgumentException(\"Stream must not be null.\");\n    }\n    if (!in.markSupported()) {\n        throw new IllegalArgumentException(\"Mark is not supported.\");\n    }\n    final byte[] signature = new byte[12];\n    in.mark(signature.length);\n    try {\n        int signatureLength = IOUtils.readFully(in, signature);\n        in.reset();\n        if (BZip2CompressorInputStream.matches(signature, signatureLength)) {\n            return new BZip2CompressorInputStream(in, decompressConcatenated);\n        }\n        if (GzipCompressorInputStream.matches(signature, signatureLength)) {\n            return new GzipCompressorInputStream(in, decompressConcatenated);\n        }\n        if (Pack200CompressorInputStream.matches(signature, signatureLength)) {\n            return new Pack200CompressorInputStream(in);\n        }\n        if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) {\n            return new FramedSnappyCompressorInputStream(in);\n        }\n        if (ZCompressorInputStream.matches(signature, signatureLength)) {\n            return new ZCompressorInputStream(in);\n        }\n        if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) {\n            return new XZCompressorInputStream(in, decompressConcatenated);\n        }\n        if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) {\n            return new LZMACompressorInputStream(in);\n        }\n    } catch (IOException e) {\n        throw new CompressorException(\"Failed to detect Compressor from InputStream.\", e);\n    }\n    throw new CompressorException(\"No Compressor found for the stream signature.\");\n}", "method_range": "204-256", "fault_locations": "239,240"}}