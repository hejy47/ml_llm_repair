{"org.joda.time.chrono.ZonedChronology.add": {"buggy_content": "public long add(long instant, int value) {\n    if (iTimeField) {\n        int offset = getOffsetToAdd(instant);\n        long localInstant = iField.add(instant + offset, value);\n        return localInstant - offset;\n    } else {\n        long localInstant = iZone.convertUTCToLocal(instant);\n        localInstant = iField.add(localInstant, value);\n        return iZone.convertLocalToUTC(localInstant, false);\n    }\n}", "method_range": "428-438", "fault_locations": "436"}, "org.joda.time.chrono.ZonedChronology.add1": {"buggy_content": "public long add(long instant, long value) {\n    if (iTimeField) {\n        int offset = getOffsetToAdd(instant);\n        long localInstant = iField.add(instant + offset, value);\n        return localInstant - offset;\n    } else {\n        long localInstant = iZone.convertUTCToLocal(instant);\n        localInstant = iField.add(localInstant, value);\n        return iZone.convertLocalToUTC(localInstant, false);\n    }\n}", "method_range": "440-450", "fault_locations": "446,447,448"}, "org.joda.time.chrono.ZonedChronology.addWrapField": {"buggy_content": "public long addWrapField(long instant, int value) {\n    if (iTimeField) {\n        int offset = getOffsetToAdd(instant);\n        long localInstant = iField.addWrapField(instant + offset, value);\n        return localInstant - offset;\n    } else {\n        long localInstant = iZone.convertUTCToLocal(instant);\n        localInstant = iField.addWrapField(localInstant, value);\n        return iZone.convertLocalToUTC(localInstant, false);\n    }\n}", "method_range": "452-462", "fault_locations": "457,458,460"}, "org.joda.time.chrono.ZonedChronology.set": {"buggy_content": "public long set(long instant, int value) {\n    long localInstant = iZone.convertUTCToLocal(instant);\n    localInstant = iField.set(localInstant, value);\n    long result = iZone.convertLocalToUTC(localInstant, false);\n    if (get(result) != value) {\n        throw new IllegalFieldValueException(iField.getType(), new Integer(value), \"Illegal instant due to time zone offset transition: \" + DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) + \" (\" + iZone.getID() + \")\");\n    }\n    return result;\n}", "method_range": "464-475", "fault_locations": "464,467"}, "org.joda.time.chrono.ZonedChronology.set4": {"buggy_content": "public long set(long instant, String text, Locale locale) {\n    // cannot verify that new value stuck because set may be lenient\n    long localInstant = iZone.convertUTCToLocal(instant);\n    localInstant = iField.set(localInstant, text, locale);\n    return iZone.convertLocalToUTC(localInstant, false);\n}", "method_range": "477-482", "fault_locations": "477,481"}, "org.joda.time.chrono.ZonedChronology.roundFloor": {"buggy_content": "public long roundFloor(long instant) {\n    if (iTimeField) {\n        int offset = getOffsetToAdd(instant);\n        instant = iField.roundFloor(instant + offset);\n        return instant - offset;\n    } else {\n        long localInstant = iZone.convertUTCToLocal(instant);\n        localInstant = iField.roundFloor(localInstant);\n        return iZone.convertLocalToUTC(localInstant, false);\n    }\n}", "method_range": "520-530", "fault_locations": "522,523,528"}, "org.joda.time.chrono.ZonedChronology.roundCeiling": {"buggy_content": "public long roundCeiling(long instant) {\n    if (iTimeField) {\n        int offset = getOffsetToAdd(instant);\n        instant = iField.roundCeiling(instant + offset);\n        return instant - offset;\n    } else {\n        long localInstant = iZone.convertUTCToLocal(instant);\n        localInstant = iField.roundCeiling(localInstant);\n        return iZone.convertLocalToUTC(localInstant, false);\n    }\n}", "method_range": "532-542", "fault_locations": "533,534,540"}, "org.joda.time.field.LenientDateTimeField.set": {"buggy_content": "public long set(long instant, int value) {\n    // lenient needs to handle time zone chronologies\n    // so we do the calculation using local milliseconds\n    long localInstant = iBase.getZone().convertUTCToLocal(instant);\n    long difference = FieldUtils.safeSubtract(value, get(instant));\n    localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);\n    return iBase.getZone().convertLocalToUTC(localInstant, false);\n}", "method_range": "69-76", "fault_locations": "75"}}