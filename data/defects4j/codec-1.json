{"org.apache.commons.codec.language.Caverphone.caverphone": {"buggy_content": "public String caverphone(String txt) {\n    // NOTE: Version 1.0 of Caverphone is easily derivable from this code\n    // by commenting out the 2.0 lines and adding in the 1.0 lines\n    if (txt == null || txt.length() == 0) {\n        return \"1111111111\";\n    }\n    // 1. Convert to lowercase\n    txt = txt.toLowerCase();\n    // 2. Remove anything not A-Z\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    // 2.5. Remove final e\n    // 2.0 only\n    txt = txt.replaceAll(\"e$\", \"\");\n    // 3. Handle various start options\n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    // 2.0 only\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");\n    // 2.0 only - note the spec says ^enough here again, c+p error I assume\n    txt = txt.replaceAll(\"^trough\", \"trou2f\");\n    txt = txt.replaceAll(\"^gn\", \"2n\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    // 4. Handle replacements\n    txt = txt.replaceAll(\"cq\", \"2q\");\n    txt = txt.replaceAll(\"ci\", \"si\");\n    txt = txt.replaceAll(\"ce\", \"se\");\n    txt = txt.replaceAll(\"cy\", \"sy\");\n    txt = txt.replaceAll(\"tch\", \"2ch\");\n    txt = txt.replaceAll(\"c\", \"k\");\n    txt = txt.replaceAll(\"q\", \"k\");\n    txt = txt.replaceAll(\"x\", \"k\");\n    txt = txt.replaceAll(\"v\", \"f\");\n    txt = txt.replaceAll(\"dg\", \"2g\");\n    txt = txt.replaceAll(\"tio\", \"sio\");\n    txt = txt.replaceAll(\"tia\", \"sia\");\n    txt = txt.replaceAll(\"d\", \"t\");\n    txt = txt.replaceAll(\"ph\", \"fh\");\n    txt = txt.replaceAll(\"b\", \"p\");\n    txt = txt.replaceAll(\"sh\", \"s2\");\n    txt = txt.replaceAll(\"z\", \"s\");\n    txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n    txt = txt.replaceAll(\"[aeiou]\", \"3\");\n    // 2.0 only\n    txt = txt.replaceAll(\"j\", \"y\");\n    // 2.0 only\n    txt = txt.replaceAll(\"^y3\", \"Y3\");\n    // 2.0 only\n    txt = txt.replaceAll(\"^y\", \"A\");\n    // 2.0 only\n    txt = txt.replaceAll(\"y\", \"3\");\n    txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n    txt = txt.replaceAll(\"gh\", \"22\");\n    txt = txt.replaceAll(\"g\", \"k\");\n    txt = txt.replaceAll(\"s+\", \"S\");\n    txt = txt.replaceAll(\"t+\", \"T\");\n    txt = txt.replaceAll(\"p+\", \"P\");\n    txt = txt.replaceAll(\"k+\", \"K\");\n    txt = txt.replaceAll(\"f+\", \"F\");\n    txt = txt.replaceAll(\"m+\", \"M\");\n    txt = txt.replaceAll(\"n+\", \"N\");\n    txt = txt.replaceAll(\"w3\", \"W3\");\n    //txt = txt.replaceAll(\"wy\", \"Wy\");    // 1.0 only\n    txt = txt.replaceAll(\"wh3\", \"Wh3\");\n    // 2.0 only\n    txt = txt.replaceAll(\"w$\", \"3\");\n    //txt = txt.replaceAll(\"why\", \"Why\");  // 1.0 only\n    txt = txt.replaceAll(\"w\", \"2\");\n    txt = txt.replaceAll(\"^h\", \"A\");\n    txt = txt.replaceAll(\"h\", \"2\");\n    txt = txt.replaceAll(\"r3\", \"R3\");\n    // 2.0 only\n    txt = txt.replaceAll(\"r$\", \"3\");\n    //txt = txt.replaceAll(\"ry\", \"Ry\");    // 1.0 only\n    txt = txt.replaceAll(\"r\", \"2\");\n    txt = txt.replaceAll(\"l3\", \"L3\");\n    // 2.0 only\n    txt = txt.replaceAll(\"l$\", \"3\");\n    //txt = txt.replaceAll(\"ly\", \"Ly\");    // 1.0 only\n    txt = txt.replaceAll(\"l\", \"2\");\n    //txt = txt.replaceAll(\"j\", \"y\");      // 1.0 only\n    //txt = txt.replaceAll(\"y3\", \"Y3\");    // 1.0 only\n    //txt = txt.replaceAll(\"y\", \"2\");      // 1.0 only\n    // 5. Handle removals\n    txt = txt.replaceAll(\"2\", \"\");\n    // 2.0 only\n    txt = txt.replaceAll(\"3$\", \"A\");\n    txt = txt.replaceAll(\"3\", \"\");\n    // 6. put ten 1s on the end\n    // 1.0 only has 6 1s\n    txt = txt + \"111111\" + \"1111\";\n    // 7. take the first six characters as the code\n    // 1.0 truncates to 6\n    return txt.substring(0, 10);\n}", "method_range": "50-140", "fault_locations": "59"}, "org.apache.commons.codec.language.Metaphone.metaphone": {"buggy_content": "public String metaphone(String txt) {\n    boolean hard = false;\n    if ((txt == null) || (txt.length() == 0)) {\n        return \"\";\n    }\n    // single character is itself\n    if (txt.length() == 1) {\n        return txt.toUpperCase();\n    }\n    char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n    // manipulate\n    StringBuffer local = new StringBuffer(40);\n    //   output\n    StringBuffer code = new StringBuffer(10);\n    // handle initial 2 characters exceptions\n    switch(inwd[0]) {\n        case 'K':\n        case 'G':\n        case 'P':\n                        if (inwd[1] == 'N') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'A':\n                        if (inwd[1] == 'E') {\n                local.append(inwd, 1, inwd.length - 1);\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'W':\n                        if (inwd[1] == 'R') {\n                // WR -> R\n                local.append(inwd, 1, inwd.length - 1);\n                break;\n            }\n            if (inwd[1] == 'H') {\n                local.append(inwd, 1, inwd.length - 1);\n                // WH -> W\n                local.setCharAt(0, 'W');\n            } else {\n                local.append(inwd);\n            }\n            break;\n        case 'X':\n                        inwd[0] = 'S';\n            local.append(inwd);\n            break;\n        default:\n            local.append(inwd);\n    }\n    // now local has working string with initials fixed\n    int wdsz = local.length();\n    int n = 0;\n    while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {\n        // max code size of 4 works well\n        char symb = local.charAt(n);\n        // remove duplicate letters except C\n        if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n            n++;\n        } else {\n            // not dup\n            switch(symb) {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    if (n == 0) {\n                        code.append(symb);\n                    }\n                    // only use vowel if leading char\n                    break;\n                case 'B':\n                    if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {\n                        // B is silent if word ends in MB\n                        break;\n                    }\n                    code.append(symb);\n                    break;\n                case // lots of C special cases\n                'C':\n                                        if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        break;\n                    }\n                    if (regionMatch(local, n, \"CIA\")) {\n                        // \"CIA\" -> X\n                        code.append('X');\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n                        code.append('S');\n                        // CI,CE,CY -> S\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {\n                        // SCH->sk\n                        code.append('K');\n                        break;\n                    }\n                    if (isNextChar(local, n, 'H')) {\n                        // detect CH\n                        if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {\n                            // CH consonant -> K consonant\n                            code.append('K');\n                        } else {\n                            // CHvowel -> X\n                            code.append('X');\n                        }\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'D':\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {\n                        // DGE DGI DGY -> J\n                        code.append('J');\n                        n += 2;\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case // GH silent at end or before consonant\n                'G':\n                    if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {\n                        break;\n                    }\n                    if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {\n                        break;\n                    }\n                    if ((n > 0) && (regionMatch(local, n, \"GN\") || regionMatch(local, n, \"GNED\"))) {\n                        // silent G\n                        break;\n                    }\n                    if (isPreviousChar(local, n, 'G')) {\n                        hard = true;\n                    } else {\n                        hard = false;\n                    }\n                    if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                        code.append('J');\n                    } else {\n                        code.append('K');\n                    }\n                    break;\n                case 'H':\n                    if (isLastChar(wdsz, n)) {\n                        // terminal H\n                        break;\n                    }\n                    if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n                        break;\n                    }\n                    if (isVowel(local, n + 1)) {\n                        // Hvowel\n                        code.append('H');\n                    }\n                    break;\n                case 'F':\n                case 'J':\n                case 'L':\n                case 'M':\n                case 'N':\n                case 'R':\n                    code.append(symb);\n                    break;\n                case 'K':\n                    if (n > 0) {\n                        // not initial\n                        if (!isPreviousChar(local, n, 'C')) {\n                            code.append(symb);\n                        }\n                    } else {\n                        // initial K\n                        code.append(symb);\n                    }\n                    break;\n                case 'P':\n                    if (isNextChar(local, n, 'H')) {\n                        // PH -> F\n                        code.append('F');\n                    } else {\n                        code.append(symb);\n                    }\n                    break;\n                case 'Q':\n                    code.append('K');\n                    break;\n                case 'S':\n                    if (regionMatch(local, n, \"SH\") || regionMatch(local, n, \"SIO\") || regionMatch(local, n, \"SIA\")) {\n                        code.append('X');\n                    } else {\n                        code.append('S');\n                    }\n                    break;\n                case 'T':\n                    if (regionMatch(local, n, \"TIA\") || regionMatch(local, n, \"TIO\")) {\n                        code.append('X');\n                        break;\n                    }\n                    if (regionMatch(local, n, \"TCH\")) {\n                        // Silent if in \"TCH\"\n                        break;\n                    }\n                    // substitute numeral 0 for TH (resembles theta after all)\n                    if (regionMatch(local, n, \"TH\")) {\n                        code.append('0');\n                    } else {\n                        code.append('T');\n                    }\n                    break;\n                case 'V':\n                    code.append('F');\n                    break;\n                case 'W':\n                case // silent if not followed by vowel\n                'Y':\n                    if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {\n                        code.append(symb);\n                    }\n                    break;\n                case 'X':\n                    code.append('K');\n                    code.append('S');\n                    break;\n                case 'Z':\n                    code.append('S');\n                    break;\n            }\n            // end switch\n            n++;\n        }\n        // end else from symb != 'C'\n        if (code.length() > this.getMaxCodeLen()) {\n            code.setLength(this.getMaxCodeLen());\n        }\n    }\n    return code.toString();\n}", "method_range": "81-313", "fault_locations": "88"}, "org.apache.commons.codec.language.SoundexUtils.clean": {"buggy_content": "static String clean(String str) {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    int len = str.length();\n    char[] chars = new char[len];\n    int count = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isLetter(str.charAt(i))) {\n            chars[count++] = str.charAt(i);\n        }\n    }\n    if (count == len) {\n        return str.toUpperCase();\n    }\n    return new String(chars, 0, count).toUpperCase(java.util.Locale.ENGLISH);\n}", "method_range": "40-56", "fault_locations": "53"}}