{"com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType": {"buggy_content": "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {\n    // simple optimization to avoid costly introspection if type-erased type does NOT differ\n    final Class<?> rawBase = baseType.getRawClass();\n    if (rawBase == subclass) {\n        return baseType;\n    }\n    JavaType newType;\n    // also: if we start from untyped, not much to save\n    do {\n        // bogus loop to be able to break\n        if (rawBase == Object.class) {\n            newType = _fromClass(null, subclass, TypeBindings.emptyBindings());\n            break;\n        }\n        if (!rawBase.isAssignableFrom(subclass)) {\n            throw new IllegalArgumentException(String.format(\"Class %s not subtype of %s\", subclass.getName(), baseType));\n        }\n        // A few special cases where we can simplify handling:\n        // (1) Original target type has no generics -- just resolve subtype\n        if (baseType.getBindings().isEmpty()) {\n            newType = _fromClass(null, subclass, TypeBindings.emptyBindings());\n            break;\n        }\n        // (2) A small set of \"well-known\" List/Map subtypes where can take a short-cut\n        if (baseType.isContainerType()) {\n            if (baseType.isMapLikeType()) {\n                if ((subclass == HashMap.class) || (subclass == LinkedHashMap.class) || (subclass == EnumMap.class) || (subclass == TreeMap.class)) {\n                    newType = _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));\n                    break;\n                }\n            } else if (baseType.isCollectionLikeType()) {\n                if ((subclass == ArrayList.class) || (subclass == LinkedList.class) || (subclass == HashSet.class) || (subclass == TreeSet.class)) {\n                    newType = _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getContentType()));\n                    break;\n                }\n                // 29-Oct-2015, tatu: One further shortcut: there are variants of `EnumSet`,\n                //    but they are impl details and we basically do not care...\n                if (rawBase == EnumSet.class) {\n                    return baseType;\n                }\n            }\n        }\n        // (3) Sub-class does not take type parameters -- just resolve subtype\n        int typeParamCount = subclass.getTypeParameters().length;\n        if (typeParamCount == 0) {\n            newType = _fromClass(null, subclass, TypeBindings.emptyBindings());\n            break;\n        }\n        // (4) If all else fails, do the full traversal using placeholders\n        TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass);\n        newType = _fromClass(null, subclass, tb);\n    } while (false);\n    // 25-Sep-2016, tatu: As per [databind#1384] also need to ensure handlers get\n    //   copied as well\n    newType = newType.withHandlersFrom(baseType);\n    return newType;\n}", "method_range": "342-412", "fault_locations": "355,364,365,366"}, "com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType": {"buggy_content": "public JavaType constructParametricType(Class<?> parametrized, Class<?>... parameterClasses) {\n    int len = parameterClasses.length;\n    JavaType[] pt = new JavaType[len];\n    for (int i = 0; i < len; ++i) {\n        pt[i] = _fromClass(null, parameterClasses[i], null);\n    }\n    return constructParametricType(parametrized, pt);\n}", "method_range": "892-899", "fault_locations": "893,894,896"}, "com.fasterxml.jackson.databind.type.TypeParser.parseType": {"buggy_content": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n    if (!tokens.hasMoreTokens()) {\n        throw _problem(tokens, \"Unexpected end-of-string\");\n    }\n    Class<?> base = findClass(tokens.nextToken(), tokens);\n    // either end (ok, non generic type), or generics\n    if (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken();\n        if (\"<\".equals(token)) {\n            List<JavaType> parameterTypes = parseTypes(tokens);\n            TypeBindings b = TypeBindings.create(base, parameterTypes);\n            return _factory._fromClass(null, base, b);\n        }\n        // can be comma that separates types, or closing '>'\n        tokens.pushBack(token);\n    }\n    return _factory._fromClass(null, base, null);\n}", "method_range": "40-60", "fault_locations": "59"}}