{"com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.refineSerializationType": {"buggy_content": "@Override\npublic JavaType refineSerializationType(final MapperConfig<?> config, final Annotated a, final JavaType baseType) throws JsonMappingException {\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    final JsonSerialize jsonSer = _findAnnotation(a, JsonSerialize.class);\n    // Ok: start by refining the main type itself; common to all types\n    final Class<?> serClass = (jsonSer == null) ? null : _classIfExplicit(jsonSer.as());\n    if (serClass != null) {\n        if (type.hasRawClass(serClass)) {\n            // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of\n            //    static typing this way\n            type = type.withStaticTyping();\n        } else {\n            Class<?> currRaw = type.getRawClass();\n            try {\n                // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,\n                //   may be needed here too in future?\n                if (serClass.isAssignableFrom(currRaw)) {\n                    // common case\n                    type = tf.constructGeneralizedType(type, serClass);\n                } else if (currRaw.isAssignableFrom(serClass)) {\n                    // specialization, ok as well\n                    type = tf.constructSpecializedType(type, serClass);\n                    // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements\n                } else {\n                    throw new JsonMappingException(null, String.format(\"Can not refine serialization type %s into %s; types not related\", type, serClass.getName()));\n                }\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null, String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\", type, serClass.getName(), a.getName(), iae.getMessage()), iae);\n            }\n        }\n    }\n    // Then further processing for container types\n    // First, key type (for Maps, Map-like types):\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        final Class<?> keyClass = (jsonSer == null) ? null : _classIfExplicit(jsonSer.keyAs());\n        if (keyClass != null) {\n            if (keyType.hasRawClass(keyClass)) {\n                keyType = keyType.withStaticTyping();\n            } else {\n                Class<?> currRaw = keyType.getRawClass();\n                try {\n                    // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually\n                    //   specialize (narrow) type sometimes, even if more commonly opposite\n                    //   is needed.\n                    if (keyClass.isAssignableFrom(currRaw)) {\n                        // common case\n                        keyType = tf.constructGeneralizedType(keyType, keyClass);\n                    } else if (currRaw.isAssignableFrom(keyClass)) {\n                        // specialization, ok as well\n                        keyType = tf.constructSpecializedType(keyType, keyClass);\n                        // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements\n                    } else {\n                        throw new JsonMappingException(null, String.format(\"Can not refine serialization key type %s into %s; types not related\", keyType, keyClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    throw new JsonMappingException(null, String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\", type, keyClass.getName(), a.getName(), iae.getMessage()), iae);\n                }\n            }\n            type = ((MapLikeType) type).withKeyType(keyType);\n        }\n    }\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        // collection[like], map[like], array, reference\n        // And then value types for all containers:\n        final Class<?> contentClass = (jsonSer == null) ? null : _classIfExplicit(jsonSer.contentAs());\n        if (contentClass != null) {\n            if (contentType.hasRawClass(contentClass)) {\n                contentType = contentType.withStaticTyping();\n            } else {\n                // 03-Apr-2016, tatu: As per [databind#1178], may need to actually\n                //   specialize (narrow) type sometimes, even if more commonly opposite\n                //   is needed.\n                Class<?> currRaw = contentType.getRawClass();\n                try {\n                    if (contentClass.isAssignableFrom(currRaw)) {\n                        // common case\n                        contentType = tf.constructGeneralizedType(contentType, contentClass);\n                    } else if (currRaw.isAssignableFrom(contentClass)) {\n                        // specialization, ok as well\n                        contentType = tf.constructSpecializedType(contentType, contentClass);\n                        // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements\n                    } else {\n                        throw new JsonMappingException(null, String.format(\"Can not refine serialization content type %s into %s; types not related\", contentType, contentClass.getName()));\n                    }\n                } catch (IllegalArgumentException iae) {\n                    // shouldn't really happen\n                    throw new JsonMappingException(null, String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\", type, contentClass.getName(), a.getName(), iae.getMessage()), iae);\n                }\n            }\n            type = type.withContentType(contentType);\n        }\n    }\n    return type;\n}", "method_range": "738-848", "fault_locations": "763,764,765,796,797,798,830,831,832"}, "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.refineDeserializationType": {"buggy_content": "@Override\npublic JavaType refineDeserializationType(final MapperConfig<?> config, final Annotated a, final JavaType baseType) throws JsonMappingException {\n    JavaType type = baseType;\n    final TypeFactory tf = config.getTypeFactory();\n    final JsonDeserialize jsonDeser = _findAnnotation(a, JsonDeserialize.class);\n    // Ok: start by refining the main type itself; common to all types\n    final Class<?> valueClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.as());\n    if ((valueClass != null) && !type.hasRawClass(valueClass)) {\n        try {\n            type = tf.constructSpecializedType(type, valueClass);\n        } catch (IllegalArgumentException iae) {\n            throw new JsonMappingException(null, String.format(\"Failed to narrow type %s with annotation (value %s), from '%s': %s\", type, valueClass.getName(), a.getName(), iae.getMessage()), iae);\n        }\n    }\n    // Then further processing for container types\n    // First, key type (for Maps, Map-like types):\n    if (type.isMapLikeType()) {\n        JavaType keyType = type.getKeyType();\n        final Class<?> keyClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.keyAs());\n        if (keyClass != null) {\n            try {\n                keyType = tf.constructSpecializedType(keyType, keyClass);\n                type = ((MapLikeType) type).withKeyType(keyType);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null, String.format(\"Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s\", type, keyClass.getName(), a.getName(), iae.getMessage()), iae);\n            }\n        }\n    }\n    JavaType contentType = type.getContentType();\n    if (contentType != null) {\n        // collection[like], map[like], array, reference\n        // And then value types for all containers:\n        final Class<?> contentClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.contentAs());\n        if (contentClass != null) {\n            try {\n                contentType = tf.constructSpecializedType(contentType, contentClass);\n                type = type.withContentType(contentType);\n            } catch (IllegalArgumentException iae) {\n                throw new JsonMappingException(null, String.format(\"Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s\", type, contentClass.getName(), a.getName(), iae.getMessage()), iae);\n            }\n        }\n    }\n    return type;\n}", "method_range": "1108-1164", "fault_locations": "1119,1133,1134,1135,1148,1149,1151"}, "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._constructNoTypeResolverBuilder": {"buggy_content": "protected StdTypeResolverBuilder _constructNoTypeResolverBuilder() {\n    return StdTypeResolverBuilder.noTypeInfoBuilder();\n}", "method_range": "1453-1455", "fault_locations": "1453,1454,1455"}}