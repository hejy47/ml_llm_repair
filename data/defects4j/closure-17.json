{"com.google.javascript.jscomp.TypedScopeCreator.getDeclaredType": {"buggy_content": "private JSType getDeclaredType(String sourceName, JSDocInfo info, Node lValue, @Nullable Node rValue) {\n    if (info != null && info.hasType()) {\n        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    } else if (rValue != null && rValue.isFunction() && shouldUseFunctionLiteralType(JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        return rValue.getJSType();\n    } else if (info != null) {\n        if (info.hasEnumParameterType()) {\n            if (rValue != null && rValue.isObjectLit()) {\n                return rValue.getJSType();\n            } else {\n                return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n            }\n        } else if (info.isConstructor() || info.isInterface()) {\n            return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n        } else {\n            // Check if this is constant, and if it has a known type.\n            if (info.isConstant()) {\n                JSType knownType = null;\n                if (rValue != null) {\n                    if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n                        // If rValue has a type-cast, we use the type in the type-cast.\n                        // If rValue's type was already computed during scope creation,\n                        // then we can safely use that.\n                        return rValue.getJSType();\n                    } else if (rValue.isOr()) {\n                        // Check for a very specific JS idiom:\n                        // var x = x || TYPE;\n                        // This is used by Closure's base namespace for esoteric\n                        // reasons.\n                        Node firstClause = rValue.getFirstChild();\n                        Node secondClause = firstClause.getNext();\n                        boolean namesMatch = firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString());\n                        if (namesMatch && secondClause.getJSType() != null && !secondClause.getJSType().isUnknownType()) {\n                            return secondClause.getJSType();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}", "method_range": "1267-1317", "fault_locations": "1291"}}