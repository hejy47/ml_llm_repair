{"org.jsoup.parser.HtmlTreeBuilder.getFromStack": {"buggy_content": "Element getFromStack(String elName) {\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (next.nodeName().equals(elName)) {\n            return next;\n        }\n    }\n    return null;\n}", "method_range": "312-320", "fault_locations": "315"}, "org.jsoup.parser.HtmlTreeBuilder.popStackToClose": {"buggy_content": "void popStackToClose(String elName) {\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        stack.remove(pos);\n        if (next.nodeName().equals(elName))\n            break;\n    }\n}", "method_range": "333-340", "fault_locations": "335,336,337"}, "org.jsoup.parser.HtmlTreeBuilder.popStackToClose2": {"buggy_content": "void popStackToClose(String... elNames) {\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        stack.remove(pos);\n        if (inSorted(next.nodeName(), elNames))\n            break;\n    }\n}", "method_range": "343-350", "fault_locations": "344,345,347"}, "org.jsoup.parser.HtmlTreeBuilder.popStackToBefore": {"buggy_content": "void popStackToBefore(String elName) {\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (next.nodeName().equals(elName)) {\n            break;\n        } else {\n            stack.remove(pos);\n        }\n    }\n}", "method_range": "352-361", "fault_locations": "352,355"}, "org.jsoup.parser.HtmlTreeBuilder.clearStackToTableRowContext": {"buggy_content": "void clearStackToTableRowContext() {\n    clearStackToContext(\"tr\", \"template\");\n}", "method_range": "371-373", "fault_locations": "373"}, "org.jsoup.parser.HtmlTreeBuilder.clearStackToContext": {"buggy_content": "private void clearStackToContext(String... nodeNames) {\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))\n            break;\n        else\n            stack.remove(pos);\n    }\n}", "method_range": "375-383", "fault_locations": "378"}, "org.jsoup.parser.HtmlTreeBuilder.resetInsertionMode": {"buggy_content": "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            // frag\n            break;\n        } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) {\n            transition(HtmlTreeBuilderState.InCell);\n            break;\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n            break;\n        } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n            break;\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n            break;\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n            // frag\n            break;\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n            break;\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n            // frag\n            break;\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n            break;\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n            // frag\n            break;\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n            // frag\n            break;\n        } else if (last) {\n            transition(HtmlTreeBuilderState.InBody);\n            // frag\n            break;\n        }\n    }\n}", "method_range": "412-459", "fault_locations": "414,415,420"}, "org.jsoup.parser.HtmlTreeBuilder.inSpecificScope": {"buggy_content": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n    // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope\n    final int bottom = stack.size() - 1;\n    final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;\n    // don't walk too far up the tree\n    for (int pos = bottom; pos >= top; pos--) {\n        final String elName = stack.get(pos).nodeName();\n        if (inSorted(elName, targetNames))\n            return true;\n        if (inSorted(elName, baseTypes))\n            return false;\n        if (extraTypes != null && inSorted(elName, extraTypes))\n            return false;\n    }\n    //Validate.fail(\"Should not be reachable\"); // would end up false because hitting 'html' at root (basetypes)\n    return false;\n}", "method_range": "469-486", "fault_locations": "469,470,476"}, "org.jsoup.parser.HtmlTreeBuilder.inTableScope": {"buggy_content": "boolean inTableScope(String targetName) {\n    return inSpecificScope(targetName, TagSearchTableScope, null);\n}", "method_range": "510-512", "fault_locations": "510"}, "org.jsoup.parser.HtmlTreeBuilder.inSelectScope": {"buggy_content": "boolean inSelectScope(String targetName) {\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element el = stack.get(pos);\n        String elName = el.nodeName();\n        if (elName.equals(targetName))\n            return true;\n        if (// all elements except\n        !inSorted(elName, TagSearchSelectScope))\n            return false;\n    }\n    Validate.fail(\"Should not be reachable\");\n    return false;\n}", "method_range": "514-525", "fault_locations": "517"}, "org.jsoup.parser.HtmlTreeBuilder.generateImpliedEndTags": {"buggy_content": "void generateImpliedEndTags(String excludeTag) {\n    while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop();\n}", "method_range": "568-572", "fault_locations": "569,570,571"}, "org.jsoup.parser.HtmlTreeBuilder.isSpecial": {"buggy_content": "boolean isSpecial(Element el) {\n    // todo: mathml's mi, mo, mn\n    // todo: svg's foreigObject, desc, title\n    String name = el.nodeName();\n    return inSorted(name, TagSearchSpecial);\n}", "method_range": "578-583", "fault_locations": "581"}, "org.jsoup.parser.HtmlTreeBuilder.pushActiveFormattingElements": {"buggy_content": "void pushActiveFormattingElements(Element in) {\n    int numSeen = 0;\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element el = formattingElements.get(pos);\n        if (// marker\n        el == null)\n            break;\n        if (isSameFormattingElement(in, el))\n            numSeen++;\n        if (numSeen == 3) {\n            formattingElements.remove(pos);\n            break;\n        }\n    }\n    formattingElements.add(in);\n}", "method_range": "598-614", "fault_locations": "606,607"}, "org.jsoup.parser.HtmlTreeBuilder.isSameFormattingElement": {"buggy_content": "private boolean isSameFormattingElement(Element a, Element b) {\n    // same if: same namespace, tag, and attributes. Element.equals only checks tag, might in future check children\n    return a.nodeName().equals(b.nodeName()) && // a.namespace().equals(b.namespace()) &&\n    a.attributes().equals(b.attributes());\n    // todo: namespaces\n}", "method_range": "616-622", "fault_locations": "618"}, "org.jsoup.parser.HtmlTreeBuilder.reconstructFormattingElements": {"buggy_content": "void reconstructFormattingElements() {\n    Element last = lastFormattingElement();\n    if (last == null || onStack(last))\n        return;\n    Element entry = last;\n    int size = formattingElements.size();\n    int pos = size - 1;\n    boolean skip = false;\n    while (true) {\n        if (pos == 0) {\n            // step 4. if none before, skip to 8\n            skip = true;\n            break;\n        }\n        // step 5. one earlier than entry\n        entry = formattingElements.get(--pos);\n        if (// step 6 - neither marker nor on stack\n        entry == null || onStack(entry))\n            // jump to 8, else continue back to 4\n            break;\n    }\n    while (true) {\n        if (// step 7: on later than entry\n        !skip)\n            entry = formattingElements.get(++pos);\n        // should not occur, as we break at last element\n        Validate.notNull(entry);\n        // 8. create new element from element, 9 insert into current node, onto stack\n        // can only skip increment from 4.\n        skip = false;\n        Element newEl = insertStartTag(entry.nodeName());\n        // newEl.namespace(entry.namespace()); // todo: namespaces\n        newEl.attributes().addAll(entry.attributes());\n        // 10. replace entry with new entry\n        formattingElements.set(pos, newEl);\n        // 11\n        if (// if not last entry in list, jump to 7\n        pos == size - 1)\n            break;\n    }\n}", "method_range": "624-660", "fault_locations": "636,637,649"}, "org.jsoup.parser.HtmlTreeBuilder.removeFromActiveFormattingElements": {"buggy_content": "void removeFromActiveFormattingElements(Element el) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (next == el) {\n            formattingElements.remove(pos);\n            break;\n        }\n    }\n}", "method_range": "670-678", "fault_locations": "675,676"}, "org.jsoup.parser.HtmlTreeBuilder.getActiveFormattingElement": {"buggy_content": "Element getActiveFormattingElement(String nodeName) {\n    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n        Element next = formattingElements.get(pos);\n        if (// scope marker\n        next == null)\n            break;\n        else if (next.nodeName().equals(nodeName))\n            return next;\n    }\n    return null;\n}", "method_range": "684-693", "fault_locations": "689"}, "org.jsoup.parser.HtmlTreeBuilderState.process": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case Character:\n            {\n                Token.Character c = t.asCharacter();\n                if (c.getData().equals(nullString)) {\n                    // todo confirm that check\n                    tb.error(this);\n                    return false;\n                } else if (tb.framesetOk() && isWhitespace(c)) {\n                    // don't check if whitespace if frames already closed\n                    tb.reconstructFormattingElements();\n                    tb.insert(c);\n                } else {\n                    tb.reconstructFormattingElements();\n                    tb.insert(c);\n                    tb.framesetOk(false);\n                }\n                break;\n            }\n        case Comment:\n            {\n                tb.insert(t.asComment());\n                break;\n            }\n        case Doctype:\n            {\n                tb.error(this);\n                return false;\n            }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            // todo - refactor to a switch statement\n            String name = startTag.normalName();\n            if (name.equals(\"a\")) {\n                if (tb.getActiveFormattingElement(\"a\") != null) {\n                    tb.error(this);\n                    tb.processEndTag(\"a\");\n                    // still on stack?\n                    Element remainingA = tb.getFromStack(\"a\");\n                    if (remainingA != null) {\n                        tb.removeFromActiveFormattingElements(remainingA);\n                        tb.removeFromStack(remainingA);\n                    }\n                }\n                tb.reconstructFormattingElements();\n                Element a = tb.insert(startTag);\n                tb.pushActiveFormattingElements(a);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                tb.reconstructFormattingElements();\n                tb.insertEmpty(startTag);\n                tb.framesetOk(false);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n            } else if (name.equals(\"span\")) {\n                // same as final else, but short circuits lots of checks\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n            } else if (name.equals(\"li\")) {\n                tb.framesetOk(false);\n                ArrayList<Element> stack = tb.getStack();\n                for (int i = stack.size() - 1; i > 0; i--) {\n                    Element el = stack.get(i);\n                    if (el.nodeName().equals(\"li\")) {\n                        tb.processEndTag(\"li\");\n                        break;\n                    }\n                    if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                        break;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n            } else if (name.equals(\"html\")) {\n                tb.error(this);\n                // merge attributes onto real html\n                Element html = tb.getStack().get(0);\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                return tb.process(t, InHead);\n            } else if (name.equals(\"body\")) {\n                tb.error(this);\n                ArrayList<Element> stack = tb.getStack();\n                if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                    // only in fragment case\n                    // ignore\n                    return false;\n                } else {\n                    tb.framesetOk(false);\n                    Element body = stack.get(1);\n                    for (Attribute attribute : startTag.getAttributes()) {\n                        if (!body.hasAttr(attribute.getKey()))\n                            body.attributes().put(attribute);\n                    }\n                }\n            } else if (name.equals(\"frameset\")) {\n                tb.error(this);\n                ArrayList<Element> stack = tb.getStack();\n                if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                    // only in fragment case\n                    // ignore\n                    return false;\n                } else if (!tb.framesetOk()) {\n                    // ignore frameset\n                    return false;\n                } else {\n                    Element second = stack.get(1);\n                    if (second.parent() != null)\n                        second.remove();\n                    // pop up to html element\n                    while (stack.size() > 1) stack.remove(stack.size() - 1);\n                    tb.insert(startTag);\n                    tb.transition(InFrameset);\n                }\n            } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                    tb.error(this);\n                    tb.pop();\n                }\n                tb.insert(startTag);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n                // ignore LF if next token\n                tb.reader.matchConsume(\"\\n\");\n                tb.framesetOk(false);\n            } else if (name.equals(\"form\")) {\n                if (tb.getFormElement() != null) {\n                    tb.error(this);\n                    return false;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insertForm(startTag, true);\n            } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                tb.framesetOk(false);\n                ArrayList<Element> stack = tb.getStack();\n                for (int i = stack.size() - 1; i > 0; i--) {\n                    Element el = stack.get(i);\n                    if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                        tb.processEndTag(el.nodeName());\n                        break;\n                    }\n                    if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                        break;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n            } else if (name.equals(\"plaintext\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n                // once in, never gets out\n                tb.tokeniser.transition(TokeniserState.PLAINTEXT);\n            } else if (name.equals(\"button\")) {\n                if (tb.inButtonScope(\"button\")) {\n                    // close and reprocess\n                    tb.error(this);\n                    tb.processEndTag(\"button\");\n                    tb.process(startTag);\n                } else {\n                    tb.reconstructFormattingElements();\n                    tb.insert(startTag);\n                    tb.framesetOk(false);\n                }\n            } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                tb.reconstructFormattingElements();\n                Element el = tb.insert(startTag);\n                tb.pushActiveFormattingElements(el);\n            } else if (name.equals(\"nobr\")) {\n                tb.reconstructFormattingElements();\n                if (tb.inScope(\"nobr\")) {\n                    tb.error(this);\n                    tb.processEndTag(\"nobr\");\n                    tb.reconstructFormattingElements();\n                }\n                Element el = tb.insert(startTag);\n                tb.pushActiveFormattingElements(el);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.insertMarkerToFormattingElements();\n                tb.framesetOk(false);\n            } else if (name.equals(\"table\")) {\n                if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n                tb.framesetOk(false);\n                tb.transition(InTable);\n            } else if (name.equals(\"input\")) {\n                tb.reconstructFormattingElements();\n                Element el = tb.insertEmpty(startTag);\n                if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                    tb.framesetOk(false);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                tb.insertEmpty(startTag);\n            } else if (name.equals(\"hr\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insertEmpty(startTag);\n                tb.framesetOk(false);\n            } else if (name.equals(\"image\")) {\n                if (tb.getFromStack(\"svg\") == null)\n                    // change <image> to <img>, unless in svg\n                    return tb.process(startTag.name(\"img\"));\n                else\n                    tb.insert(startTag);\n            } else if (name.equals(\"isindex\")) {\n                // how much do we care about the early 90s?\n                tb.error(this);\n                if (tb.getFormElement() != null)\n                    return false;\n                tb.processStartTag(\"form\");\n                if (startTag.attributes.hasKey(\"action\")) {\n                    Element form = tb.getFormElement();\n                    form.attr(\"action\", startTag.attributes.get(\"action\"));\n                }\n                tb.processStartTag(\"hr\");\n                tb.processStartTag(\"label\");\n                // hope you like english.\n                String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \";\n                tb.process(new Token.Character().data(prompt));\n                // input\n                Attributes inputAttribs = new Attributes();\n                for (Attribute attr : startTag.attributes) {\n                    if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                        inputAttribs.put(attr);\n                }\n                inputAttribs.put(\"name\", \"isindex\");\n                tb.processStartTag(\"input\", inputAttribs);\n                tb.processEndTag(\"label\");\n                tb.processStartTag(\"hr\");\n                tb.processEndTag(\"form\");\n            } else if (name.equals(\"textarea\")) {\n                tb.insert(startTag);\n                // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Text);\n            } else if (name.equals(\"xmp\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.reconstructFormattingElements();\n                tb.framesetOk(false);\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"iframe\")) {\n                tb.framesetOk(false);\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"noembed\")) {\n                // also handle noscript if script enabled\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"select\")) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.framesetOk(false);\n                HtmlTreeBuilderState state = tb.state();\n                if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                    tb.transition(InSelectInTable);\n                else\n                    tb.transition(InSelect);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                if (tb.currentElement().nodeName().equals(\"option\"))\n                    tb.processEndTag(\"option\");\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                if (tb.inScope(\"ruby\")) {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                        tb.error(this);\n                        // i.e. close up to but not include name\n                        tb.popStackToBefore(\"ruby\");\n                    }\n                    tb.insert(startTag);\n                }\n            } else if (name.equals(\"math\")) {\n                tb.reconstructFormattingElements();\n                // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                tb.insert(startTag);\n            } else if (name.equals(\"svg\")) {\n                tb.reconstructFormattingElements();\n                // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                tb.insert(startTag);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                tb.error(this);\n                return false;\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                // Adoption Agency Algorithm.\n                for (int i = 0; i < 8; i++) {\n                    Element formatEl = tb.getActiveFormattingElement(name);\n                    if (formatEl == null)\n                        return anyOtherEndTag(t, tb);\n                    else if (!tb.onStack(formatEl)) {\n                        tb.error(this);\n                        tb.removeFromActiveFormattingElements(formatEl);\n                        return true;\n                    } else if (!tb.inScope(formatEl.nodeName())) {\n                        tb.error(this);\n                        return false;\n                    } else if (tb.currentElement() != formatEl)\n                        tb.error(this);\n                    Element furthestBlock = null;\n                    Element commonAncestor = null;\n                    boolean seenFormattingElement = false;\n                    ArrayList<Element> stack = tb.getStack();\n                    // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                    // run-aways\n                    final int stackSize = stack.size();\n                    for (int si = 0; si < stackSize && si < 64; si++) {\n                        Element el = stack.get(si);\n                        if (el == formatEl) {\n                            commonAncestor = stack.get(si - 1);\n                            seenFormattingElement = true;\n                        } else if (seenFormattingElement && tb.isSpecial(el)) {\n                            furthestBlock = el;\n                            break;\n                        }\n                    }\n                    if (furthestBlock == null) {\n                        tb.popStackToClose(formatEl.nodeName());\n                        tb.removeFromActiveFormattingElements(formatEl);\n                        return true;\n                    }\n                    // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                    // does that mean: int pos of format el in list?\n                    Element node = furthestBlock;\n                    Element lastNode = furthestBlock;\n                    for (int j = 0; j < 3; j++) {\n                        if (tb.onStack(node))\n                            node = tb.aboveOnStack(node);\n                        if (!tb.isInActiveFormattingElements(node)) {\n                            // note no bookmark check\n                            tb.removeFromStack(node);\n                            continue;\n                        } else if (node == formatEl)\n                            break;\n                        Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                        // case will follow the original node (so honours ParseSettings)\n                        tb.replaceActiveFormattingElement(node, replacement);\n                        tb.replaceOnStack(node, replacement);\n                        node = replacement;\n                        if (lastNode == furthestBlock) {\n                            // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                            // not getting how this bookmark both straddles the element above, but is inbetween here...\n                        }\n                        if (lastNode.parent() != null)\n                            lastNode.remove();\n                        node.appendChild(lastNode);\n                        lastNode = node;\n                    }\n                    if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                        if (lastNode.parent() != null)\n                            lastNode.remove();\n                        tb.insertInFosterParent(lastNode);\n                    } else {\n                        if (lastNode.parent() != null)\n                            lastNode.remove();\n                        commonAncestor.appendChild(lastNode);\n                    }\n                    Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                    adopter.attributes().addAll(formatEl.attributes());\n                    Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                    for (Node childNode : childNodes) {\n                        // append will reparent. thus the clone to avoid concurrent mod.\n                        adopter.appendChild(childNode);\n                    }\n                    furthestBlock.appendChild(adopter);\n                    tb.removeFromActiveFormattingElements(formatEl);\n                    // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                    tb.removeFromStack(formatEl);\n                    tb.insertOnStackAfter(furthestBlock, adopter);\n                }\n            } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                if (!tb.inScope(name)) {\n                    // nothing to close\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (name.equals(\"span\")) {\n                // same as final fall through, but saves short circuit\n                return anyOtherEndTag(t, tb);\n            } else if (name.equals(\"li\")) {\n                if (!tb.inListItemScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (name.equals(\"body\")) {\n                if (!tb.inScope(\"body\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                    tb.transition(AfterBody);\n                }\n            } else if (name.equals(\"html\")) {\n                boolean notIgnored = tb.processEndTag(\"body\");\n                if (notIgnored)\n                    return tb.process(endTag);\n            } else if (name.equals(\"form\")) {\n                Element currentForm = tb.getFormElement();\n                tb.setFormElement(null);\n                if (currentForm == null || !tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    // remove currentForm from stack. will shift anything under up.\n                    tb.removeFromStack(currentForm);\n                }\n            } else if (name.equals(\"p\")) {\n                if (!tb.inButtonScope(name)) {\n                    tb.error(this);\n                    // if no p to close, creates an empty <p></p>\n                    tb.processStartTag(name);\n                    return tb.process(endTag);\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                if (!tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                if (!tb.inScope(Constants.Headings)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(Constants.Headings);\n                }\n            } else if (name.equals(\"sarcasm\")) {\n                // *sigh*\n                return anyOtherEndTag(t, tb);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                if (!tb.inScope(\"name\")) {\n                    if (!tb.inScope(name)) {\n                        tb.error(this);\n                        return false;\n                    }\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                    tb.clearFormattingElementsToLastMarker();\n                }\n            } else if (name.equals(\"br\")) {\n                tb.error(this);\n                tb.processStartTag(\"br\");\n                return false;\n            } else {\n                return anyOtherEndTag(t, tb);\n            }\n            break;\n        case EOF:\n            // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n            // stop parsing\n            break;\n    }\n    return true;\n}", "method_range": "252-765", "fault_locations": "315,317,318,319,336,337,339,349,350,353,367,368,372,392,393,394,395,398,399,402,522,523,528,529,531,538,563,564,574,586,587,598,620,621,633,648,649,660,661,662,675,683,684,694,695,699,703,704,711,712,713,721,725,726,731,745,747,748,750,751,752"}, "org.jsoup.parser.HtmlTreeBuilderState.anyOtherEndTag": {"buggy_content": "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n    String name = tb.settings.normalizeTag(t.asEndTag().name());\n    ArrayList<Element> stack = tb.getStack();\n    for (int pos = stack.size() - 1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (node.nodeName().equals(name)) {\n            tb.generateImpliedEndTags(name);\n            if (!name.equals(tb.currentElement().nodeName()))\n                tb.error(this);\n            tb.popStackToClose(name);\n            break;\n        } else {\n            if (tb.isSpecial(node)) {\n                tb.error(this);\n                return false;\n            }\n        }\n    }\n    return true;\n}", "method_range": "767-786", "fault_locations": "768,772,774"}, "org.jsoup.parser.HtmlTreeBuilderState.process2": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isCharacter()) {\n        tb.newPendingTableCharacters();\n        tb.markInsertionMode();\n        tb.transition(InTableText);\n        return tb.process(t);\n    } else if (t.isComment()) {\n        tb.insert(t.asComment());\n        return true;\n    } else if (t.isDoctype()) {\n        tb.error(this);\n        return false;\n    } else if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (name.equals(\"caption\")) {\n            tb.clearStackToTableContext();\n            tb.insertMarkerToFormattingElements();\n            tb.insert(startTag);\n            tb.transition(InCaption);\n        } else if (name.equals(\"colgroup\")) {\n            tb.clearStackToTableContext();\n            tb.insert(startTag);\n            tb.transition(InColumnGroup);\n        } else if (name.equals(\"col\")) {\n            tb.processStartTag(\"colgroup\");\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            tb.clearStackToTableContext();\n            tb.insert(startTag);\n            tb.transition(InTableBody);\n        } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) {\n            tb.processStartTag(\"tbody\");\n            return tb.process(t);\n        } else if (name.equals(\"table\")) {\n            tb.error(this);\n            boolean processed = tb.processEndTag(\"table\");\n            if (// only ignored if in fragment\n            processed)\n                return tb.process(t);\n        } else if (StringUtil.in(name, \"style\", \"script\")) {\n            return tb.process(t, InHead);\n        } else if (name.equals(\"input\")) {\n            if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) {\n                return anythingElse(t, tb);\n            } else {\n                tb.insertEmpty(startTag);\n            }\n        } else if (name.equals(\"form\")) {\n            tb.error(this);\n            if (tb.getFormElement() != null)\n                return false;\n            else {\n                tb.insertForm(startTag, false);\n            }\n        } else {\n            return anythingElse(t, tb);\n        }\n        // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable\n        return true;\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"table\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            } else {\n                tb.popStackToClose(\"table\");\n            }\n            tb.resetInsertionMode();\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n        // todo: as above todo\n        return true;\n    } else if (t.isEOF()) {\n        if (tb.currentElement().nodeName().equals(\"html\"))\n            tb.error(this);\n        // stops parsing\n        return true;\n    }\n    return anythingElse(t, tb);\n}", "method_range": "808-892", "fault_locations": "863,864,872,873,887"}, "org.jsoup.parser.HtmlTreeBuilderState.anythingElse": {"buggy_content": "boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n    tb.error(this);\n    boolean processed;\n    if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n        tb.setFosterInserts(true);\n        processed = tb.process(t, InBody);\n        tb.setFosterInserts(false);\n    } else {\n        processed = tb.process(t, InBody);\n    }\n    return processed;\n}", "method_range": "894-905", "fault_locations": "897,900,901"}, "org.jsoup.parser.HtmlTreeBuilderState.process4": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case Character:\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else {\n                tb.getPendingTableCharacters().add(c.getData());\n            }\n            break;\n        default:\n            // todo - don't really like the way these table character data lists are built\n            if (tb.getPendingTableCharacters().size() > 0) {\n                for (String character : tb.getPendingTableCharacters()) {\n                    if (!isWhitespace(character)) {\n                        // InTable anything else section:\n                        tb.error(this);\n                        if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                            tb.setFosterInserts(true);\n                            tb.process(new Token.Character().data(character), InBody);\n                            tb.setFosterInserts(false);\n                        } else {\n                            tb.process(new Token.Character().data(character), InBody);\n                        }\n                    } else\n                        tb.insert(new Token.Character().data(character));\n                }\n                tb.newPendingTableCharacters();\n            }\n            tb.transition(tb.originalState());\n            return tb.process(t);\n    }\n    return true;\n}", "method_range": "908-942", "fault_locations": "926,927,928"}, "org.jsoup.parser.HtmlTreeBuilderState.process5": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (!tb.inTableScope(name)) {\n            tb.error(this);\n            return false;\n        } else {\n            tb.generateImpliedEndTags();\n            if (!tb.currentElement().nodeName().equals(\"caption\"))\n                tb.error(this);\n            tb.popStackToClose(\"caption\");\n            tb.clearFormattingElementsToLastMarker();\n            tb.transition(InTable);\n        }\n    } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\"))) {\n        tb.error(this);\n        boolean processed = tb.processEndTag(\"caption\");\n        if (processed)\n            return tb.process(t);\n    } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n        tb.error(this);\n        return false;\n    } else {\n        return tb.process(t, InBody);\n    }\n    return true;\n}", "method_range": "945-977", "fault_locations": "954"}, "org.jsoup.parser.HtmlTreeBuilderState.process6": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (isWhitespace(t)) {\n        tb.insert(t.asCharacter());\n        return true;\n    }\n    switch(t.type) {\n        case Comment:\n            tb.insert(t.asComment());\n            break;\n        case Doctype:\n            tb.error(this);\n            break;\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            switch(startTag.normalName()) {\n                case \"html\":\n                    return tb.process(t, InBody);\n                case \"col\":\n                    tb.insertEmpty(startTag);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            if (endTag.normalName.equals(\"colgroup\")) {\n                if (tb.currentElement().nodeName().equals(\"html\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else\n                return anythingElse(t, tb);\n            break;\n        case EOF:\n            if (tb.currentElement().nodeName().equals(\"html\"))\n                // stop parsing; frag case\n                return true;\n            else\n                return anythingElse(t, tb);\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "method_range": "980-1026", "fault_locations": "980,989,990,1007,1018"}, "org.jsoup.parser.HtmlTreeBuilderState.process7": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            if (name.equals(\"template\")) {\n                tb.insert(startTag);\n            } else if (name.equals(\"tr\")) {\n                tb.clearStackToTableBodyContext();\n                tb.insert(startTag);\n                tb.transition(InRow);\n            } else if (StringUtil.in(name, \"th\", \"td\")) {\n                tb.error(this);\n                tb.processStartTag(\"tr\");\n                return tb.process(startTag);\n            } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                return exitTableBody(t, tb);\n            } else\n                return anythingElse(t, tb);\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                if (!tb.inTableScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.clearStackToTableBodyContext();\n                    tb.pop();\n                    tb.transition(InTable);\n                }\n            } else if (name.equals(\"table\")) {\n                return exitTableBody(t, tb);\n            } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else\n                return anythingElse(t, tb);\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "method_range": "1036-1080", "fault_locations": "1059,1060"}, "org.jsoup.parser.HtmlTreeBuilderState.exitTableBody": {"buggy_content": "private boolean exitTableBody(Token t, HtmlTreeBuilder tb) {\n    if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) {\n        // frag case\n        tb.error(this);\n        return false;\n    }\n    tb.clearStackToTableBodyContext();\n    tb.processEndTag(tb.currentElement().nodeName());\n    return tb.process(t);\n}", "method_range": "1082-1091", "fault_locations": "1089"}, "org.jsoup.parser.HtmlTreeBuilderState.process9": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isStartTag()) {\n        Token.StartTag startTag = t.asStartTag();\n        String name = startTag.normalName();\n        if (name.equals(\"template\")) {\n            tb.insert(startTag);\n        } else if (StringUtil.in(name, \"th\", \"td\")) {\n            tb.clearStackToTableRowContext();\n            tb.insert(startTag);\n            tb.transition(InCell);\n            tb.insertMarkerToFormattingElements();\n        } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n            return handleMissingTr(t, tb);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (name.equals(\"tr\")) {\n            if (!tb.inTableScope(name)) {\n                // frag\n                tb.error(this);\n                return false;\n            }\n            tb.clearStackToTableRowContext();\n            // tr\n            tb.pop();\n            tb.transition(InTableBody);\n        } else if (name.equals(\"table\")) {\n            return handleMissingTr(t, tb);\n        } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            tb.processEndTag(\"tr\");\n            return tb.process(t);\n        } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {\n            tb.error(this);\n            return false;\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "method_range": "1098-1146", "fault_locations": "1142,1143"}, "org.jsoup.parser.HtmlTreeBuilderState.process10": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (t.isEndTag()) {\n        Token.EndTag endTag = t.asEndTag();\n        String name = endTag.normalName();\n        if (StringUtil.inSorted(name, Constants.InCellNames)) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                // might not be in scope if empty: <td /> and processing fake end tag\n                tb.transition(InRow);\n                return false;\n            }\n            tb.generateImpliedEndTags();\n            if (!tb.currentElement().nodeName().equals(name))\n                tb.error(this);\n            tb.popStackToClose(name);\n            tb.clearFormattingElementsToLastMarker();\n            tb.transition(InRow);\n        } else if (StringUtil.inSorted(name, Constants.InCellBody)) {\n            tb.error(this);\n            return false;\n        } else if (StringUtil.inSorted(name, Constants.InCellTable)) {\n            if (!tb.inTableScope(name)) {\n                tb.error(this);\n                return false;\n            }\n            closeCell(tb);\n            return tb.process(t);\n        } else {\n            return anythingElse(t, tb);\n        }\n    } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) {\n        if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) {\n            tb.error(this);\n            return false;\n        }\n        closeCell(tb);\n        return tb.process(t);\n    } else {\n        return anythingElse(t, tb);\n    }\n    return true;\n}", "method_range": "1161-1203", "fault_locations": "1173"}, "org.jsoup.parser.HtmlTreeBuilderState.closeCell": {"buggy_content": "private void closeCell(HtmlTreeBuilder tb) {\n    if (tb.inTableScope(\"td\"))\n        tb.processEndTag(\"td\");\n    else\n        // only here if th or td in scope\n        tb.processEndTag(\"th\");\n}", "method_range": "1209-1214", "fault_locations": "1209,1211,1212,1213"}, "org.jsoup.parser.HtmlTreeBuilderState.process12": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch(t.type) {\n        case Character:\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else {\n                tb.insert(c);\n            }\n            break;\n        case Comment:\n            tb.insert(t.asComment());\n            break;\n        case Doctype:\n            tb.error(this);\n            return false;\n        case StartTag:\n            Token.StartTag start = t.asStartTag();\n            String name = start.normalName();\n            if (name.equals(\"html\"))\n                return tb.process(start, InBody);\n            else if (name.equals(\"option\")) {\n                if (tb.currentElement().nodeName().equals(\"option\"))\n                    tb.processEndTag(\"option\");\n                tb.insert(start);\n            } else if (name.equals(\"optgroup\")) {\n                if (tb.currentElement().nodeName().equals(\"option\"))\n                    tb.processEndTag(\"option\");\n                else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                    tb.processEndTag(\"optgroup\");\n                tb.insert(start);\n            } else if (name.equals(\"select\")) {\n                tb.error(this);\n                return tb.processEndTag(\"select\");\n            } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                tb.error(this);\n                if (!tb.inSelectScope(\"select\"))\n                    // frag\n                    return false;\n                tb.processEndTag(\"select\");\n                return tb.process(start);\n            } else if (name.equals(\"script\")) {\n                return tb.process(t, InHead);\n            } else {\n                return anythingElse(t, tb);\n            }\n            break;\n        case EndTag:\n            Token.EndTag end = t.asEndTag();\n            name = end.normalName();\n            switch(name) {\n                case \"optgroup\":\n                    if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                        tb.processEndTag(\"option\");\n                    if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                        tb.pop();\n                    else\n                        tb.error(this);\n                    break;\n                case \"option\":\n                    if (tb.currentElement().nodeName().equals(\"option\"))\n                        tb.pop();\n                    else\n                        tb.error(this);\n                    break;\n                case \"select\":\n                    if (!tb.inSelectScope(name)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.popStackToClose(name);\n                        tb.resetInsertionMode();\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }\n            break;\n        case EOF:\n            if (!tb.currentElement().nodeName().equals(\"html\"))\n                tb.error(this);\n            break;\n        default:\n            return anythingElse(t, tb);\n    }\n    return true;\n}", "method_range": "1217-1303", "fault_locations": "1234,1235,1236,1240,1241,1244,1246,1258,1259,1269,1271,1277,1296"}, "org.jsoup.parser.HtmlTreeBuilderState.process13": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (isWhitespace(t)) {\n        return tb.process(t, InBody);\n    } else if (t.isComment()) {\n        // into html node\n        tb.insert(t.asComment());\n    } else if (t.isDoctype()) {\n        tb.error(this);\n        return false;\n    } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {\n        return tb.process(t, InBody);\n    } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {\n        if (tb.isFragmentParsing()) {\n            tb.error(this);\n            return false;\n        } else {\n            tb.transition(AfterAfterBody);\n        }\n    } else if (t.isEOF()) {\n        // chillax! we're done\n    } else {\n        tb.error(this);\n        tb.transition(InBody);\n        return tb.process(t);\n    }\n    return true;\n}", "method_range": "1329-1354", "fault_locations": "1344,1345,1348,1349,1352,1353"}, "org.jsoup.parser.HtmlTreeBuilderState.process14": {"buggy_content": "boolean process(Token t, HtmlTreeBuilder tb) {\n    if (isWhitespace(t)) {\n        tb.insert(t.asCharacter());\n    } else if (t.isComment()) {\n        tb.insert(t.asComment());\n    } else if (t.isDoctype()) {\n        tb.error(this);\n        return false;\n    } else if (t.isStartTag()) {\n        Token.StartTag start = t.asStartTag();\n        switch(start.normalName()) {\n            case \"html\":\n                return tb.process(start, InBody);\n            case \"frameset\":\n                tb.insert(start);\n                break;\n            case \"frame\":\n                tb.insertEmpty(start);\n                break;\n            case \"noframes\":\n                return tb.process(start, InHead);\n            default:\n                tb.error(this);\n                return false;\n        }\n    } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) {\n        if (tb.currentElement().nodeName().equals(\"html\")) {\n            tb.error(this);\n            return false;\n        } else {\n            tb.pop();\n            if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) {\n                tb.transition(AfterFrameset);\n            }\n        }\n    } else if (t.isEOF()) {\n        if (!tb.currentElement().nodeName().equals(\"html\")) {\n            tb.error(this);\n            return true;\n        }\n    } else {\n        tb.error(this);\n        return false;\n    }\n    return true;\n}", "method_range": "1357-1402", "fault_locations": "1383,1388,1393"}, "org.jsoup.parser.Tag.Tag": {"buggy_content": "private Tag(String tagName) {\n    this.tagName = tagName;\n}", "method_range": "26-28", "fault_locations": "27,28"}}