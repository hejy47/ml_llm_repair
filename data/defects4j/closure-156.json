{"com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants": {"buggy_content": "private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n        updateObjLitOrFunctionDeclaration(n, alias);\n    }\n    if (n.props != null) {\n        for (Name p : n.props) {\n            // Recurse first so that saved node ancestries are intact when needed.\n            collapseDeclarationOfNameAndDescendants(p, appendPropForAlias(alias, p.name));\n            if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) {\n                updateSimpleDeclaration(appendPropForAlias(alias, p.name), p, p.declaration);\n            }\n        }\n    }\n}", "method_range": "451-474", "fault_locations": "455,456"}, "com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration": {"buggy_content": "private void updateObjLitOrFunctionDeclaration(Name n, String alias) {\n    if (n.declaration == null) {\n        // Some names do not have declarations, because they\n        // are only defined in local scopes.\n        return;\n    }\n    if (n.declaration.getTwin() != null) {\n        // Twin declarations will get handled when normal references\n        // are handled.\n        return;\n    }\n    switch(n.declaration.node.getParent().getType()) {\n        case Token.ASSIGN:\n            updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);\n            break;\n        case Token.VAR:\n            updateObjLitOrFunctionDeclarationAtVarNode(n);\n            break;\n        case Token.FUNCTION:\n            updateFunctionDeclarationAtFunctionNode(n);\n            break;\n    }\n}", "method_range": "574-598", "fault_locations": "574,585,586,587,588,589,590,592,595"}, "com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode": {"buggy_content": "private void updateObjLitOrFunctionDeclarationAtAssignNode(Name n, String alias) {\n    // NOTE: It's important that we don't add additional nodes\n    // (e.g. a var node before the exprstmt) because the exprstmt might be\n    // the child of an if statement that's not inside a block).\n    Ref ref = n.declaration;\n    Node rvalue = ref.node.getNext();\n    Node varNode = new Node(Token.VAR);\n    Node varParent = ref.node.getAncestor(3);\n    Node gramps = ref.node.getAncestor(2);\n    boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;\n    boolean insertedVarNode = false;\n    if (isObjLit && n.canEliminate()) {\n        // Eliminate the object literal altogether.\n        varParent.replaceChild(gramps, varNode);\n        ref.node = null;\n        insertedVarNode = true;\n    } else if (!n.isSimpleName()) {\n        // Create a VAR node to declare the name.\n        if (rvalue.getType() == Token.FUNCTION) {\n            checkForHosedThisReferences(rvalue, n.docInfo, n);\n        }\n        ref.node.getParent().removeChild(rvalue);\n        Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, ref.node.getAncestor(2), n.fullName());\n        if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {\n            nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n        varNode.addChildToBack(nameNode);\n        nameNode.addChildToFront(rvalue);\n        varParent.replaceChild(gramps, varNode);\n        // Update the node ancestry stored in the reference.\n        ref.node = nameNode;\n        insertedVarNode = true;\n    }\n    if (isObjLit) {\n        declareVarsForObjLitValues(n, alias, rvalue, varNode, varParent.getChildBefore(varNode), varParent);\n    }\n    addStubsForUndeclaredProperties(n, alias, varParent, varNode);\n    if (insertedVarNode) {\n        if (!varNode.hasChildren()) {\n            varParent.removeChild(varNode);\n        }\n        compiler.reportCodeChange();\n    }\n}", "method_range": "608-667", "fault_locations": "609,645,646,648,649,650,651,653,658"}, "com.google.javascript.jscomp.CollapseProperties.checkForHosedThisReferences": {"buggy_content": "private void checkForHosedThisReferences(Node function, JSDocInfo docInfo, final Name name) {\n    // A function is getting collapsed. Make sure that if it refers to\n    // \"this\", it must be a constructor or documented with @this.\n    if (docInfo == null || (!docInfo.isConstructor() && !docInfo.hasThisType())) {\n        NodeTraversal.traverse(compiler, function.getLastChild(), new NodeTraversal.AbstractShallowCallback() {\n\n            public void visit(NodeTraversal t, Node n, Node parent) {\n                if (n.getType() == Token.THIS) {\n                    compiler.report(JSError.make(name.declaration.sourceName, n, UNSAFE_THIS, name.fullName()));\n                }\n            }\n        });\n    }\n}", "method_range": "673-690", "fault_locations": "689,690"}, "com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtVarNode": {"buggy_content": "private void updateObjLitOrFunctionDeclarationAtVarNode(Name n) {\n    Ref ref = n.declaration;\n    String name = ref.node.getString();\n    Node rvalue = ref.node.getFirstChild();\n    Node varNode = ref.node.getParent();\n    Node gramps = varNode.getParent();\n    boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;\n    int numChanges = 0;\n    if (isObjLit) {\n        numChanges += declareVarsForObjLitValues(n, name, rvalue, varNode, gramps.getChildBefore(varNode), gramps);\n    }\n    numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode);\n    if (isObjLit && n.canEliminate()) {\n        varNode.removeChild(ref.node);\n        if (!varNode.hasChildren()) {\n            gramps.removeChild(varNode);\n        }\n        numChanges++;\n        // Clear out the object reference, since we've eliminated it from the\n        // parse tree.\n        ref.node = null;\n    }\n    if (numChanges > 0) {\n        compiler.reportCodeChange();\n    }\n}", "method_range": "699-733", "fault_locations": "699,731,732"}, "com.google.javascript.jscomp.CollapseProperties.updateFunctionDeclarationAtFunctionNode": {"buggy_content": "private void updateFunctionDeclarationAtFunctionNode(Name n) {\n    Ref ref = n.declaration;\n    String fnName = ref.node.getString();\n    addStubsForUndeclaredProperties(n, fnName, ref.node.getAncestor(2), ref.node.getParent());\n}", "method_range": "742-748", "fault_locations": "742"}}