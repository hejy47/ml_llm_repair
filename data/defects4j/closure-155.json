{"com.google.javascript.jscomp.InlineVariables.doInlinesForScope": {"buggy_content": "private void doInlinesForScope(NodeTraversal t, Map<Var, ReferenceCollection> referenceMap) {\n    for (Iterator<Var> it = t.getScope().getVars(); it.hasNext(); ) {\n        Var v = it.next();\n        ReferenceCollection referenceInfo = referenceMap.get(v);\n        // referenceInfo will be null if we're in constants-only mode\n        // and the variable is not a constant.\n        if (referenceInfo == null || isVarInlineForbidden(v)) {\n            // Never try to inline exported variables or variables that\n            // were not collected or variables that have already been inlined.\n            continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n            Reference init = referenceInfo.getInitializingReferenceForConstants();\n            Node value = init.getAssignedValue();\n            inlineDeclaredConstant(v, value, referenceInfo.references);\n            staleVars.add(v);\n        } else if (mode == Mode.CONSTANTS_ONLY) {\n            // If we're in constants-only mode, don't run more aggressive\n            // inlining heuristics. See InlineConstantsTest.\n            continue;\n        } else {\n            inlineNonConstants(v, referenceInfo);\n        }\n    }\n}", "method_range": "196-223", "fault_locations": "198,199,220,223"}, "com.google.javascript.jscomp.InlineVariables.inlineNonConstants": {"buggy_content": "// Any reference that is not a read of the arguments property\n// consider a escape of the arguments object.\nprivate void inlineNonConstants(Var v, ReferenceCollection referenceInfo) {\n    int refCount = referenceInfo.references.size();\n    Reference declaration = referenceInfo.references.get(0);\n    Reference init = referenceInfo.getInitializingReference();\n    int firstRefAfterInit = (declaration == init) ? 2 : 3;\n    if (refCount > 1 && isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n        // if the variable is referenced more than once, we can only\n        // inline it if it's immutable and never defined before referenced.\n        Node value;\n        if (init != null) {\n            value = init.getAssignedValue();\n        } else {\n            // Create a new node for variable that is never initialized.\n            Node srcLocation = declaration.getNameNode();\n            value = NodeUtil.newUndefinedNode(srcLocation);\n        }\n        Preconditions.checkNotNull(value);\n        inlineWellDefinedVariable(v, value, referenceInfo.references);\n        staleVars.add(v);\n    } else if (refCount == firstRefAfterInit) {\n        // The variable likely only read once, try some more\n        // complex inlining heuristics.\n        Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);\n        if (canInline(declaration, init, reference)) {\n            inline(v, declaration, init, reference);\n            staleVars.add(v);\n        }\n    } else if (declaration != init && refCount == 2) {\n        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n            // The only reference is the initialization, remove the assignment and\n            // the variable declaration.\n            Node value = init.getAssignedValue();\n            Preconditions.checkNotNull(value);\n            inlineWellDefinedVariable(v, value, referenceInfo.references);\n            staleVars.add(v);\n        }\n    }\n    // If this variable was not inlined normally, check if we can\n    // inline an alias of it. (If the variable was inlined, then the\n    // reference data is out of sync. We're better off just waiting for\n    // the next pass.)\n    if (!staleVars.contains(v) && referenceInfo.isWellDefined() && referenceInfo.isAssignedOnceInLifetime()) {\n        List<Reference> refs = referenceInfo.references;\n        for (int i = 1;         i < refs.size(); i++) {\n            Node nameNode = refs.get(i).getNameNode();\n            if (aliasCandidates.containsKey(nameNode)) {\n                AliasCandidate candidate = aliasCandidates.get(nameNode);\n                if (!staleVars.contains(candidate.alias) && !isVarInlineForbidden(candidate.alias)) {\n                    Reference aliasInit;\n                    aliasInit = candidate.refInfo.getInitializingReference();\n                    Node value = aliasInit.getAssignedValue();\n                    Preconditions.checkNotNull(value);\n                    inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);\n                    staleVars.add(candidate.alias);\n                }\n            }\n        }\n    }\n}", "method_range": "229-297", "fault_locations": "229,230,272,273,275"}, "com.google.javascript.jscomp.ReferenceCollectingCallback.visit": {"buggy_content": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.NAME) {\n        Var v = t.getScope().getVar(n.getString());\n        if (v != null && varFilter.apply(v)) {\n            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));\n        }\n    }\n    if (isBlockBoundary(n, parent)) {\n        blockStack.pop();\n    }\n}", "method_range": "121-133", "fault_locations": "123"}}