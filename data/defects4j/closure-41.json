{"com.google.javascript.jscomp.FunctionTypeBuilder.inferFromOverriddenFunction": {"buggy_content": "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent) {\n    if (oldType == null) {\n        return this;\n    }\n    returnType = oldType.getReturnType();\n    returnTypeInferred = oldType.isReturnTypeInferred();\n    if (paramsParent == null) {\n        // Not a function literal.\n        parametersNode = oldType.getParametersNode();\n        if (parametersNode == null) {\n            parametersNode = new FunctionParamBuilder(typeRegistry).build();\n        }\n    } else {\n        // We're overriding with a function literal. Apply type information\n        // to each parameter of the literal.\n        FunctionParamBuilder paramBuilder = new FunctionParamBuilder(typeRegistry);\n        Iterator<Node> oldParams = oldType.getParameters().iterator();\n        boolean warnedAboutArgList = false;\n        boolean oldParamsListHitOptArgs = false;\n        for (Node currentParam = paramsParent.getFirstChild(); currentParam != null; currentParam = currentParam.getNext()) {\n            if (oldParams.hasNext()) {\n                Node oldParam = oldParams.next();\n                Node newParam = paramBuilder.newParameterFromNode(oldParam);\n                oldParamsListHitOptArgs = oldParamsListHitOptArgs || oldParam.isVarArgs() || oldParam.isOptionalArg();\n                // The subclass method might write its var_args as individual\n                // arguments.\n                if (currentParam.getNext() != null && newParam.isVarArgs()) {\n                    newParam.setVarArgs(false);\n                    newParam.setOptionalArg(true);\n                }\n            } else {\n                warnedAboutArgList |= addParameter(paramBuilder, typeRegistry.getNativeType(UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));\n            }\n        }\n        // Clone any remaining params that aren't in the function literal.\n        parametersNode = paramBuilder.build();\n    }\n    return this;\n}", "method_range": "242-296", "fault_locations": "291,292"}, "com.google.javascript.jscomp.FunctionTypeBuilder.inferParameterTypes": {"buggy_content": "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info) {\n    if (argsParent == null) {\n        if (info == null) {\n            return this;\n        } else {\n            return inferParameterTypes(info);\n        }\n    }\n    // arguments\n    Node oldParameterType = null;\n    if (parametersNode != null) {\n        oldParameterType = parametersNode.getFirstChild();\n    }\n    FunctionParamBuilder builder = new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList = false;\n    Set<String> allJsDocParams = (info == null) ? Sets.<String>newHashSet() : Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType = false;\n    boolean isVarArgs = false;\n    for (Node arg : argsParent.children()) {\n        String argumentName = arg.getString();\n        allJsDocParams.remove(argumentName);\n        // type from JSDocInfo\n        JSType parameterType = null;\n        boolean isOptionalParam = isOptionalParameter(arg, info);\n        isVarArgs = isVarArgsParameter(arg, info);\n        if (info != null && info.hasParameterType(argumentName)) {\n            parameterType = info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n        } else if (oldParameterType != null && oldParameterType.getJSType() != null) {\n            parameterType = oldParameterType.getJSType();\n            isOptionalParam = oldParameterType.isOptionalArg();\n            isVarArgs = oldParameterType.isVarArgs();\n        } else {\n            parameterType = typeRegistry.getNativeType(UNKNOWN_TYPE);\n        }\n        if (templateTypeName != null && parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n            if (foundTemplateType) {\n                reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n            }\n            foundTemplateType = true;\n        }\n        warnedAboutArgList |= addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);\n        if (oldParameterType != null) {\n            oldParameterType = oldParameterType.getNext();\n        }\n    }\n    // Copy over any old parameters that aren't in the param list.\n    if (templateTypeName != null && !foundTemplateType) {\n        reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n    for (String inexistentName : allJsDocParams) {\n        reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n    parametersNode = builder.build();\n    return this;\n}", "method_range": "421-494", "fault_locations": "482,483"}}