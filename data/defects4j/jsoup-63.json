{"org.jsoup.parser.HtmlTreeBuilder.insertEmpty": {"buggy_content": "Element insertEmpty(Token.StartTag startTag) {\n    Tag tag = Tag.valueOf(startTag.name(), settings);\n    Element el = new Element(tag, baseUri, startTag.attributes);\n    insertNode(el);\n    if (startTag.isSelfClosing()) {\n        if (tag.isKnownTag()) {\n            if (tag.isSelfClosing())\n                tokeniser.acknowledgeSelfClosingFlag();\n        } else {\n            tag.setSelfClosing();\n            tokeniser.acknowledgeSelfClosingFlag();\n        }\n    }\n    return el;\n}", "method_range": "221-235", "fault_locations": "227,228,229,231,232"}, "org.jsoup.parser.Tokeniser.read": {"buggy_content": "Token read() {\n    if (!selfClosingFlagAcknowledged) {\n        error(\"Self closing flag not acknowledged\");\n        selfClosingFlagAcknowledged = true;\n    }\n    while (!isEmitPending) state.read(this, reader);\n    // if emit is pending, a non-character token was found: return any chars in buffer, and leave token for next read:\n    if (charsBuilder.length() > 0) {\n        String str = charsBuilder.toString();\n        charsBuilder.delete(0, charsBuilder.length());\n        charsString = null;\n        return charPending.data(str);\n    } else if (charsString != null) {\n        Token token = charPending.data(charsString);\n        charsString = null;\n        return token;\n    } else {\n        isEmitPending = false;\n        return emitPending;\n    }\n}", "method_range": "43-65", "fault_locations": "44,45,46,47"}, "org.jsoup.parser.Tokeniser.emit": {"buggy_content": "void emit(Token token) {\n    Validate.isFalse(isEmitPending, \"There is an unread token pending!\");\n    emitPending = token;\n    isEmitPending = true;\n    if (token.type == Token.TokenType.StartTag) {\n        Token.StartTag startTag = (Token.StartTag) token;\n        lastStartTag = startTag.tagName;\n        if (startTag.selfClosing)\n            selfClosingFlagAcknowledged = false;\n    } else if (token.type == Token.TokenType.EndTag) {\n        Token.EndTag endTag = (Token.EndTag) token;\n        if (endTag.attributes != null)\n            error(\"Attributes incorrectly present on end tag\");\n    }\n}", "method_range": "67-83", "fault_locations": "76,77"}, "org.jsoup.parser.Tokeniser.acknowledgeSelfClosingFlag": {"buggy_content": "void acknowledgeSelfClosingFlag() {\n    selfClosingFlagAcknowledged = true;\n}", "method_range": "124-126", "fault_locations": "124,125,126"}}